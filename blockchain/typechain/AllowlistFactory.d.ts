/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AllowlistFactoryInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "allowlistImplementation()": FunctionFragment;
    "allowlistProxy()": FunctionFragment;
    "allowlistProxyAdmin()": FunctionFragment;
    "deployAllowlist(address,address)": FunctionFragment;
    "multiexcall(tuple[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowlistImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowlistProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowlistProxyAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployAllowlist",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "multiexcall",
    values: [{ target: string; data: BytesLike; value: BigNumberish }[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowlistImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowlistProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowlistProxyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployAllowlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiexcall",
    data: BytesLike
  ): Result;

  events: {
    "AllowlistDeployed(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllowlistDeployed"): EventFragment;
}

export type AllowlistDeployedEvent = TypedEvent<
  [string, string, string] & {
    proxy: string;
    proxyAdmin: string;
    implementation: string;
  }
>;

export class AllowlistFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AllowlistFactoryInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    allowlistImplementation(overrides?: CallOverrides): Promise<[string]>;

    allowlistProxy(overrides?: CallOverrides): Promise<[string]>;

    allowlistProxyAdmin(overrides?: CallOverrides): Promise<[string]>;

    deployAllowlist(
      admin: string,
      setter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multiexcall(
      exCallData: { target: string; data: BytesLike; value: BigNumberish }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  allowlistImplementation(overrides?: CallOverrides): Promise<string>;

  allowlistProxy(overrides?: CallOverrides): Promise<string>;

  allowlistProxyAdmin(overrides?: CallOverrides): Promise<string>;

  deployAllowlist(
    admin: string,
    setter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multiexcall(
    exCallData: { target: string; data: BytesLike; value: BigNumberish }[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    allowlistImplementation(overrides?: CallOverrides): Promise<string>;

    allowlistProxy(overrides?: CallOverrides): Promise<string>;

    allowlistProxyAdmin(overrides?: CallOverrides): Promise<string>;

    deployAllowlist(
      admin: string,
      setter: string,
      overrides?: CallOverrides
    ): Promise<[string, string, string]>;

    multiexcall(
      exCallData: { target: string; data: BytesLike; value: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<string[]>;
  };

  filters: {
    "AllowlistDeployed(address,address,address)"(
      proxy?: null,
      proxyAdmin?: null,
      implementation?: null
    ): TypedEventFilter<
      [string, string, string],
      { proxy: string; proxyAdmin: string; implementation: string }
    >;

    AllowlistDeployed(
      proxy?: null,
      proxyAdmin?: null,
      implementation?: null
    ): TypedEventFilter<
      [string, string, string],
      { proxy: string; proxyAdmin: string; implementation: string }
    >;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    allowlistImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    allowlistProxy(overrides?: CallOverrides): Promise<BigNumber>;

    allowlistProxyAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    deployAllowlist(
      admin: string,
      setter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multiexcall(
      exCallData: { target: string; data: BytesLike; value: BigNumberish }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowlistImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowlistProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowlistProxyAdmin(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployAllowlist(
      admin: string,
      setter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multiexcall(
      exCallData: { target: string; data: BytesLike; value: BigNumberish }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
