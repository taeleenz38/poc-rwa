/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface USDYFactoryInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MINTER_ROLE()": FunctionFragment;
    "PAUSER_ROLE()": FunctionFragment;
    "deployUSDY(string,string,tuple)": FunctionFragment;
    "multiexcall(tuple[])": FunctionFragment;
    "usdyImplementation()": FunctionFragment;
    "usdyProxy()": FunctionFragment;
    "usdyProxyAdmin()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployUSDY",
    values: [
      string,
      string,
      { blocklist: string; allowlist: string; sanctionsList: string }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multiexcall",
    values: [{ target: string; data: BytesLike; value: BigNumberish }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "usdyImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "usdyProxy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "usdyProxyAdmin",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployUSDY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multiexcall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdyImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdyProxy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usdyProxyAdmin",
    data: BytesLike
  ): Result;

  events: {
    "USDYDeployed(address,address,address,string,string,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "USDYDeployed"): EventFragment;
}

export type USDYDeployedEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    string,
    [string, string, string] & {
      blocklist: string;
      allowlist: string;
      sanctionsList: string;
    }
  ] & {
    proxy: string;
    proxyAdmin: string;
    implementation: string;
    name: string;
    ticker: string;
    listData: [string, string, string] & {
      blocklist: string;
      allowlist: string;
      sanctionsList: string;
    };
  }
>;

export class USDYFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: USDYFactoryInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    deployUSDY(
      name: string,
      ticker: string,
      listData: { blocklist: string; allowlist: string; sanctionsList: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multiexcall(
      exCallData: { target: string; data: BytesLike; value: BigNumberish }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdyImplementation(overrides?: CallOverrides): Promise<[string]>;

    usdyProxy(overrides?: CallOverrides): Promise<[string]>;

    usdyProxyAdmin(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

  PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  deployUSDY(
    name: string,
    ticker: string,
    listData: { blocklist: string; allowlist: string; sanctionsList: string },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multiexcall(
    exCallData: { target: string; data: BytesLike; value: BigNumberish }[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdyImplementation(overrides?: CallOverrides): Promise<string>;

  usdyProxy(overrides?: CallOverrides): Promise<string>;

  usdyProxyAdmin(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    deployUSDY(
      name: string,
      ticker: string,
      listData: { blocklist: string; allowlist: string; sanctionsList: string },
      overrides?: CallOverrides
    ): Promise<[string, string, string]>;

    multiexcall(
      exCallData: { target: string; data: BytesLike; value: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    usdyImplementation(overrides?: CallOverrides): Promise<string>;

    usdyProxy(overrides?: CallOverrides): Promise<string>;

    usdyProxyAdmin(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "USDYDeployed(address,address,address,string,string,tuple)"(
      proxy?: null,
      proxyAdmin?: null,
      implementation?: null,
      name?: null,
      ticker?: null,
      listData?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        string,
        [string, string, string] & {
          blocklist: string;
          allowlist: string;
          sanctionsList: string;
        }
      ],
      {
        proxy: string;
        proxyAdmin: string;
        implementation: string;
        name: string;
        ticker: string;
        listData: [string, string, string] & {
          blocklist: string;
          allowlist: string;
          sanctionsList: string;
        };
      }
    >;

    USDYDeployed(
      proxy?: null,
      proxyAdmin?: null,
      implementation?: null,
      name?: null,
      ticker?: null,
      listData?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        string,
        [string, string, string] & {
          blocklist: string;
          allowlist: string;
          sanctionsList: string;
        }
      ],
      {
        proxy: string;
        proxyAdmin: string;
        implementation: string;
        name: string;
        ticker: string;
        listData: [string, string, string] & {
          blocklist: string;
          allowlist: string;
          sanctionsList: string;
        };
      }
    >;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    deployUSDY(
      name: string,
      ticker: string,
      listData: { blocklist: string; allowlist: string; sanctionsList: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multiexcall(
      exCallData: { target: string; data: BytesLike; value: BigNumberish }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdyImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    usdyProxy(overrides?: CallOverrides): Promise<BigNumber>;

    usdyProxyAdmin(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployUSDY(
      name: string,
      ticker: string,
      listData: { blocklist: string; allowlist: string; sanctionsList: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multiexcall(
      exCallData: { target: string; data: BytesLike; value: BigNumberish }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdyImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usdyProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdyProxyAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
