/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IRWAOracleExternalComparisonCheckInterface
  extends ethers.utils.Interface {
  functions: {
    "getPriceData()": FunctionFragment;
    "setPrice(int256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getPriceData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPrice",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getPriceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;

  events: {
    "ChainlinkPriceIgnored(int256,uint80,int256,uint80)": EventFragment;
    "RWAExternalComparisonCheckPriceSet(int256,uint80,int256,uint80,int256,int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChainlinkPriceIgnored"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RWAExternalComparisonCheckPriceSet"
  ): EventFragment;
}

export type ChainlinkPriceIgnoredEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber] & {
    oldChainlinkPrice: BigNumber;
    oldRoundId: BigNumber;
    newChainlinkPrice: BigNumber;
    newRoundId: BigNumber;
  }
>;

export type RWAExternalComparisonCheckPriceSetEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    oldChainlinkPrice: BigNumber;
    oldRoundId: BigNumber;
    newChainlinkPrice: BigNumber;
    newRoundId: BigNumber;
    oldRWAPrice: BigNumber;
    newRWAPrice: BigNumber;
  }
>;

export class IRWAOracleExternalComparisonCheck extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IRWAOracleExternalComparisonCheckInterface;

  functions: {
    getPriceData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { price: BigNumber; timestamp: BigNumber }
    >;

    setPrice(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getPriceData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { price: BigNumber; timestamp: BigNumber }
  >;

  setPrice(
    newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getPriceData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { price: BigNumber; timestamp: BigNumber }
    >;

    setPrice(newPrice: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ChainlinkPriceIgnored(int256,uint80,int256,uint80)"(
      oldChainlinkPrice?: null,
      oldRoundId?: BigNumberish | null,
      newChainlinkPrice?: null,
      newRoundId?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        oldChainlinkPrice: BigNumber;
        oldRoundId: BigNumber;
        newChainlinkPrice: BigNumber;
        newRoundId: BigNumber;
      }
    >;

    ChainlinkPriceIgnored(
      oldChainlinkPrice?: null,
      oldRoundId?: BigNumberish | null,
      newChainlinkPrice?: null,
      newRoundId?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        oldChainlinkPrice: BigNumber;
        oldRoundId: BigNumber;
        newChainlinkPrice: BigNumber;
        newRoundId: BigNumber;
      }
    >;

    "RWAExternalComparisonCheckPriceSet(int256,uint80,int256,uint80,int256,int256)"(
      oldChainlinkPrice?: null,
      oldRoundId?: BigNumberish | null,
      newChainlinkPrice?: null,
      newRoundId?: BigNumberish | null,
      oldRWAPrice?: null,
      newRWAPrice?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        oldChainlinkPrice: BigNumber;
        oldRoundId: BigNumber;
        newChainlinkPrice: BigNumber;
        newRoundId: BigNumber;
        oldRWAPrice: BigNumber;
        newRWAPrice: BigNumber;
      }
    >;

    RWAExternalComparisonCheckPriceSet(
      oldChainlinkPrice?: null,
      oldRoundId?: BigNumberish | null,
      newChainlinkPrice?: null,
      newRoundId?: BigNumberish | null,
      oldRWAPrice?: null,
      newRWAPrice?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        oldChainlinkPrice: BigNumber;
        oldRoundId: BigNumber;
        newChainlinkPrice: BigNumber;
        newRoundId: BigNumber;
        oldRWAPrice: BigNumber;
        newRWAPrice: BigNumber;
      }
    >;
  };

  estimateGas: {
    getPriceData(overrides?: CallOverrides): Promise<BigNumber>;

    setPrice(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getPriceData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPrice(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
