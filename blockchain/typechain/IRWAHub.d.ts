/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IRWAHubInterface extends ethers.utils.Interface {
  functions: {
    "addProof(bytes32,address,uint256,uint256,uint256)": FunctionFragment;
    "claimMint(bytes32[])": FunctionFragment;
    "claimRedemption(bytes32[])": FunctionFragment;
    "overwriteDepositor(bytes32,address,uint256,uint256)": FunctionFragment;
    "overwriteRedeemer(bytes32,address,uint256,uint256)": FunctionFragment;
    "requestRedemption(uint256)": FunctionFragment;
    "requestSubscription(uint256)": FunctionFragment;
    "setPriceIdForDeposits(bytes32[],uint256[])": FunctionFragment;
    "setPriceIdForRedemptions(bytes32[],uint256[])": FunctionFragment;
    "setPricer(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addProof",
    values: [BytesLike, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMint",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRedemption",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "overwriteDepositor",
    values: [BytesLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "overwriteRedeemer",
    values: [BytesLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRedemption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestSubscription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceIdForDeposits",
    values: [BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceIdForRedemptions",
    values: [BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "setPricer", values: [string]): string;

  decodeFunctionResult(functionFragment: "addProof", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "overwriteDepositor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "overwriteRedeemer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceIdForDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceIdForRedemptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPricer", data: BytesLike): Result;

  events: {
    "AssetSenderSet(address,address)": EventFragment;
    "DepositProofAdded(bytes32,address,uint256,uint256,uint256)": EventFragment;
    "DepositorOverwritten(bytes32,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "FeeRecipientSet(address,address)": EventFragment;
    "MinimumDepositAmountSet(uint256,uint256)": EventFragment;
    "MinimumRedemptionAmountSet(uint256,uint256)": EventFragment;
    "MintCompleted(address,bytes32,uint256,uint256,uint256,uint256)": EventFragment;
    "MintFeeSet(uint256,uint256)": EventFragment;
    "MintRequested(address,bytes32,uint256,uint256,uint256)": EventFragment;
    "NewPricerSet(address,address)": EventFragment;
    "PriceIdSetForDeposit(bytes32,uint256)": EventFragment;
    "PriceIdSetForRedemption(bytes32,uint256)": EventFragment;
    "RedeemerOverwritten(bytes32,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "RedemptionCompleted(address,bytes32,uint256,uint256,uint256)": EventFragment;
    "RedemptionFeeSet(uint256,uint256)": EventFragment;
    "RedemptionPaused(address)": EventFragment;
    "RedemptionRequested(address,bytes32,uint256)": EventFragment;
    "RedemptionUnpaused(address)": EventFragment;
    "SubscriptionPaused(address)": EventFragment;
    "SubscriptionUnpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetSenderSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositProofAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositorOverwritten"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeRecipientSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinimumDepositAmountSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinimumRedemptionAmountSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPricerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceIdSetForDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceIdSetForRedemption"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemerOverwritten"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedemptionCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedemptionFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedemptionPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedemptionRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedemptionUnpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionUnpaused"): EventFragment;
}

export type AssetSenderSetEvent = TypedEvent<
  [string, string] & { oldAssetSender: string; newAssetSender: string }
>;

export type DepositProofAddedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber] & {
    txHash: string;
    user: string;
    depositAmountAfterFee: BigNumber;
    feeAmount: BigNumber;
    timestamp: BigNumber;
  }
>;

export type DepositorOverwrittenEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    depositId: string;
    oldDepositor: string;
    newDepositor: string;
    oldPriceId: BigNumber;
    newPriceId: BigNumber;
    oldDepositAmount: BigNumber;
    newDepositAmount: BigNumber;
  }
>;

export type FeeRecipientSetEvent = TypedEvent<
  [string, string] & { oldFeeRecipient: string; newFeeRecipient: string }
>;

export type MinimumDepositAmountSetEvent = TypedEvent<
  [BigNumber, BigNumber] & { oldMinimum: BigNumber; newMinimum: BigNumber }
>;

export type MinimumRedemptionAmountSetEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    oldRedemptionMin: BigNumber;
    newRedemptionMin: BigNumber;
  }
>;

export type MintCompletedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    user: string;
    depositId: string;
    rwaAmountOut: BigNumber;
    collateralAmountDeposited: BigNumber;
    price: BigNumber;
    priceId: BigNumber;
  }
>;

export type MintFeeSetEvent = TypedEvent<
  [BigNumber, BigNumber] & { oldFee: BigNumber; newFee: BigNumber }
>;

export type MintRequestedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber] & {
    user: string;
    depositId: string;
    collateralAmountDeposited: BigNumber;
    depositAmountAfterFee: BigNumber;
    feeAmount: BigNumber;
  }
>;

export type NewPricerSetEvent = TypedEvent<
  [string, string] & { oldPricer: string; newPricer: string }
>;

export type PriceIdSetForDepositEvent = TypedEvent<
  [string, BigNumber] & { depositIdSet: string; priceIdSet: BigNumber }
>;

export type PriceIdSetForRedemptionEvent = TypedEvent<
  [string, BigNumber] & { redemptionIdSet: string; priceIdSet: BigNumber }
>;

export type RedeemerOverwrittenEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    redemptionId: string;
    oldRedeemer: string;
    newRedeemer: string;
    oldPriceId: BigNumber;
    newPriceId: BigNumber;
    oldRWATokenAmountBurned: BigNumber;
    newRWATokenAmountBurned: BigNumber;
  }
>;

export type RedemptionCompletedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber] & {
    user: string;
    redemptionId: string;
    rwaAmountRequested: BigNumber;
    collateralAmountReturned: BigNumber;
    price: BigNumber;
  }
>;

export type RedemptionFeeSetEvent = TypedEvent<
  [BigNumber, BigNumber] & { oldFee: BigNumber; newFee: BigNumber }
>;

export type RedemptionPausedEvent = TypedEvent<[string] & { caller: string }>;

export type RedemptionRequestedEvent = TypedEvent<
  [string, string, BigNumber] & {
    user: string;
    redemptionId: string;
    rwaAmountIn: BigNumber;
  }
>;

export type RedemptionUnpausedEvent = TypedEvent<[string] & { caller: string }>;

export type SubscriptionPausedEvent = TypedEvent<[string] & { caller: string }>;

export type SubscriptionUnpausedEvent = TypedEvent<
  [string] & { caller: string }
>;

export class IRWAHub extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IRWAHubInterface;

  functions: {
    addProof(
      txHash: BytesLike,
      user: string,
      depositAmountAfterFee: BigNumberish,
      feeAmount: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimMint(
      depositIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRedemption(
      redemptionIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    overwriteDepositor(
      depositIdToOverride: BytesLike,
      user: string,
      depositAmountAfterFee: BigNumberish,
      priceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    overwriteRedeemer(
      redemptionIdToOverride: BytesLike,
      user: string,
      rwaTokenAmountBurned: BigNumberish,
      priceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestRedemption(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestSubscription(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceIdForDeposits(
      depositIds: BytesLike[],
      priceIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceIdForRedemptions(
      redemptionIds: BytesLike[],
      priceIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPricer(
      newPricer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addProof(
    txHash: BytesLike,
    user: string,
    depositAmountAfterFee: BigNumberish,
    feeAmount: BigNumberish,
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimMint(
    depositIds: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRedemption(
    redemptionIds: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  overwriteDepositor(
    depositIdToOverride: BytesLike,
    user: string,
    depositAmountAfterFee: BigNumberish,
    priceId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  overwriteRedeemer(
    redemptionIdToOverride: BytesLike,
    user: string,
    rwaTokenAmountBurned: BigNumberish,
    priceId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestRedemption(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestSubscription(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceIdForDeposits(
    depositIds: BytesLike[],
    priceIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceIdForRedemptions(
    redemptionIds: BytesLike[],
    priceIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPricer(
    newPricer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addProof(
      txHash: BytesLike,
      user: string,
      depositAmountAfterFee: BigNumberish,
      feeAmount: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimMint(
      depositIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimRedemption(
      redemptionIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    overwriteDepositor(
      depositIdToOverride: BytesLike,
      user: string,
      depositAmountAfterFee: BigNumberish,
      priceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    overwriteRedeemer(
      redemptionIdToOverride: BytesLike,
      user: string,
      rwaTokenAmountBurned: BigNumberish,
      priceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    requestRedemption(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    requestSubscription(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceIdForDeposits(
      depositIds: BytesLike[],
      priceIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceIdForRedemptions(
      redemptionIds: BytesLike[],
      priceIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setPricer(newPricer: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AssetSenderSet(address,address)"(
      oldAssetSender?: null,
      newAssetSender?: null
    ): TypedEventFilter<
      [string, string],
      { oldAssetSender: string; newAssetSender: string }
    >;

    AssetSenderSet(
      oldAssetSender?: null,
      newAssetSender?: null
    ): TypedEventFilter<
      [string, string],
      { oldAssetSender: string; newAssetSender: string }
    >;

    "DepositProofAdded(bytes32,address,uint256,uint256,uint256)"(
      txHash?: BytesLike | null,
      user?: string | null,
      depositAmountAfterFee?: null,
      feeAmount?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        txHash: string;
        user: string;
        depositAmountAfterFee: BigNumber;
        feeAmount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    DepositProofAdded(
      txHash?: BytesLike | null,
      user?: string | null,
      depositAmountAfterFee?: null,
      feeAmount?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        txHash: string;
        user: string;
        depositAmountAfterFee: BigNumber;
        feeAmount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    "DepositorOverwritten(bytes32,address,address,uint256,uint256,uint256,uint256)"(
      depositId?: BytesLike | null,
      oldDepositor?: null,
      newDepositor?: null,
      oldPriceId?: null,
      newPriceId?: null,
      oldDepositAmount?: null,
      newDepositAmount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        depositId: string;
        oldDepositor: string;
        newDepositor: string;
        oldPriceId: BigNumber;
        newPriceId: BigNumber;
        oldDepositAmount: BigNumber;
        newDepositAmount: BigNumber;
      }
    >;

    DepositorOverwritten(
      depositId?: BytesLike | null,
      oldDepositor?: null,
      newDepositor?: null,
      oldPriceId?: null,
      newPriceId?: null,
      oldDepositAmount?: null,
      newDepositAmount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        depositId: string;
        oldDepositor: string;
        newDepositor: string;
        oldPriceId: BigNumber;
        newPriceId: BigNumber;
        oldDepositAmount: BigNumber;
        newDepositAmount: BigNumber;
      }
    >;

    "FeeRecipientSet(address,address)"(
      oldFeeRecipient?: null,
      newFeeRecipient?: null
    ): TypedEventFilter<
      [string, string],
      { oldFeeRecipient: string; newFeeRecipient: string }
    >;

    FeeRecipientSet(
      oldFeeRecipient?: null,
      newFeeRecipient?: null
    ): TypedEventFilter<
      [string, string],
      { oldFeeRecipient: string; newFeeRecipient: string }
    >;

    "MinimumDepositAmountSet(uint256,uint256)"(
      oldMinimum?: null,
      newMinimum?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldMinimum: BigNumber; newMinimum: BigNumber }
    >;

    MinimumDepositAmountSet(
      oldMinimum?: null,
      newMinimum?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldMinimum: BigNumber; newMinimum: BigNumber }
    >;

    "MinimumRedemptionAmountSet(uint256,uint256)"(
      oldRedemptionMin?: null,
      newRedemptionMin?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldRedemptionMin: BigNumber; newRedemptionMin: BigNumber }
    >;

    MinimumRedemptionAmountSet(
      oldRedemptionMin?: null,
      newRedemptionMin?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldRedemptionMin: BigNumber; newRedemptionMin: BigNumber }
    >;

    "MintCompleted(address,bytes32,uint256,uint256,uint256,uint256)"(
      user?: string | null,
      depositId?: BytesLike | null,
      rwaAmountOut?: null,
      collateralAmountDeposited?: null,
      price?: null,
      priceId?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        depositId: string;
        rwaAmountOut: BigNumber;
        collateralAmountDeposited: BigNumber;
        price: BigNumber;
        priceId: BigNumber;
      }
    >;

    MintCompleted(
      user?: string | null,
      depositId?: BytesLike | null,
      rwaAmountOut?: null,
      collateralAmountDeposited?: null,
      price?: null,
      priceId?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        depositId: string;
        rwaAmountOut: BigNumber;
        collateralAmountDeposited: BigNumber;
        price: BigNumber;
        priceId: BigNumber;
      }
    >;

    "MintFeeSet(uint256,uint256)"(
      oldFee?: null,
      newFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldFee: BigNumber; newFee: BigNumber }
    >;

    MintFeeSet(
      oldFee?: null,
      newFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldFee: BigNumber; newFee: BigNumber }
    >;

    "MintRequested(address,bytes32,uint256,uint256,uint256)"(
      user?: string | null,
      depositId?: BytesLike | null,
      collateralAmountDeposited?: null,
      depositAmountAfterFee?: null,
      feeAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        depositId: string;
        collateralAmountDeposited: BigNumber;
        depositAmountAfterFee: BigNumber;
        feeAmount: BigNumber;
      }
    >;

    MintRequested(
      user?: string | null,
      depositId?: BytesLike | null,
      collateralAmountDeposited?: null,
      depositAmountAfterFee?: null,
      feeAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        depositId: string;
        collateralAmountDeposited: BigNumber;
        depositAmountAfterFee: BigNumber;
        feeAmount: BigNumber;
      }
    >;

    "NewPricerSet(address,address)"(
      oldPricer?: null,
      newPricer?: null
    ): TypedEventFilter<
      [string, string],
      { oldPricer: string; newPricer: string }
    >;

    NewPricerSet(
      oldPricer?: null,
      newPricer?: null
    ): TypedEventFilter<
      [string, string],
      { oldPricer: string; newPricer: string }
    >;

    "PriceIdSetForDeposit(bytes32,uint256)"(
      depositIdSet?: BytesLike | null,
      priceIdSet?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { depositIdSet: string; priceIdSet: BigNumber }
    >;

    PriceIdSetForDeposit(
      depositIdSet?: BytesLike | null,
      priceIdSet?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { depositIdSet: string; priceIdSet: BigNumber }
    >;

    "PriceIdSetForRedemption(bytes32,uint256)"(
      redemptionIdSet?: BytesLike | null,
      priceIdSet?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { redemptionIdSet: string; priceIdSet: BigNumber }
    >;

    PriceIdSetForRedemption(
      redemptionIdSet?: BytesLike | null,
      priceIdSet?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { redemptionIdSet: string; priceIdSet: BigNumber }
    >;

    "RedeemerOverwritten(bytes32,address,address,uint256,uint256,uint256,uint256)"(
      redemptionId?: BytesLike | null,
      oldRedeemer?: null,
      newRedeemer?: null,
      oldPriceId?: null,
      newPriceId?: null,
      oldRWATokenAmountBurned?: null,
      newRWATokenAmountBurned?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        redemptionId: string;
        oldRedeemer: string;
        newRedeemer: string;
        oldPriceId: BigNumber;
        newPriceId: BigNumber;
        oldRWATokenAmountBurned: BigNumber;
        newRWATokenAmountBurned: BigNumber;
      }
    >;

    RedeemerOverwritten(
      redemptionId?: BytesLike | null,
      oldRedeemer?: null,
      newRedeemer?: null,
      oldPriceId?: null,
      newPriceId?: null,
      oldRWATokenAmountBurned?: null,
      newRWATokenAmountBurned?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        redemptionId: string;
        oldRedeemer: string;
        newRedeemer: string;
        oldPriceId: BigNumber;
        newPriceId: BigNumber;
        oldRWATokenAmountBurned: BigNumber;
        newRWATokenAmountBurned: BigNumber;
      }
    >;

    "RedemptionCompleted(address,bytes32,uint256,uint256,uint256)"(
      user?: string | null,
      redemptionId?: BytesLike | null,
      rwaAmountRequested?: null,
      collateralAmountReturned?: null,
      price?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        redemptionId: string;
        rwaAmountRequested: BigNumber;
        collateralAmountReturned: BigNumber;
        price: BigNumber;
      }
    >;

    RedemptionCompleted(
      user?: string | null,
      redemptionId?: BytesLike | null,
      rwaAmountRequested?: null,
      collateralAmountReturned?: null,
      price?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        redemptionId: string;
        rwaAmountRequested: BigNumber;
        collateralAmountReturned: BigNumber;
        price: BigNumber;
      }
    >;

    "RedemptionFeeSet(uint256,uint256)"(
      oldFee?: null,
      newFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldFee: BigNumber; newFee: BigNumber }
    >;

    RedemptionFeeSet(
      oldFee?: null,
      newFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldFee: BigNumber; newFee: BigNumber }
    >;

    "RedemptionPaused(address)"(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    RedemptionPaused(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    "RedemptionRequested(address,bytes32,uint256)"(
      user?: string | null,
      redemptionId?: BytesLike | null,
      rwaAmountIn?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; redemptionId: string; rwaAmountIn: BigNumber }
    >;

    RedemptionRequested(
      user?: string | null,
      redemptionId?: BytesLike | null,
      rwaAmountIn?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; redemptionId: string; rwaAmountIn: BigNumber }
    >;

    "RedemptionUnpaused(address)"(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    RedemptionUnpaused(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    "SubscriptionPaused(address)"(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    SubscriptionPaused(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    "SubscriptionUnpaused(address)"(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    SubscriptionUnpaused(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;
  };

  estimateGas: {
    addProof(
      txHash: BytesLike,
      user: string,
      depositAmountAfterFee: BigNumberish,
      feeAmount: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimMint(
      depositIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRedemption(
      redemptionIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    overwriteDepositor(
      depositIdToOverride: BytesLike,
      user: string,
      depositAmountAfterFee: BigNumberish,
      priceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    overwriteRedeemer(
      redemptionIdToOverride: BytesLike,
      user: string,
      rwaTokenAmountBurned: BigNumberish,
      priceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestRedemption(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestSubscription(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceIdForDeposits(
      depositIds: BytesLike[],
      priceIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceIdForRedemptions(
      redemptionIds: BytesLike[],
      priceIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPricer(
      newPricer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addProof(
      txHash: BytesLike,
      user: string,
      depositAmountAfterFee: BigNumberish,
      feeAmount: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimMint(
      depositIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRedemption(
      redemptionIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    overwriteDepositor(
      depositIdToOverride: BytesLike,
      user: string,
      depositAmountAfterFee: BigNumberish,
      priceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    overwriteRedeemer(
      redemptionIdToOverride: BytesLike,
      user: string,
      rwaTokenAmountBurned: BigNumberish,
      priceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestRedemption(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestSubscription(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceIdForDeposits(
      depositIds: BytesLike[],
      priceIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceIdForRedemptions(
      redemptionIds: BytesLike[],
      priceIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPricer(
      newPricer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
