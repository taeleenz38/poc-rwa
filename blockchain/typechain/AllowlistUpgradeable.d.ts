/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AllowlistUpgradeableInterface extends ethers.utils.Interface {
  functions: {
    "ALLOWLIST_ADMIN()": FunctionFragment;
    "ALLOWLIST_SETTER()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "addAccountToAllowlist(uint256,address,uint8,bytes32,bytes32)": FunctionFragment;
    "addSelfToAllowlist(uint256)": FunctionFragment;
    "addTerm(string)": FunctionFragment;
    "currentTermIndex()": FunctionFragment;
    "getCurrentTerm()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getValidTermIndexes()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isAllowed(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setAccountStatus(address,uint256,bool)": FunctionFragment;
    "setCurrentTermIndex(uint256)": FunctionFragment;
    "setValidTermIndexes(uint256[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "terms(uint256)": FunctionFragment;
    "validIndexes(uint256)": FunctionFragment;
    "verifications(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ALLOWLIST_ADMIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ALLOWLIST_SETTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAccountToAllowlist",
    values: [BigNumberish, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addSelfToAllowlist",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "addTerm", values: [string]): string;
  encodeFunctionData(
    functionFragment: "currentTermIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTerm",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidTermIndexes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "isAllowed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAccountStatus",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentTermIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidTermIndexes",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "terms", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "validIndexes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifications",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ALLOWLIST_ADMIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ALLOWLIST_SETTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAccountToAllowlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSelfToAllowlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addTerm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentTermIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTerm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidTermIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAllowed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAccountStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentTermIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidTermIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "terms", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifications",
    data: BytesLike
  ): Result;

  events: {
    "AccountAddedFromSignature(address,uint256,uint8,bytes32,bytes32)": EventFragment;
    "AccountAddedSelf(address,uint256)": EventFragment;
    "AccountStatusSet(address,uint256,bool)": EventFragment;
    "AccountStatusSetByAdmin(address,uint256,bool)": EventFragment;
    "CurrentTermIndexSet(uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TermAdded(bytes32,uint256)": EventFragment;
    "ValidTermIndexesSet(uint256[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountAddedFromSignature"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountAddedSelf"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountStatusSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountStatusSetByAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CurrentTermIndexSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TermAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidTermIndexesSet"): EventFragment;
}

export type AccountAddedFromSignatureEvent = TypedEvent<
  [string, BigNumber, number, string, string] & {
    account: string;
    termIndex: BigNumber;
    v: number;
    r: string;
    s: string;
  }
>;

export type AccountAddedSelfEvent = TypedEvent<
  [string, BigNumber] & { account: string; termIndex: BigNumber }
>;

export type AccountStatusSetEvent = TypedEvent<
  [string, BigNumber, boolean] & {
    account: string;
    termIndex: BigNumber;
    status: boolean;
  }
>;

export type AccountStatusSetByAdminEvent = TypedEvent<
  [string, BigNumber, boolean] & {
    account: string;
    termIndex: BigNumber;
    status: boolean;
  }
>;

export type CurrentTermIndexSetEvent = TypedEvent<
  [BigNumber, BigNumber] & { oldIndex: BigNumber; newIndex: BigNumber }
>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type TermAddedEvent = TypedEvent<
  [string, BigNumber] & { hashedMessage: string; termIndex: BigNumber }
>;

export type ValidTermIndexesSetEvent = TypedEvent<
  [BigNumber[], BigNumber[]] & {
    oldIndexes: BigNumber[];
    newIndexes: BigNumber[];
  }
>;

export class AllowlistUpgradeable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AllowlistUpgradeableInterface;

  functions: {
    ALLOWLIST_ADMIN(overrides?: CallOverrides): Promise<[string]>;

    ALLOWLIST_SETTER(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addAccountToAllowlist(
      termIndex: BigNumberish,
      account: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSelfToAllowlist(
      termIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTerm(
      term: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentTermIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentTerm(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getValidTermIndexes(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      admin: string,
      setter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAllowed(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAccountStatus(
      account: string,
      termIndex: BigNumberish,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCurrentTermIndex(
      _currentTermIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setValidTermIndexes(
      _validIndexes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    terms(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    validIndexes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    verifications(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  ALLOWLIST_ADMIN(overrides?: CallOverrides): Promise<string>;

  ALLOWLIST_SETTER(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  addAccountToAllowlist(
    termIndex: BigNumberish,
    account: string,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSelfToAllowlist(
    termIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTerm(
    term: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentTermIndex(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentTerm(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getValidTermIndexes(overrides?: CallOverrides): Promise<BigNumber[]>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    admin: string,
    setter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAllowed(account: string, overrides?: CallOverrides): Promise<boolean>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAccountStatus(
    account: string,
    termIndex: BigNumberish,
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCurrentTermIndex(
    _currentTermIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setValidTermIndexes(
    _validIndexes: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  terms(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  validIndexes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  verifications(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    ALLOWLIST_ADMIN(overrides?: CallOverrides): Promise<string>;

    ALLOWLIST_SETTER(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    addAccountToAllowlist(
      termIndex: BigNumberish,
      account: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addSelfToAllowlist(
      termIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addTerm(term: string, overrides?: CallOverrides): Promise<void>;

    currentTermIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTerm(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidTermIndexes(overrides?: CallOverrides): Promise<BigNumber[]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      admin: string,
      setter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isAllowed(account: string, overrides?: CallOverrides): Promise<boolean>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAccountStatus(
      account: string,
      termIndex: BigNumberish,
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setCurrentTermIndex(
      _currentTermIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setValidTermIndexes(
      _validIndexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    terms(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    validIndexes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifications(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AccountAddedFromSignature(address,uint256,uint8,bytes32,bytes32)"(
      account?: string | null,
      termIndex?: BigNumberish | null,
      v?: null,
      r?: null,
      s?: null
    ): TypedEventFilter<
      [string, BigNumber, number, string, string],
      { account: string; termIndex: BigNumber; v: number; r: string; s: string }
    >;

    AccountAddedFromSignature(
      account?: string | null,
      termIndex?: BigNumberish | null,
      v?: null,
      r?: null,
      s?: null
    ): TypedEventFilter<
      [string, BigNumber, number, string, string],
      { account: string; termIndex: BigNumber; v: number; r: string; s: string }
    >;

    "AccountAddedSelf(address,uint256)"(
      account?: string | null,
      termIndex?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; termIndex: BigNumber }
    >;

    AccountAddedSelf(
      account?: string | null,
      termIndex?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; termIndex: BigNumber }
    >;

    "AccountStatusSet(address,uint256,bool)"(
      account?: string | null,
      termIndex?: BigNumberish | null,
      status?: null
    ): TypedEventFilter<
      [string, BigNumber, boolean],
      { account: string; termIndex: BigNumber; status: boolean }
    >;

    AccountStatusSet(
      account?: string | null,
      termIndex?: BigNumberish | null,
      status?: null
    ): TypedEventFilter<
      [string, BigNumber, boolean],
      { account: string; termIndex: BigNumber; status: boolean }
    >;

    "AccountStatusSetByAdmin(address,uint256,bool)"(
      account?: string | null,
      termIndex?: BigNumberish | null,
      status?: null
    ): TypedEventFilter<
      [string, BigNumber, boolean],
      { account: string; termIndex: BigNumber; status: boolean }
    >;

    AccountStatusSetByAdmin(
      account?: string | null,
      termIndex?: BigNumberish | null,
      status?: null
    ): TypedEventFilter<
      [string, BigNumber, boolean],
      { account: string; termIndex: BigNumber; status: boolean }
    >;

    "CurrentTermIndexSet(uint256,uint256)"(
      oldIndex?: null,
      newIndex?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldIndex: BigNumber; newIndex: BigNumber }
    >;

    CurrentTermIndexSet(
      oldIndex?: null,
      newIndex?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldIndex: BigNumber; newIndex: BigNumber }
    >;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "TermAdded(bytes32,uint256)"(
      hashedMessage?: null,
      termIndex?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { hashedMessage: string; termIndex: BigNumber }
    >;

    TermAdded(
      hashedMessage?: null,
      termIndex?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { hashedMessage: string; termIndex: BigNumber }
    >;

    "ValidTermIndexesSet(uint256[],uint256[])"(
      oldIndexes?: null,
      newIndexes?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber[]],
      { oldIndexes: BigNumber[]; newIndexes: BigNumber[] }
    >;

    ValidTermIndexesSet(
      oldIndexes?: null,
      newIndexes?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber[]],
      { oldIndexes: BigNumber[]; newIndexes: BigNumber[] }
    >;
  };

  estimateGas: {
    ALLOWLIST_ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    ALLOWLIST_SETTER(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addAccountToAllowlist(
      termIndex: BigNumberish,
      account: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSelfToAllowlist(
      termIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTerm(
      term: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentTermIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTerm(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidTermIndexes(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      admin: string,
      setter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAllowed(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAccountStatus(
      account: string,
      termIndex: BigNumberish,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCurrentTermIndex(
      _currentTermIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setValidTermIndexes(
      _validIndexes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    terms(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    validIndexes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifications(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ALLOWLIST_ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ALLOWLIST_SETTER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAccountToAllowlist(
      termIndex: BigNumberish,
      account: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSelfToAllowlist(
      termIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTerm(
      term: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentTermIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentTerm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidTermIndexes(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      admin: string,
      setter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAllowed(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAccountStatus(
      account: string,
      termIndex: BigNumberish,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCurrentTermIndex(
      _currentTermIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setValidTermIndexes(
      _validIndexes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    terms(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validIndexes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifications(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
