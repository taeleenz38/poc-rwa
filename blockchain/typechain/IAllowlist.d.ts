/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IAllowlistInterface extends ethers.utils.Interface {
  functions: {
    "addAccountToAllowlist(uint256,address,uint8,bytes32,bytes32)": FunctionFragment;
    "addSelfToAllowlist(uint256)": FunctionFragment;
    "addTerm(string)": FunctionFragment;
    "getCurrentTerm()": FunctionFragment;
    "getValidTermIndexes()": FunctionFragment;
    "isAllowed(address)": FunctionFragment;
    "setAccountStatus(address,uint256,bool)": FunctionFragment;
    "setCurrentTermIndex(uint256)": FunctionFragment;
    "setValidTermIndexes(uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addAccountToAllowlist",
    values: [BigNumberish, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addSelfToAllowlist",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "addTerm", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getCurrentTerm",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidTermIndexes",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isAllowed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setAccountStatus",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentTermIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidTermIndexes",
    values: [BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAccountToAllowlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSelfToAllowlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addTerm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTerm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidTermIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAllowed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAccountStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentTermIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidTermIndexes",
    data: BytesLike
  ): Result;

  events: {
    "AccountAddedFromSignature(address,uint256,uint8,bytes32,bytes32)": EventFragment;
    "AccountAddedSelf(address,uint256)": EventFragment;
    "AccountStatusSet(address,uint256,bool)": EventFragment;
    "AccountStatusSetByAdmin(address,uint256,bool)": EventFragment;
    "CurrentTermIndexSet(uint256,uint256)": EventFragment;
    "TermAdded(bytes32,uint256)": EventFragment;
    "ValidTermIndexesSet(uint256[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountAddedFromSignature"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountAddedSelf"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountStatusSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountStatusSetByAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CurrentTermIndexSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TermAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidTermIndexesSet"): EventFragment;
}

export type AccountAddedFromSignatureEvent = TypedEvent<
  [string, BigNumber, number, string, string] & {
    account: string;
    termIndex: BigNumber;
    v: number;
    r: string;
    s: string;
  }
>;

export type AccountAddedSelfEvent = TypedEvent<
  [string, BigNumber] & { account: string; termIndex: BigNumber }
>;

export type AccountStatusSetEvent = TypedEvent<
  [string, BigNumber, boolean] & {
    account: string;
    termIndex: BigNumber;
    status: boolean;
  }
>;

export type AccountStatusSetByAdminEvent = TypedEvent<
  [string, BigNumber, boolean] & {
    account: string;
    termIndex: BigNumber;
    status: boolean;
  }
>;

export type CurrentTermIndexSetEvent = TypedEvent<
  [BigNumber, BigNumber] & { oldIndex: BigNumber; newIndex: BigNumber }
>;

export type TermAddedEvent = TypedEvent<
  [string, BigNumber] & { hashedMessage: string; termIndex: BigNumber }
>;

export type ValidTermIndexesSetEvent = TypedEvent<
  [BigNumber[], BigNumber[]] & {
    oldIndexes: BigNumber[];
    newIndexes: BigNumber[];
  }
>;

export class IAllowlist extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IAllowlistInterface;

  functions: {
    addAccountToAllowlist(
      _currentTermIndex: BigNumberish,
      account: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSelfToAllowlist(
      termIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTerm(
      term: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCurrentTerm(overrides?: CallOverrides): Promise<[string]>;

    getValidTermIndexes(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    isAllowed(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    setAccountStatus(
      account: string,
      termIndex: BigNumberish,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCurrentTermIndex(
      _currentTermIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setValidTermIndexes(
      indexes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addAccountToAllowlist(
    _currentTermIndex: BigNumberish,
    account: string,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSelfToAllowlist(
    termIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTerm(
    term: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCurrentTerm(overrides?: CallOverrides): Promise<string>;

  getValidTermIndexes(overrides?: CallOverrides): Promise<BigNumber[]>;

  isAllowed(account: string, overrides?: CallOverrides): Promise<boolean>;

  setAccountStatus(
    account: string,
    termIndex: BigNumberish,
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCurrentTermIndex(
    _currentTermIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setValidTermIndexes(
    indexes: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAccountToAllowlist(
      _currentTermIndex: BigNumberish,
      account: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addSelfToAllowlist(
      termIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addTerm(term: string, overrides?: CallOverrides): Promise<void>;

    getCurrentTerm(overrides?: CallOverrides): Promise<string>;

    getValidTermIndexes(overrides?: CallOverrides): Promise<BigNumber[]>;

    isAllowed(account: string, overrides?: CallOverrides): Promise<boolean>;

    setAccountStatus(
      account: string,
      termIndex: BigNumberish,
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setCurrentTermIndex(
      _currentTermIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setValidTermIndexes(
      indexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AccountAddedFromSignature(address,uint256,uint8,bytes32,bytes32)"(
      account?: string | null,
      termIndex?: BigNumberish | null,
      v?: null,
      r?: null,
      s?: null
    ): TypedEventFilter<
      [string, BigNumber, number, string, string],
      { account: string; termIndex: BigNumber; v: number; r: string; s: string }
    >;

    AccountAddedFromSignature(
      account?: string | null,
      termIndex?: BigNumberish | null,
      v?: null,
      r?: null,
      s?: null
    ): TypedEventFilter<
      [string, BigNumber, number, string, string],
      { account: string; termIndex: BigNumber; v: number; r: string; s: string }
    >;

    "AccountAddedSelf(address,uint256)"(
      account?: string | null,
      termIndex?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; termIndex: BigNumber }
    >;

    AccountAddedSelf(
      account?: string | null,
      termIndex?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; termIndex: BigNumber }
    >;

    "AccountStatusSet(address,uint256,bool)"(
      account?: string | null,
      termIndex?: BigNumberish | null,
      status?: null
    ): TypedEventFilter<
      [string, BigNumber, boolean],
      { account: string; termIndex: BigNumber; status: boolean }
    >;

    AccountStatusSet(
      account?: string | null,
      termIndex?: BigNumberish | null,
      status?: null
    ): TypedEventFilter<
      [string, BigNumber, boolean],
      { account: string; termIndex: BigNumber; status: boolean }
    >;

    "AccountStatusSetByAdmin(address,uint256,bool)"(
      account?: string | null,
      termIndex?: BigNumberish | null,
      status?: null
    ): TypedEventFilter<
      [string, BigNumber, boolean],
      { account: string; termIndex: BigNumber; status: boolean }
    >;

    AccountStatusSetByAdmin(
      account?: string | null,
      termIndex?: BigNumberish | null,
      status?: null
    ): TypedEventFilter<
      [string, BigNumber, boolean],
      { account: string; termIndex: BigNumber; status: boolean }
    >;

    "CurrentTermIndexSet(uint256,uint256)"(
      oldIndex?: null,
      newIndex?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldIndex: BigNumber; newIndex: BigNumber }
    >;

    CurrentTermIndexSet(
      oldIndex?: null,
      newIndex?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldIndex: BigNumber; newIndex: BigNumber }
    >;

    "TermAdded(bytes32,uint256)"(
      hashedMessage?: null,
      termIndex?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { hashedMessage: string; termIndex: BigNumber }
    >;

    TermAdded(
      hashedMessage?: null,
      termIndex?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { hashedMessage: string; termIndex: BigNumber }
    >;

    "ValidTermIndexesSet(uint256[],uint256[])"(
      oldIndexes?: null,
      newIndexes?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber[]],
      { oldIndexes: BigNumber[]; newIndexes: BigNumber[] }
    >;

    ValidTermIndexesSet(
      oldIndexes?: null,
      newIndexes?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber[]],
      { oldIndexes: BigNumber[]; newIndexes: BigNumber[] }
    >;
  };

  estimateGas: {
    addAccountToAllowlist(
      _currentTermIndex: BigNumberish,
      account: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSelfToAllowlist(
      termIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTerm(
      term: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCurrentTerm(overrides?: CallOverrides): Promise<BigNumber>;

    getValidTermIndexes(overrides?: CallOverrides): Promise<BigNumber>;

    isAllowed(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    setAccountStatus(
      account: string,
      termIndex: BigNumberish,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCurrentTermIndex(
      _currentTermIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setValidTermIndexes(
      indexes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAccountToAllowlist(
      _currentTermIndex: BigNumberish,
      account: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSelfToAllowlist(
      termIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTerm(
      term: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentTerm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getValidTermIndexes(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAllowed(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAccountStatus(
      account: string,
      termIndex: BigNumberish,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCurrentTermIndex(
      _currentTermIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setValidTermIndexes(
      indexes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
