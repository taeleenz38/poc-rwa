/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IRWAHubOffChainRedemptionsInterface extends ethers.utils.Interface {
  functions: {
    "pauseOffChainRedemption()": FunctionFragment;
    "requestRedemptionServicedOffchain(uint256,bytes32)": FunctionFragment;
    "setOffChainRedemptionMinimum(uint256)": FunctionFragment;
    "unpauseOffChainRedemption()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "pauseOffChainRedemption",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestRedemptionServicedOffchain",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOffChainRedemptionMinimum",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseOffChainRedemption",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "pauseOffChainRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRedemptionServicedOffchain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOffChainRedemptionMinimum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseOffChainRedemption",
    data: BytesLike
  ): Result;

  events: {
    "OffChainRedemptionMinimumSet(uint256,uint256)": EventFragment;
    "OffChainRedemptionPaused(address)": EventFragment;
    "OffChainRedemptionUnpaused(address)": EventFragment;
    "RedemptionRequestedServicedOffChain(address,bytes32,uint256,bytes32)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "OffChainRedemptionMinimumSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OffChainRedemptionPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OffChainRedemptionUnpaused"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RedemptionRequestedServicedOffChain"
  ): EventFragment;
}

export type OffChainRedemptionMinimumSetEvent = TypedEvent<
  [BigNumber, BigNumber] & { oldMinimum: BigNumber; newMinimum: BigNumber }
>;

export type OffChainRedemptionPausedEvent = TypedEvent<
  [string] & { caller: string }
>;

export type OffChainRedemptionUnpausedEvent = TypedEvent<
  [string] & { caller: string }
>;

export type RedemptionRequestedServicedOffChainEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    user: string;
    redemptionId: string;
    rwaTokenAmountIn: BigNumber;
    offChainDestination: string;
  }
>;

export class IRWAHubOffChainRedemptions extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IRWAHubOffChainRedemptionsInterface;

  functions: {
    pauseOffChainRedemption(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestRedemptionServicedOffchain(
      amountRWATokenToRedeem: BigNumberish,
      offChainDestination: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOffChainRedemptionMinimum(
      minimumAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpauseOffChainRedemption(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  pauseOffChainRedemption(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestRedemptionServicedOffchain(
    amountRWATokenToRedeem: BigNumberish,
    offChainDestination: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOffChainRedemptionMinimum(
    minimumAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpauseOffChainRedemption(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    pauseOffChainRedemption(overrides?: CallOverrides): Promise<void>;

    requestRedemptionServicedOffchain(
      amountRWATokenToRedeem: BigNumberish,
      offChainDestination: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setOffChainRedemptionMinimum(
      minimumAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unpauseOffChainRedemption(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OffChainRedemptionMinimumSet(uint256,uint256)"(
      oldMinimum?: null,
      newMinimum?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldMinimum: BigNumber; newMinimum: BigNumber }
    >;

    OffChainRedemptionMinimumSet(
      oldMinimum?: null,
      newMinimum?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldMinimum: BigNumber; newMinimum: BigNumber }
    >;

    "OffChainRedemptionPaused(address)"(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    OffChainRedemptionPaused(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    "OffChainRedemptionUnpaused(address)"(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    OffChainRedemptionUnpaused(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    "RedemptionRequestedServicedOffChain(address,bytes32,uint256,bytes32)"(
      user?: string | null,
      redemptionId?: BytesLike | null,
      rwaTokenAmountIn?: null,
      offChainDestination?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        user: string;
        redemptionId: string;
        rwaTokenAmountIn: BigNumber;
        offChainDestination: string;
      }
    >;

    RedemptionRequestedServicedOffChain(
      user?: string | null,
      redemptionId?: BytesLike | null,
      rwaTokenAmountIn?: null,
      offChainDestination?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        user: string;
        redemptionId: string;
        rwaTokenAmountIn: BigNumber;
        offChainDestination: string;
      }
    >;
  };

  estimateGas: {
    pauseOffChainRedemption(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestRedemptionServicedOffchain(
      amountRWATokenToRedeem: BigNumberish,
      offChainDestination: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOffChainRedemptionMinimum(
      minimumAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpauseOffChainRedemption(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    pauseOffChainRedemption(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestRedemptionServicedOffchain(
      amountRWATokenToRedeem: BigNumberish,
      offChainDestination: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOffChainRedemptionMinimum(
      minimumAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpauseOffChainRedemption(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
