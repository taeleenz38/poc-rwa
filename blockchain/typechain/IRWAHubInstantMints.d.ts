/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IRWAHubInstantMintsInterface extends ethers.utils.Interface {
  functions: {
    "instantMint(uint256)": FunctionFragment;
    "instantRedemption(uint256)": FunctionFragment;
    "pauseInstantMint()": FunctionFragment;
    "pauseInstantRedemption()": FunctionFragment;
    "setInstantMintFee(uint256)": FunctionFragment;
    "setInstantMintLimit(uint256)": FunctionFragment;
    "setInstantMintLimitDuration(uint256)": FunctionFragment;
    "setInstantMintPriceId(uint256)": FunctionFragment;
    "setInstantRedemptionFee(uint256)": FunctionFragment;
    "setInstantRedemptionLimit(uint256)": FunctionFragment;
    "setInstantRedemptionLimitDuration(uint256)": FunctionFragment;
    "setInstantRedemptionPriceId(uint256)": FunctionFragment;
    "unpauseInstantMint()": FunctionFragment;
    "unpauseInstantRedemption()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "instantMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "instantRedemption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseInstantMint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pauseInstantRedemption",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setInstantMintFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInstantMintLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInstantMintLimitDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInstantMintPriceId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInstantRedemptionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInstantRedemptionLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInstantRedemptionLimitDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInstantRedemptionPriceId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseInstantMint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseInstantRedemption",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "instantMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instantRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseInstantMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseInstantRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInstantMintFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInstantMintLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInstantMintLimitDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInstantMintPriceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInstantRedemptionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInstantRedemptionLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInstantRedemptionLimitDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInstantRedemptionPriceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseInstantMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseInstantRedemption",
    data: BytesLike
  ): Result;

  events: {
    "InstantMintAssetManagerSet(address,address)": EventFragment;
    "InstantMintCompleted(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "InstantMintFeeSet(uint256,uint256)": EventFragment;
    "InstantMintPaused(address)": EventFragment;
    "InstantMintUnpaused(address)": EventFragment;
    "InstantRedemptionCompleted(address,uint256,uint256,uint256,uint256)": EventFragment;
    "InstantRedemptionFeeSet(uint256,uint256)": EventFragment;
    "InstantRedemptionPaused(address)": EventFragment;
    "InstantRedemptionUnpaused(address)": EventFragment;
    "PriceIdSetForInstantMint(uint256)": EventFragment;
    "PriceIdSetForInstantRedemption(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "InstantMintAssetManagerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InstantMintCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InstantMintFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InstantMintPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InstantMintUnpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InstantRedemptionCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InstantRedemptionFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InstantRedemptionPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InstantRedemptionUnpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceIdSetForInstantMint"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PriceIdSetForInstantRedemption"
  ): EventFragment;
}

export type InstantMintAssetManagerSetEvent = TypedEvent<
  [string, string] & {
    oldInstantMintAssetManager: string;
    newInstantMintAssetManager: string;
  }
>;

export type InstantMintCompletedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    user: string;
    collateralAmountDeposited: BigNumber;
    collateralAmountAfterFees: BigNumber;
    feesInCollateral: BigNumber;
    rwaOwed: BigNumber;
    price: BigNumber;
  }
>;

export type InstantMintFeeSetEvent = TypedEvent<
  [BigNumber, BigNumber] & { oldFee: BigNumber; newFee: BigNumber }
>;

export type InstantMintPausedEvent = TypedEvent<[string] & { caller: string }>;

export type InstantMintUnpausedEvent = TypedEvent<
  [string] & { caller: string }
>;

export type InstantRedemptionCompletedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    user: string;
    rwaAmountBurned: BigNumber;
    collateralAmountAfterFees: BigNumber;
    feesInCollateral: BigNumber;
    price: BigNumber;
  }
>;

export type InstantRedemptionFeeSetEvent = TypedEvent<
  [BigNumber, BigNumber] & { oldFee: BigNumber; newFee: BigNumber }
>;

export type InstantRedemptionPausedEvent = TypedEvent<
  [string] & { caller: string }
>;

export type InstantRedemptionUnpausedEvent = TypedEvent<
  [string] & { caller: string }
>;

export type PriceIdSetForInstantMintEvent = TypedEvent<
  [BigNumber] & { priceId: BigNumber }
>;

export type PriceIdSetForInstantRedemptionEvent = TypedEvent<
  [BigNumber] & { priceId: BigNumber }
>;

export class IRWAHubInstantMints extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IRWAHubInstantMintsInterface;

  functions: {
    instantMint(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    instantRedemption(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseInstantMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseInstantRedemption(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInstantMintFee(
      _instantMintFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInstantMintLimit(
      newMintLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInstantMintLimitDuration(
      newMintLimitDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInstantMintPriceId(
      _instantMintPriceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInstantRedemptionFee(
      _instantRedemptionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInstantRedemptionLimit(
      newRedemptionLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInstantRedemptionLimitDuration(
      newRedemptionLimitDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInstantRedemptionPriceId(
      _instantRedemptionPriceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpauseInstantMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpauseInstantRedemption(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  instantMint(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  instantRedemption(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseInstantMint(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseInstantRedemption(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInstantMintFee(
    _instantMintFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInstantMintLimit(
    newMintLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInstantMintLimitDuration(
    newMintLimitDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInstantMintPriceId(
    _instantMintPriceId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInstantRedemptionFee(
    _instantRedemptionFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInstantRedemptionLimit(
    newRedemptionLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInstantRedemptionLimitDuration(
    newRedemptionLimitDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInstantRedemptionPriceId(
    _instantRedemptionPriceId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpauseInstantMint(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpauseInstantRedemption(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    instantMint(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    instantRedemption(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pauseInstantMint(overrides?: CallOverrides): Promise<void>;

    pauseInstantRedemption(overrides?: CallOverrides): Promise<void>;

    setInstantMintFee(
      _instantMintFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInstantMintLimit(
      newMintLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInstantMintLimitDuration(
      newMintLimitDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInstantMintPriceId(
      _instantMintPriceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInstantRedemptionFee(
      _instantRedemptionFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInstantRedemptionLimit(
      newRedemptionLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInstantRedemptionLimitDuration(
      newRedemptionLimitDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInstantRedemptionPriceId(
      _instantRedemptionPriceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unpauseInstantMint(overrides?: CallOverrides): Promise<void>;

    unpauseInstantRedemption(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "InstantMintAssetManagerSet(address,address)"(
      oldInstantMintAssetManager?: null,
      newInstantMintAssetManager?: null
    ): TypedEventFilter<
      [string, string],
      { oldInstantMintAssetManager: string; newInstantMintAssetManager: string }
    >;

    InstantMintAssetManagerSet(
      oldInstantMintAssetManager?: null,
      newInstantMintAssetManager?: null
    ): TypedEventFilter<
      [string, string],
      { oldInstantMintAssetManager: string; newInstantMintAssetManager: string }
    >;

    "InstantMintCompleted(address,uint256,uint256,uint256,uint256,uint256)"(
      user?: string | null,
      collateralAmountDeposited?: null,
      collateralAmountAfterFees?: null,
      feesInCollateral?: null,
      rwaOwed?: null,
      price?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        collateralAmountDeposited: BigNumber;
        collateralAmountAfterFees: BigNumber;
        feesInCollateral: BigNumber;
        rwaOwed: BigNumber;
        price: BigNumber;
      }
    >;

    InstantMintCompleted(
      user?: string | null,
      collateralAmountDeposited?: null,
      collateralAmountAfterFees?: null,
      feesInCollateral?: null,
      rwaOwed?: null,
      price?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        collateralAmountDeposited: BigNumber;
        collateralAmountAfterFees: BigNumber;
        feesInCollateral: BigNumber;
        rwaOwed: BigNumber;
        price: BigNumber;
      }
    >;

    "InstantMintFeeSet(uint256,uint256)"(
      oldFee?: null,
      newFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldFee: BigNumber; newFee: BigNumber }
    >;

    InstantMintFeeSet(
      oldFee?: null,
      newFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldFee: BigNumber; newFee: BigNumber }
    >;

    "InstantMintPaused(address)"(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    InstantMintPaused(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    "InstantMintUnpaused(address)"(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    InstantMintUnpaused(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    "InstantRedemptionCompleted(address,uint256,uint256,uint256,uint256)"(
      user?: string | null,
      rwaAmountBurned?: null,
      collateralAmountAfterFees?: null,
      feesInCollateral?: null,
      price?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        rwaAmountBurned: BigNumber;
        collateralAmountAfterFees: BigNumber;
        feesInCollateral: BigNumber;
        price: BigNumber;
      }
    >;

    InstantRedemptionCompleted(
      user?: string | null,
      rwaAmountBurned?: null,
      collateralAmountAfterFees?: null,
      feesInCollateral?: null,
      price?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        rwaAmountBurned: BigNumber;
        collateralAmountAfterFees: BigNumber;
        feesInCollateral: BigNumber;
        price: BigNumber;
      }
    >;

    "InstantRedemptionFeeSet(uint256,uint256)"(
      oldFee?: null,
      newFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldFee: BigNumber; newFee: BigNumber }
    >;

    InstantRedemptionFeeSet(
      oldFee?: null,
      newFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldFee: BigNumber; newFee: BigNumber }
    >;

    "InstantRedemptionPaused(address)"(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    InstantRedemptionPaused(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    "InstantRedemptionUnpaused(address)"(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    InstantRedemptionUnpaused(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    "PriceIdSetForInstantMint(uint256)"(
      priceId?: null
    ): TypedEventFilter<[BigNumber], { priceId: BigNumber }>;

    PriceIdSetForInstantMint(
      priceId?: null
    ): TypedEventFilter<[BigNumber], { priceId: BigNumber }>;

    "PriceIdSetForInstantRedemption(uint256)"(
      priceId?: null
    ): TypedEventFilter<[BigNumber], { priceId: BigNumber }>;

    PriceIdSetForInstantRedemption(
      priceId?: null
    ): TypedEventFilter<[BigNumber], { priceId: BigNumber }>;
  };

  estimateGas: {
    instantMint(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    instantRedemption(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseInstantMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseInstantRedemption(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInstantMintFee(
      _instantMintFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInstantMintLimit(
      newMintLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInstantMintLimitDuration(
      newMintLimitDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInstantMintPriceId(
      _instantMintPriceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInstantRedemptionFee(
      _instantRedemptionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInstantRedemptionLimit(
      newRedemptionLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInstantRedemptionLimitDuration(
      newRedemptionLimitDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInstantRedemptionPriceId(
      _instantRedemptionPriceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpauseInstantMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpauseInstantRedemption(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    instantMint(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    instantRedemption(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseInstantMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseInstantRedemption(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInstantMintFee(
      _instantMintFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInstantMintLimit(
      newMintLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInstantMintLimitDuration(
      newMintLimitDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInstantMintPriceId(
      _instantMintPriceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInstantRedemptionFee(
      _instantRedemptionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInstantRedemptionLimit(
      newRedemptionLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInstantRedemptionLimitDuration(
      newRedemptionLimitDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInstantRedemptionPriceId(
      _instantRedemptionPriceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpauseInstantMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpauseInstantRedemption(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
