/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IRWAHubNonStableInstantMintInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "ClaimExcessPaused(address)": EventFragment;
    "ClaimExcessUnpaused(address)": EventFragment;
    "ExcessMintClaimed(address,uint256,uint256,uint256,uint256,bytes32)": EventFragment;
    "InstantMint(address,uint256,uint256,uint256,uint256,uint256,bytes32)": EventFragment;
    "InstantMintAmountSet(uint256,uint256)": EventFragment;
    "InstantMintAssetManagerSet(address,address)": EventFragment;
    "InstantMintFeeSet(uint256,uint256)": EventFragment;
    "InstantMintGivenOverriden(bytes32,uint256,uint256)": EventFragment;
    "InstantMintPaused(address)": EventFragment;
    "InstantMintUnpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimExcessPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimExcessUnpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExcessMintClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InstantMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InstantMintAmountSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InstantMintAssetManagerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InstantMintFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InstantMintGivenOverriden"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InstantMintPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InstantMintUnpaused"): EventFragment;
}

export type ClaimExcessPausedEvent = TypedEvent<[string] & { caller: string }>;

export type ClaimExcessUnpausedEvent = TypedEvent<
  [string] & { caller: string }
>;

export type ExcessMintClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
    user: string;
    totalRWAOwed: BigNumber;
    rwaExcessDue: BigNumber;
    rwaExcessGiven: BigNumber;
    priceClaimed: BigNumber;
    depositId: string;
  }
>;

export type InstantMintEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
    user: string;
    collateralAmountDeposited: BigNumber;
    collateralAmountAfterFees: BigNumber;
    feesInCollateral: BigNumber;
    rwaGiven: BigNumber;
    priceMinted: BigNumber;
    depositId: string;
  }
>;

export type InstantMintAmountSetEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    oldInstantMintBps: BigNumber;
    newInstantMintBps: BigNumber;
  }
>;

export type InstantMintAssetManagerSetEvent = TypedEvent<
  [string, string] & {
    oldInstantMintAssetManager: string;
    newInstantMintAssetManager: string;
  }
>;

export type InstantMintFeeSetEvent = TypedEvent<
  [BigNumber, BigNumber] & { oldFee: BigNumber; newFee: BigNumber }
>;

export type InstantMintGivenOverridenEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    depositId: string;
    oldGivenAmt: BigNumber;
    newGivenAmt: BigNumber;
  }
>;

export type InstantMintPausedEvent = TypedEvent<[string] & { caller: string }>;

export type InstantMintUnpausedEvent = TypedEvent<
  [string] & { caller: string }
>;

export class IRWAHubNonStableInstantMint extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IRWAHubNonStableInstantMintInterface;

  functions: {};

  callStatic: {};

  filters: {
    "ClaimExcessPaused(address)"(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    ClaimExcessPaused(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    "ClaimExcessUnpaused(address)"(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    ClaimExcessUnpaused(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    "ExcessMintClaimed(address,uint256,uint256,uint256,uint256,bytes32)"(
      user?: string | null,
      totalRWAOwed?: null,
      rwaExcessDue?: null,
      rwaExcessGiven?: null,
      priceClaimed?: null,
      depositId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, string],
      {
        user: string;
        totalRWAOwed: BigNumber;
        rwaExcessDue: BigNumber;
        rwaExcessGiven: BigNumber;
        priceClaimed: BigNumber;
        depositId: string;
      }
    >;

    ExcessMintClaimed(
      user?: string | null,
      totalRWAOwed?: null,
      rwaExcessDue?: null,
      rwaExcessGiven?: null,
      priceClaimed?: null,
      depositId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, string],
      {
        user: string;
        totalRWAOwed: BigNumber;
        rwaExcessDue: BigNumber;
        rwaExcessGiven: BigNumber;
        priceClaimed: BigNumber;
        depositId: string;
      }
    >;

    "InstantMint(address,uint256,uint256,uint256,uint256,uint256,bytes32)"(
      user?: string | null,
      collateralAmountDeposited?: null,
      collateralAmountAfterFees?: null,
      feesInCollateral?: null,
      rwaGiven?: null,
      priceMinted?: null,
      depositId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string],
      {
        user: string;
        collateralAmountDeposited: BigNumber;
        collateralAmountAfterFees: BigNumber;
        feesInCollateral: BigNumber;
        rwaGiven: BigNumber;
        priceMinted: BigNumber;
        depositId: string;
      }
    >;

    InstantMint(
      user?: string | null,
      collateralAmountDeposited?: null,
      collateralAmountAfterFees?: null,
      feesInCollateral?: null,
      rwaGiven?: null,
      priceMinted?: null,
      depositId?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string],
      {
        user: string;
        collateralAmountDeposited: BigNumber;
        collateralAmountAfterFees: BigNumber;
        feesInCollateral: BigNumber;
        rwaGiven: BigNumber;
        priceMinted: BigNumber;
        depositId: string;
      }
    >;

    "InstantMintAmountSet(uint256,uint256)"(
      oldInstantMintBps?: null,
      newInstantMintBps?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldInstantMintBps: BigNumber; newInstantMintBps: BigNumber }
    >;

    InstantMintAmountSet(
      oldInstantMintBps?: null,
      newInstantMintBps?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldInstantMintBps: BigNumber; newInstantMintBps: BigNumber }
    >;

    "InstantMintAssetManagerSet(address,address)"(
      oldInstantMintAssetManager?: null,
      newInstantMintAssetManager?: null
    ): TypedEventFilter<
      [string, string],
      { oldInstantMintAssetManager: string; newInstantMintAssetManager: string }
    >;

    InstantMintAssetManagerSet(
      oldInstantMintAssetManager?: null,
      newInstantMintAssetManager?: null
    ): TypedEventFilter<
      [string, string],
      { oldInstantMintAssetManager: string; newInstantMintAssetManager: string }
    >;

    "InstantMintFeeSet(uint256,uint256)"(
      oldFee?: null,
      newFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldFee: BigNumber; newFee: BigNumber }
    >;

    InstantMintFeeSet(
      oldFee?: null,
      newFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldFee: BigNumber; newFee: BigNumber }
    >;

    "InstantMintGivenOverriden(bytes32,uint256,uint256)"(
      depositId?: BytesLike | null,
      oldGivenAmt?: null,
      newGivenAmt?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { depositId: string; oldGivenAmt: BigNumber; newGivenAmt: BigNumber }
    >;

    InstantMintGivenOverriden(
      depositId?: BytesLike | null,
      oldGivenAmt?: null,
      newGivenAmt?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { depositId: string; oldGivenAmt: BigNumber; newGivenAmt: BigNumber }
    >;

    "InstantMintPaused(address)"(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    InstantMintPaused(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    "InstantMintUnpaused(address)"(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    InstantMintUnpaused(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;
  };

  estimateGas: {};

  populateTransaction: {};
}
