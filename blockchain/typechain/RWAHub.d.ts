/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RWAHubInterface extends ethers.utils.Interface {
  functions: {
    "BPS_DENOMINATOR()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MANAGER_ADMIN()": FunctionFragment;
    "PAUSER_ADMIN()": FunctionFragment;
    "PRICE_ID_SETTER_ROLE()": FunctionFragment;
    "RELAYER_ROLE()": FunctionFragment;
    "addProof(bytes32,address,uint256,uint256,uint256)": FunctionFragment;
    "assetRecipient()": FunctionFragment;
    "assetSender()": FunctionFragment;
    "claimMint(bytes32[])": FunctionFragment;
    "claimRedemption(bytes32[])": FunctionFragment;
    "collateral()": FunctionFragment;
    "decimalsMultiplier()": FunctionFragment;
    "depositIdToDepositor(bytes32)": FunctionFragment;
    "feeRecipient()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "minimumDepositAmount()": FunctionFragment;
    "minimumRedemptionAmount()": FunctionFragment;
    "mintFee()": FunctionFragment;
    "overwriteDepositor(bytes32,address,uint256,uint256)": FunctionFragment;
    "overwriteRedeemer(bytes32,address,uint256,uint256)": FunctionFragment;
    "pauseRedemption()": FunctionFragment;
    "pauseSubscription()": FunctionFragment;
    "pricer()": FunctionFragment;
    "redemptionFee()": FunctionFragment;
    "redemptionIdToRedeemer(bytes32)": FunctionFragment;
    "redemptionPaused()": FunctionFragment;
    "redemptionRequestCounter()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "requestRedemption(uint256)": FunctionFragment;
    "requestSubscription(uint256)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rwa()": FunctionFragment;
    "setAssetSender(address)": FunctionFragment;
    "setFeeRecipient(address)": FunctionFragment;
    "setMinimumDepositAmount(uint256)": FunctionFragment;
    "setMinimumRedemptionAmount(uint256)": FunctionFragment;
    "setMintFee(uint256)": FunctionFragment;
    "setPriceIdForDeposits(bytes32[],uint256[])": FunctionFragment;
    "setPriceIdForRedemptions(bytes32[],uint256[])": FunctionFragment;
    "setPricer(address)": FunctionFragment;
    "setRedemptionFee(uint256)": FunctionFragment;
    "subscriptionPaused()": FunctionFragment;
    "subscriptionRequestCounter()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unpauseRedemption()": FunctionFragment;
    "unpauseSubscription()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BPS_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MANAGER_ADMIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ADMIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_ID_SETTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RELAYER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addProof",
    values: [BytesLike, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assetRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetSender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimMint",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRedemption",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decimalsMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositIdToDepositor",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumDepositAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumRedemptionAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mintFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "overwriteDepositor",
    values: [BytesLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "overwriteRedeemer",
    values: [BytesLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseRedemption",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pauseSubscription",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pricer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redemptionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionIdToRedeemer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionRequestCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRedemption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestSubscription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "rwa", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAssetSender",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumDepositAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumRedemptionAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceIdForDeposits",
    values: [BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceIdForRedemptions",
    values: [BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "setPricer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setRedemptionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionRequestCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseRedemption",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseSubscription",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BPS_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MANAGER_ADMIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ADMIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_ID_SETTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RELAYER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addProof", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collateral", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decimalsMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositIdToDepositor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumRedemptionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "overwriteDepositor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "overwriteRedeemer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pricer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redemptionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemptionIdToRedeemer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemptionPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemptionRequestCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rwa", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAssetSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumRedemptionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMintFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPriceIdForDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceIdForRedemptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPricer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRedemptionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionRequestCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseSubscription",
    data: BytesLike
  ): Result;

  events: {
    "AssetSenderSet(address,address)": EventFragment;
    "DepositProofAdded(bytes32,address,uint256,uint256,uint256)": EventFragment;
    "DepositorOverwritten(bytes32,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "FeeRecipientSet(address,address)": EventFragment;
    "MinimumDepositAmountSet(uint256,uint256)": EventFragment;
    "MinimumRedemptionAmountSet(uint256,uint256)": EventFragment;
    "MintCompleted(address,bytes32,uint256,uint256,uint256,uint256)": EventFragment;
    "MintFeeSet(uint256,uint256)": EventFragment;
    "MintRequested(address,bytes32,uint256,uint256,uint256)": EventFragment;
    "NewPricerSet(address,address)": EventFragment;
    "PriceIdSetForDeposit(bytes32,uint256)": EventFragment;
    "PriceIdSetForRedemption(bytes32,uint256)": EventFragment;
    "RedeemerOverwritten(bytes32,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "RedemptionCompleted(address,bytes32,uint256,uint256,uint256)": EventFragment;
    "RedemptionFeeSet(uint256,uint256)": EventFragment;
    "RedemptionPaused(address)": EventFragment;
    "RedemptionRequested(address,bytes32,uint256)": EventFragment;
    "RedemptionUnpaused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SubscriptionPaused(address)": EventFragment;
    "SubscriptionUnpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetSenderSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositProofAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositorOverwritten"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeRecipientSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinimumDepositAmountSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinimumRedemptionAmountSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPricerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceIdSetForDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceIdSetForRedemption"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemerOverwritten"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedemptionCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedemptionFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedemptionPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedemptionRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedemptionUnpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionUnpaused"): EventFragment;
}

export type AssetSenderSetEvent = TypedEvent<
  [string, string] & { oldAssetSender: string; newAssetSender: string }
>;

export type DepositProofAddedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber] & {
    txHash: string;
    user: string;
    depositAmountAfterFee: BigNumber;
    feeAmount: BigNumber;
    timestamp: BigNumber;
  }
>;

export type DepositorOverwrittenEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    depositId: string;
    oldDepositor: string;
    newDepositor: string;
    oldPriceId: BigNumber;
    newPriceId: BigNumber;
    oldDepositAmount: BigNumber;
    newDepositAmount: BigNumber;
  }
>;

export type FeeRecipientSetEvent = TypedEvent<
  [string, string] & { oldFeeRecipient: string; newFeeRecipient: string }
>;

export type MinimumDepositAmountSetEvent = TypedEvent<
  [BigNumber, BigNumber] & { oldMinimum: BigNumber; newMinimum: BigNumber }
>;

export type MinimumRedemptionAmountSetEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    oldRedemptionMin: BigNumber;
    newRedemptionMin: BigNumber;
  }
>;

export type MintCompletedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    user: string;
    depositId: string;
    rwaAmountOut: BigNumber;
    collateralAmountDeposited: BigNumber;
    price: BigNumber;
    priceId: BigNumber;
  }
>;

export type MintFeeSetEvent = TypedEvent<
  [BigNumber, BigNumber] & { oldFee: BigNumber; newFee: BigNumber }
>;

export type MintRequestedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber] & {
    user: string;
    depositId: string;
    collateralAmountDeposited: BigNumber;
    depositAmountAfterFee: BigNumber;
    feeAmount: BigNumber;
  }
>;

export type NewPricerSetEvent = TypedEvent<
  [string, string] & { oldPricer: string; newPricer: string }
>;

export type PriceIdSetForDepositEvent = TypedEvent<
  [string, BigNumber] & { depositIdSet: string; priceIdSet: BigNumber }
>;

export type PriceIdSetForRedemptionEvent = TypedEvent<
  [string, BigNumber] & { redemptionIdSet: string; priceIdSet: BigNumber }
>;

export type RedeemerOverwrittenEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    redemptionId: string;
    oldRedeemer: string;
    newRedeemer: string;
    oldPriceId: BigNumber;
    newPriceId: BigNumber;
    oldRWATokenAmountBurned: BigNumber;
    newRWATokenAmountBurned: BigNumber;
  }
>;

export type RedemptionCompletedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber] & {
    user: string;
    redemptionId: string;
    rwaAmountRequested: BigNumber;
    collateralAmountReturned: BigNumber;
    price: BigNumber;
  }
>;

export type RedemptionFeeSetEvent = TypedEvent<
  [BigNumber, BigNumber] & { oldFee: BigNumber; newFee: BigNumber }
>;

export type RedemptionPausedEvent = TypedEvent<[string] & { caller: string }>;

export type RedemptionRequestedEvent = TypedEvent<
  [string, string, BigNumber] & {
    user: string;
    redemptionId: string;
    rwaAmountIn: BigNumber;
  }
>;

export type RedemptionUnpausedEvent = TypedEvent<[string] & { caller: string }>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type SubscriptionPausedEvent = TypedEvent<[string] & { caller: string }>;

export type SubscriptionUnpausedEvent = TypedEvent<
  [string] & { caller: string }
>;

export class RWAHub extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RWAHubInterface;

  functions: {
    BPS_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MANAGER_ADMIN(overrides?: CallOverrides): Promise<[string]>;

    PAUSER_ADMIN(overrides?: CallOverrides): Promise<[string]>;

    PRICE_ID_SETTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    RELAYER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addProof(
      txHash: BytesLike,
      user: string,
      depositAmountAfterFee: BigNumberish,
      feeAmount: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assetRecipient(overrides?: CallOverrides): Promise<[string]>;

    assetSender(overrides?: CallOverrides): Promise<[string]>;

    claimMint(
      depositIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRedemption(
      redemptionIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collateral(overrides?: CallOverrides): Promise<[string]>;

    decimalsMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositIdToDepositor(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        user: string;
        amountDepositedMinusFees: BigNumber;
        priceId: BigNumber;
      }
    >;

    feeRecipient(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    minimumDepositAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumRedemptionAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    overwriteDepositor(
      depositIdToOverwrite: BytesLike,
      user: string,
      depositAmountAfterFee: BigNumberish,
      priceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    overwriteRedeemer(
      redemptionIdToOverwrite: BytesLike,
      user: string,
      rwaTokenAmountBurned: BigNumberish,
      priceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseRedemption(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseSubscription(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pricer(overrides?: CallOverrides): Promise<[string]>;

    redemptionFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    redemptionIdToRedeemer(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        user: string;
        amountRwaTokenBurned: BigNumber;
        priceId: BigNumber;
      }
    >;

    redemptionPaused(overrides?: CallOverrides): Promise<[boolean]>;

    redemptionRequestCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestRedemption(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestSubscription(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rwa(overrides?: CallOverrides): Promise<[string]>;

    setAssetSender(
      newAssetSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeRecipient(
      newFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinimumDepositAmount(
      minDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinimumRedemptionAmount(
      _minimumRedemptionAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMintFee(
      _mintFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceIdForDeposits(
      depositIds: BytesLike[],
      priceIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceIdForRedemptions(
      redemptionIds: BytesLike[],
      priceIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPricer(
      newPricer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRedemptionFee(
      _redemptionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    subscriptionPaused(overrides?: CallOverrides): Promise<[boolean]>;

    subscriptionRequestCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unpauseRedemption(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpauseSubscription(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BPS_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MANAGER_ADMIN(overrides?: CallOverrides): Promise<string>;

  PAUSER_ADMIN(overrides?: CallOverrides): Promise<string>;

  PRICE_ID_SETTER_ROLE(overrides?: CallOverrides): Promise<string>;

  RELAYER_ROLE(overrides?: CallOverrides): Promise<string>;

  addProof(
    txHash: BytesLike,
    user: string,
    depositAmountAfterFee: BigNumberish,
    feeAmount: BigNumberish,
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assetRecipient(overrides?: CallOverrides): Promise<string>;

  assetSender(overrides?: CallOverrides): Promise<string>;

  claimMint(
    depositIds: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRedemption(
    redemptionIds: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collateral(overrides?: CallOverrides): Promise<string>;

  decimalsMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  depositIdToDepositor(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      user: string;
      amountDepositedMinusFees: BigNumber;
      priceId: BigNumber;
    }
  >;

  feeRecipient(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  minimumDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

  minimumRedemptionAmount(overrides?: CallOverrides): Promise<BigNumber>;

  mintFee(overrides?: CallOverrides): Promise<BigNumber>;

  overwriteDepositor(
    depositIdToOverwrite: BytesLike,
    user: string,
    depositAmountAfterFee: BigNumberish,
    priceId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  overwriteRedeemer(
    redemptionIdToOverwrite: BytesLike,
    user: string,
    rwaTokenAmountBurned: BigNumberish,
    priceId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseRedemption(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseSubscription(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pricer(overrides?: CallOverrides): Promise<string>;

  redemptionFee(overrides?: CallOverrides): Promise<BigNumber>;

  redemptionIdToRedeemer(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      user: string;
      amountRwaTokenBurned: BigNumber;
      priceId: BigNumber;
    }
  >;

  redemptionPaused(overrides?: CallOverrides): Promise<boolean>;

  redemptionRequestCounter(overrides?: CallOverrides): Promise<BigNumber>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestRedemption(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestSubscription(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rwa(overrides?: CallOverrides): Promise<string>;

  setAssetSender(
    newAssetSender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeRecipient(
    newFeeRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinimumDepositAmount(
    minDepositAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinimumRedemptionAmount(
    _minimumRedemptionAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMintFee(
    _mintFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceIdForDeposits(
    depositIds: BytesLike[],
    priceIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceIdForRedemptions(
    redemptionIds: BytesLike[],
    priceIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPricer(
    newPricer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRedemptionFee(
    _redemptionFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  subscriptionPaused(overrides?: CallOverrides): Promise<boolean>;

  subscriptionRequestCounter(overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unpauseRedemption(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpauseSubscription(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BPS_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MANAGER_ADMIN(overrides?: CallOverrides): Promise<string>;

    PAUSER_ADMIN(overrides?: CallOverrides): Promise<string>;

    PRICE_ID_SETTER_ROLE(overrides?: CallOverrides): Promise<string>;

    RELAYER_ROLE(overrides?: CallOverrides): Promise<string>;

    addProof(
      txHash: BytesLike,
      user: string,
      depositAmountAfterFee: BigNumberish,
      feeAmount: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    assetRecipient(overrides?: CallOverrides): Promise<string>;

    assetSender(overrides?: CallOverrides): Promise<string>;

    claimMint(
      depositIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimRedemption(
      redemptionIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    collateral(overrides?: CallOverrides): Promise<string>;

    decimalsMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    depositIdToDepositor(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        user: string;
        amountDepositedMinusFees: BigNumber;
        priceId: BigNumber;
      }
    >;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minimumDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minimumRedemptionAmount(overrides?: CallOverrides): Promise<BigNumber>;

    mintFee(overrides?: CallOverrides): Promise<BigNumber>;

    overwriteDepositor(
      depositIdToOverwrite: BytesLike,
      user: string,
      depositAmountAfterFee: BigNumberish,
      priceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    overwriteRedeemer(
      redemptionIdToOverwrite: BytesLike,
      user: string,
      rwaTokenAmountBurned: BigNumberish,
      priceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pauseRedemption(overrides?: CallOverrides): Promise<void>;

    pauseSubscription(overrides?: CallOverrides): Promise<void>;

    pricer(overrides?: CallOverrides): Promise<string>;

    redemptionFee(overrides?: CallOverrides): Promise<BigNumber>;

    redemptionIdToRedeemer(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        user: string;
        amountRwaTokenBurned: BigNumber;
        priceId: BigNumber;
      }
    >;

    redemptionPaused(overrides?: CallOverrides): Promise<boolean>;

    redemptionRequestCounter(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestRedemption(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    requestSubscription(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rwa(overrides?: CallOverrides): Promise<string>;

    setAssetSender(
      newAssetSender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeRecipient(
      newFeeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumDepositAmount(
      minDepositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumRedemptionAmount(
      _minimumRedemptionAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintFee(
      _mintFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceIdForDeposits(
      depositIds: BytesLike[],
      priceIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceIdForRedemptions(
      redemptionIds: BytesLike[],
      priceIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setPricer(newPricer: string, overrides?: CallOverrides): Promise<void>;

    setRedemptionFee(
      _redemptionFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    subscriptionPaused(overrides?: CallOverrides): Promise<boolean>;

    subscriptionRequestCounter(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unpauseRedemption(overrides?: CallOverrides): Promise<void>;

    unpauseSubscription(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AssetSenderSet(address,address)"(
      oldAssetSender?: null,
      newAssetSender?: null
    ): TypedEventFilter<
      [string, string],
      { oldAssetSender: string; newAssetSender: string }
    >;

    AssetSenderSet(
      oldAssetSender?: null,
      newAssetSender?: null
    ): TypedEventFilter<
      [string, string],
      { oldAssetSender: string; newAssetSender: string }
    >;

    "DepositProofAdded(bytes32,address,uint256,uint256,uint256)"(
      txHash?: BytesLike | null,
      user?: string | null,
      depositAmountAfterFee?: null,
      feeAmount?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        txHash: string;
        user: string;
        depositAmountAfterFee: BigNumber;
        feeAmount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    DepositProofAdded(
      txHash?: BytesLike | null,
      user?: string | null,
      depositAmountAfterFee?: null,
      feeAmount?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        txHash: string;
        user: string;
        depositAmountAfterFee: BigNumber;
        feeAmount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    "DepositorOverwritten(bytes32,address,address,uint256,uint256,uint256,uint256)"(
      depositId?: BytesLike | null,
      oldDepositor?: null,
      newDepositor?: null,
      oldPriceId?: null,
      newPriceId?: null,
      oldDepositAmount?: null,
      newDepositAmount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        depositId: string;
        oldDepositor: string;
        newDepositor: string;
        oldPriceId: BigNumber;
        newPriceId: BigNumber;
        oldDepositAmount: BigNumber;
        newDepositAmount: BigNumber;
      }
    >;

    DepositorOverwritten(
      depositId?: BytesLike | null,
      oldDepositor?: null,
      newDepositor?: null,
      oldPriceId?: null,
      newPriceId?: null,
      oldDepositAmount?: null,
      newDepositAmount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        depositId: string;
        oldDepositor: string;
        newDepositor: string;
        oldPriceId: BigNumber;
        newPriceId: BigNumber;
        oldDepositAmount: BigNumber;
        newDepositAmount: BigNumber;
      }
    >;

    "FeeRecipientSet(address,address)"(
      oldFeeRecipient?: null,
      newFeeRecipient?: null
    ): TypedEventFilter<
      [string, string],
      { oldFeeRecipient: string; newFeeRecipient: string }
    >;

    FeeRecipientSet(
      oldFeeRecipient?: null,
      newFeeRecipient?: null
    ): TypedEventFilter<
      [string, string],
      { oldFeeRecipient: string; newFeeRecipient: string }
    >;

    "MinimumDepositAmountSet(uint256,uint256)"(
      oldMinimum?: null,
      newMinimum?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldMinimum: BigNumber; newMinimum: BigNumber }
    >;

    MinimumDepositAmountSet(
      oldMinimum?: null,
      newMinimum?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldMinimum: BigNumber; newMinimum: BigNumber }
    >;

    "MinimumRedemptionAmountSet(uint256,uint256)"(
      oldRedemptionMin?: null,
      newRedemptionMin?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldRedemptionMin: BigNumber; newRedemptionMin: BigNumber }
    >;

    MinimumRedemptionAmountSet(
      oldRedemptionMin?: null,
      newRedemptionMin?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldRedemptionMin: BigNumber; newRedemptionMin: BigNumber }
    >;

    "MintCompleted(address,bytes32,uint256,uint256,uint256,uint256)"(
      user?: string | null,
      depositId?: BytesLike | null,
      rwaAmountOut?: null,
      collateralAmountDeposited?: null,
      price?: null,
      priceId?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        depositId: string;
        rwaAmountOut: BigNumber;
        collateralAmountDeposited: BigNumber;
        price: BigNumber;
        priceId: BigNumber;
      }
    >;

    MintCompleted(
      user?: string | null,
      depositId?: BytesLike | null,
      rwaAmountOut?: null,
      collateralAmountDeposited?: null,
      price?: null,
      priceId?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        depositId: string;
        rwaAmountOut: BigNumber;
        collateralAmountDeposited: BigNumber;
        price: BigNumber;
        priceId: BigNumber;
      }
    >;

    "MintFeeSet(uint256,uint256)"(
      oldFee?: null,
      newFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldFee: BigNumber; newFee: BigNumber }
    >;

    MintFeeSet(
      oldFee?: null,
      newFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldFee: BigNumber; newFee: BigNumber }
    >;

    "MintRequested(address,bytes32,uint256,uint256,uint256)"(
      user?: string | null,
      depositId?: BytesLike | null,
      collateralAmountDeposited?: null,
      depositAmountAfterFee?: null,
      feeAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        depositId: string;
        collateralAmountDeposited: BigNumber;
        depositAmountAfterFee: BigNumber;
        feeAmount: BigNumber;
      }
    >;

    MintRequested(
      user?: string | null,
      depositId?: BytesLike | null,
      collateralAmountDeposited?: null,
      depositAmountAfterFee?: null,
      feeAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        depositId: string;
        collateralAmountDeposited: BigNumber;
        depositAmountAfterFee: BigNumber;
        feeAmount: BigNumber;
      }
    >;

    "NewPricerSet(address,address)"(
      oldPricer?: null,
      newPricer?: null
    ): TypedEventFilter<
      [string, string],
      { oldPricer: string; newPricer: string }
    >;

    NewPricerSet(
      oldPricer?: null,
      newPricer?: null
    ): TypedEventFilter<
      [string, string],
      { oldPricer: string; newPricer: string }
    >;

    "PriceIdSetForDeposit(bytes32,uint256)"(
      depositIdSet?: BytesLike | null,
      priceIdSet?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { depositIdSet: string; priceIdSet: BigNumber }
    >;

    PriceIdSetForDeposit(
      depositIdSet?: BytesLike | null,
      priceIdSet?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { depositIdSet: string; priceIdSet: BigNumber }
    >;

    "PriceIdSetForRedemption(bytes32,uint256)"(
      redemptionIdSet?: BytesLike | null,
      priceIdSet?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { redemptionIdSet: string; priceIdSet: BigNumber }
    >;

    PriceIdSetForRedemption(
      redemptionIdSet?: BytesLike | null,
      priceIdSet?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { redemptionIdSet: string; priceIdSet: BigNumber }
    >;

    "RedeemerOverwritten(bytes32,address,address,uint256,uint256,uint256,uint256)"(
      redemptionId?: BytesLike | null,
      oldRedeemer?: null,
      newRedeemer?: null,
      oldPriceId?: null,
      newPriceId?: null,
      oldRWATokenAmountBurned?: null,
      newRWATokenAmountBurned?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        redemptionId: string;
        oldRedeemer: string;
        newRedeemer: string;
        oldPriceId: BigNumber;
        newPriceId: BigNumber;
        oldRWATokenAmountBurned: BigNumber;
        newRWATokenAmountBurned: BigNumber;
      }
    >;

    RedeemerOverwritten(
      redemptionId?: BytesLike | null,
      oldRedeemer?: null,
      newRedeemer?: null,
      oldPriceId?: null,
      newPriceId?: null,
      oldRWATokenAmountBurned?: null,
      newRWATokenAmountBurned?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        redemptionId: string;
        oldRedeemer: string;
        newRedeemer: string;
        oldPriceId: BigNumber;
        newPriceId: BigNumber;
        oldRWATokenAmountBurned: BigNumber;
        newRWATokenAmountBurned: BigNumber;
      }
    >;

    "RedemptionCompleted(address,bytes32,uint256,uint256,uint256)"(
      user?: string | null,
      redemptionId?: BytesLike | null,
      rwaAmountRequested?: null,
      collateralAmountReturned?: null,
      price?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        redemptionId: string;
        rwaAmountRequested: BigNumber;
        collateralAmountReturned: BigNumber;
        price: BigNumber;
      }
    >;

    RedemptionCompleted(
      user?: string | null,
      redemptionId?: BytesLike | null,
      rwaAmountRequested?: null,
      collateralAmountReturned?: null,
      price?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        redemptionId: string;
        rwaAmountRequested: BigNumber;
        collateralAmountReturned: BigNumber;
        price: BigNumber;
      }
    >;

    "RedemptionFeeSet(uint256,uint256)"(
      oldFee?: null,
      newFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldFee: BigNumber; newFee: BigNumber }
    >;

    RedemptionFeeSet(
      oldFee?: null,
      newFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldFee: BigNumber; newFee: BigNumber }
    >;

    "RedemptionPaused(address)"(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    RedemptionPaused(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    "RedemptionRequested(address,bytes32,uint256)"(
      user?: string | null,
      redemptionId?: BytesLike | null,
      rwaAmountIn?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; redemptionId: string; rwaAmountIn: BigNumber }
    >;

    RedemptionRequested(
      user?: string | null,
      redemptionId?: BytesLike | null,
      rwaAmountIn?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; redemptionId: string; rwaAmountIn: BigNumber }
    >;

    "RedemptionUnpaused(address)"(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    RedemptionUnpaused(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "SubscriptionPaused(address)"(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    SubscriptionPaused(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    "SubscriptionUnpaused(address)"(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;

    SubscriptionUnpaused(
      caller?: null
    ): TypedEventFilter<[string], { caller: string }>;
  };

  estimateGas: {
    BPS_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MANAGER_ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_ID_SETTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    RELAYER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addProof(
      txHash: BytesLike,
      user: string,
      depositAmountAfterFee: BigNumberish,
      feeAmount: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assetRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    assetSender(overrides?: CallOverrides): Promise<BigNumber>;

    claimMint(
      depositIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRedemption(
      redemptionIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collateral(overrides?: CallOverrides): Promise<BigNumber>;

    decimalsMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    depositIdToDepositor(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minimumRedemptionAmount(overrides?: CallOverrides): Promise<BigNumber>;

    mintFee(overrides?: CallOverrides): Promise<BigNumber>;

    overwriteDepositor(
      depositIdToOverwrite: BytesLike,
      user: string,
      depositAmountAfterFee: BigNumberish,
      priceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    overwriteRedeemer(
      redemptionIdToOverwrite: BytesLike,
      user: string,
      rwaTokenAmountBurned: BigNumberish,
      priceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseRedemption(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseSubscription(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pricer(overrides?: CallOverrides): Promise<BigNumber>;

    redemptionFee(overrides?: CallOverrides): Promise<BigNumber>;

    redemptionIdToRedeemer(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redemptionPaused(overrides?: CallOverrides): Promise<BigNumber>;

    redemptionRequestCounter(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestRedemption(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestSubscription(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rwa(overrides?: CallOverrides): Promise<BigNumber>;

    setAssetSender(
      newAssetSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeRecipient(
      newFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinimumDepositAmount(
      minDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinimumRedemptionAmount(
      _minimumRedemptionAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMintFee(
      _mintFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceIdForDeposits(
      depositIds: BytesLike[],
      priceIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceIdForRedemptions(
      redemptionIds: BytesLike[],
      priceIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPricer(
      newPricer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRedemptionFee(
      _redemptionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    subscriptionPaused(overrides?: CallOverrides): Promise<BigNumber>;

    subscriptionRequestCounter(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpauseRedemption(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpauseSubscription(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BPS_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MANAGER_ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAUSER_ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRICE_ID_SETTER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RELAYER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addProof(
      txHash: BytesLike,
      user: string,
      depositAmountAfterFee: BigNumberish,
      feeAmount: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assetRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimMint(
      depositIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRedemption(
      redemptionIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimalsMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositIdToDepositor(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumDepositAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumRedemptionAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    overwriteDepositor(
      depositIdToOverwrite: BytesLike,
      user: string,
      depositAmountAfterFee: BigNumberish,
      priceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    overwriteRedeemer(
      redemptionIdToOverwrite: BytesLike,
      user: string,
      rwaTokenAmountBurned: BigNumberish,
      priceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseRedemption(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseSubscription(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pricer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redemptionFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redemptionIdToRedeemer(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redemptionPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redemptionRequestCounter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestRedemption(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestSubscription(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rwa(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAssetSender(
      newAssetSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeRecipient(
      newFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumDepositAmount(
      minDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumRedemptionAmount(
      _minimumRedemptionAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMintFee(
      _mintFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceIdForDeposits(
      depositIds: BytesLike[],
      priceIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceIdForRedemptions(
      redemptionIds: BytesLike[],
      priceIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPricer(
      newPricer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRedemptionFee(
      _redemptionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    subscriptionPaused(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subscriptionRequestCounter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpauseRedemption(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpauseSubscription(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
