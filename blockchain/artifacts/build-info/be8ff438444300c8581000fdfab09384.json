{"id":"be8ff438444300c8581000fdfab09384","_format":"hh-sol-build-info-1","solcVersion":"0.8.16","solcLongVersion":"0.8.16+commit.07a7930e","input":{"language":"Solidity","sources":{"contracts/RWAHub.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\nimport \"contracts/interfaces/IPricerReader.sol\";\nimport \"contracts/interfaces/IRWALike.sol\";\nimport \"contracts/external/openzeppelin/contracts/token/IERC20.sol\";\nimport \"contracts/external/openzeppelin/contracts/token/SafeERC20.sol\";\nimport \"contracts/interfaces/IRWAHub.sol\";\n\n// Additional Dependencies\nimport \"contracts/external/openzeppelin/contracts/token/IERC20Metadata.sol\";\nimport \"contracts/external/openzeppelin/contracts/access/AccessControlEnumerable.sol\";\nimport \"contracts/external/openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nabstract contract RWAHub is IRWAHub, ReentrancyGuard, AccessControlEnumerable {\n  using SafeERC20 for IERC20;\n  // RWA Token contract\n  IRWALike public immutable rwa;\n  // Pointer to Pricer\n  IPricerReader public pricer;\n  // Address to receive deposits\n  address public constant assetRecipient =\n    0x0686b3a7B9bE2751bB51084a6E0E7DB7f1746eb1; // ABBY - CB Deposit Address\n  // Address to send redemptions\n  address public assetSender;\n  // Address fee recipient\n  address public feeRecipient;\n  // Mapping from deposit Id -> Depositor\n  mapping(bytes32 => Depositor) public depositIdToDepositor;\n  // Mapping from redemptionId -> Redeemer\n  mapping(bytes32 => Redeemer) public redemptionIdToRedeemer;\n\n  /// @dev Mint/Redeem Parameters\n  // Minimum amount that must be deposited to mint the RWA token\n  // Denoted in decimals of `collateral`\n  uint256 public minimumDepositAmount;\n\n  // Minimum amount that must be redeemed for a withdraw request\n  uint256 public minimumRedemptionAmount;\n\n  // Minting fee specified in basis points\n  uint256 public mintFee = 0;\n\n  // Redemption fee specified in basis points\n  uint256 public redemptionFee = 0;\n\n  // The asset accepted by the RWAHub\n  IERC20 public immutable collateral;\n\n  // Decimal multiplier representing the difference between `rwa` decimals\n  // In `collateral` token decimals\n  uint256 public immutable decimalsMultiplier;\n\n  // Deposit counter to map subscription requests to\n  uint256 public subscriptionRequestCounter = 1;\n\n  // Redemption Id to map from\n  uint256 public redemptionRequestCounter = 1;\n\n  // Helper constant that allows us to specify basis points in calculations\n  uint256 public constant BPS_DENOMINATOR = 10_000;\n\n  // Pause variables\n  bool public redemptionPaused;\n  bool public subscriptionPaused;\n\n  /// @dev Role based access control roles\n  bytes32 public constant MANAGER_ADMIN = keccak256(\"MANAGER_ADMIN\");\n  bytes32 public constant PAUSER_ADMIN = keccak256(\"PAUSER_ADMIN\");\n  bytes32 public constant PRICE_ID_SETTER_ROLE =\n    keccak256(\"PRICE_ID_SETTER_ROLE\");\n  bytes32 public constant RELAYER_ROLE = keccak256(\"RELAYER_ROLE\");\n\n  /// @notice constructor\n  constructor(\n    address _collateral,\n    address _rwa,\n    address managerAdmin,\n    address pauser,\n    address _assetSender,\n    address _feeRecipient,\n    uint256 _minimumDepositAmount,\n    uint256 _minimumRedemptionAmount\n  ) {\n    if (_collateral == address(0)) {\n      revert CollateralCannotBeZero();\n    }\n    if (_rwa == address(0)) {\n      revert RWACannotBeZero();\n    }\n    if (_assetSender == address(0)) {\n      revert AssetSenderCannotBeZero();\n    }\n    if (_feeRecipient == address(0)) {\n      revert FeeRecipientCannotBeZero();\n    }\n\n    _grantRole(DEFAULT_ADMIN_ROLE, managerAdmin);\n    _grantRole(MANAGER_ADMIN, managerAdmin);\n    _grantRole(PAUSER_ADMIN, pauser);\n    _grantRole(PRICE_ID_SETTER_ROLE, managerAdmin);\n    _grantRole(keccak256(\"TIMESTAMP_SETTER_ROLE\"), managerAdmin);\n    \n    _setRoleAdmin(PAUSER_ADMIN, MANAGER_ADMIN);\n    _setRoleAdmin(PRICE_ID_SETTER_ROLE, MANAGER_ADMIN);\n    _setRoleAdmin(RELAYER_ROLE, MANAGER_ADMIN);\n\n    collateral = IERC20(_collateral);\n    rwa = IRWALike(_rwa);\n    feeRecipient = _feeRecipient;\n    assetSender = _assetSender;\n    minimumDepositAmount = _minimumDepositAmount;\n    minimumRedemptionAmount = _minimumRedemptionAmount;\n\n    decimalsMultiplier =\n      10 **\n        (IERC20Metadata(_rwa).decimals() -\n          IERC20Metadata(_collateral).decimals());\n  }\n\n  /*//////////////////////////////////////////////////////////////\n                  Subscription/Redemption Functions\n  //////////////////////////////////////////////////////////////*/\n\n  /**\n   * @notice Function used by users to request subscription to the fund\n   *\n   * @param amount The amount of collateral one wished to deposit\n   */\n  function requestSubscription(\n    uint256 amount\n  )\n    external\n    virtual\n    nonReentrant\n    ifNotPaused(subscriptionPaused)\n  {\n    if (amount < minimumDepositAmount) {\n      revert DepositTooSmall();\n    }\n\n    uint256 feesInCollateral = _getMintFees(amount);\n    uint256 depositAmountAfterFee = amount - feesInCollateral;\n\n    // Link the depositor to their deposit ID\n    bytes32 depositId = bytes32(subscriptionRequestCounter++);\n    depositIdToDepositor[depositId] = Depositor(\n      msg.sender,\n      depositAmountAfterFee,\n      0\n    );\n\n    if (feesInCollateral > 0) {\n      collateral.safeTransferFrom(msg.sender, feeRecipient, feesInCollateral);\n    }\n\n    collateral.safeTransferFrom(\n      msg.sender,\n      assetRecipient,\n      depositAmountAfterFee\n    );\n\n    emit MintRequested(\n      msg.sender,\n      depositId,\n      amount,\n      depositAmountAfterFee,\n      feesInCollateral\n    );\n  }\n\n  /**\n   * @notice Function used to claim tokens corresponding to a deposit request\n   *\n   * @param depositIds An array containing the deposit Ids one wishes to claim\n   *\n   * @dev Implicitly does all transfer checks present in underlying `rwa`\n   * @dev The priceId corresponding to a given depositId must be set prior to\n   *      claiming a mint\n   */\n  function claimMint(\n    bytes32[] calldata depositIds\n  ) external virtual nonReentrant ifNotPaused(subscriptionPaused) {\n    uint256 depositsSize = depositIds.length;\n    for (uint256 i = 0; i < depositsSize; ++i) {\n      _claimMint(depositIds[i]);\n    }\n  }\n\n  /**\n   * @notice Internal claim mint helper\n   *\n   * @dev This function can be overriden to implement custom claiming logic\n   */\n  function _claimMint(bytes32 depositId) internal virtual {\n    Depositor memory depositor = depositIdToDepositor[depositId];\n    // Revert if priceId is not set\n    if (depositor.priceId == 0) {\n      revert PriceIdNotSet();\n    }\n\n    uint256 price = pricer.getPrice(depositor.priceId);\n    uint256 rwaOwed = _getMintAmountForPrice(\n      depositor.amountDepositedMinusFees,\n      price\n    );\n\n    delete depositIdToDepositor[depositId];\n    rwa.mint(depositor.user, rwaOwed);\n\n    emit MintCompleted(\n      depositor.user,\n      depositId,\n      rwaOwed,\n      depositor.amountDepositedMinusFees,\n      price,\n      depositor.priceId\n    );\n  }\n\n  /**\n   * @notice Function used by users to request a redemption from the fund\n   *\n   * @param amount The amount (in units of `rwa`) that a user wishes to redeem\n   *               from the fund\n   */\n  function requestRedemption(\n    uint256 amount\n  ) external virtual nonReentrant ifNotPaused(redemptionPaused) {\n    if (amount < minimumRedemptionAmount) {\n      revert RedemptionTooSmall();\n    }\n    bytes32 redemptionId = bytes32(redemptionRequestCounter++);\n    redemptionIdToRedeemer[redemptionId] = Redeemer(msg.sender, amount, 0);\n\n    rwa.burnFrom(msg.sender, amount);\n\n    emit RedemptionRequested(msg.sender, redemptionId, amount);\n  }\n\n  /**\n   * @notice Function to claim collateral corresponding to a redemption request\n   *\n   * @param redemptionIds an Array of redemption Id's which ought to fulfilled\n   *\n   * @dev Implicitly does all checks present in underlying `rwa`\n   * @dev The price Id corresponding to a redemptionId must be set prior to\n   *      claiming a redemption\n   */\n  function claimRedemption(\n    bytes32[] calldata redemptionIds\n  ) external virtual nonReentrant ifNotPaused(redemptionPaused) {\n    uint256 fees;\n    uint256 redemptionsSize = redemptionIds.length;\n    // for (uint256 i = 0; i < redemptionsSize; ++i) {\n    //   Redeemer memory member = redemptionIdToRedeemer[redemptionIds[i]];\n    //   //_checkRestrictions(member.user);\n    //   if (member.priceId == 0) {\n    //     // Then the price for this redemption has not been set\n    //     revert PriceIdNotSet();\n    //   }\n\n    //   // Calculate collateral due and fees\n    //   uint256 price = pricer.getPrice(member.priceId);\n    //   uint256 collateralDue = _getRedemptionAmountForRwa(\n    //     member.amountRwaTokenBurned,\n    //     price\n    //   );\n    //   uint256 fee = _getRedemptionFees(collateralDue);\n    //   uint256 collateralDuePostFees = collateralDue - fee;\n    //   fees += fee;\n\n    //   delete redemptionIdToRedeemer[redemptionIds[i]];\n\n    //   collateral.safeTransferFrom(\n    //     assetSender,\n    //     member.user,\n    //     collateralDuePostFees\n    //   );\n\n    //   emit RedemptionCompleted(\n    //     member.user,\n    //     redemptionIds[i],\n    //     member.amountRwaTokenBurned,\n    //     collateralDuePostFees,\n    //     price\n    //   );\n    // }\n    // if (fees > 0) {\n    //   collateral.safeTransferFrom(assetSender, feeRecipient, fees);\n    // }\n  }\n\n  /*//////////////////////////////////////////////////////////////\n                         Relayer Functions\n  //////////////////////////////////////////////////////////////*/\n\n  /**\n   * @notice Adds a deposit proof to the contract\n   *\n   * @param txHash                The transaction hash of the deposit\n   * @param user                  The address of the user who made the deposit\n   * @param depositAmountAfterFee The amount of the deposit after fees\n   * @param feeAmount             The amount of the fees taken\n   * @param timestamp             The timestamp of the deposit\n   *\n   * @dev txHash is used as the depositId in storage\n   * @dev All amounts are in decimals of `collateral`\n   */\n  function addProof(\n    bytes32 txHash,\n    address user,\n    uint256 depositAmountAfterFee,\n    uint256 feeAmount,\n    uint256 timestamp\n  ) external override onlyRole(RELAYER_ROLE) {\n    if (depositIdToDepositor[txHash].user != address(0)) {\n      revert DepositProofAlreadyExists();\n    }\n    depositIdToDepositor[txHash] = Depositor(user, depositAmountAfterFee, 0);\n    emit DepositProofAdded(\n      txHash,\n      user,\n      depositAmountAfterFee,\n      feeAmount,\n      timestamp\n    );\n  }\n\n  /*//////////////////////////////////////////////////////////////\n                           PriceId Setters\n  //////////////////////////////////////////////////////////////*/\n\n  /**\n   * @notice Admin function to associate a depositId with a given Price Id\n   *\n   * @param depositIds an Array of deposit Ids to be associated\n   * @param priceIds   an Array of price Ids to be associated\n   *\n   * @dev Array size must match\n   */\n  function setPriceIdForDeposits(\n    bytes32[] calldata depositIds,\n    uint256[] calldata priceIds\n  ) external virtual onlyRole(PRICE_ID_SETTER_ROLE) {\n    uint256 depositsSize = depositIds.length;\n    if (depositsSize != priceIds.length) {\n      revert ArraySizeMismatch();\n    }\n    for (uint256 i = 0; i < depositsSize; ++i) {\n      if (depositIdToDepositor[depositIds[i]].user == address(0)) {\n        revert DepositorNull();\n      }\n      if (depositIdToDepositor[depositIds[i]].priceId != 0) {\n        revert PriceIdAlreadySet();\n      }\n      depositIdToDepositor[depositIds[i]].priceId = priceIds[i];\n      emit PriceIdSetForDeposit(depositIds[i], priceIds[i]);\n    }\n  }\n\n  /**\n   * @notice Admin function to associate redemptionId with a given priceId\n   *\n   * @param redemptionIds an Array of redemptionIds to associate\n   * @param priceIds  an Array of priceIds to associate\n   */\n  function setPriceIdForRedemptions(\n    bytes32[] calldata redemptionIds,\n    uint256[] calldata priceIds\n  ) external virtual onlyRole(PRICE_ID_SETTER_ROLE) {\n    uint256 redemptionsSize = redemptionIds.length;\n    if (redemptionsSize != priceIds.length) {\n      revert ArraySizeMismatch();\n    }\n    for (uint256 i = 0; i < redemptionsSize; ++i) {\n      if (redemptionIdToRedeemer[redemptionIds[i]].priceId != 0) {\n        revert PriceIdAlreadySet();\n      }\n      redemptionIdToRedeemer[redemptionIds[i]].priceId = priceIds[i];\n      emit PriceIdSetForRedemption(redemptionIds[i], priceIds[i]);\n    }\n  }\n\n  /*//////////////////////////////////////////////////////////////\n                           Admin Setters\n  //////////////////////////////////////////////////////////////*/\n\n  /**\n   * @notice Admin function to overwrite entries in the depoitIdToDepositor\n   *         mapping\n   *\n   * @param depositIdToOverwrite  The depositId of the entry we wish to\n   *                              overwrite\n   * @param user                  The user for the new entry\n   * @param depositAmountAfterFee The deposit value for the new entry\n   * @param priceId               The priceId to be associated with the new\n   *                              entry\n   */\n  function overwriteDepositor(\n    bytes32 depositIdToOverwrite,\n    address user,\n    uint256 depositAmountAfterFee,\n    uint256 priceId\n  ) external onlyRole(MANAGER_ADMIN) {\n    Depositor memory oldDepositor = depositIdToDepositor[depositIdToOverwrite];\n\n    depositIdToDepositor[depositIdToOverwrite] = Depositor(\n      user,\n      depositAmountAfterFee,\n      priceId\n    );\n\n    emit DepositorOverwritten(\n      depositIdToOverwrite,\n      oldDepositor.user,\n      user,\n      oldDepositor.priceId,\n      priceId,\n      oldDepositor.amountDepositedMinusFees,\n      depositAmountAfterFee\n    );\n  }\n\n  /**\n   * @notice Admin function to overwrite entries in the redemptionIdToRedeemer\n   *         mapping\n   *\n   * @param redemptionIdToOverwrite The redemptionId of the entry we wish to\n   *                                overwrite\n   * @param user                    The user for the new entry\n   * @param rwaTokenAmountBurned    The burn amount for the new entry\n   * @param priceId                 The priceID to be associated with the new\n   *                                entry\n   */\n  function overwriteRedeemer(\n    bytes32 redemptionIdToOverwrite,\n    address user,\n    uint256 rwaTokenAmountBurned,\n    uint256 priceId\n  ) external onlyRole(MANAGER_ADMIN) {\n    Redeemer memory oldRedeemer = redemptionIdToRedeemer[\n      redemptionIdToOverwrite\n    ];\n    redemptionIdToRedeemer[redemptionIdToOverwrite] = Redeemer(\n      user,\n      rwaTokenAmountBurned,\n      priceId\n    );\n    emit RedeemerOverwritten(\n      redemptionIdToOverwrite,\n      oldRedeemer.user,\n      user,\n      oldRedeemer.priceId,\n      priceId,\n      oldRedeemer.amountRwaTokenBurned,\n      rwaTokenAmountBurned\n    );\n  }\n\n  /**\n   * @notice Admin function to set the minimum amount to redeem\n   *\n   * @param _minimumRedemptionAmount The minimum amount required to submit a\n   *                                 redemption request\n   */\n  function setMinimumRedemptionAmount(\n    uint256 _minimumRedemptionAmount\n  ) external onlyRole(MANAGER_ADMIN) {\n    if (_minimumRedemptionAmount < BPS_DENOMINATOR) {\n      revert AmountTooSmall();\n    }\n    uint256 oldRedeemMinimum = minimumRedemptionAmount;\n    minimumRedemptionAmount = _minimumRedemptionAmount;\n    emit MinimumRedemptionAmountSet(oldRedeemMinimum, _minimumRedemptionAmount);\n  }\n\n  /**\n   * @notice Admin function to set the minimum amount required for a deposit\n   *\n   * @param minDepositAmount The minimum amount required to submit a deposit\n   *                         request\n   */\n  function setMinimumDepositAmount(\n    uint256 minDepositAmount\n  ) external onlyRole(MANAGER_ADMIN) {\n    if (minDepositAmount < BPS_DENOMINATOR) {\n      revert AmountTooSmall();\n    }\n    uint256 oldMinimumDepositAmount = minimumDepositAmount;\n    minimumDepositAmount = minDepositAmount;\n    emit MinimumDepositAmountSet(oldMinimumDepositAmount, minDepositAmount);\n  }\n\n  /**\n   * @notice Admin function to set the mint fee\n   *\n   * @param _mintFee The new mint fee specified in basis points\n   *\n   * @dev The maximum fee that can be set is 10_000 bps, or 100%\n   */\n  function setMintFee(uint256 _mintFee) external onlyRole(MANAGER_ADMIN) {\n    if (_mintFee > BPS_DENOMINATOR) {\n      revert FeeTooLarge();\n    }\n    uint256 oldMintFee = mintFee;\n    mintFee = _mintFee;\n    emit MintFeeSet(oldMintFee, _mintFee);\n  }\n\n  /**\n   * @notice Admin function to set the redeem fee\n   *\n   * @param _redemptionFee The new redeem fee specified in basis points\n   *\n   * @dev The maximum fee that can be set is 10_000 bps, or 100%\n   */\n  function setRedemptionFee(\n    uint256 _redemptionFee\n  ) external onlyRole(MANAGER_ADMIN) {\n    if (_redemptionFee > BPS_DENOMINATOR) {\n      revert FeeTooLarge();\n    }\n    uint256 oldRedeemFee = redemptionFee;\n    redemptionFee = _redemptionFee;\n    emit RedemptionFeeSet(oldRedeemFee, _redemptionFee);\n  }\n\n  /**\n   * @notice Admin function to set the address of the Pricer contract\n   *\n   * @param newPricer The address of the new pricer contract\n   */\n  function setPricer(address newPricer) external onlyRole(MANAGER_ADMIN) {\n    address oldPricer = address(pricer);\n    pricer = IPricerReader(newPricer);\n    emit NewPricerSet(oldPricer, newPricer);\n  }\n\n  /**\n   * @notice Admin function to set the address of `feeRecipient`\n   *\n   * @param newFeeRecipient The address of the new `feeRecipient`\n   */\n  function setFeeRecipient(\n    address newFeeRecipient\n  ) external onlyRole(MANAGER_ADMIN) {\n    address oldFeeRecipient = feeRecipient;\n    feeRecipient = newFeeRecipient;\n    emit FeeRecipientSet(oldFeeRecipient, feeRecipient);\n  }\n\n  /**\n   * @notice Admin function to set the address of `assetSender`\n   *\n   * @param newAssetSender The address of the new `assetSender`\n   */\n  function setAssetSender(\n    address newAssetSender\n  ) external onlyRole(MANAGER_ADMIN) {\n    address oldAssetSender = assetSender;\n    assetSender = newAssetSender;\n    emit AssetSenderSet(oldAssetSender, newAssetSender);\n  }\n\n  /*//////////////////////////////////////////////////////////////\n                            Pause Utils\n  //////////////////////////////////////////////////////////////*/\n\n  /**\n   * @notice Modifier to check if a feature is paused\n   *\n   * @param feature The feature to check if paused\n   */\n  modifier ifNotPaused(bool feature) {\n    if (feature) {\n      revert FeaturePaused();\n    }\n    _;\n  }\n\n  /**\n   * @notice Function to pause subscription to RWAHub\n   */\n  function pauseSubscription() external onlyRole(PAUSER_ADMIN) {\n    subscriptionPaused = true;\n    emit SubscriptionPaused(msg.sender);\n  }\n\n  /**\n   * @notice Function to pause redemptions to RWAHub\n   */\n  function pauseRedemption() external onlyRole(PAUSER_ADMIN) {\n    redemptionPaused = true;\n    emit RedemptionPaused(msg.sender);\n  }\n\n  /**\n   * @notice Function to unpause subscriptions to RWAHub\n   */\n  function unpauseSubscription() external onlyRole(MANAGER_ADMIN) {\n    subscriptionPaused = false;\n    emit SubscriptionUnpaused(msg.sender);\n  }\n\n  /**\n   * @notice Function to unpause redemptions to RWAHub\n   */\n  function unpauseRedemption() external onlyRole(MANAGER_ADMIN) {\n    redemptionPaused = false;\n    emit RedemptionUnpaused(msg.sender);\n  }\n\n  /*//////////////////////////////////////////////////////////////\n                      Check Restriction Utils\n  //////////////////////////////////////////////////////////////*/\n\n  /**\n   * @notice Modifier to check restrictions status of an account\n   *\n   * @param account The account to check\n   */\n  /*modifier checkRestrictions(address account) {\n    _checkRestrictions(account);\n    _;\n  }*/\n\n  /**\n   * @notice internal function to check restriction status\n   *         of an address\n   *\n   * @param account The account to check restriction status for\n   *\n   * @dev This function is virtual to be overridden by child contract\n   *      to check restrictions on a more granular level\n   */\n  //function _checkRestrictions(address account) internal view virtual;\n\n  /*//////////////////////////////////////////////////////////////\n                           Math Utils\n  //////////////////////////////////////////////////////////////*/\n\n  /**\n   * @notice Given amount of `collateral`, returns how much in fees\n   *         are owed\n   *\n   *\n   * @param collateralAmount Amount `collateral` to calculate fees\n   *                         (in decimals of `collateral`)\n   */\n  function _getMintFees(\n    uint256 collateralAmount\n  ) internal view returns (uint256) {\n    return (collateralAmount * mintFee) / BPS_DENOMINATOR;\n  }\n\n  /**\n   * @notice Given amount of `collateral`, returns how much in fees\n   *         are owed\n   *\n   * @param collateralAmount Amount of `collateral` to calculate fees\n   *                         (in decimals of `collateral`)\n   */\n  function _getRedemptionFees(\n    uint256 collateralAmount\n  ) internal view returns (uint256) {\n    return (collateralAmount * redemptionFee) / BPS_DENOMINATOR;\n  }\n\n  /**\n   * @notice Given a deposit amount and priceId, returns the amount\n   *         of `rwa` due\n   *\n   * @param depositAmt The amount deposited in units of `collateral`\n   * @param price      The price associated with this deposit\n   */\n  function _getMintAmountForPrice(\n    uint256 depositAmt,\n    uint256 price\n  ) internal view returns (uint256 rwaAmountOut) {\n    uint256 amountE36 = _scaleUp(depositAmt) * 1e18;\n    // Will revert with div by 0 if price not defined for a priceId\n    rwaAmountOut = amountE36 / price;\n  }\n\n  /**\n   * @notice Given a redemption amount and a priceId, returns the amount\n   *         of `collateral` due\n   *\n   * @param rwaTokenAmountBurned The amount of `rwa` burned for a redemption\n   * @param price                The price associated with this redemption\n   */\n  function _getRedemptionAmountForRwa(\n    uint256 rwaTokenAmountBurned,\n    uint256 price\n  ) internal view returns (uint256 collateralOwed) {\n    uint256 amountE36 = rwaTokenAmountBurned * price;\n    collateralOwed = _scaleDown(amountE36 / 1e18);\n  }\n\n  /**\n   * @notice Scale provided amount up by `decimalsMultiplier`\n   *\n   * @dev This helper is used for converting the collateral's decimals\n   *      representation to the RWA amount decimals representation.\n   */\n  function _scaleUp(uint256 amount) internal view returns (uint256) {\n    return amount * decimalsMultiplier;\n  }\n\n  /**\n   * @notice Scale provided amount down by `decimalsMultiplier`\n   *\n   * @dev This helper is used for converting `rwa`'s decimal\n   *      representation to the `collateral`'s decimal representation\n   */\n  function _scaleDown(uint256 amount) internal view returns (uint256) {\n    return amount / decimalsMultiplier;\n  }\n}\n"},"contracts/interfaces/IPricerReader.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\ninterface IPricerReader {\n  /**\n   * @notice Gets the latest price of the asset\n   *\n   * @return uint256 The latest price of the asset\n   */\n  function getLatestPrice() external view returns (uint256);\n\n  /**\n   * @notice Gets the price of the asset at a specific priceId\n   *\n   * @param priceId The priceId at which to get the price\n   *\n   * @return uint256 The price of the asset with the given priceId\n   */\n  function getPrice(uint256 priceId) external view returns (uint256);\n}\n"},"contracts/interfaces/IRWALike.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\n// This interface is not inherited directly by RWA, instead, it is a\n// subset of functions provided by all RWA tokens that the RWA Hub\n// Client uses.\nimport \"contracts/external/openzeppelin/contracts/token/IERC20.sol\";\n\ninterface IRWALike is IERC20 {\n  function mint(address to, uint256 amount) external;\n\n  function burn(uint256 amount) external;\n\n  function burnFrom(address from, uint256 amount) external;\n}\n"},"contracts/external/openzeppelin/contracts/token/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n  /**\n   * @dev Returns the amount of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the amount of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves `amount` tokens from the caller's account to `to`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address to, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(address owner, address spender)\n    external\n    view\n    returns (uint256);\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Moves `amount` tokens from `from` to `to` using the\n   * allowance mechanism. `amount` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 amount\n  ) external returns (bool);\n\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"contracts/external/openzeppelin/contracts/token/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"contracts/external/openzeppelin/contracts/token/IERC20.sol\";\nimport \"contracts/external/openzeppelin/contracts/utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  using Address for address;\n\n  function safeTransfer(\n    IERC20 token,\n    address to,\n    uint256 value\n  ) internal {\n    _callOptionalReturn(\n      token,\n      abi.encodeWithSelector(token.transfer.selector, to, value)\n    );\n  }\n\n  function safeTransferFrom(\n    IERC20 token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    _callOptionalReturn(\n      token,\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n    );\n  }\n\n  /**\n   * @dev Deprecated. This function has issues similar to the ones found in\n   * {IERC20-approve}, and its usage is discouraged.\n   *\n   * Whenever possible, use {safeIncreaseAllowance} and\n   * {safeDecreaseAllowance} instead.\n   */\n  function safeApprove(\n    IERC20 token,\n    address spender,\n    uint256 value\n  ) internal {\n    // safeApprove should only be called when setting an initial allowance,\n    // or when resetting it to zero. To increase and decrease it, use\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n    require(\n      (value == 0) || (token.allowance(address(this), spender) == 0),\n      \"SafeERC20: approve from non-zero to non-zero allowance\"\n    );\n    _callOptionalReturn(\n      token,\n      abi.encodeWithSelector(token.approve.selector, spender, value)\n    );\n  }\n\n  function safeIncreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  ) internal {\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\n    _callOptionalReturn(\n      token,\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n    );\n  }\n\n  function safeDecreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  ) internal {\n    unchecked {\n      uint256 oldAllowance = token.allowance(address(this), spender);\n      require(\n        oldAllowance >= value,\n        \"SafeERC20: decreased allowance below zero\"\n      );\n      uint256 newAllowance = oldAllowance - value;\n      _callOptionalReturn(\n        token,\n        abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n      );\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   */\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n    // the target address contains contract code and also asserts for success in the low-level call.\n\n    bytes memory returndata =\n      address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n    if (returndata.length > 0) {\n      // Return data is optional\n      require(\n        abi.decode(returndata, (bool)),\n        \"SafeERC20: ERC20 operation did not succeed\"\n      );\n    }\n  }\n}\n"},"contracts/interfaces/IRWAHub.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\ninterface IRWAHub {\n  // Struct to contain the deposit information for a given depositId\n  struct Depositor {\n    address user;\n    uint256 amountDepositedMinusFees;\n    uint256 priceId;\n  }\n\n  // Struc to contain withdrawal infromation for a given redemptionId\n  struct Redeemer {\n    address user;\n    uint256 amountRwaTokenBurned;\n    uint256 priceId;\n  }\n\n  function requestSubscription(uint256 amount) external;\n\n  function claimMint(bytes32[] calldata depositIds) external;\n\n  function requestRedemption(uint256 amount) external;\n\n  function claimRedemption(bytes32[] calldata redemptionIds) external;\n\n  function addProof(\n    bytes32 txHash,\n    address user,\n    uint256 depositAmountAfterFee,\n    uint256 feeAmount,\n    uint256 timestamp\n  ) external;\n\n  function setPriceIdForDeposits(\n    bytes32[] calldata depositIds,\n    uint256[] calldata priceIds\n  ) external;\n\n  function setPriceIdForRedemptions(\n    bytes32[] calldata redemptionIds,\n    uint256[] calldata priceIds\n  ) external;\n\n  function setPricer(address newPricer) external;\n\n  function overwriteDepositor(\n    bytes32 depositIdToOverride,\n    address user,\n    uint256 depositAmountAfterFee,\n    uint256 priceId\n  ) external;\n\n  function overwriteRedeemer(\n    bytes32 redemptionIdToOverride,\n    address user,\n    uint256 rwaTokenAmountBurned,\n    uint256 priceId\n  ) external;\n\n  /**\n   * @notice Event emitted when fee recipient is set\n   *\n   * @param oldFeeRecipient Old fee recipient\n   * @param newFeeRecipient New fee recipient\n   */\n  event FeeRecipientSet(address oldFeeRecipient, address newFeeRecipient);\n\n  /**\n   * @notice Event emitted when the assetSender is changed\n   *\n   * @param oldAssetSender The address of the old assetSender\n   * @param newAssetSender The address of the new assetSender\n   */\n  event AssetSenderSet(address oldAssetSender, address newAssetSender);\n\n  /**\n   * @notice Event emitted when minimum deposit amount is set\n   *\n   * @param oldMinimum Old minimum\n   * @param newMinimum New minimum\n   *\n   * @dev See inheriting contract for decimals representation\n   */\n  event MinimumDepositAmountSet(uint256 oldMinimum, uint256 newMinimum);\n\n  /**\n   * @notice Event emitted when a new redeem minimum is set.\n   *         All units are in 1e18\n   *\n   * @param oldRedemptionMin The old redeem minimum value\n   * @param newRedemptionMin The new redeem minimum value\n   */\n  event MinimumRedemptionAmountSet(\n    uint256 oldRedemptionMin,\n    uint256 newRedemptionMin\n  );\n\n  /**\n   * @notice Event emitted when mint fee is set\n   *\n   * @param oldFee Old fee\n   * @param newFee New fee\n   *\n   * @dev See inheriting contract for decimals representation\n   */\n  event MintFeeSet(uint256 oldFee, uint256 newFee);\n\n  /**\n   * @notice Event emitted when redeem fee is set\n   *\n   * @param oldFee Old fee\n   * @param newFee New fee\n   *\n   * @dev see inheriting contract for decimal representation\n   */\n  event RedemptionFeeSet(uint256 oldFee, uint256 newFee);\n\n  /**\n   * @notice Event emitted when redemption request is submitted\n   *\n   * @param user         The user submitting the redemption request\n   * @param redemptionId The id corresponding to a given redemption\n   * @param rwaAmountIn  The amount of cash being burned\n   */\n  event RedemptionRequested(\n    address indexed user,\n    bytes32 indexed redemptionId,\n    uint256 rwaAmountIn\n  );\n\n  /**\n   * @notice Event emitted when a mint request is submitted\n   *\n   * @param user                      The user requesting to mint\n   * @param depositId                 The depositId of the request\n   * @param collateralAmountDeposited The total amount deposited\n   * @param depositAmountAfterFee     The value deposited - fee\n   * @param feeAmount                 The fee amount taken\n   *                                  (units of collateral)\n   */\n  event MintRequested(\n    address indexed user,\n    bytes32 indexed depositId,\n    uint256 collateralAmountDeposited,\n    uint256 depositAmountAfterFee,\n    uint256 feeAmount\n  );\n\n  /**\n   * @notice Event emitted when a redemption request is completed\n   *\n   * @param user                     The address of the user getting the funds\n   * @param redemptionId             The id corresponding to a given redemption\n   *                                 requested\n   * @param rwaAmountRequested       Amount of RWA originally requested by the user\n   * @param collateralAmountReturned Amount of collateral received by the user\n   * @param price                    The price at which the redemption was\n   *                                 serviced at\n   */\n  event RedemptionCompleted(\n    address indexed user,\n    bytes32 indexed redemptionId,\n    uint256 rwaAmountRequested,\n    uint256 collateralAmountReturned,\n    uint256 price\n  );\n\n  /**\n   * @notice Event emitted when a Mint request is completed\n   *\n   * @param user                      The address of the user getting the funds\n   * @param depositId                 The depositId of the mint request\n   * @param rwaAmountOut              The amount of RWA token minted to the\n   *                                  user\n   * @param collateralAmountDeposited The amount of collateral deposited\n   * @param price                     The price set for the given\n   *                                  deposit id\n   * @param priceId                   The priceId used to determine price\n   */\n  event MintCompleted(\n    address indexed user,\n    bytes32 indexed depositId,\n    uint256 rwaAmountOut,\n    uint256 collateralAmountDeposited,\n    uint256 price,\n    uint256 priceId\n  );\n\n  /**\n   * @notice Event emitted when a deposit has its corresponding priceId set\n   *\n   * @param depositIdSet The Deposit Id for which the price Id is being set\n   * @param priceIdSet   The price Id being associate with a deposit Id\n   */\n  event PriceIdSetForDeposit(\n    bytes32 indexed depositIdSet,\n    uint256 indexed priceIdSet\n  );\n\n  /**\n   * @notice Event Emitted when a redemption has its corresponding priceId set\n   *\n   * @param redemptionIdSet The Redemption Id for which the price Id is being\n   *                        set\n   * @param priceIdSet      The Price Id being associated with a redemption Id\n   */\n  event PriceIdSetForRedemption(\n    bytes32 indexed redemptionIdSet,\n    uint256 indexed priceIdSet\n  );\n\n  /**\n   * @notice Event emitted when a new Pricer contract is set\n   *\n   * @param oldPricer The address of the old pricer contract\n   * @param newPricer The address of the new pricer contract\n   */\n  event NewPricerSet(address oldPricer, address newPricer);\n\n  /**\n   * @notice Event emitted when deposit proof has been added\n   *\n   * @param txHash                Tx hash of the deposit\n   * @param user                  Address of the user who made the deposit\n   * @param depositAmountAfterFee Amount of the deposit after fees\n   * @param feeAmount             Amount of fees taken\n   * @param timestamp             Timestamp of the deposit\n   */\n  event DepositProofAdded(\n    bytes32 indexed txHash,\n    address indexed user,\n    uint256 depositAmountAfterFee,\n    uint256 feeAmount,\n    uint256 timestamp\n  );\n\n  /**\n   * @notice Event emitted when subscriptions are paused\n   *\n   * @param caller Address which initiated the pause\n   */\n  event SubscriptionPaused(address caller);\n\n  /**\n   * @notice Event emitted when redemptions are paused\n   *\n   * @param caller Address which initiated the pause\n   */\n  event RedemptionPaused(address caller);\n\n  /**\n   * @notice Event emitted when subscriptions are unpaused\n   *\n   * @param caller Address which initiated the unpause\n   */\n  event SubscriptionUnpaused(address caller);\n\n  /**\n   * @notice Event emitted when redemptions are unpaused\n   *\n   * @param caller Address which initiated the unpause\n   */\n  event RedemptionUnpaused(address caller);\n\n  event DepositorOverwritten(\n    bytes32 indexed depositId,\n    address oldDepositor,\n    address newDepositor,\n    uint256 oldPriceId,\n    uint256 newPriceId,\n    uint256 oldDepositAmount,\n    uint256 newDepositAmount\n  );\n\n  event RedeemerOverwritten(\n    bytes32 indexed redemptionId,\n    address oldRedeemer,\n    address newRedeemer,\n    uint256 oldPriceId,\n    uint256 newPriceId,\n    uint256 oldRWATokenAmountBurned,\n    uint256 newRWATokenAmountBurned\n  );\n\n  /// ERRORS ///\n  error PriceIdNotSet();\n  error ArraySizeMismatch();\n  error DepositTooSmall();\n  error RedemptionTooSmall();\n  error TxnAlreadyValidated();\n  error CollateralCannotBeZero();\n  error RWACannotBeZero();\n  error AssetSenderCannotBeZero();\n  error FeeRecipientCannotBeZero();\n  error FeeTooLarge();\n  error AmountTooSmall();\n  error DepositorNull();\n  error RedeemerNull();\n  error DepositProofAlreadyExists();\n  error FeaturePaused();\n  error PriceIdAlreadySet();\n}\n"},"contracts/external/openzeppelin/contracts/token/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"contracts/external/openzeppelin/contracts/token/IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n  /**\n   * @dev Returns the name of the token.\n   */\n  function name() external view returns (string memory);\n\n  /**\n   * @dev Returns the symbol of the token.\n   */\n  function symbol() external view returns (string memory);\n\n  /**\n   * @dev Returns the decimals places of the token.\n   */\n  function decimals() external view returns (uint8);\n}\n"},"contracts/external/openzeppelin/contracts/access/AccessControlEnumerable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"contracts/external/openzeppelin/contracts/access/IAccessControlEnumerable.sol\";\nimport \"contracts/external/openzeppelin/contracts/access/AccessControl.sol\";\nimport \"contracts/external/openzeppelin/contracts/utils/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is\n  IAccessControlEnumerable,\n  AccessControl\n{\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    override\n    returns (bool)\n  {\n    return\n      interfaceId == type(IAccessControlEnumerable).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(bytes32 role, uint256 index)\n    public\n    view\n    virtual\n    override\n    returns (address)\n  {\n    return _roleMembers[role].at(index);\n  }\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(bytes32 role)\n    public\n    view\n    virtual\n    override\n    returns (uint256)\n  {\n    return _roleMembers[role].length();\n  }\n\n  /**\n   * @dev Overload {_grantRole} to track enumerable memberships\n   */\n  function _grantRole(bytes32 role, address account) internal virtual override {\n    super._grantRole(role, account);\n    _roleMembers[role].add(account);\n  }\n\n  /**\n   * @dev Overload {_revokeRole} to track enumerable memberships\n   */\n  function _revokeRole(bytes32 role, address account)\n    internal\n    virtual\n    override\n  {\n    super._revokeRole(role, account);\n    _roleMembers[role].remove(account);\n  }\n}\n"},"contracts/external/openzeppelin/contracts/security/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n  // Booleans are more expensive than uint256 or any type that takes up a full\n  // word because each write operation emits an extra SLOAD to first read the\n  // slot's contents, replace the bits taken up by the boolean, and then write\n  // back. This is the compiler's defense against contract upgrades and\n  // pointer aliasing, and it cannot be disabled.\n\n  // The values being non-zero value makes deployment a bit more expensive,\n  // but in exchange the refund on every call to nonReentrant will be lower in\n  // amount. Since refunds are capped to a percentage of the total\n  // transaction's gas, it is best to keep them low in cases like this one, to\n  // increase the likelihood of the full refund coming into effect.\n  uint256 private constant _NOT_ENTERED = 1;\n  uint256 private constant _ENTERED = 2;\n\n  uint256 private _status;\n\n  constructor() {\n    _status = _NOT_ENTERED;\n  }\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * Calling a `nonReentrant` function from another `nonReentrant`\n   * function is not supported. It is possible to prevent this from happening\n   * by making the `nonReentrant` function external, and making it call a\n   * `private` function that does the actual work.\n   */\n  modifier nonReentrant() {\n    // On the first call to nonReentrant, _notEntered will be true\n    require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n    // Any calls to nonReentrant after this point will fail\n    _status = _ENTERED;\n\n    _;\n\n    // By storing the original value once again, a refund is triggered (see\n    // https://eips.ethereum.org/EIPS/eip-2200)\n    _status = _NOT_ENTERED;\n  }\n}\n"},"contracts/external/openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n  /**\n   * @dev Returns true if `account` is a contract.\n   *\n   * [IMPORTANT]\n   * ====\n   * It is unsafe to assume that an address for which this function returns\n   * false is an externally-owned account (EOA) and not a contract.\n   *\n   * Among others, `isContract` will return false for the following\n   * types of addresses:\n   *\n   *  - an externally-owned account\n   *  - a contract in construction\n   *  - an address where a contract will be created\n   *  - an address where a contract lived, but was destroyed\n   * ====\n   *\n   * [IMPORTANT]\n   * ====\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\n   *\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n   * constructor.\n   * ====\n   */\n  function isContract(address account) internal view returns (bool) {\n    // This method relies on extcodesize/address.code.length, which returns 0\n    // for contracts in construction, since the code is only stored at the end\n    // of the constructor execution.\n\n    return account.code.length > 0;\n  }\n\n  /**\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n   * `recipient`, forwarding all available gas and reverting on errors.\n   *\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\n   * imposed by `transfer`, making them unable to receive funds via\n   * `transfer`. {sendValue} removes this limitation.\n   *\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n   *\n   * IMPORTANT: because control is transferred to `recipient`, care must be\n   * taken to not create reentrancy vulnerabilities. Consider using\n   * {ReentrancyGuard} or the\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n   */\n  function sendValue(address payable recipient, uint256 amount) internal {\n    require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n    (bool success, ) = recipient.call{value: amount}(\"\");\n    require(\n      success,\n      \"Address: unable to send value, recipient may have reverted\"\n    );\n  }\n\n  /**\n   * @dev Performs a Solidity function call using a low level `call`. A\n   * plain `call` is an unsafe replacement for a function call: use this\n   * function instead.\n   *\n   * If `target` reverts with a revert reason, it is bubbled up by this\n   * function (like regular Solidity function calls).\n   *\n   * Returns the raw returned data. To convert to the expected return value,\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n   *\n   * Requirements:\n   *\n   * - `target` must be a contract.\n   * - calling `target` with `data` must not revert.\n   *\n   * _Available since v3.1._\n   */\n  function functionCall(address target, bytes memory data)\n    internal\n    returns (bytes memory)\n  {\n    return functionCall(target, data, \"Address: low-level call failed\");\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n   * `errorMessage` as a fallback revert reason when `target` reverts.\n   *\n   * _Available since v3.1._\n   */\n  function functionCall(\n    address target,\n    bytes memory data,\n    string memory errorMessage\n  ) internal returns (bytes memory) {\n    return functionCallWithValue(target, data, 0, errorMessage);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but also transferring `value` wei to `target`.\n   *\n   * Requirements:\n   *\n   * - the calling contract must have an ETH balance of at least `value`.\n   * - the called Solidity function must be `payable`.\n   *\n   * _Available since v3.1._\n   */\n  function functionCallWithValue(\n    address target,\n    bytes memory data,\n    uint256 value\n  ) internal returns (bytes memory) {\n    return\n      functionCallWithValue(\n        target,\n        data,\n        value,\n        \"Address: low-level call with value failed\"\n      );\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\n   *\n   * _Available since v3.1._\n   */\n  function functionCallWithValue(\n    address target,\n    bytes memory data,\n    uint256 value,\n    string memory errorMessage\n  ) internal returns (bytes memory) {\n    require(\n      address(this).balance >= value,\n      \"Address: insufficient balance for call\"\n    );\n    require(isContract(target), \"Address: call to non-contract\");\n\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\n    return verifyCallResult(success, returndata, errorMessage);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a static call.\n   *\n   * _Available since v3.3._\n   */\n  function functionStaticCall(address target, bytes memory data)\n    internal\n    view\n    returns (bytes memory)\n  {\n    return\n      functionStaticCall(target, data, \"Address: low-level static call failed\");\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n   * but performing a static call.\n   *\n   * _Available since v3.3._\n   */\n  function functionStaticCall(\n    address target,\n    bytes memory data,\n    string memory errorMessage\n  ) internal view returns (bytes memory) {\n    require(isContract(target), \"Address: static call to non-contract\");\n\n    (bool success, bytes memory returndata) = target.staticcall(data);\n    return verifyCallResult(success, returndata, errorMessage);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a delegate call.\n   *\n   * _Available since v3.4._\n   */\n  function functionDelegateCall(address target, bytes memory data)\n    internal\n    returns (bytes memory)\n  {\n    return\n      functionDelegateCall(\n        target,\n        data,\n        \"Address: low-level delegate call failed\"\n      );\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n   * but performing a delegate call.\n   *\n   * _Available since v3.4._\n   */\n  function functionDelegateCall(\n    address target,\n    bytes memory data,\n    string memory errorMessage\n  ) internal returns (bytes memory) {\n    require(isContract(target), \"Address: delegate call to non-contract\");\n\n    (bool success, bytes memory returndata) = target.delegatecall(data);\n    return verifyCallResult(success, returndata, errorMessage);\n  }\n\n  /**\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n   * revert reason using the provided one.\n   *\n   * _Available since v4.3._\n   */\n  function verifyCallResult(\n    bool success,\n    bytes memory returndata,\n    string memory errorMessage\n  ) internal pure returns (bytes memory) {\n    if (success) {\n      return returndata;\n    } else {\n      // Look for revert reason and bubble it up if present\n      if (returndata.length > 0) {\n        // The easiest way to bubble the revert reason is using memory via assembly\n\n        assembly {\n          let returndata_size := mload(returndata)\n          revert(add(32, returndata), returndata_size)\n        }\n      } else {\n        revert(errorMessage);\n      }\n    }\n  }\n}\n"},"contracts/external/openzeppelin/contracts/access/IAccessControlEnumerable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"contracts/external/openzeppelin/contracts/access/IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(bytes32 role, uint256 index)\n    external\n    view\n    returns (address);\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"},"contracts/external/openzeppelin/contracts/access/AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"contracts/external/openzeppelin/contracts/access/IAccessControl.sol\";\nimport \"contracts/external/openzeppelin/contracts/utils/Context.sol\";\nimport \"contracts/external/openzeppelin/contracts/utils/Strings.sol\";\nimport \"contracts/external/openzeppelin/contracts/utils/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n  struct RoleData {\n    mapping(address => bool) members;\n    bytes32 adminRole;\n  }\n\n  mapping(bytes32 => RoleData) private _roles;\n\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n  /**\n   * @dev Modifier that checks that an account has a specific role. Reverts\n   * with a standardized message including the required role.\n   *\n   * The format of the revert reason is given by the following regular expression:\n   *\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n   *\n   * _Available since v4.1._\n   */\n  modifier onlyRole(bytes32 role) {\n    _checkRole(role, _msgSender());\n    _;\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    override\n    returns (bool)\n  {\n    return\n      interfaceId == type(IAccessControl).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(bytes32 role, address account)\n    public\n    view\n    virtual\n    override\n    returns (bool)\n  {\n    return _roles[role].members[account];\n  }\n\n  /**\n   * @dev Revert with a standard message if `account` is missing `role`.\n   *\n   * The format of the revert reason is given by the following regular expression:\n   *\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n   */\n  function _checkRole(bytes32 role, address account) internal view virtual {\n    if (!hasRole(role, account)) {\n      revert(\n        string(\n          abi.encodePacked(\n            \"AccessControl: account \",\n            Strings.toHexString(uint160(account), 20),\n            \" is missing role \",\n            Strings.toHexString(uint256(role), 32)\n          )\n        )\n      );\n    }\n  }\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role)\n    public\n    view\n    virtual\n    override\n    returns (bytes32)\n  {\n    return _roles[role].adminRole;\n  }\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function grantRole(bytes32 role, address account)\n    public\n    virtual\n    override\n    onlyRole(getRoleAdmin(role))\n  {\n    _grantRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function revokeRole(bytes32 role, address account)\n    public\n    virtual\n    override\n    onlyRole(getRoleAdmin(role))\n  {\n    _revokeRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `account`.\n   */\n  function renounceRole(bytes32 role, address account) public virtual override {\n    require(\n      account == _msgSender(),\n      \"AccessControl: can only renounce roles for self\"\n    );\n\n    _revokeRole(role, account);\n  }\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event. Note that unlike {grantRole}, this function doesn't perform any\n   * checks on the calling account.\n   *\n   * [WARNING]\n   * ====\n   * This function should only be called from the constructor when setting\n   * up the initial roles for the system.\n   *\n   * Using this function in any other way is effectively circumventing the admin\n   * system imposed by {AccessControl}.\n   * ====\n   *\n   * NOTE: This function is deprecated in favor of {_grantRole}.\n   */\n  function _setupRole(bytes32 role, address account) internal virtual {\n    _grantRole(role, account);\n  }\n\n  /**\n   * @dev Sets `adminRole` as ``role``'s admin role.\n   *\n   * Emits a {RoleAdminChanged} event.\n   */\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n    bytes32 previousAdminRole = getRoleAdmin(role);\n    _roles[role].adminRole = adminRole;\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\n  }\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * Internal function without access restriction.\n   */\n  function _grantRole(bytes32 role, address account) internal virtual {\n    if (!hasRole(role, account)) {\n      _roles[role].members[account] = true;\n      emit RoleGranted(role, account, _msgSender());\n    }\n  }\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * Internal function without access restriction.\n   */\n  function _revokeRole(bytes32 role, address account) internal virtual {\n    if (hasRole(role, account)) {\n      _roles[role].members[account] = false;\n      emit RoleRevoked(role, account, _msgSender());\n    }\n  }\n}\n"},"contracts/external/openzeppelin/contracts/utils/EnumerableSet.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n  // To implement this library for multiple types with as little code\n  // repetition as possible, we write it in terms of a generic Set type with\n  // bytes32 values.\n  // The Set implementation uses private functions, and user-facing\n  // implementations (such as AddressSet) are just wrappers around the\n  // underlying Set.\n  // This means that we can only create new EnumerableSets for types that fit\n  // in bytes32.\n\n  struct Set {\n    // Storage of set values\n    bytes32[] _values;\n    // Position of the value in the `values` array, plus 1 because index 0\n    // means a value is not in the set.\n    mapping(bytes32 => uint256) _indexes;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function _add(Set storage set, bytes32 value) private returns (bool) {\n    if (!_contains(set, value)) {\n      set._values.push(value);\n      // The value is stored at length-1, but we add 1 to all indexes\n      // and use 0 as a sentinel value\n      set._indexes[value] = set._values.length;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\n    // We read and store the value's index to prevent multiple reads from the same storage slot\n    uint256 valueIndex = set._indexes[value];\n\n    if (valueIndex != 0) {\n      // Equivalent to contains(set, value)\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\n      // This modifies the order of the array, as noted in {at}.\n\n      uint256 toDeleteIndex = valueIndex - 1;\n      uint256 lastIndex = set._values.length - 1;\n\n      if (lastIndex != toDeleteIndex) {\n        bytes32 lastvalue = set._values[lastIndex];\n\n        // Move the last value to the index where the value to delete is\n        set._values[toDeleteIndex] = lastvalue;\n        // Update the index for the moved value\n        set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n      }\n\n      // Delete the slot where the moved value was stored\n      set._values.pop();\n\n      // Delete the index for the deleted slot\n      delete set._indexes[value];\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function _contains(Set storage set, bytes32 value)\n    private\n    view\n    returns (bool)\n  {\n    return set._indexes[value] != 0;\n  }\n\n  /**\n   * @dev Returns the number of values on the set. O(1).\n   */\n  function _length(Set storage set) private view returns (uint256) {\n    return set._values.length;\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\n    return set._values[index];\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function _values(Set storage set) private view returns (bytes32[] memory) {\n    return set._values;\n  }\n\n  // Bytes32Set\n\n  struct Bytes32Set {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n    return _add(set._inner, value);\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(Bytes32Set storage set, bytes32 value)\n    internal\n    returns (bool)\n  {\n    return _remove(set._inner, value);\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(Bytes32Set storage set, bytes32 value)\n    internal\n    view\n    returns (bool)\n  {\n    return _contains(set._inner, value);\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(Bytes32Set storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(Bytes32Set storage set, uint256 index)\n    internal\n    view\n    returns (bytes32)\n  {\n    return _at(set._inner, index);\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(Bytes32Set storage set)\n    internal\n    view\n    returns (bytes32[] memory)\n  {\n    return _values(set._inner);\n  }\n\n  // AddressSet\n\n  struct AddressSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(AddressSet storage set, address value) internal returns (bool) {\n    return _add(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(AddressSet storage set, address value)\n    internal\n    returns (bool)\n  {\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(AddressSet storage set, address value)\n    internal\n    view\n    returns (bool)\n  {\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(AddressSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(AddressSet storage set, uint256 index)\n    internal\n    view\n    returns (address)\n  {\n    return address(uint160(uint256(_at(set._inner, index))));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(AddressSet storage set)\n    internal\n    view\n    returns (address[] memory)\n  {\n    bytes32[] memory store = _values(set._inner);\n    address[] memory result;\n\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // UintSet\n\n  struct UintSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\n    return _add(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\n    return _remove(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(UintSet storage set, uint256 value)\n    internal\n    view\n    returns (bool)\n  {\n    return _contains(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns the number of values on the set. O(1).\n   */\n  function length(UintSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(UintSet storage set, uint256 index)\n    internal\n    view\n    returns (uint256)\n  {\n    return uint256(_at(set._inner, index));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(UintSet storage set)\n    internal\n    view\n    returns (uint256[] memory)\n  {\n    bytes32[] memory store = _values(set._inner);\n    uint256[] memory result;\n\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n}\n"},"contracts/external/openzeppelin/contracts/access/IAccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n  /**\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n   *\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n   * {RoleAdminChanged} not being emitted signaling this.\n   *\n   * _Available since v3.1._\n   */\n  event RoleAdminChanged(\n    bytes32 indexed role,\n    bytes32 indexed previousAdminRole,\n    bytes32 indexed newAdminRole\n  );\n\n  /**\n   * @dev Emitted when `account` is granted `role`.\n   *\n   * `sender` is the account that originated the contract call, an admin role\n   * bearer except when using {AccessControl-_setupRole}.\n   */\n  event RoleGranted(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Emitted when `account` is revoked `role`.\n   *\n   * `sender` is the account that originated the contract call:\n   *   - if using `revokeRole`, it is the admin role bearer\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n   */\n  event RoleRevoked(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(bytes32 role, address account) external view returns (bool);\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function grantRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function revokeRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `account`.\n   */\n  function renounceRole(bytes32 role, address account) external;\n}\n"},"contracts/external/openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n  function _msgSender() internal view virtual returns (address) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view virtual returns (bytes calldata) {\n    return msg.data;\n  }\n}\n"},"contracts/external/openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n  bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n  /**\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n   */\n  function toString(uint256 value) internal pure returns (string memory) {\n    // Inspired by OraclizeAPI's implementation - MIT licence\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n    if (value == 0) {\n      return \"0\";\n    }\n    uint256 temp = value;\n    uint256 digits;\n    while (temp != 0) {\n      digits++;\n      temp /= 10;\n    }\n    bytes memory buffer = new bytes(digits);\n    while (value != 0) {\n      digits -= 1;\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n      value /= 10;\n    }\n    return string(buffer);\n  }\n\n  /**\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n   */\n  function toHexString(uint256 value) internal pure returns (string memory) {\n    if (value == 0) {\n      return \"0x00\";\n    }\n    uint256 temp = value;\n    uint256 length = 0;\n    while (temp != 0) {\n      length++;\n      temp >>= 8;\n    }\n    return toHexString(value, length);\n  }\n\n  /**\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n   */\n  function toHexString(uint256 value, uint256 length)\n    internal\n    pure\n    returns (string memory)\n  {\n    bytes memory buffer = new bytes(2 * length + 2);\n    buffer[0] = \"0\";\n    buffer[1] = \"x\";\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\n      value >>= 4;\n    }\n    require(value == 0, \"Strings: hex length insufficient\");\n    return string(buffer);\n  }\n}\n"},"contracts/external/openzeppelin/contracts/utils/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"contracts/external/openzeppelin/contracts/utils/IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    override\n    returns (bool)\n  {\n    return interfaceId == type(IERC165).interfaceId;\n  }\n}\n"},"contracts/external/openzeppelin/contracts/utils/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n  /**\n   * @dev Returns true if this contract implements the interface defined by\n   * `interfaceId`. See the corresponding\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n   * to learn more about how these ids are created.\n   *\n   * This function call must use less than 30 000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"contracts/RWAHubOffChainRedemptions.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\nimport \"contracts/RWAHub.sol\";\nimport \"contracts/interfaces/IRWAHubOffChainRedemptions.sol\";\n\nabstract contract RWAHubOffChainRedemptions is\n  RWAHub,\n  IRWAHubOffChainRedemptions\n{\n  // To enable and disable off chain redemptions\n  bool public offChainRedemptionPaused;\n\n  // Minimum off chain redemption amount\n  uint256 public minimumOffChainRedemptionAmount;\n\n  constructor(\n    address _collateral,\n    address _rwa,\n    address managerAdmin,\n    address pauser,\n    address _assetSender,\n    address _feeRecipient,\n    uint256 _minimumDepositAmount,\n    uint256 _minimumRedemptionAmount\n  )\n    RWAHub(\n      _collateral,\n      _rwa,\n      managerAdmin,\n      pauser,\n      _assetSender,\n      _feeRecipient,\n      _minimumDepositAmount,\n      _minimumRedemptionAmount\n    )\n  {\n    // Default to the same minimum redemption amount as for On-Chain\n    // redemptions.\n    minimumOffChainRedemptionAmount = _minimumRedemptionAmount;\n  }\n\n  /**\n   * @notice Request a redemption to be serviced off chain.\n   *\n   * @param amountRWATokenToRedeem The requested redemption amount\n   * @param offChainDestination    A hash of the destination to which\n   *                               the request should be serviced to.\n   */\n  function requestRedemptionServicedOffchain(\n    uint256 amountRWATokenToRedeem,\n    bytes32 offChainDestination\n  ) external nonReentrant ifNotPaused(offChainRedemptionPaused) {\n    if (amountRWATokenToRedeem < minimumOffChainRedemptionAmount) {\n      revert RedemptionTooSmall();\n    }\n\n    bytes32 redemptionId = bytes32(redemptionRequestCounter++);\n\n    rwa.burnFrom(msg.sender, amountRWATokenToRedeem);\n\n    emit RedemptionRequestedServicedOffChain(\n      msg.sender,\n      redemptionId,\n      amountRWATokenToRedeem,\n      offChainDestination\n    );\n  }\n\n  /**\n   * @notice Function to pause off chain redemptoins\n   */\n  function pauseOffChainRedemption() external onlyRole(PAUSER_ADMIN) {\n    offChainRedemptionPaused = true;\n    emit OffChainRedemptionPaused(msg.sender);\n  }\n\n  /**\n   * @notice Function to unpause off chain redemptoins\n   */\n  function unpauseOffChainRedemption() external onlyRole(MANAGER_ADMIN) {\n    offChainRedemptionPaused = false;\n    emit OffChainRedemptionUnpaused(msg.sender);\n  }\n\n  /**\n   * @notice Admin Function to set the minimum off chain redemption amount\n   *\n   * @param _minimumOffChainRedemptionAmount The new minimum off chain\n   *                                         redemption amount\n   */\n  function setOffChainRedemptionMinimum(\n    uint256 _minimumOffChainRedemptionAmount\n  ) external onlyRole(MANAGER_ADMIN) {\n    uint256 oldMinimum = minimumOffChainRedemptionAmount;\n    minimumOffChainRedemptionAmount = _minimumOffChainRedemptionAmount;\n    emit OffChainRedemptionMinimumSet(\n      oldMinimum,\n      _minimumOffChainRedemptionAmount\n    );\n  }\n}\n"},"contracts/interfaces/IRWAHubOffChainRedemptions.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\ninterface IRWAHubOffChainRedemptions {\n  function requestRedemptionServicedOffchain(\n    uint256 amountRWATokenToRedeem,\n    bytes32 offChainDestination\n  ) external;\n\n  function pauseOffChainRedemption() external;\n\n  function unpauseOffChainRedemption() external;\n\n  function setOffChainRedemptionMinimum(uint256 minimumAmount) external;\n\n  /**\n   * @notice Event emitted when redemption request is submitted\n   *\n   * @param user                The user submitting the offchain redemption request\n   * @param redemptionId        The id corresponding to a given offchain redemption request\n   * @param rwaTokenAmountIn    The amount of cash being burned\n   * @param offChainDestination Hash of destination to which the request\n   *                            should be serviced to\n   */\n  event RedemptionRequestedServicedOffChain(\n    address indexed user,\n    bytes32 indexed redemptionId,\n    uint256 rwaTokenAmountIn,\n    bytes32 offChainDestination\n  );\n\n  /**\n   * @notice Event emitted when the off chain redemption feature is\n   *         paused\n   *\n   * @param caller Address which initiated the pause\n   */\n  event OffChainRedemptionPaused(address caller);\n\n  /**\n   * @notice Event emitted when the off chain redemption feature is\n   *         unpaused\n   *\n   * @param caller Address which initiated the unpause\n   */\n  event OffChainRedemptionUnpaused(address caller);\n\n  /**\n   * @notice Event emitted when the off chain redemption minimum is\n   *         updated\n   *\n   * @param oldMinimum the old minimum redemption amount\n   * @param newMinimum the new minimum redemption amount\n   */\n  event OffChainRedemptionMinimumSet(uint256 oldMinimum, uint256 newMinimum);\n}\n"},"contracts/abby/ABBYManager.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\nimport \"contracts/RWAHubOffChainRedemptions.sol\";\n//import \"contracts/abby/blocklist/BlocklistClient.sol\";\n//import \"contracts/sanctions/SanctionsListClient.sol\";\nimport \"contracts/interfaces/IABBYManager.sol\";\n\ncontract ABBYManager is\n  RWAHubOffChainRedemptions,\n  IABBYManager\n{\n  bytes32 public constant TIMESTAMP_SETTER_ROLE =\n    keccak256(\"TIMESTAMP_SETTER_ROLE\");\n\n  mapping(bytes32 => uint256) public depositIdToClaimableTimestamp;\n\n  constructor(\n    address _collateral,\n    address _rwa,\n    address managerAdmin,\n    address pauser,\n    address _assetSender,\n    address _feeRecipient,\n    uint256 _minimumDepositAmount,\n    uint256 _minimumRedemptionAmount,\n    address blocklist\n  )\n    RWAHubOffChainRedemptions(\n      _collateral,\n      _rwa,\n      managerAdmin,\n      pauser,\n      _assetSender,\n      _feeRecipient,\n      _minimumDepositAmount,\n      _minimumRedemptionAmount\n    )\n  {}\n\n  /**\n   * @notice Function to enforce blocklist and sanctionslist restrictions to be\n   *         implemented on calls to `requestSubscription` and\n   *         `claimRedemption`\n   *\n   * @param account The account to check blocklist and sanctions list status\n   *                for\n   */\n  /*function _checkRestrictions(address account) internal view override {\n    if (_isBlocked(account)) {\n      revert BlockedAccount();\n    }\n    if (_isSanctioned(account)) {\n      revert SanctionedAccount();\n    }\n  }*/\n\n  /**\n   * @notice Internal hook that is called by `claimMint` to enforce the time\n   *         at which a user can claim their ABBY\n   *\n   * @param depositId The depositId to check the claimable timestamp for\n   *\n   * @dev This function will call the `_claimMint` function in the parent\n   *      once ABBY-specific checks have been made\n   */\n  function _claimMint(bytes32 depositId) internal virtual override {\n    if (depositIdToClaimableTimestamp[depositId] == 0) {\n      revert ClaimableTimestampNotSet();\n    }\n\n    if (depositIdToClaimableTimestamp[depositId] > block.timestamp) {\n      revert MintNotYetClaimable();\n    }\n\n    super._claimMint(depositId);\n    delete depositIdToClaimableTimestamp[depositId];\n  }\n\n  /**\n   * @notice Update blocklist address\n   *\n   * @param blocklist The new blocklist address\n   */\n  /*function setBlocklist(\n    address blocklist\n  ) external override onlyRole(MANAGER_ADMIN) {\n    _setBlocklist(blocklist);\n  }*/\n\n  /**\n   * @notice Update sanctions list address\n   *\n   * @param sanctionsList The new sanctions list address\n   */\n  /*function setSanctionsList(\n    address sanctionsList\n  ) external override onlyRole(MANAGER_ADMIN) {\n    _setSanctionsList(sanctionsList);\n  }*/\n\n  /**\n   * @notice Set the claimable timestamp for a list of depositIds\n   *\n   * @param claimTimestamp The timestamp at which the deposit can be claimed\n   * @param depositIds The depositIds to set the claimable timestamp for\n   */\n  function setClaimableTimestamp(\n    uint256 claimTimestamp,\n    bytes32[] calldata depositIds\n  ) external onlyRole(TIMESTAMP_SETTER_ROLE) {\n    if (claimTimestamp < block.timestamp) {\n      revert ClaimableTimestampInPast();\n    }\n\n    uint256 depositsSize = depositIds.length;\n    for (uint256 i; i < depositsSize; ++i) {\n      depositIdToClaimableTimestamp[depositIds[i]] = claimTimestamp;\n      emit ClaimableTimestampSet(claimTimestamp, depositIds[i]);\n    }\n  }\n}\n"},"contracts/interfaces/IABBYManager.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\ninterface IABBYManager {\n  function setClaimableTimestamp(\n    uint256 claimDate,\n    bytes32[] calldata depositIds\n  ) external;\n\n  /**\n   * @notice Event emitted when claimable timestamp is set\n   *\n   * @param claimTimestamp The timestamp at which the mint can be claimed\n   * @param depositId      The depositId that can claim at the given \n                           `claimTimestamp`\n   */\n  event ClaimableTimestampSet(\n    uint256 indexed claimTimestamp,\n    bytes32 indexed depositId\n  );\n\n  /// ERRORS ///\n  error MintNotYetClaimable();\n  error ClaimableTimestampInPast();\n  error ClaimableTimestampNotSet();\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":100},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"2072","formattedMessage":"Warning: Unused local variable.\n   --> contracts/RWAHub.sol:253:5:\n    |\n253 |     uint256 fees;\n    |     ^^^^^^^^^^^^\n\n","message":"Unused local variable.","severity":"warning","sourceLocation":{"end":7911,"file":"contracts/RWAHub.sol","start":7899},"type":"Warning"},{"component":"general","errorCode":"2072","formattedMessage":"Warning: Unused local variable.\n   --> contracts/RWAHub.sol:254:5:\n    |\n254 |     uint256 redemptionsSize = redemptionIds.length;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unused local variable.","severity":"warning","sourceLocation":{"end":7940,"file":"contracts/RWAHub.sol","start":7917},"type":"Warning"}],"sources":{"contracts/RWAHub.sol":{"ast":{"absolutePath":"contracts/RWAHub.sol","exportedSymbols":{"AccessControl":[1797],"AccessControlEnumerable":[1922],"Address":[2682],"Context":[2704],"ERC165":[2728],"EnumerableSet":[3327],"IAccessControl":[1995],"IAccessControlEnumerable":[2020],"IERC165":[3339],"IERC20":[2138],"IERC20Metadata":[2163],"IPricerReader":[3584],"IRWAHub":[3892],"IRWALike":[3966],"RWAHub":[1195],"ReentrancyGuard":[2060],"SafeERC20":[2387],"Strings":[3542]},"id":1196,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"32:23:0"},{"absolutePath":"contracts/interfaces/IPricerReader.sol","file":"contracts/interfaces/IPricerReader.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1196,"sourceUnit":3585,"src":"57:48:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IRWALike.sol","file":"contracts/interfaces/IRWALike.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1196,"sourceUnit":3967,"src":"106:43:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/external/openzeppelin/contracts/token/IERC20.sol","file":"contracts/external/openzeppelin/contracts/token/IERC20.sol","id":4,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1196,"sourceUnit":2139,"src":"150:68:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/external/openzeppelin/contracts/token/SafeERC20.sol","file":"contracts/external/openzeppelin/contracts/token/SafeERC20.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1196,"sourceUnit":2388,"src":"219:71:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IRWAHub.sol","file":"contracts/interfaces/IRWAHub.sol","id":6,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1196,"sourceUnit":3893,"src":"291:42:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/external/openzeppelin/contracts/token/IERC20Metadata.sol","file":"contracts/external/openzeppelin/contracts/token/IERC20Metadata.sol","id":7,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1196,"sourceUnit":2164,"src":"362:76:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/external/openzeppelin/contracts/access/AccessControlEnumerable.sol","file":"contracts/external/openzeppelin/contracts/access/AccessControlEnumerable.sol","id":8,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1196,"sourceUnit":1923,"src":"439:86:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/external/openzeppelin/contracts/security/ReentrancyGuard.sol","file":"contracts/external/openzeppelin/contracts/security/ReentrancyGuard.sol","id":9,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1196,"sourceUnit":2061,"src":"526:80:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":10,"name":"IRWAHub","nameLocations":["636:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":3892,"src":"636:7:0"},"id":11,"nodeType":"InheritanceSpecifier","src":"636:7:0"},{"baseName":{"id":12,"name":"ReentrancyGuard","nameLocations":["645:15:0"],"nodeType":"IdentifierPath","referencedDeclaration":2060,"src":"645:15:0"},"id":13,"nodeType":"InheritanceSpecifier","src":"645:15:0"},{"baseName":{"id":14,"name":"AccessControlEnumerable","nameLocations":["662:23:0"],"nodeType":"IdentifierPath","referencedDeclaration":1922,"src":"662:23:0"},"id":15,"nodeType":"InheritanceSpecifier","src":"662:23:0"}],"canonicalName":"RWAHub","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1195,"linearizedBaseContracts":[1195,1922,1797,2728,3339,2020,1995,2704,2060,3892],"name":"RWAHub","nameLocation":"626:6:0","nodeType":"ContractDefinition","nodes":[{"global":false,"id":19,"libraryName":{"id":16,"name":"SafeERC20","nameLocations":["696:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":2387,"src":"696:9:0"},"nodeType":"UsingForDirective","src":"690:27:0","typeName":{"id":18,"nodeType":"UserDefinedTypeName","pathNode":{"id":17,"name":"IERC20","nameLocations":["710:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":2138,"src":"710:6:0"},"referencedDeclaration":2138,"src":"710:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"}}},{"constant":false,"functionSelector":"95e4b251","id":22,"mutability":"immutable","name":"rwa","nameLocation":"770:3:0","nodeType":"VariableDeclaration","scope":1195,"src":"744:29:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IRWALike_$3966","typeString":"contract IRWALike"},"typeName":{"id":21,"nodeType":"UserDefinedTypeName","pathNode":{"id":20,"name":"IRWALike","nameLocations":["744:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":3966,"src":"744:8:0"},"referencedDeclaration":3966,"src":"744:8:0","typeDescriptions":{"typeIdentifier":"t_contract$_IRWALike_$3966","typeString":"contract IRWALike"}},"visibility":"public"},{"constant":false,"functionSelector":"a6138ed9","id":25,"mutability":"mutable","name":"pricer","nameLocation":"821:6:0","nodeType":"VariableDeclaration","scope":1195,"src":"800:27:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IPricerReader_$3584","typeString":"contract IPricerReader"},"typeName":{"id":24,"nodeType":"UserDefinedTypeName","pathNode":{"id":23,"name":"IPricerReader","nameLocations":["800:13:0"],"nodeType":"IdentifierPath","referencedDeclaration":3584,"src":"800:13:0"},"referencedDeclaration":3584,"src":"800:13:0","typeDescriptions":{"typeIdentifier":"t_contract$_IPricerReader_$3584","typeString":"contract IPricerReader"}},"visibility":"public"},{"constant":true,"functionSelector":"3bfa67fe","id":28,"mutability":"constant","name":"assetRecipient","nameLocation":"888:14:0","nodeType":"VariableDeclaration","scope":1195,"src":"864:87:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":26,"name":"address","nodeType":"ElementaryTypeName","src":"864:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307830363836623361374239624532373531624235313038346136453045374442376631373436656231","id":27,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"909:42:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0x0686b3a7B9bE2751bB51084a6E0E7DB7f1746eb1"},"visibility":"public"},{"constant":false,"functionSelector":"ee75d7d4","id":30,"mutability":"mutable","name":"assetSender","nameLocation":"1032:11:0","nodeType":"VariableDeclaration","scope":1195,"src":"1017:26:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":29,"name":"address","nodeType":"ElementaryTypeName","src":"1017:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"46904840","id":32,"mutability":"mutable","name":"feeRecipient","nameLocation":"1089:12:0","nodeType":"VariableDeclaration","scope":1195,"src":"1074:27:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":31,"name":"address","nodeType":"ElementaryTypeName","src":"1074:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"5d591d68","id":37,"mutability":"mutable","name":"depositIdToDepositor","nameLocation":"1184:20:0","nodeType":"VariableDeclaration","scope":1195,"src":"1147:57:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Depositor_$3593_storage_$","typeString":"mapping(bytes32 => struct IRWAHub.Depositor)"},"typeName":{"id":36,"keyType":{"id":33,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1155:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1147:29:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Depositor_$3593_storage_$","typeString":"mapping(bytes32 => struct IRWAHub.Depositor)"},"valueType":{"id":35,"nodeType":"UserDefinedTypeName","pathNode":{"id":34,"name":"Depositor","nameLocations":["1166:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":3593,"src":"1166:9:0"},"referencedDeclaration":3593,"src":"1166:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_Depositor_$3593_storage_ptr","typeString":"struct IRWAHub.Depositor"}}},"visibility":"public"},{"constant":false,"functionSelector":"38fed708","id":42,"mutability":"mutable","name":"redemptionIdToRedeemer","nameLocation":"1287:22:0","nodeType":"VariableDeclaration","scope":1195,"src":"1251:58:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Redeemer_$3600_storage_$","typeString":"mapping(bytes32 => struct IRWAHub.Redeemer)"},"typeName":{"id":41,"keyType":{"id":38,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1259:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1251:28:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Redeemer_$3600_storage_$","typeString":"mapping(bytes32 => struct IRWAHub.Redeemer)"},"valueType":{"id":40,"nodeType":"UserDefinedTypeName","pathNode":{"id":39,"name":"Redeemer","nameLocations":["1270:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":3600,"src":"1270:8:0"},"referencedDeclaration":3600,"src":"1270:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_Redeemer_$3600_storage_ptr","typeString":"struct IRWAHub.Redeemer"}}},"visibility":"public"},{"constant":false,"documentation":{"id":43,"nodeType":"StructuredDocumentation","src":"1314:31:0","text":"@dev Mint/Redeem Parameters"},"functionSelector":"080c279a","id":45,"mutability":"mutable","name":"minimumDepositAmount","nameLocation":"1469:20:0","nodeType":"VariableDeclaration","scope":1195,"src":"1454:35:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":44,"name":"uint256","nodeType":"ElementaryTypeName","src":"1454:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"e0f486ef","id":47,"mutability":"mutable","name":"minimumRedemptionAmount","nameLocation":"1574:23:0","nodeType":"VariableDeclaration","scope":1195,"src":"1559:38:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":46,"name":"uint256","nodeType":"ElementaryTypeName","src":"1559:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"13966db5","id":50,"mutability":"mutable","name":"mintFee","nameLocation":"1660:7:0","nodeType":"VariableDeclaration","scope":1195,"src":"1645:26:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":48,"name":"uint256","nodeType":"ElementaryTypeName","src":"1645:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30","id":49,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1670:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"public"},{"constant":false,"functionSelector":"458f5815","id":53,"mutability":"mutable","name":"redemptionFee","nameLocation":"1737:13:0","nodeType":"VariableDeclaration","scope":1195,"src":"1722:32:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":51,"name":"uint256","nodeType":"ElementaryTypeName","src":"1722:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30","id":52,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1753:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"public"},{"constant":false,"functionSelector":"d8dfeb45","id":56,"mutability":"immutable","name":"collateral","nameLocation":"1821:10:0","nodeType":"VariableDeclaration","scope":1195,"src":"1797:34:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"},"typeName":{"id":55,"nodeType":"UserDefinedTypeName","pathNode":{"id":54,"name":"IERC20","nameLocations":["1797:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":2138,"src":"1797:6:0"},"referencedDeclaration":2138,"src":"1797:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"}},"visibility":"public"},{"constant":false,"functionSelector":"bb13245f","id":58,"mutability":"immutable","name":"decimalsMultiplier","nameLocation":"1972:18:0","nodeType":"VariableDeclaration","scope":1195,"src":"1947:43:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":57,"name":"uint256","nodeType":"ElementaryTypeName","src":"1947:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"07bda1bb","id":61,"mutability":"mutable","name":"subscriptionRequestCounter","nameLocation":"2063:26:0","nodeType":"VariableDeclaration","scope":1195,"src":"2048:45:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":59,"name":"uint256","nodeType":"ElementaryTypeName","src":"2048:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":60,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2092:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"public"},{"constant":false,"functionSelector":"354181f3","id":64,"mutability":"mutable","name":"redemptionRequestCounter","nameLocation":"2144:24:0","nodeType":"VariableDeclaration","scope":1195,"src":"2129:43:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":62,"name":"uint256","nodeType":"ElementaryTypeName","src":"2129:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":63,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2171:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"public"},{"constant":true,"functionSelector":"e1a45218","id":67,"mutability":"constant","name":"BPS_DENOMINATOR","nameLocation":"2277:15:0","nodeType":"VariableDeclaration","scope":1195,"src":"2253:48:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":65,"name":"uint256","nodeType":"ElementaryTypeName","src":"2253:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31305f303030","id":66,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2295:6:0","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10_000"},"visibility":"public"},{"constant":false,"functionSelector":"73a95ddd","id":69,"mutability":"mutable","name":"redemptionPaused","nameLocation":"2339:16:0","nodeType":"VariableDeclaration","scope":1195,"src":"2327:28:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":68,"name":"bool","nodeType":"ElementaryTypeName","src":"2327:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"public"},{"constant":false,"functionSelector":"cd4d0bcf","id":71,"mutability":"mutable","name":"subscriptionPaused","nameLocation":"2371:18:0","nodeType":"VariableDeclaration","scope":1195,"src":"2359:30:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":70,"name":"bool","nodeType":"ElementaryTypeName","src":"2359:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"public"},{"constant":true,"documentation":{"id":72,"nodeType":"StructuredDocumentation","src":"2394:40:0","text":"@dev Role based access control roles"},"functionSelector":"078a6be8","id":77,"mutability":"constant","name":"MANAGER_ADMIN","nameLocation":"2461:13:0","nodeType":"VariableDeclaration","scope":1195,"src":"2437:66:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":73,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2437:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4d414e414745525f41444d494e","id":75,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2487:15:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_8c6dd8af24db306eb580672d47cf7dd23b8394bf74074f8ac14b948512ecdb03","typeString":"literal_string \"MANAGER_ADMIN\""},"value":"MANAGER_ADMIN"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8c6dd8af24db306eb580672d47cf7dd23b8394bf74074f8ac14b948512ecdb03","typeString":"literal_string \"MANAGER_ADMIN\""}],"id":74,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2477:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":76,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2477:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"85c4e79e","id":82,"mutability":"constant","name":"PAUSER_ADMIN","nameLocation":"2531:12:0","nodeType":"VariableDeclaration","scope":1195,"src":"2507:64:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":78,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2507:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"5041555345525f41444d494e","id":80,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2556:14:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9ac2c43e905fe4f0c030a0b0e4b805a284e79da32a5c9c71be1c68dd79bbb89d","typeString":"literal_string \"PAUSER_ADMIN\""},"value":"PAUSER_ADMIN"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9ac2c43e905fe4f0c030a0b0e4b805a284e79da32a5c9c71be1c68dd79bbb89d","typeString":"literal_string \"PAUSER_ADMIN\""}],"id":79,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2546:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":81,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2546:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"bcc70283","id":87,"mutability":"constant","name":"PRICE_ID_SETTER_ROLE","nameLocation":"2599:20:0","nodeType":"VariableDeclaration","scope":1195,"src":"2575:84:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":83,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2575:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"50524943455f49445f5345545445525f524f4c45","id":85,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2636:22:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_830a9081649e91840eb0274e99b47626a896cfa0f4dd591cb31cd5060e566c0d","typeString":"literal_string \"PRICE_ID_SETTER_ROLE\""},"value":"PRICE_ID_SETTER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_830a9081649e91840eb0274e99b47626a896cfa0f4dd591cb31cd5060e566c0d","typeString":"literal_string \"PRICE_ID_SETTER_ROLE\""}],"id":84,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2626:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":86,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2626:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"926d7d7f","id":92,"mutability":"constant","name":"RELAYER_ROLE","nameLocation":"2687:12:0","nodeType":"VariableDeclaration","scope":1195,"src":"2663:64:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":88,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2663:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"52454c415945525f524f4c45","id":90,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2712:14:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_e2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc4","typeString":"literal_string \"RELAYER_ROLE\""},"value":"RELAYER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_e2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc4","typeString":"literal_string \"RELAYER_ROLE\""}],"id":89,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2702:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":91,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2702:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"body":{"id":243,"nodeType":"Block","src":"2989:1103:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":112,"name":"_collateral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95,"src":"2999:11:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3022:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":114,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3014:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":113,"name":"address","nodeType":"ElementaryTypeName","src":"3014:7:0","typeDescriptions":{}}},"id":116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3014:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2999:25:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":122,"nodeType":"IfStatement","src":"2995:77:0","trueBody":{"id":121,"nodeType":"Block","src":"3026:46:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":118,"name":"CollateralCannotBeZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3871,"src":"3041:22:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3041:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":120,"nodeType":"RevertStatement","src":"3034:31:0"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":123,"name":"_rwa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97,"src":"3081:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3097:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":125,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3089:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":124,"name":"address","nodeType":"ElementaryTypeName","src":"3089:7:0","typeDescriptions":{}}},"id":127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3089:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3081:18:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":133,"nodeType":"IfStatement","src":"3077:63:0","trueBody":{"id":132,"nodeType":"Block","src":"3101:39:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":129,"name":"RWACannotBeZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3873,"src":"3116:15:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":130,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3116:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":131,"nodeType":"RevertStatement","src":"3109:24:0"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":134,"name":"_assetSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":103,"src":"3149:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3173:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":136,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3165:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":135,"name":"address","nodeType":"ElementaryTypeName","src":"3165:7:0","typeDescriptions":{}}},"id":138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3165:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3149:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":144,"nodeType":"IfStatement","src":"3145:79:0","trueBody":{"id":143,"nodeType":"Block","src":"3177:47:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":140,"name":"AssetSenderCannotBeZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3875,"src":"3192:23:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3192:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":142,"nodeType":"RevertStatement","src":"3185:32:0"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":145,"name":"_feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":105,"src":"3233:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3258:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":147,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3250:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":146,"name":"address","nodeType":"ElementaryTypeName","src":"3250:7:0","typeDescriptions":{}}},"id":149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3250:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3233:27:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":155,"nodeType":"IfStatement","src":"3229:81:0","trueBody":{"id":154,"nodeType":"Block","src":"3262:48:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":151,"name":"FeeRecipientCannotBeZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3877,"src":"3277:24:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3277:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":153,"nodeType":"RevertStatement","src":"3270:33:0"}]}},{"expression":{"arguments":[{"id":157,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1516,"src":"3327:18:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":158,"name":"managerAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":99,"src":"3347:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":156,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[1897],"referencedDeclaration":1897,"src":"3316:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3316:44:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":160,"nodeType":"ExpressionStatement","src":"3316:44:0"},{"expression":{"arguments":[{"id":162,"name":"MANAGER_ADMIN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"3377:13:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":163,"name":"managerAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":99,"src":"3392:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":161,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[1897],"referencedDeclaration":1897,"src":"3366:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3366:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":165,"nodeType":"ExpressionStatement","src":"3366:39:0"},{"expression":{"arguments":[{"id":167,"name":"PAUSER_ADMIN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"3422:12:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":168,"name":"pauser","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"3436:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":166,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[1897],"referencedDeclaration":1897,"src":"3411:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3411:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":170,"nodeType":"ExpressionStatement","src":"3411:32:0"},{"expression":{"arguments":[{"id":172,"name":"PRICE_ID_SETTER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"3460:20:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":173,"name":"managerAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":99,"src":"3482:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":171,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[1897],"referencedDeclaration":1897,"src":"3449:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3449:46:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":175,"nodeType":"ExpressionStatement","src":"3449:46:0"},{"expression":{"arguments":[{"arguments":[{"hexValue":"54494d455354414d505f5345545445525f524f4c45","id":178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3522:23:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_ced4eb9faeb19ab0e2e05a20ade58d82157e1035a3fbff4bc38dd5e609f22b93","typeString":"literal_string \"TIMESTAMP_SETTER_ROLE\""},"value":"TIMESTAMP_SETTER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ced4eb9faeb19ab0e2e05a20ade58d82157e1035a3fbff4bc38dd5e609f22b93","typeString":"literal_string \"TIMESTAMP_SETTER_ROLE\""}],"id":177,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3512:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3512:34:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":180,"name":"managerAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":99,"src":"3548:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":176,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[1897],"referencedDeclaration":1897,"src":"3501:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":181,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3501:60:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":182,"nodeType":"ExpressionStatement","src":"3501:60:0"},{"expression":{"arguments":[{"id":184,"name":"PAUSER_ADMIN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"3586:12:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":185,"name":"MANAGER_ADMIN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"3600:13:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":183,"name":"_setRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1733,"src":"3572:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32)"}},"id":186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3572:42:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":187,"nodeType":"ExpressionStatement","src":"3572:42:0"},{"expression":{"arguments":[{"id":189,"name":"PRICE_ID_SETTER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"3634:20:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":190,"name":"MANAGER_ADMIN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"3656:13:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":188,"name":"_setRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1733,"src":"3620:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32)"}},"id":191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3620:50:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":192,"nodeType":"ExpressionStatement","src":"3620:50:0"},{"expression":{"arguments":[{"id":194,"name":"RELAYER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":92,"src":"3690:12:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":195,"name":"MANAGER_ADMIN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"3704:13:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":193,"name":"_setRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1733,"src":"3676:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32)"}},"id":196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3676:42:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":197,"nodeType":"ExpressionStatement","src":"3676:42:0"},{"expression":{"id":202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":198,"name":"collateral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"3725:10:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":200,"name":"_collateral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95,"src":"3745:11:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":199,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2138,"src":"3738:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2138_$","typeString":"type(contract IERC20)"}},"id":201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3738:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"}},"src":"3725:32:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"}},"id":203,"nodeType":"ExpressionStatement","src":"3725:32:0"},{"expression":{"id":208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":204,"name":"rwa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22,"src":"3763:3:0","typeDescriptions":{"typeIdentifier":"t_contract$_IRWALike_$3966","typeString":"contract IRWALike"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":206,"name":"_rwa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97,"src":"3778:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":205,"name":"IRWALike","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3966,"src":"3769:8:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IRWALike_$3966_$","typeString":"type(contract IRWALike)"}},"id":207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3769:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IRWALike_$3966","typeString":"contract IRWALike"}},"src":"3763:20:0","typeDescriptions":{"typeIdentifier":"t_contract$_IRWALike_$3966","typeString":"contract IRWALike"}},"id":209,"nodeType":"ExpressionStatement","src":"3763:20:0"},{"expression":{"id":212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":210,"name":"feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"3789:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":211,"name":"_feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":105,"src":"3804:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3789:28:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":213,"nodeType":"ExpressionStatement","src":"3789:28:0"},{"expression":{"id":216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":214,"name":"assetSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"3823:11:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":215,"name":"_assetSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":103,"src":"3837:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3823:26:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":217,"nodeType":"ExpressionStatement","src":"3823:26:0"},{"expression":{"id":220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":218,"name":"minimumDepositAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45,"src":"3855:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":219,"name":"_minimumDepositAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":107,"src":"3878:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3855:44:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":221,"nodeType":"ExpressionStatement","src":"3855:44:0"},{"expression":{"id":224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":222,"name":"minimumRedemptionAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47,"src":"3905:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":223,"name":"_minimumRedemptionAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":109,"src":"3931:24:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3905:50:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":225,"nodeType":"ExpressionStatement","src":"3905:50:0"},{"expression":{"id":241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":226,"name":"decimalsMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"3962:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3989:2:0","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":229,"name":"_rwa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97,"src":"4019:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":228,"name":"IERC20Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2163,"src":"4004:14:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Metadata_$2163_$","typeString":"type(contract IERC20Metadata)"}},"id":230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4004:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Metadata_$2163","typeString":"contract IERC20Metadata"}},"id":231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4025:8:0","memberName":"decimals","nodeType":"MemberAccess","referencedDeclaration":2162,"src":"4004:29:0","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint8_$","typeString":"function () view external returns (uint8)"}},"id":232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4004:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":234,"name":"_collateral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95,"src":"4063:11:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":233,"name":"IERC20Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2163,"src":"4048:14:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Metadata_$2163_$","typeString":"type(contract IERC20Metadata)"}},"id":235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4048:27:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Metadata_$2163","typeString":"contract IERC20Metadata"}},"id":236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4076:8:0","memberName":"decimals","nodeType":"MemberAccess","referencedDeclaration":2162,"src":"4048:36:0","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint8_$","typeString":"function () view external returns (uint8)"}},"id":237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4048:38:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4004:82:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":239,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4003:84:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"3989:98:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3962:125:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":242,"nodeType":"ExpressionStatement","src":"3962:125:0"}]},"documentation":{"id":93,"nodeType":"StructuredDocumentation","src":"2732:23:0","text":"@notice constructor"},"id":244,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":95,"mutability":"mutable","name":"_collateral","nameLocation":"2783:11:0","nodeType":"VariableDeclaration","scope":244,"src":"2775:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":94,"name":"address","nodeType":"ElementaryTypeName","src":"2775:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":97,"mutability":"mutable","name":"_rwa","nameLocation":"2808:4:0","nodeType":"VariableDeclaration","scope":244,"src":"2800:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":96,"name":"address","nodeType":"ElementaryTypeName","src":"2800:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":99,"mutability":"mutable","name":"managerAdmin","nameLocation":"2826:12:0","nodeType":"VariableDeclaration","scope":244,"src":"2818:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":98,"name":"address","nodeType":"ElementaryTypeName","src":"2818:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":101,"mutability":"mutable","name":"pauser","nameLocation":"2852:6:0","nodeType":"VariableDeclaration","scope":244,"src":"2844:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":100,"name":"address","nodeType":"ElementaryTypeName","src":"2844:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":103,"mutability":"mutable","name":"_assetSender","nameLocation":"2872:12:0","nodeType":"VariableDeclaration","scope":244,"src":"2864:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":102,"name":"address","nodeType":"ElementaryTypeName","src":"2864:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":105,"mutability":"mutable","name":"_feeRecipient","nameLocation":"2898:13:0","nodeType":"VariableDeclaration","scope":244,"src":"2890:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":104,"name":"address","nodeType":"ElementaryTypeName","src":"2890:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":107,"mutability":"mutable","name":"_minimumDepositAmount","nameLocation":"2925:21:0","nodeType":"VariableDeclaration","scope":244,"src":"2917:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":106,"name":"uint256","nodeType":"ElementaryTypeName","src":"2917:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":109,"mutability":"mutable","name":"_minimumRedemptionAmount","nameLocation":"2960:24:0","nodeType":"VariableDeclaration","scope":244,"src":"2952:32:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":108,"name":"uint256","nodeType":"ElementaryTypeName","src":"2952:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2769:219:0"},"returnParameters":{"id":111,"nodeType":"ParameterList","parameters":[],"src":"2989:0:0"},"scope":1195,"src":"2758:1334:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[3605],"body":{"id":326,"nodeType":"Block","src":"4571:782:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":255,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"4581:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":256,"name":"minimumDepositAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45,"src":"4590:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4581:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":262,"nodeType":"IfStatement","src":"4577:74:0","trueBody":{"id":261,"nodeType":"Block","src":"4612:39:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":258,"name":"DepositTooSmall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3865,"src":"4627:15:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":259,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4627:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":260,"nodeType":"RevertStatement","src":"4620:24:0"}]}},{"assignments":[264],"declarations":[{"constant":false,"id":264,"mutability":"mutable","name":"feesInCollateral","nameLocation":"4665:16:0","nodeType":"VariableDeclaration","scope":326,"src":"4657:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":263,"name":"uint256","nodeType":"ElementaryTypeName","src":"4657:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":268,"initialValue":{"arguments":[{"id":266,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"4697:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":265,"name":"_getMintFees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1102,"src":"4684:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4684:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4657:47:0"},{"assignments":[270],"declarations":[{"constant":false,"id":270,"mutability":"mutable","name":"depositAmountAfterFee","nameLocation":"4718:21:0","nodeType":"VariableDeclaration","scope":326,"src":"4710:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":269,"name":"uint256","nodeType":"ElementaryTypeName","src":"4710:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":274,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":271,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"4742:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":272,"name":"feesInCollateral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":264,"src":"4751:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4742:25:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4710:57:0"},{"assignments":[276],"declarations":[{"constant":false,"id":276,"mutability":"mutable","name":"depositId","nameLocation":"4828:9:0","nodeType":"VariableDeclaration","scope":326,"src":"4820:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":275,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4820:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":282,"initialValue":{"arguments":[{"id":280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4848:28:0","subExpression":{"id":279,"name":"subscriptionRequestCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":61,"src":"4848:26:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":278,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4840:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":277,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4840:7:0","typeDescriptions":{}}},"id":281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4840:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4820:57:0"},{"expression":{"id":292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":283,"name":"depositIdToDepositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"4883:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Depositor_$3593_storage_$","typeString":"mapping(bytes32 => struct IRWAHub.Depositor storage ref)"}},"id":285,"indexExpression":{"id":284,"name":"depositId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":276,"src":"4904:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4883:31:0","typeDescriptions":{"typeIdentifier":"t_struct$_Depositor_$3593_storage","typeString":"struct IRWAHub.Depositor storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":287,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4934:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4938:6:0","memberName":"sender","nodeType":"MemberAccess","src":"4934:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":289,"name":"depositAmountAfterFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"4952:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4981:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":286,"name":"Depositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"4917:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Depositor_$3593_storage_ptr_$","typeString":"type(struct IRWAHub.Depositor storage pointer)"}},"id":291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4917:71:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Depositor_$3593_memory_ptr","typeString":"struct IRWAHub.Depositor memory"}},"src":"4883:105:0","typeDescriptions":{"typeIdentifier":"t_struct$_Depositor_$3593_storage","typeString":"struct IRWAHub.Depositor storage ref"}},"id":293,"nodeType":"ExpressionStatement","src":"4883:105:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":294,"name":"feesInCollateral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":264,"src":"4999:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":295,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5018:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4999:20:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":307,"nodeType":"IfStatement","src":"4995:112:0","trueBody":{"id":306,"nodeType":"Block","src":"5021:86:0","statements":[{"expression":{"arguments":[{"expression":{"id":300,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5057:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5061:6:0","memberName":"sender","nodeType":"MemberAccess","src":"5057:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":302,"name":"feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"5069:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":303,"name":"feesInCollateral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":264,"src":"5083:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":297,"name":"collateral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"5029:10:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"}},"id":299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5040:16:0","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":2220,"src":"5029:27:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2138_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$2138_$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5029:71:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":305,"nodeType":"ExpressionStatement","src":"5029:71:0"}]}},{"expression":{"arguments":[{"expression":{"id":311,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5148:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5152:6:0","memberName":"sender","nodeType":"MemberAccess","src":"5148:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":313,"name":"assetRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"5166:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":314,"name":"depositAmountAfterFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"5188:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":308,"name":"collateral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"5113:10:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"}},"id":310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5124:16:0","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":2220,"src":"5113:27:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2138_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$2138_$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5113:102:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":316,"nodeType":"ExpressionStatement","src":"5113:102:0"},{"eventCall":{"arguments":[{"expression":{"id":318,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5248:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5252:6:0","memberName":"sender","nodeType":"MemberAccess","src":"5248:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":320,"name":"depositId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":276,"src":"5266:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":321,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"5283:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":322,"name":"depositAmountAfterFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":270,"src":"5297:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":323,"name":"feesInCollateral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":264,"src":"5326:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":317,"name":"MintRequested","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3744,"src":"5227:13:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bytes32_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,bytes32,uint256,uint256,uint256)"}},"id":324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5227:121:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":325,"nodeType":"EmitStatement","src":"5222:126:0"}]},"documentation":{"id":245,"nodeType":"StructuredDocumentation","src":"4283:152:0","text":" @notice Function used by users to request subscription to the fund\n @param amount The amount of collateral one wished to deposit"},"functionSelector":"d592d815","id":327,"implemented":true,"kind":"function","modifiers":[{"id":250,"kind":"modifierInvocation","modifierName":{"id":249,"name":"nonReentrant","nameLocations":["4520:12:0"],"nodeType":"IdentifierPath","referencedDeclaration":2059,"src":"4520:12:0"},"nodeType":"ModifierInvocation","src":"4520:12:0"},{"arguments":[{"id":252,"name":"subscriptionPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"4549:18:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":253,"kind":"modifierInvocation","modifierName":{"id":251,"name":"ifNotPaused","nameLocations":["4537:11:0"],"nodeType":"IdentifierPath","referencedDeclaration":1018,"src":"4537:11:0"},"nodeType":"ModifierInvocation","src":"4537:31:0"}],"name":"requestSubscription","nameLocation":"4447:19:0","nodeType":"FunctionDefinition","parameters":{"id":248,"nodeType":"ParameterList","parameters":[{"constant":false,"id":247,"mutability":"mutable","name":"amount","nameLocation":"4480:6:0","nodeType":"VariableDeclaration","scope":327,"src":"4472:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":246,"name":"uint256","nodeType":"ElementaryTypeName","src":"4472:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4466:24:0"},"returnParameters":{"id":254,"nodeType":"ParameterList","parameters":[],"src":"4571:0:0"},"scope":1195,"src":"4438:915:0","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[3611],"body":{"id":362,"nodeType":"Block","src":"5834:139:0","statements":[{"assignments":[340],"declarations":[{"constant":false,"id":340,"mutability":"mutable","name":"depositsSize","nameLocation":"5848:12:0","nodeType":"VariableDeclaration","scope":362,"src":"5840:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":339,"name":"uint256","nodeType":"ElementaryTypeName","src":"5840:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":343,"initialValue":{"expression":{"id":341,"name":"depositIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"5863:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5874:6:0","memberName":"length","nodeType":"MemberAccess","src":"5863:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5840:40:0"},{"body":{"id":360,"nodeType":"Block","src":"5929:40:0","statements":[{"expression":{"arguments":[{"baseExpression":{"id":355,"name":"depositIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"5948:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":357,"indexExpression":{"id":356,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":345,"src":"5959:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5948:13:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":354,"name":"_claimMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"5937:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5937:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":359,"nodeType":"ExpressionStatement","src":"5937:25:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":348,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":345,"src":"5906:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":349,"name":"depositsSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":340,"src":"5910:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5906:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":361,"initializationExpression":{"assignments":[345],"declarations":[{"constant":false,"id":345,"mutability":"mutable","name":"i","nameLocation":"5899:1:0","nodeType":"VariableDeclaration","scope":361,"src":"5891:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":344,"name":"uint256","nodeType":"ElementaryTypeName","src":"5891:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":347,"initialValue":{"hexValue":"30","id":346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5903:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5891:13:0"},"loopExpression":{"expression":{"id":352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"5924:3:0","subExpression":{"id":351,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":345,"src":"5926:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":353,"nodeType":"ExpressionStatement","src":"5924:3:0"},"nodeType":"ForStatement","src":"5886:83:0"}]},"documentation":{"id":328,"nodeType":"StructuredDocumentation","src":"5357:354:0","text":" @notice Function used to claim tokens corresponding to a deposit request\n @param depositIds An array containing the deposit Ids one wishes to claim\n @dev Implicitly does all transfer checks present in underlying `rwa`\n @dev The priceId corresponding to a given depositId must be set prior to\n      claiming a mint"},"functionSelector":"4565e9ff","id":363,"implemented":true,"kind":"function","modifiers":[{"id":334,"kind":"modifierInvocation","modifierName":{"id":333,"name":"nonReentrant","nameLocations":["5789:12:0"],"nodeType":"IdentifierPath","referencedDeclaration":2059,"src":"5789:12:0"},"nodeType":"ModifierInvocation","src":"5789:12:0"},{"arguments":[{"id":336,"name":"subscriptionPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"5814:18:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":337,"kind":"modifierInvocation","modifierName":{"id":335,"name":"ifNotPaused","nameLocations":["5802:11:0"],"nodeType":"IdentifierPath","referencedDeclaration":1018,"src":"5802:11:0"},"nodeType":"ModifierInvocation","src":"5802:31:0"}],"name":"claimMint","nameLocation":"5723:9:0","nodeType":"FunctionDefinition","parameters":{"id":332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":331,"mutability":"mutable","name":"depositIds","nameLocation":"5757:10:0","nodeType":"VariableDeclaration","scope":363,"src":"5738:29:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":329,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5738:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":330,"nodeType":"ArrayTypeName","src":"5738:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"5732:39:0"},"returnParameters":{"id":338,"nodeType":"ParameterList","parameters":[],"src":"5834:0:0"},"scope":1195,"src":"5714:259:0","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"body":{"id":426,"nodeType":"Block","src":"6166:590:0","statements":[{"assignments":[371],"declarations":[{"constant":false,"id":371,"mutability":"mutable","name":"depositor","nameLocation":"6189:9:0","nodeType":"VariableDeclaration","scope":426,"src":"6172:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Depositor_$3593_memory_ptr","typeString":"struct IRWAHub.Depositor"},"typeName":{"id":370,"nodeType":"UserDefinedTypeName","pathNode":{"id":369,"name":"Depositor","nameLocations":["6172:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":3593,"src":"6172:9:0"},"referencedDeclaration":3593,"src":"6172:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_Depositor_$3593_storage_ptr","typeString":"struct IRWAHub.Depositor"}},"visibility":"internal"}],"id":375,"initialValue":{"baseExpression":{"id":372,"name":"depositIdToDepositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"6201:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Depositor_$3593_storage_$","typeString":"mapping(bytes32 => struct IRWAHub.Depositor storage ref)"}},"id":374,"indexExpression":{"id":373,"name":"depositId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":366,"src":"6222:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6201:31:0","typeDescriptions":{"typeIdentifier":"t_struct$_Depositor_$3593_storage","typeString":"struct IRWAHub.Depositor storage ref"}},"nodeType":"VariableDeclarationStatement","src":"6172:60:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":376,"name":"depositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"6278:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_Depositor_$3593_memory_ptr","typeString":"struct IRWAHub.Depositor memory"}},"id":377,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6288:7:0","memberName":"priceId","nodeType":"MemberAccess","referencedDeclaration":3592,"src":"6278:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6299:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6278:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":384,"nodeType":"IfStatement","src":"6274:65:0","trueBody":{"id":383,"nodeType":"Block","src":"6302:37:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":380,"name":"PriceIdNotSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3861,"src":"6317:13:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6317:15:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":382,"nodeType":"RevertStatement","src":"6310:22:0"}]}},{"assignments":[386],"declarations":[{"constant":false,"id":386,"mutability":"mutable","name":"price","nameLocation":"6353:5:0","nodeType":"VariableDeclaration","scope":426,"src":"6345:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":385,"name":"uint256","nodeType":"ElementaryTypeName","src":"6345:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":392,"initialValue":{"arguments":[{"expression":{"id":389,"name":"depositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"6377:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_Depositor_$3593_memory_ptr","typeString":"struct IRWAHub.Depositor memory"}},"id":390,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6387:7:0","memberName":"priceId","nodeType":"MemberAccess","referencedDeclaration":3592,"src":"6377:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":387,"name":"pricer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"6361:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IPricerReader_$3584","typeString":"contract IPricerReader"}},"id":388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6368:8:0","memberName":"getPrice","nodeType":"MemberAccess","referencedDeclaration":3583,"src":"6361:15:0","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view external returns (uint256)"}},"id":391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6361:34:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6345:50:0"},{"assignments":[394],"declarations":[{"constant":false,"id":394,"mutability":"mutable","name":"rwaOwed","nameLocation":"6409:7:0","nodeType":"VariableDeclaration","scope":426,"src":"6401:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":393,"name":"uint256","nodeType":"ElementaryTypeName","src":"6401:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":400,"initialValue":{"arguments":[{"expression":{"id":396,"name":"depositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"6449:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_Depositor_$3593_memory_ptr","typeString":"struct IRWAHub.Depositor memory"}},"id":397,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6459:24:0","memberName":"amountDepositedMinusFees","nodeType":"MemberAccess","referencedDeclaration":3590,"src":"6449:34:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":398,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":386,"src":"6491:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":395,"name":"_getMintAmountForPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1143,"src":"6419:22:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) view returns (uint256)"}},"id":399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6419:83:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6401:101:0"},{"expression":{"id":404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"6509:38:0","subExpression":{"baseExpression":{"id":401,"name":"depositIdToDepositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"6516:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Depositor_$3593_storage_$","typeString":"mapping(bytes32 => struct IRWAHub.Depositor storage ref)"}},"id":403,"indexExpression":{"id":402,"name":"depositId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":366,"src":"6537:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6516:31:0","typeDescriptions":{"typeIdentifier":"t_struct$_Depositor_$3593_storage","typeString":"struct IRWAHub.Depositor storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":405,"nodeType":"ExpressionStatement","src":"6509:38:0"},{"expression":{"arguments":[{"expression":{"id":409,"name":"depositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"6562:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_Depositor_$3593_memory_ptr","typeString":"struct IRWAHub.Depositor memory"}},"id":410,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6572:4:0","memberName":"user","nodeType":"MemberAccess","referencedDeclaration":3588,"src":"6562:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":411,"name":"rwaOwed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"6578:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":406,"name":"rwa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22,"src":"6553:3:0","typeDescriptions":{"typeIdentifier":"t_contract$_IRWALike_$3966","typeString":"contract IRWALike"}},"id":408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6557:4:0","memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":3953,"src":"6553:8:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) external"}},"id":412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6553:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":413,"nodeType":"ExpressionStatement","src":"6553:33:0"},{"eventCall":{"arguments":[{"expression":{"id":415,"name":"depositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"6619:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_Depositor_$3593_memory_ptr","typeString":"struct IRWAHub.Depositor memory"}},"id":416,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6629:4:0","memberName":"user","nodeType":"MemberAccess","referencedDeclaration":3588,"src":"6619:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":417,"name":"depositId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":366,"src":"6641:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":418,"name":"rwaOwed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"6658:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":419,"name":"depositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"6673:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_Depositor_$3593_memory_ptr","typeString":"struct IRWAHub.Depositor memory"}},"id":420,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6683:24:0","memberName":"amountDepositedMinusFees","nodeType":"MemberAccess","referencedDeclaration":3590,"src":"6673:34:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":421,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":386,"src":"6715:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":422,"name":"depositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"6728:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_Depositor_$3593_memory_ptr","typeString":"struct IRWAHub.Depositor memory"}},"id":423,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6738:7:0","memberName":"priceId","nodeType":"MemberAccess","referencedDeclaration":3592,"src":"6728:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":414,"name":"MintCompleted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3772,"src":"6598:13:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bytes32_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,bytes32,uint256,uint256,uint256,uint256)"}},"id":424,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6598:153:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":425,"nodeType":"EmitStatement","src":"6593:158:0"}]},"documentation":{"id":364,"nodeType":"StructuredDocumentation","src":"5977:130:0","text":" @notice Internal claim mint helper\n @dev This function can be overriden to implement custom claiming logic"},"id":427,"implemented":true,"kind":"function","modifiers":[],"name":"_claimMint","nameLocation":"6119:10:0","nodeType":"FunctionDefinition","parameters":{"id":367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":366,"mutability":"mutable","name":"depositId","nameLocation":"6138:9:0","nodeType":"VariableDeclaration","scope":427,"src":"6130:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":365,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6130:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6129:19:0"},"returnParameters":{"id":368,"nodeType":"ParameterList","parameters":[],"src":"6166:0:0"},"scope":1195,"src":"6110:646:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[3616],"body":{"id":480,"nodeType":"Block","src":"7074:334:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":438,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"7084:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":439,"name":"minimumRedemptionAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47,"src":"7093:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7084:32:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":445,"nodeType":"IfStatement","src":"7080:80:0","trueBody":{"id":444,"nodeType":"Block","src":"7118:42:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":441,"name":"RedemptionTooSmall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3867,"src":"7133:18:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7133:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":443,"nodeType":"RevertStatement","src":"7126:27:0"}]}},{"assignments":[447],"declarations":[{"constant":false,"id":447,"mutability":"mutable","name":"redemptionId","nameLocation":"7173:12:0","nodeType":"VariableDeclaration","scope":480,"src":"7165:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":446,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7165:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":453,"initialValue":{"arguments":[{"id":451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"7196:26:0","subExpression":{"id":450,"name":"redemptionRequestCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":64,"src":"7196:24:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":449,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7188:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":448,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7188:7:0","typeDescriptions":{}}},"id":452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7188:35:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7165:58:0"},{"expression":{"id":463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":454,"name":"redemptionIdToRedeemer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42,"src":"7229:22:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Redeemer_$3600_storage_$","typeString":"mapping(bytes32 => struct IRWAHub.Redeemer storage ref)"}},"id":456,"indexExpression":{"id":455,"name":"redemptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"7252:12:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7229:36:0","typeDescriptions":{"typeIdentifier":"t_struct$_Redeemer_$3600_storage","typeString":"struct IRWAHub.Redeemer storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":458,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7277:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7281:6:0","memberName":"sender","nodeType":"MemberAccess","src":"7277:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":460,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"7289:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7297:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":457,"name":"Redeemer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3600,"src":"7268:8:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Redeemer_$3600_storage_ptr_$","typeString":"type(struct IRWAHub.Redeemer storage pointer)"}},"id":462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7268:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Redeemer_$3600_memory_ptr","typeString":"struct IRWAHub.Redeemer memory"}},"src":"7229:70:0","typeDescriptions":{"typeIdentifier":"t_struct$_Redeemer_$3600_storage","typeString":"struct IRWAHub.Redeemer storage ref"}},"id":464,"nodeType":"ExpressionStatement","src":"7229:70:0"},{"expression":{"arguments":[{"expression":{"id":468,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7319:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7323:6:0","memberName":"sender","nodeType":"MemberAccess","src":"7319:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":470,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"7331:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":465,"name":"rwa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22,"src":"7306:3:0","typeDescriptions":{"typeIdentifier":"t_contract$_IRWALike_$3966","typeString":"contract IRWALike"}},"id":467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7310:8:0","memberName":"burnFrom","nodeType":"MemberAccess","referencedDeclaration":3965,"src":"7306:12:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) external"}},"id":471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7306:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":472,"nodeType":"ExpressionStatement","src":"7306:32:0"},{"eventCall":{"arguments":[{"expression":{"id":474,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7370:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7374:6:0","memberName":"sender","nodeType":"MemberAccess","src":"7370:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":476,"name":"redemptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"7382:12:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":477,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"7396:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":473,"name":"RedemptionRequested","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3731,"src":"7350:19:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (address,bytes32,uint256)"}},"id":478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7350:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":479,"nodeType":"EmitStatement","src":"7345:58:0"}]},"documentation":{"id":428,"nodeType":"StructuredDocumentation","src":"6760:200:0","text":" @notice Function used by users to request a redemption from the fund\n @param amount The amount (in units of `rwa`) that a user wishes to redeem\n               from the fund"},"functionSelector":"eeb3c910","id":481,"implemented":true,"kind":"function","modifiers":[{"id":433,"kind":"modifierInvocation","modifierName":{"id":432,"name":"nonReentrant","nameLocations":["7031:12:0"],"nodeType":"IdentifierPath","referencedDeclaration":2059,"src":"7031:12:0"},"nodeType":"ModifierInvocation","src":"7031:12:0"},{"arguments":[{"id":435,"name":"redemptionPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69,"src":"7056:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":436,"kind":"modifierInvocation","modifierName":{"id":434,"name":"ifNotPaused","nameLocations":["7044:11:0"],"nodeType":"IdentifierPath","referencedDeclaration":1018,"src":"7044:11:0"},"nodeType":"ModifierInvocation","src":"7044:29:0"}],"name":"requestRedemption","nameLocation":"6972:17:0","nodeType":"FunctionDefinition","parameters":{"id":431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":430,"mutability":"mutable","name":"amount","nameLocation":"7003:6:0","nodeType":"VariableDeclaration","scope":481,"src":"6995:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":429,"name":"uint256","nodeType":"ElementaryTypeName","src":"6995:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6989:24:0"},"returnParameters":{"id":437,"nodeType":"ParameterList","parameters":[],"src":"7074:0:0"},"scope":1195,"src":"6963:445:0","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[3622],"body":{"id":501,"nodeType":"Block","src":"7893:1270:0","statements":[{"assignments":[494],"declarations":[{"constant":false,"id":494,"mutability":"mutable","name":"fees","nameLocation":"7907:4:0","nodeType":"VariableDeclaration","scope":501,"src":"7899:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":493,"name":"uint256","nodeType":"ElementaryTypeName","src":"7899:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":495,"nodeType":"VariableDeclarationStatement","src":"7899:12:0"},{"assignments":[497],"declarations":[{"constant":false,"id":497,"mutability":"mutable","name":"redemptionsSize","nameLocation":"7925:15:0","nodeType":"VariableDeclaration","scope":501,"src":"7917:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":496,"name":"uint256","nodeType":"ElementaryTypeName","src":"7917:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":500,"initialValue":{"expression":{"id":498,"name":"redemptionIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"7943:13:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7957:6:0","memberName":"length","nodeType":"MemberAccess","src":"7943:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7917:46:0"}]},"documentation":{"id":482,"nodeType":"StructuredDocumentation","src":"7412:351:0","text":" @notice Function to claim collateral corresponding to a redemption request\n @param redemptionIds an Array of redemption Id's which ought to fulfilled\n @dev Implicitly does all checks present in underlying `rwa`\n @dev The price Id corresponding to a redemptionId must be set prior to\n      claiming a redemption"},"functionSelector":"244f5acf","id":502,"implemented":true,"kind":"function","modifiers":[{"id":488,"kind":"modifierInvocation","modifierName":{"id":487,"name":"nonReentrant","nameLocations":["7850:12:0"],"nodeType":"IdentifierPath","referencedDeclaration":2059,"src":"7850:12:0"},"nodeType":"ModifierInvocation","src":"7850:12:0"},{"arguments":[{"id":490,"name":"redemptionPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69,"src":"7875:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":491,"kind":"modifierInvocation","modifierName":{"id":489,"name":"ifNotPaused","nameLocations":["7863:11:0"],"nodeType":"IdentifierPath","referencedDeclaration":1018,"src":"7863:11:0"},"nodeType":"ModifierInvocation","src":"7863:29:0"}],"name":"claimRedemption","nameLocation":"7775:15:0","nodeType":"FunctionDefinition","parameters":{"id":486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":485,"mutability":"mutable","name":"redemptionIds","nameLocation":"7815:13:0","nodeType":"VariableDeclaration","scope":502,"src":"7796:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":483,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7796:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":484,"nodeType":"ArrayTypeName","src":"7796:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"7790:42:0"},"returnParameters":{"id":492,"nodeType":"ParameterList","parameters":[],"src":"7893:0:0"},"scope":1195,"src":"7766:1397:0","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[3635],"body":{"id":552,"nodeType":"Block","src":"10052:313:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":520,"name":"depositIdToDepositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"10062:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Depositor_$3593_storage_$","typeString":"mapping(bytes32 => struct IRWAHub.Depositor storage ref)"}},"id":522,"indexExpression":{"id":521,"name":"txHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"10083:6:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10062:28:0","typeDescriptions":{"typeIdentifier":"t_struct$_Depositor_$3593_storage","typeString":"struct IRWAHub.Depositor storage ref"}},"id":523,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10091:4:0","memberName":"user","nodeType":"MemberAccess","referencedDeclaration":3588,"src":"10062:33:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10107:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":525,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10099:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":524,"name":"address","nodeType":"ElementaryTypeName","src":"10099:7:0","typeDescriptions":{}}},"id":527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10099:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10062:47:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":533,"nodeType":"IfStatement","src":"10058:102:0","trueBody":{"id":532,"nodeType":"Block","src":"10111:49:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":529,"name":"DepositProofAlreadyExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"10126:25:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10126:27:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":531,"nodeType":"RevertStatement","src":"10119:34:0"}]}},{"expression":{"id":542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":534,"name":"depositIdToDepositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"10165:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Depositor_$3593_storage_$","typeString":"mapping(bytes32 => struct IRWAHub.Depositor storage ref)"}},"id":536,"indexExpression":{"id":535,"name":"txHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"10186:6:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10165:28:0","typeDescriptions":{"typeIdentifier":"t_struct$_Depositor_$3593_storage","typeString":"struct IRWAHub.Depositor storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":538,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":507,"src":"10206:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":539,"name":"depositAmountAfterFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":509,"src":"10212:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10235:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":537,"name":"Depositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"10196:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Depositor_$3593_storage_ptr_$","typeString":"type(struct IRWAHub.Depositor storage pointer)"}},"id":541,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10196:41:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Depositor_$3593_memory_ptr","typeString":"struct IRWAHub.Depositor memory"}},"src":"10165:72:0","typeDescriptions":{"typeIdentifier":"t_struct$_Depositor_$3593_storage","typeString":"struct IRWAHub.Depositor storage ref"}},"id":543,"nodeType":"ExpressionStatement","src":"10165:72:0"},{"eventCall":{"arguments":[{"id":545,"name":"txHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"10273:6:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":546,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":507,"src":"10287:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":547,"name":"depositAmountAfterFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":509,"src":"10299:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":548,"name":"feeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":511,"src":"10328:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":549,"name":"timestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":513,"src":"10345:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":544,"name":"DepositProofAdded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3806,"src":"10248:17:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,uint256,uint256,uint256)"}},"id":550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10248:112:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":551,"nodeType":"EmitStatement","src":"10243:117:0"}]},"documentation":{"id":503,"nodeType":"StructuredDocumentation","src":"9345:522:0","text":" @notice Adds a deposit proof to the contract\n @param txHash                The transaction hash of the deposit\n @param user                  The address of the user who made the deposit\n @param depositAmountAfterFee The amount of the deposit after fees\n @param feeAmount             The amount of the fees taken\n @param timestamp             The timestamp of the deposit\n @dev txHash is used as the depositId in storage\n @dev All amounts are in decimals of `collateral`"},"functionSelector":"2b5eceff","id":553,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":517,"name":"RELAYER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":92,"src":"10038:12:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":518,"kind":"modifierInvocation","modifierName":{"id":516,"name":"onlyRole","nameLocations":["10029:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":1529,"src":"10029:8:0"},"nodeType":"ModifierInvocation","src":"10029:22:0"}],"name":"addProof","nameLocation":"9879:8:0","nodeType":"FunctionDefinition","overrides":{"id":515,"nodeType":"OverrideSpecifier","overrides":[],"src":"10020:8:0"},"parameters":{"id":514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":505,"mutability":"mutable","name":"txHash","nameLocation":"9901:6:0","nodeType":"VariableDeclaration","scope":553,"src":"9893:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":504,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9893:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":507,"mutability":"mutable","name":"user","nameLocation":"9921:4:0","nodeType":"VariableDeclaration","scope":553,"src":"9913:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":506,"name":"address","nodeType":"ElementaryTypeName","src":"9913:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":509,"mutability":"mutable","name":"depositAmountAfterFee","nameLocation":"9939:21:0","nodeType":"VariableDeclaration","scope":553,"src":"9931:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":508,"name":"uint256","nodeType":"ElementaryTypeName","src":"9931:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":511,"mutability":"mutable","name":"feeAmount","nameLocation":"9974:9:0","nodeType":"VariableDeclaration","scope":553,"src":"9966:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":510,"name":"uint256","nodeType":"ElementaryTypeName","src":"9966:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":513,"mutability":"mutable","name":"timestamp","nameLocation":"9997:9:0","nodeType":"VariableDeclaration","scope":553,"src":"9989:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":512,"name":"uint256","nodeType":"ElementaryTypeName","src":"9989:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9887:123:0"},"returnParameters":{"id":519,"nodeType":"ParameterList","parameters":[],"src":"10052:0:0"},"scope":1195,"src":"9870:495:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[3644],"body":{"id":641,"nodeType":"Block","src":"10953:529:0","statements":[{"assignments":[567],"declarations":[{"constant":false,"id":567,"mutability":"mutable","name":"depositsSize","nameLocation":"10967:12:0","nodeType":"VariableDeclaration","scope":641,"src":"10959:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":566,"name":"uint256","nodeType":"ElementaryTypeName","src":"10959:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":570,"initialValue":{"expression":{"id":568,"name":"depositIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":557,"src":"10982:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10993:6:0","memberName":"length","nodeType":"MemberAccess","src":"10982:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10959:40:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":571,"name":"depositsSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"11009:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":572,"name":"priceIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"11025:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11034:6:0","memberName":"length","nodeType":"MemberAccess","src":"11025:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11009:31:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":579,"nodeType":"IfStatement","src":"11005:78:0","trueBody":{"id":578,"nodeType":"Block","src":"11042:41:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":575,"name":"ArraySizeMismatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3863,"src":"11057:17:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11057:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":577,"nodeType":"RevertStatement","src":"11050:26:0"}]}},{"body":{"id":639,"nodeType":"Block","src":"11131:347:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":590,"name":"depositIdToDepositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"11143:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Depositor_$3593_storage_$","typeString":"mapping(bytes32 => struct IRWAHub.Depositor storage ref)"}},"id":594,"indexExpression":{"baseExpression":{"id":591,"name":"depositIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":557,"src":"11164:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":593,"indexExpression":{"id":592,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"11175:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11164:13:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11143:35:0","typeDescriptions":{"typeIdentifier":"t_struct$_Depositor_$3593_storage","typeString":"struct IRWAHub.Depositor storage ref"}},"id":595,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11179:4:0","memberName":"user","nodeType":"MemberAccess","referencedDeclaration":3588,"src":"11143:40:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11195:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":597,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11187:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":596,"name":"address","nodeType":"ElementaryTypeName","src":"11187:7:0","typeDescriptions":{}}},"id":599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11187:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11143:54:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":605,"nodeType":"IfStatement","src":"11139:101:0","trueBody":{"id":604,"nodeType":"Block","src":"11199:41:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":601,"name":"DepositorNull","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3883,"src":"11216:13:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11216:15:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":603,"nodeType":"RevertStatement","src":"11209:22:0"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":606,"name":"depositIdToDepositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"11251:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Depositor_$3593_storage_$","typeString":"mapping(bytes32 => struct IRWAHub.Depositor storage ref)"}},"id":610,"indexExpression":{"baseExpression":{"id":607,"name":"depositIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":557,"src":"11272:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":609,"indexExpression":{"id":608,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"11283:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11272:13:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11251:35:0","typeDescriptions":{"typeIdentifier":"t_struct$_Depositor_$3593_storage","typeString":"struct IRWAHub.Depositor storage ref"}},"id":611,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11287:7:0","memberName":"priceId","nodeType":"MemberAccess","referencedDeclaration":3592,"src":"11251:43:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11298:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11251:48:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":618,"nodeType":"IfStatement","src":"11247:99:0","trueBody":{"id":617,"nodeType":"Block","src":"11301:45:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":614,"name":"PriceIdAlreadySet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3891,"src":"11318:17:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11318:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":616,"nodeType":"RevertStatement","src":"11311:26:0"}]}},{"expression":{"id":628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":619,"name":"depositIdToDepositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"11353:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Depositor_$3593_storage_$","typeString":"mapping(bytes32 => struct IRWAHub.Depositor storage ref)"}},"id":623,"indexExpression":{"baseExpression":{"id":620,"name":"depositIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":557,"src":"11374:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":622,"indexExpression":{"id":621,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"11385:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11374:13:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11353:35:0","typeDescriptions":{"typeIdentifier":"t_struct$_Depositor_$3593_storage","typeString":"struct IRWAHub.Depositor storage ref"}},"id":624,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"11389:7:0","memberName":"priceId","nodeType":"MemberAccess","referencedDeclaration":3592,"src":"11353:43:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":625,"name":"priceIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"11399:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":627,"indexExpression":{"id":626,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"11408:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11399:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11353:57:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":629,"nodeType":"ExpressionStatement","src":"11353:57:0"},{"eventCall":{"arguments":[{"baseExpression":{"id":631,"name":"depositIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":557,"src":"11444:10:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":633,"indexExpression":{"id":632,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"11455:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11444:13:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":634,"name":"priceIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"11459:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":636,"indexExpression":{"id":635,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"11468:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11459:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":630,"name":"PriceIdSetForDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3779,"src":"11423:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11423:48:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":638,"nodeType":"EmitStatement","src":"11418:53:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":584,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"11108:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":585,"name":"depositsSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"11112:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11108:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":640,"initializationExpression":{"assignments":[581],"declarations":[{"constant":false,"id":581,"mutability":"mutable","name":"i","nameLocation":"11101:1:0","nodeType":"VariableDeclaration","scope":640,"src":"11093:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":580,"name":"uint256","nodeType":"ElementaryTypeName","src":"11093:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":583,"initialValue":{"hexValue":"30","id":582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11105:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11093:13:0"},"loopExpression":{"expression":{"id":588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"11126:3:0","subExpression":{"id":587,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"11128:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":589,"nodeType":"ExpressionStatement","src":"11126:3:0"},"nodeType":"ForStatement","src":"11088:390:0"}]},"documentation":{"id":554,"nodeType":"StructuredDocumentation","src":"10547:252:0","text":" @notice Admin function to associate a depositId with a given Price Id\n @param depositIds an Array of deposit Ids to be associated\n @param priceIds   an Array of price Ids to be associated\n @dev Array size must match"},"functionSelector":"87e2d06e","id":642,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":563,"name":"PRICE_ID_SETTER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"10931:20:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":564,"kind":"modifierInvocation","modifierName":{"id":562,"name":"onlyRole","nameLocations":["10922:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":1529,"src":"10922:8:0"},"nodeType":"ModifierInvocation","src":"10922:30:0"}],"name":"setPriceIdForDeposits","nameLocation":"10811:21:0","nodeType":"FunctionDefinition","parameters":{"id":561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":557,"mutability":"mutable","name":"depositIds","nameLocation":"10857:10:0","nodeType":"VariableDeclaration","scope":642,"src":"10838:29:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":555,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10838:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":556,"nodeType":"ArrayTypeName","src":"10838:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":560,"mutability":"mutable","name":"priceIds","nameLocation":"10892:8:0","nodeType":"VariableDeclaration","scope":642,"src":"10873:27:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":558,"name":"uint256","nodeType":"ElementaryTypeName","src":"10873:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":559,"nodeType":"ArrayTypeName","src":"10873:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"10832:72:0"},"returnParameters":{"id":565,"nodeType":"ParameterList","parameters":[],"src":"10953:0:0"},"scope":1195,"src":"10802:680:0","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[3653],"body":{"id":714,"nodeType":"Block","src":"11856:449:0","statements":[{"assignments":[656],"declarations":[{"constant":false,"id":656,"mutability":"mutable","name":"redemptionsSize","nameLocation":"11870:15:0","nodeType":"VariableDeclaration","scope":714,"src":"11862:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":655,"name":"uint256","nodeType":"ElementaryTypeName","src":"11862:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":659,"initialValue":{"expression":{"id":657,"name":"redemptionIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"11888:13:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11902:6:0","memberName":"length","nodeType":"MemberAccess","src":"11888:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11862:46:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":660,"name":"redemptionsSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":656,"src":"11918:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":661,"name":"priceIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"11937:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11946:6:0","memberName":"length","nodeType":"MemberAccess","src":"11937:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11918:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":668,"nodeType":"IfStatement","src":"11914:81:0","trueBody":{"id":667,"nodeType":"Block","src":"11954:41:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":664,"name":"ArraySizeMismatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3863,"src":"11969:17:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11969:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":666,"nodeType":"RevertStatement","src":"11962:26:0"}]}},{"body":{"id":712,"nodeType":"Block","src":"12046:255:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":679,"name":"redemptionIdToRedeemer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42,"src":"12058:22:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Redeemer_$3600_storage_$","typeString":"mapping(bytes32 => struct IRWAHub.Redeemer storage ref)"}},"id":683,"indexExpression":{"baseExpression":{"id":680,"name":"redemptionIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"12081:13:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":682,"indexExpression":{"id":681,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":670,"src":"12095:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12081:16:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12058:40:0","typeDescriptions":{"typeIdentifier":"t_struct$_Redeemer_$3600_storage","typeString":"struct IRWAHub.Redeemer storage ref"}},"id":684,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12099:7:0","memberName":"priceId","nodeType":"MemberAccess","referencedDeclaration":3599,"src":"12058:48:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12110:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12058:53:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":691,"nodeType":"IfStatement","src":"12054:104:0","trueBody":{"id":690,"nodeType":"Block","src":"12113:45:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":687,"name":"PriceIdAlreadySet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3891,"src":"12130:17:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12130:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":689,"nodeType":"RevertStatement","src":"12123:26:0"}]}},{"expression":{"id":701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":692,"name":"redemptionIdToRedeemer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42,"src":"12165:22:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Redeemer_$3600_storage_$","typeString":"mapping(bytes32 => struct IRWAHub.Redeemer storage ref)"}},"id":696,"indexExpression":{"baseExpression":{"id":693,"name":"redemptionIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"12188:13:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":695,"indexExpression":{"id":694,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":670,"src":"12202:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12188:16:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12165:40:0","typeDescriptions":{"typeIdentifier":"t_struct$_Redeemer_$3600_storage","typeString":"struct IRWAHub.Redeemer storage ref"}},"id":697,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12206:7:0","memberName":"priceId","nodeType":"MemberAccess","referencedDeclaration":3599,"src":"12165:48:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":698,"name":"priceIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"12216:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":700,"indexExpression":{"id":699,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":670,"src":"12225:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12216:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12165:62:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":702,"nodeType":"ExpressionStatement","src":"12165:62:0"},{"eventCall":{"arguments":[{"baseExpression":{"id":704,"name":"redemptionIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"12264:13:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":706,"indexExpression":{"id":705,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":670,"src":"12278:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12264:16:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":707,"name":"priceIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"12282:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":709,"indexExpression":{"id":708,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":670,"src":"12291:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12282:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":703,"name":"PriceIdSetForRedemption","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3786,"src":"12240:23:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12240:54:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":711,"nodeType":"EmitStatement","src":"12235:59:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":673,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":670,"src":"12020:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":674,"name":"redemptionsSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":656,"src":"12024:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12020:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":713,"initializationExpression":{"assignments":[670],"declarations":[{"constant":false,"id":670,"mutability":"mutable","name":"i","nameLocation":"12013:1:0","nodeType":"VariableDeclaration","scope":713,"src":"12005:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":669,"name":"uint256","nodeType":"ElementaryTypeName","src":"12005:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":672,"initialValue":{"hexValue":"30","id":671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12017:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12005:13:0"},"loopExpression":{"expression":{"id":677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"12041:3:0","subExpression":{"id":676,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":670,"src":"12043:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":678,"nodeType":"ExpressionStatement","src":"12041:3:0"},"nodeType":"ForStatement","src":"12000:301:0"}]},"documentation":{"id":643,"nodeType":"StructuredDocumentation","src":"11486:210:0","text":" @notice Admin function to associate redemptionId with a given priceId\n @param redemptionIds an Array of redemptionIds to associate\n @param priceIds  an Array of priceIds to associate"},"functionSelector":"aa85c1df","id":715,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":652,"name":"PRICE_ID_SETTER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"11834:20:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":653,"kind":"modifierInvocation","modifierName":{"id":651,"name":"onlyRole","nameLocations":["11825:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":1529,"src":"11825:8:0"},"nodeType":"ModifierInvocation","src":"11825:30:0"}],"name":"setPriceIdForRedemptions","nameLocation":"11708:24:0","nodeType":"FunctionDefinition","parameters":{"id":650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":646,"mutability":"mutable","name":"redemptionIds","nameLocation":"11757:13:0","nodeType":"VariableDeclaration","scope":715,"src":"11738:32:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":644,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11738:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":645,"nodeType":"ArrayTypeName","src":"11738:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":649,"mutability":"mutable","name":"priceIds","nameLocation":"11795:8:0","nodeType":"VariableDeclaration","scope":715,"src":"11776:27:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":647,"name":"uint256","nodeType":"ElementaryTypeName","src":"11776:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":648,"nodeType":"ArrayTypeName","src":"11776:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"11732:75:0"},"returnParameters":{"id":654,"nodeType":"ParameterList","parameters":[],"src":"11856:0:0"},"scope":1195,"src":"11699:606:0","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[3669],"body":{"id":760,"nodeType":"Block","src":"13135:428:0","statements":[{"assignments":[732],"declarations":[{"constant":false,"id":732,"mutability":"mutable","name":"oldDepositor","nameLocation":"13158:12:0","nodeType":"VariableDeclaration","scope":760,"src":"13141:29:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Depositor_$3593_memory_ptr","typeString":"struct IRWAHub.Depositor"},"typeName":{"id":731,"nodeType":"UserDefinedTypeName","pathNode":{"id":730,"name":"Depositor","nameLocations":["13141:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":3593,"src":"13141:9:0"},"referencedDeclaration":3593,"src":"13141:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_Depositor_$3593_storage_ptr","typeString":"struct IRWAHub.Depositor"}},"visibility":"internal"}],"id":736,"initialValue":{"baseExpression":{"id":733,"name":"depositIdToDepositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"13173:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Depositor_$3593_storage_$","typeString":"mapping(bytes32 => struct IRWAHub.Depositor storage ref)"}},"id":735,"indexExpression":{"id":734,"name":"depositIdToOverwrite","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"13194:20:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13173:42:0","typeDescriptions":{"typeIdentifier":"t_struct$_Depositor_$3593_storage","typeString":"struct IRWAHub.Depositor storage ref"}},"nodeType":"VariableDeclarationStatement","src":"13141:74:0"},{"expression":{"id":745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":737,"name":"depositIdToDepositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"13222:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Depositor_$3593_storage_$","typeString":"mapping(bytes32 => struct IRWAHub.Depositor storage ref)"}},"id":739,"indexExpression":{"id":738,"name":"depositIdToOverwrite","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"13243:20:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13222:42:0","typeDescriptions":{"typeIdentifier":"t_struct$_Depositor_$3593_storage","typeString":"struct IRWAHub.Depositor storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":741,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"13284:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":742,"name":"depositAmountAfterFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":722,"src":"13296:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":743,"name":"priceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":724,"src":"13325:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":740,"name":"Depositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"13267:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Depositor_$3593_storage_ptr_$","typeString":"type(struct IRWAHub.Depositor storage pointer)"}},"id":744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13267:71:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Depositor_$3593_memory_ptr","typeString":"struct IRWAHub.Depositor memory"}},"src":"13222:116:0","typeDescriptions":{"typeIdentifier":"t_struct$_Depositor_$3593_storage","typeString":"struct IRWAHub.Depositor storage ref"}},"id":746,"nodeType":"ExpressionStatement","src":"13222:116:0"},{"eventCall":{"arguments":[{"id":748,"name":"depositIdToOverwrite","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"13378:20:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":749,"name":"oldDepositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":732,"src":"13406:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_Depositor_$3593_memory_ptr","typeString":"struct IRWAHub.Depositor memory"}},"id":750,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13419:4:0","memberName":"user","nodeType":"MemberAccess","referencedDeclaration":3588,"src":"13406:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":751,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"13431:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":752,"name":"oldDepositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":732,"src":"13443:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_Depositor_$3593_memory_ptr","typeString":"struct IRWAHub.Depositor memory"}},"id":753,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13456:7:0","memberName":"priceId","nodeType":"MemberAccess","referencedDeclaration":3592,"src":"13443:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":754,"name":"priceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":724,"src":"13471:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":755,"name":"oldDepositor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":732,"src":"13486:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_Depositor_$3593_memory_ptr","typeString":"struct IRWAHub.Depositor memory"}},"id":756,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13499:24:0","memberName":"amountDepositedMinusFees","nodeType":"MemberAccess","referencedDeclaration":3590,"src":"13486:37:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":757,"name":"depositAmountAfterFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":722,"src":"13531:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":747,"name":"DepositorOverwritten","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3842,"src":"13350:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,address,uint256,uint256,uint256,uint256)"}},"id":758,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13350:208:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":759,"nodeType":"EmitStatement","src":"13345:213:0"}]},"documentation":{"id":716,"nodeType":"StructuredDocumentation","src":"12485:474:0","text":" @notice Admin function to overwrite entries in the depoitIdToDepositor\n         mapping\n @param depositIdToOverwrite  The depositId of the entry we wish to\n                              overwrite\n @param user                  The user for the new entry\n @param depositAmountAfterFee The deposit value for the new entry\n @param priceId               The priceId to be associated with the new\n                              entry"},"functionSelector":"de6afa82","id":761,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":727,"name":"MANAGER_ADMIN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"13120:13:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":728,"kind":"modifierInvocation","modifierName":{"id":726,"name":"onlyRole","nameLocations":["13111:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":1529,"src":"13111:8:0"},"nodeType":"ModifierInvocation","src":"13111:23:0"}],"name":"overwriteDepositor","nameLocation":"12971:18:0","nodeType":"FunctionDefinition","parameters":{"id":725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":718,"mutability":"mutable","name":"depositIdToOverwrite","nameLocation":"13003:20:0","nodeType":"VariableDeclaration","scope":761,"src":"12995:28:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":717,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12995:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":720,"mutability":"mutable","name":"user","nameLocation":"13037:4:0","nodeType":"VariableDeclaration","scope":761,"src":"13029:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":719,"name":"address","nodeType":"ElementaryTypeName","src":"13029:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":722,"mutability":"mutable","name":"depositAmountAfterFee","nameLocation":"13055:21:0","nodeType":"VariableDeclaration","scope":761,"src":"13047:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":721,"name":"uint256","nodeType":"ElementaryTypeName","src":"13047:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":724,"mutability":"mutable","name":"priceId","nameLocation":"13090:7:0","nodeType":"VariableDeclaration","scope":761,"src":"13082:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":723,"name":"uint256","nodeType":"ElementaryTypeName","src":"13082:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12989:112:0"},"returnParameters":{"id":729,"nodeType":"ParameterList","parameters":[],"src":"13135:0:0"},"scope":1195,"src":"12962:601:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[3680],"body":{"id":806,"nodeType":"Block","src":"14234:438:0","statements":[{"assignments":[778],"declarations":[{"constant":false,"id":778,"mutability":"mutable","name":"oldRedeemer","nameLocation":"14256:11:0","nodeType":"VariableDeclaration","scope":806,"src":"14240:27:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Redeemer_$3600_memory_ptr","typeString":"struct IRWAHub.Redeemer"},"typeName":{"id":777,"nodeType":"UserDefinedTypeName","pathNode":{"id":776,"name":"Redeemer","nameLocations":["14240:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":3600,"src":"14240:8:0"},"referencedDeclaration":3600,"src":"14240:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_Redeemer_$3600_storage_ptr","typeString":"struct IRWAHub.Redeemer"}},"visibility":"internal"}],"id":782,"initialValue":{"baseExpression":{"id":779,"name":"redemptionIdToRedeemer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42,"src":"14270:22:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Redeemer_$3600_storage_$","typeString":"mapping(bytes32 => struct IRWAHub.Redeemer storage ref)"}},"id":781,"indexExpression":{"id":780,"name":"redemptionIdToOverwrite","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":764,"src":"14300:23:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14270:59:0","typeDescriptions":{"typeIdentifier":"t_struct$_Redeemer_$3600_storage","typeString":"struct IRWAHub.Redeemer storage ref"}},"nodeType":"VariableDeclarationStatement","src":"14240:89:0"},{"expression":{"id":791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":783,"name":"redemptionIdToRedeemer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42,"src":"14335:22:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Redeemer_$3600_storage_$","typeString":"mapping(bytes32 => struct IRWAHub.Redeemer storage ref)"}},"id":785,"indexExpression":{"id":784,"name":"redemptionIdToOverwrite","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":764,"src":"14358:23:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14335:47:0","typeDescriptions":{"typeIdentifier":"t_struct$_Redeemer_$3600_storage","typeString":"struct IRWAHub.Redeemer storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":787,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"14401:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":788,"name":"rwaTokenAmountBurned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":768,"src":"14413:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":789,"name":"priceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"14441:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":786,"name":"Redeemer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3600,"src":"14385:8:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Redeemer_$3600_storage_ptr_$","typeString":"type(struct IRWAHub.Redeemer storage pointer)"}},"id":790,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14385:69:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Redeemer_$3600_memory_ptr","typeString":"struct IRWAHub.Redeemer memory"}},"src":"14335:119:0","typeDescriptions":{"typeIdentifier":"t_struct$_Redeemer_$3600_storage","typeString":"struct IRWAHub.Redeemer storage ref"}},"id":792,"nodeType":"ExpressionStatement","src":"14335:119:0"},{"eventCall":{"arguments":[{"id":794,"name":"redemptionIdToOverwrite","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":764,"src":"14492:23:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":795,"name":"oldRedeemer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":778,"src":"14523:11:0","typeDescriptions":{"typeIdentifier":"t_struct$_Redeemer_$3600_memory_ptr","typeString":"struct IRWAHub.Redeemer memory"}},"id":796,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14535:4:0","memberName":"user","nodeType":"MemberAccess","referencedDeclaration":3595,"src":"14523:16:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":797,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"14547:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":798,"name":"oldRedeemer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":778,"src":"14559:11:0","typeDescriptions":{"typeIdentifier":"t_struct$_Redeemer_$3600_memory_ptr","typeString":"struct IRWAHub.Redeemer memory"}},"id":799,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14571:7:0","memberName":"priceId","nodeType":"MemberAccess","referencedDeclaration":3599,"src":"14559:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":800,"name":"priceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"14586:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":801,"name":"oldRedeemer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":778,"src":"14601:11:0","typeDescriptions":{"typeIdentifier":"t_struct$_Redeemer_$3600_memory_ptr","typeString":"struct IRWAHub.Redeemer memory"}},"id":802,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14613:20:0","memberName":"amountRwaTokenBurned","nodeType":"MemberAccess","referencedDeclaration":3597,"src":"14601:32:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":803,"name":"rwaTokenAmountBurned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":768,"src":"14641:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":793,"name":"RedeemerOverwritten","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3858,"src":"14465:19:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,address,uint256,uint256,uint256,uint256)"}},"id":804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14465:202:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":805,"nodeType":"EmitStatement","src":"14460:207:0"}]},"documentation":{"id":762,"nodeType":"StructuredDocumentation","src":"13567:490:0","text":" @notice Admin function to overwrite entries in the redemptionIdToRedeemer\n         mapping\n @param redemptionIdToOverwrite The redemptionId of the entry we wish to\n                                overwrite\n @param user                    The user for the new entry\n @param rwaTokenAmountBurned    The burn amount for the new entry\n @param priceId                 The priceID to be associated with the new\n                                entry"},"functionSelector":"258492cd","id":807,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":773,"name":"MANAGER_ADMIN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"14219:13:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":774,"kind":"modifierInvocation","modifierName":{"id":772,"name":"onlyRole","nameLocations":["14210:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":1529,"src":"14210:8:0"},"nodeType":"ModifierInvocation","src":"14210:23:0"}],"name":"overwriteRedeemer","nameLocation":"14069:17:0","nodeType":"FunctionDefinition","parameters":{"id":771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":764,"mutability":"mutable","name":"redemptionIdToOverwrite","nameLocation":"14100:23:0","nodeType":"VariableDeclaration","scope":807,"src":"14092:31:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":763,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14092:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":766,"mutability":"mutable","name":"user","nameLocation":"14137:4:0","nodeType":"VariableDeclaration","scope":807,"src":"14129:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":765,"name":"address","nodeType":"ElementaryTypeName","src":"14129:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":768,"mutability":"mutable","name":"rwaTokenAmountBurned","nameLocation":"14155:20:0","nodeType":"VariableDeclaration","scope":807,"src":"14147:28:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":767,"name":"uint256","nodeType":"ElementaryTypeName","src":"14147:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":770,"mutability":"mutable","name":"priceId","nameLocation":"14189:7:0","nodeType":"VariableDeclaration","scope":807,"src":"14181:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":769,"name":"uint256","nodeType":"ElementaryTypeName","src":"14181:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14086:114:0"},"returnParameters":{"id":775,"nodeType":"ParameterList","parameters":[],"src":"14234:0:0"},"scope":1195,"src":"14060:612:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":837,"nodeType":"Block","src":"15001:289:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":816,"name":"_minimumRedemptionAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":810,"src":"15011:24:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":817,"name":"BPS_DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"15038:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15011:42:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":823,"nodeType":"IfStatement","src":"15007:86:0","trueBody":{"id":822,"nodeType":"Block","src":"15055:38:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":819,"name":"AmountTooSmall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"15070:14:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":820,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15070:16:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":821,"nodeType":"RevertStatement","src":"15063:23:0"}]}},{"assignments":[825],"declarations":[{"constant":false,"id":825,"mutability":"mutable","name":"oldRedeemMinimum","nameLocation":"15106:16:0","nodeType":"VariableDeclaration","scope":837,"src":"15098:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":824,"name":"uint256","nodeType":"ElementaryTypeName","src":"15098:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":827,"initialValue":{"id":826,"name":"minimumRedemptionAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47,"src":"15125:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"15098:50:0"},{"expression":{"id":830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":828,"name":"minimumRedemptionAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47,"src":"15154:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":829,"name":"_minimumRedemptionAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":810,"src":"15180:24:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15154:50:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":831,"nodeType":"ExpressionStatement","src":"15154:50:0"},{"eventCall":{"arguments":[{"id":833,"name":"oldRedeemMinimum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"15242:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":834,"name":"_minimumRedemptionAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":810,"src":"15260:24:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":832,"name":"MinimumRedemptionAmountSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"15215:26:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15215:70:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":836,"nodeType":"EmitStatement","src":"15210:75:0"}]},"documentation":{"id":808,"nodeType":"StructuredDocumentation","src":"14676:211:0","text":" @notice Admin function to set the minimum amount to redeem\n @param _minimumRedemptionAmount The minimum amount required to submit a\n                                 redemption request"},"functionSelector":"4ef1ccd1","id":838,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":813,"name":"MANAGER_ADMIN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"14986:13:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":814,"kind":"modifierInvocation","modifierName":{"id":812,"name":"onlyRole","nameLocations":["14977:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":1529,"src":"14977:8:0"},"nodeType":"ModifierInvocation","src":"14977:23:0"}],"name":"setMinimumRedemptionAmount","nameLocation":"14899:26:0","nodeType":"FunctionDefinition","parameters":{"id":811,"nodeType":"ParameterList","parameters":[{"constant":false,"id":810,"mutability":"mutable","name":"_minimumRedemptionAmount","nameLocation":"14939:24:0","nodeType":"VariableDeclaration","scope":838,"src":"14931:32:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":809,"name":"uint256","nodeType":"ElementaryTypeName","src":"14931:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14925:42:0"},"returnParameters":{"id":815,"nodeType":"ParameterList","parameters":[],"src":"15001:0:0"},"scope":1195,"src":"14890:400:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":868,"nodeType":"Block","src":"15602:270:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":847,"name":"minDepositAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"15612:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":848,"name":"BPS_DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"15631:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15612:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":854,"nodeType":"IfStatement","src":"15608:78:0","trueBody":{"id":853,"nodeType":"Block","src":"15648:38:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":850,"name":"AmountTooSmall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3881,"src":"15663:14:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15663:16:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":852,"nodeType":"RevertStatement","src":"15656:23:0"}]}},{"assignments":[856],"declarations":[{"constant":false,"id":856,"mutability":"mutable","name":"oldMinimumDepositAmount","nameLocation":"15699:23:0","nodeType":"VariableDeclaration","scope":868,"src":"15691:31:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":855,"name":"uint256","nodeType":"ElementaryTypeName","src":"15691:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":858,"initialValue":{"id":857,"name":"minimumDepositAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45,"src":"15725:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"15691:54:0"},{"expression":{"id":861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":859,"name":"minimumDepositAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45,"src":"15751:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":860,"name":"minDepositAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"15774:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15751:39:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":862,"nodeType":"ExpressionStatement","src":"15751:39:0"},{"eventCall":{"arguments":[{"id":864,"name":"oldMinimumDepositAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":856,"src":"15825:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":865,"name":"minDepositAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"15850:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":863,"name":"MinimumDepositAmountSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3701,"src":"15801:23:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15801:66:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":867,"nodeType":"EmitStatement","src":"15796:71:0"}]},"documentation":{"id":839,"nodeType":"StructuredDocumentation","src":"15294:205:0","text":" @notice Admin function to set the minimum amount required for a deposit\n @param minDepositAmount The minimum amount required to submit a deposit\n                         request"},"functionSelector":"aab483d6","id":869,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":844,"name":"MANAGER_ADMIN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"15587:13:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":845,"kind":"modifierInvocation","modifierName":{"id":843,"name":"onlyRole","nameLocations":["15578:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":1529,"src":"15578:8:0"},"nodeType":"ModifierInvocation","src":"15578:23:0"}],"name":"setMinimumDepositAmount","nameLocation":"15511:23:0","nodeType":"FunctionDefinition","parameters":{"id":842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":841,"mutability":"mutable","name":"minDepositAmount","nameLocation":"15548:16:0","nodeType":"VariableDeclaration","scope":869,"src":"15540:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":840,"name":"uint256","nodeType":"ElementaryTypeName","src":"15540:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15534:34:0"},"returnParameters":{"id":846,"nodeType":"ParameterList","parameters":[],"src":"15602:0:0"},"scope":1195,"src":"15502:370:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":899,"nodeType":"Block","src":"16146:178:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":878,"name":"_mintFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"16156:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":879,"name":"BPS_DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"16167:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16156:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":885,"nodeType":"IfStatement","src":"16152:67:0","trueBody":{"id":884,"nodeType":"Block","src":"16184:35:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":881,"name":"FeeTooLarge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3879,"src":"16199:11:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16199:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":883,"nodeType":"RevertStatement","src":"16192:20:0"}]}},{"assignments":[887],"declarations":[{"constant":false,"id":887,"mutability":"mutable","name":"oldMintFee","nameLocation":"16232:10:0","nodeType":"VariableDeclaration","scope":899,"src":"16224:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":886,"name":"uint256","nodeType":"ElementaryTypeName","src":"16224:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":889,"initialValue":{"id":888,"name":"mintFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":50,"src":"16245:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16224:28:0"},{"expression":{"id":892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":890,"name":"mintFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":50,"src":"16258:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":891,"name":"_mintFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"16268:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16258:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":893,"nodeType":"ExpressionStatement","src":"16258:18:0"},{"eventCall":{"arguments":[{"id":895,"name":"oldMintFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"16298:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":896,"name":"_mintFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"16310:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":894,"name":"MintFeeSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3715,"src":"16287:10:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16287:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":898,"nodeType":"EmitStatement","src":"16282:37:0"}]},"documentation":{"id":870,"nodeType":"StructuredDocumentation","src":"15876:196:0","text":" @notice Admin function to set the mint fee\n @param _mintFee The new mint fee specified in basis points\n @dev The maximum fee that can be set is 10_000 bps, or 100%"},"functionSelector":"eddd0d9c","id":900,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":875,"name":"MANAGER_ADMIN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"16131:13:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":876,"kind":"modifierInvocation","modifierName":{"id":874,"name":"onlyRole","nameLocations":["16122:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":1529,"src":"16122:8:0"},"nodeType":"ModifierInvocation","src":"16122:23:0"}],"name":"setMintFee","nameLocation":"16084:10:0","nodeType":"FunctionDefinition","parameters":{"id":873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":872,"mutability":"mutable","name":"_mintFee","nameLocation":"16103:8:0","nodeType":"VariableDeclaration","scope":900,"src":"16095:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":871,"name":"uint256","nodeType":"ElementaryTypeName","src":"16095:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16094:18:0"},"returnParameters":{"id":877,"nodeType":"ParameterList","parameters":[],"src":"16146:0:0"},"scope":1195,"src":"16075:249:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":930,"nodeType":"Block","src":"16628:218:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":909,"name":"_redemptionFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":903,"src":"16638:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":910,"name":"BPS_DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"16655:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16638:32:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":916,"nodeType":"IfStatement","src":"16634:73:0","trueBody":{"id":915,"nodeType":"Block","src":"16672:35:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":912,"name":"FeeTooLarge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3879,"src":"16687:11:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":913,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16687:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":914,"nodeType":"RevertStatement","src":"16680:20:0"}]}},{"assignments":[918],"declarations":[{"constant":false,"id":918,"mutability":"mutable","name":"oldRedeemFee","nameLocation":"16720:12:0","nodeType":"VariableDeclaration","scope":930,"src":"16712:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":917,"name":"uint256","nodeType":"ElementaryTypeName","src":"16712:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":920,"initialValue":{"id":919,"name":"redemptionFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":53,"src":"16735:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16712:36:0"},{"expression":{"id":923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":921,"name":"redemptionFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":53,"src":"16754:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":922,"name":"_redemptionFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":903,"src":"16770:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16754:30:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":924,"nodeType":"ExpressionStatement","src":"16754:30:0"},{"eventCall":{"arguments":[{"id":926,"name":"oldRedeemFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"16812:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":927,"name":"_redemptionFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":903,"src":"16826:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":925,"name":"RedemptionFeeSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3722,"src":"16795:16:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":928,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16795:46:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":929,"nodeType":"EmitStatement","src":"16790:51:0"}]},"documentation":{"id":901,"nodeType":"StructuredDocumentation","src":"16328:206:0","text":" @notice Admin function to set the redeem fee\n @param _redemptionFee The new redeem fee specified in basis points\n @dev The maximum fee that can be set is 10_000 bps, or 100%"},"functionSelector":"7dbc1df0","id":931,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":906,"name":"MANAGER_ADMIN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"16613:13:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":907,"kind":"modifierInvocation","modifierName":{"id":905,"name":"onlyRole","nameLocations":["16604:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":1529,"src":"16604:8:0"},"nodeType":"ModifierInvocation","src":"16604:23:0"}],"name":"setRedemptionFee","nameLocation":"16546:16:0","nodeType":"FunctionDefinition","parameters":{"id":904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":903,"mutability":"mutable","name":"_redemptionFee","nameLocation":"16576:14:0","nodeType":"VariableDeclaration","scope":931,"src":"16568:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":902,"name":"uint256","nodeType":"ElementaryTypeName","src":"16568:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16562:32:0"},"returnParameters":{"id":908,"nodeType":"ParameterList","parameters":[],"src":"16628:0:0"},"scope":1195,"src":"16537:309:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[3658],"body":{"id":958,"nodeType":"Block","src":"17069:130:0","statements":[{"assignments":[941],"declarations":[{"constant":false,"id":941,"mutability":"mutable","name":"oldPricer","nameLocation":"17083:9:0","nodeType":"VariableDeclaration","scope":958,"src":"17075:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":940,"name":"address","nodeType":"ElementaryTypeName","src":"17075:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":946,"initialValue":{"arguments":[{"id":944,"name":"pricer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"17103:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IPricerReader_$3584","typeString":"contract IPricerReader"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IPricerReader_$3584","typeString":"contract IPricerReader"}],"id":943,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17095:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":942,"name":"address","nodeType":"ElementaryTypeName","src":"17095:7:0","typeDescriptions":{}}},"id":945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17095:15:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"17075:35:0"},{"expression":{"id":951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":947,"name":"pricer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"17116:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IPricerReader_$3584","typeString":"contract IPricerReader"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":949,"name":"newPricer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":934,"src":"17139:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":948,"name":"IPricerReader","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3584,"src":"17125:13:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IPricerReader_$3584_$","typeString":"type(contract IPricerReader)"}},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17125:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IPricerReader_$3584","typeString":"contract IPricerReader"}},"src":"17116:33:0","typeDescriptions":{"typeIdentifier":"t_contract$_IPricerReader_$3584","typeString":"contract IPricerReader"}},"id":952,"nodeType":"ExpressionStatement","src":"17116:33:0"},{"eventCall":{"arguments":[{"id":954,"name":"oldPricer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"17173:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":955,"name":"newPricer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":934,"src":"17184:9:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":953,"name":"NewPricerSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3793,"src":"17160:12:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17160:34:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":957,"nodeType":"EmitStatement","src":"17155:39:0"}]},"documentation":{"id":932,"nodeType":"StructuredDocumentation","src":"16850:145:0","text":" @notice Admin function to set the address of the Pricer contract\n @param newPricer The address of the new pricer contract"},"functionSelector":"29390370","id":959,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":937,"name":"MANAGER_ADMIN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"17054:13:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":938,"kind":"modifierInvocation","modifierName":{"id":936,"name":"onlyRole","nameLocations":["17045:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":1529,"src":"17045:8:0"},"nodeType":"ModifierInvocation","src":"17045:23:0"}],"name":"setPricer","nameLocation":"17007:9:0","nodeType":"FunctionDefinition","parameters":{"id":935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":934,"mutability":"mutable","name":"newPricer","nameLocation":"17025:9:0","nodeType":"VariableDeclaration","scope":959,"src":"17017:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":933,"name":"address","nodeType":"ElementaryTypeName","src":"17017:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"17016:19:0"},"returnParameters":{"id":939,"nodeType":"ParameterList","parameters":[],"src":"17069:0:0"},"scope":1195,"src":"16998:201:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":981,"nodeType":"Block","src":"17442:142:0","statements":[{"assignments":[969],"declarations":[{"constant":false,"id":969,"mutability":"mutable","name":"oldFeeRecipient","nameLocation":"17456:15:0","nodeType":"VariableDeclaration","scope":981,"src":"17448:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":968,"name":"address","nodeType":"ElementaryTypeName","src":"17448:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":971,"initialValue":{"id":970,"name":"feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"17474:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"17448:38:0"},{"expression":{"id":974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":972,"name":"feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"17492:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":973,"name":"newFeeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":962,"src":"17507:15:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"17492:30:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":975,"nodeType":"ExpressionStatement","src":"17492:30:0"},{"eventCall":{"arguments":[{"id":977,"name":"oldFeeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"17549:15:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":978,"name":"feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"17566:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":976,"name":"FeeRecipientSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3687,"src":"17533:15:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":979,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17533:46:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":980,"nodeType":"EmitStatement","src":"17528:51:0"}]},"documentation":{"id":960,"nodeType":"StructuredDocumentation","src":"17203:145:0","text":" @notice Admin function to set the address of `feeRecipient`\n @param newFeeRecipient The address of the new `feeRecipient`"},"functionSelector":"e74b981b","id":982,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":965,"name":"MANAGER_ADMIN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"17427:13:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":966,"kind":"modifierInvocation","modifierName":{"id":964,"name":"onlyRole","nameLocations":["17418:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":1529,"src":"17418:8:0"},"nodeType":"ModifierInvocation","src":"17418:23:0"}],"name":"setFeeRecipient","nameLocation":"17360:15:0","nodeType":"FunctionDefinition","parameters":{"id":963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":962,"mutability":"mutable","name":"newFeeRecipient","nameLocation":"17389:15:0","nodeType":"VariableDeclaration","scope":982,"src":"17381:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":961,"name":"address","nodeType":"ElementaryTypeName","src":"17381:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"17375:33:0"},"returnParameters":{"id":967,"nodeType":"ParameterList","parameters":[],"src":"17442:0:0"},"scope":1195,"src":"17351:233:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1004,"nodeType":"Block","src":"17822:138:0","statements":[{"assignments":[992],"declarations":[{"constant":false,"id":992,"mutability":"mutable","name":"oldAssetSender","nameLocation":"17836:14:0","nodeType":"VariableDeclaration","scope":1004,"src":"17828:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":991,"name":"address","nodeType":"ElementaryTypeName","src":"17828:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":994,"initialValue":{"id":993,"name":"assetSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"17853:11:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"17828:36:0"},{"expression":{"id":997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":995,"name":"assetSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"17870:11:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":996,"name":"newAssetSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":985,"src":"17884:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"17870:28:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":998,"nodeType":"ExpressionStatement","src":"17870:28:0"},{"eventCall":{"arguments":[{"id":1000,"name":"oldAssetSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"17924:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1001,"name":"newAssetSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":985,"src":"17940:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":999,"name":"AssetSenderSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3694,"src":"17909:14:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":1002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17909:46:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1003,"nodeType":"EmitStatement","src":"17904:51:0"}]},"documentation":{"id":983,"nodeType":"StructuredDocumentation","src":"17588:142:0","text":" @notice Admin function to set the address of `assetSender`\n @param newAssetSender The address of the new `assetSender`"},"functionSelector":"525decd6","id":1005,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":988,"name":"MANAGER_ADMIN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"17807:13:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":989,"kind":"modifierInvocation","modifierName":{"id":987,"name":"onlyRole","nameLocations":["17798:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":1529,"src":"17798:8:0"},"nodeType":"ModifierInvocation","src":"17798:23:0"}],"name":"setAssetSender","nameLocation":"17742:14:0","nodeType":"FunctionDefinition","parameters":{"id":986,"nodeType":"ParameterList","parameters":[{"constant":false,"id":985,"mutability":"mutable","name":"newAssetSender","nameLocation":"17770:14:0","nodeType":"VariableDeclaration","scope":1005,"src":"17762:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":984,"name":"address","nodeType":"ElementaryTypeName","src":"17762:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"17756:32:0"},"returnParameters":{"id":990,"nodeType":"ParameterList","parameters":[],"src":"17822:0:0"},"scope":1195,"src":"17733:227:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1017,"nodeType":"Block","src":"18296:67:0","statements":[{"condition":{"id":1010,"name":"feature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1008,"src":"18306:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1015,"nodeType":"IfStatement","src":"18302:50:0","trueBody":{"id":1014,"nodeType":"Block","src":"18315:37:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1011,"name":"FeaturePaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3889,"src":"18330:13:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1012,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18330:15:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1013,"nodeType":"RevertStatement","src":"18323:22:0"}]}},{"id":1016,"nodeType":"PlaceholderStatement","src":"18357:1:0"}]},"documentation":{"id":1006,"nodeType":"StructuredDocumentation","src":"18139:119:0","text":" @notice Modifier to check if a feature is paused\n @param feature The feature to check if paused"},"id":1018,"name":"ifNotPaused","nameLocation":"18270:11:0","nodeType":"ModifierDefinition","parameters":{"id":1009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1008,"mutability":"mutable","name":"feature","nameLocation":"18287:7:0","nodeType":"VariableDeclaration","scope":1018,"src":"18282:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1007,"name":"bool","nodeType":"ElementaryTypeName","src":"18282:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"18281:14:0"},"src":"18261:102:0","virtual":false,"visibility":"internal"},{"body":{"id":1034,"nodeType":"Block","src":"18494:77:0","statements":[{"expression":{"id":1027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1025,"name":"subscriptionPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"18500:18:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"18521:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"18500:25:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1028,"nodeType":"ExpressionStatement","src":"18500:25:0"},{"eventCall":{"arguments":[{"expression":{"id":1030,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"18555:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18559:6:0","memberName":"sender","nodeType":"MemberAccess","src":"18555:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1029,"name":"SubscriptionPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"18536:18:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18536:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1033,"nodeType":"EmitStatement","src":"18531:35:0"}]},"documentation":{"id":1019,"nodeType":"StructuredDocumentation","src":"18367:63:0","text":" @notice Function to pause subscription to RWAHub"},"functionSelector":"2056aa12","id":1035,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":1022,"name":"PAUSER_ADMIN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"18480:12:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1023,"kind":"modifierInvocation","modifierName":{"id":1021,"name":"onlyRole","nameLocations":["18471:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":1529,"src":"18471:8:0"},"nodeType":"ModifierInvocation","src":"18471:22:0"}],"name":"pauseSubscription","nameLocation":"18442:17:0","nodeType":"FunctionDefinition","parameters":{"id":1020,"nodeType":"ParameterList","parameters":[],"src":"18459:2:0"},"returnParameters":{"id":1024,"nodeType":"ParameterList","parameters":[],"src":"18494:0:0"},"scope":1195,"src":"18433:138:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1051,"nodeType":"Block","src":"18699:73:0","statements":[{"expression":{"id":1044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1042,"name":"redemptionPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69,"src":"18705:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"18724:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"18705:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1045,"nodeType":"ExpressionStatement","src":"18705:23:0"},{"eventCall":{"arguments":[{"expression":{"id":1047,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"18756:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18760:6:0","memberName":"sender","nodeType":"MemberAccess","src":"18756:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1046,"name":"RedemptionPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3816,"src":"18739:16:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18739:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1050,"nodeType":"EmitStatement","src":"18734:33:0"}]},"documentation":{"id":1036,"nodeType":"StructuredDocumentation","src":"18575:62:0","text":" @notice Function to pause redemptions to RWAHub"},"functionSelector":"92bccb80","id":1052,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":1039,"name":"PAUSER_ADMIN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"18685:12:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1040,"kind":"modifierInvocation","modifierName":{"id":1038,"name":"onlyRole","nameLocations":["18676:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":1529,"src":"18676:8:0"},"nodeType":"ModifierInvocation","src":"18676:22:0"}],"name":"pauseRedemption","nameLocation":"18649:15:0","nodeType":"FunctionDefinition","parameters":{"id":1037,"nodeType":"ParameterList","parameters":[],"src":"18664:2:0"},"returnParameters":{"id":1041,"nodeType":"ParameterList","parameters":[],"src":"18699:0:0"},"scope":1195,"src":"18640:132:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1068,"nodeType":"Block","src":"18909:80:0","statements":[{"expression":{"id":1061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1059,"name":"subscriptionPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"18915:18:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"18936:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"18915:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1062,"nodeType":"ExpressionStatement","src":"18915:26:0"},{"eventCall":{"arguments":[{"expression":{"id":1064,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"18973:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18977:6:0","memberName":"sender","nodeType":"MemberAccess","src":"18973:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1063,"name":"SubscriptionUnpaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3821,"src":"18952:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18952:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1067,"nodeType":"EmitStatement","src":"18947:37:0"}]},"documentation":{"id":1053,"nodeType":"StructuredDocumentation","src":"18776:66:0","text":" @notice Function to unpause subscriptions to RWAHub"},"functionSelector":"837018fa","id":1069,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":1056,"name":"MANAGER_ADMIN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"18894:13:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1057,"kind":"modifierInvocation","modifierName":{"id":1055,"name":"onlyRole","nameLocations":["18885:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":1529,"src":"18885:8:0"},"nodeType":"ModifierInvocation","src":"18885:23:0"}],"name":"unpauseSubscription","nameLocation":"18854:19:0","nodeType":"FunctionDefinition","parameters":{"id":1054,"nodeType":"ParameterList","parameters":[],"src":"18873:2:0"},"returnParameters":{"id":1058,"nodeType":"ParameterList","parameters":[],"src":"18909:0:0"},"scope":1195,"src":"18845:144:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1085,"nodeType":"Block","src":"19122:76:0","statements":[{"expression":{"id":1078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1076,"name":"redemptionPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69,"src":"19128:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1077,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"19147:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"19128:24:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1079,"nodeType":"ExpressionStatement","src":"19128:24:0"},{"eventCall":{"arguments":[{"expression":{"id":1081,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"19182:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19186:6:0","memberName":"sender","nodeType":"MemberAccess","src":"19182:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1080,"name":"RedemptionUnpaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3826,"src":"19163:18:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1083,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19163:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1084,"nodeType":"EmitStatement","src":"19158:35:0"}]},"documentation":{"id":1070,"nodeType":"StructuredDocumentation","src":"18993:64:0","text":" @notice Function to unpause redemptions to RWAHub"},"functionSelector":"8d044c06","id":1086,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":1073,"name":"MANAGER_ADMIN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"19107:13:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1074,"kind":"modifierInvocation","modifierName":{"id":1072,"name":"onlyRole","nameLocations":["19098:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":1529,"src":"19098:8:0"},"nodeType":"ModifierInvocation","src":"19098:23:0"}],"name":"unpauseRedemption","nameLocation":"19069:17:0","nodeType":"FunctionDefinition","parameters":{"id":1071,"nodeType":"ParameterList","parameters":[],"src":"19086:2:0"},"returnParameters":{"id":1075,"nodeType":"ParameterList","parameters":[],"src":"19122:0:0"},"scope":1195,"src":"19060:138:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1101,"nodeType":"Block","src":"20474:64:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1094,"name":"collateralAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1089,"src":"20488:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1095,"name":"mintFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":50,"src":"20507:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20488:26:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1097,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"20487:28:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1098,"name":"BPS_DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"20518:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20487:46:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1093,"id":1100,"nodeType":"Return","src":"20480:53:0"}]},"documentation":{"id":1087,"nodeType":"StructuredDocumentation","src":"20148:235:0","text":" @notice Given amount of `collateral`, returns how much in fees\n         are owed\n @param collateralAmount Amount `collateral` to calculate fees\n                         (in decimals of `collateral`)"},"id":1102,"implemented":true,"kind":"function","modifiers":[],"name":"_getMintFees","nameLocation":"20395:12:0","nodeType":"FunctionDefinition","parameters":{"id":1090,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1089,"mutability":"mutable","name":"collateralAmount","nameLocation":"20421:16:0","nodeType":"VariableDeclaration","scope":1102,"src":"20413:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1088,"name":"uint256","nodeType":"ElementaryTypeName","src":"20413:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20407:34:0"},"returnParameters":{"id":1093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1092,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1102,"src":"20465:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1091,"name":"uint256","nodeType":"ElementaryTypeName","src":"20465:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20464:9:0"},"scope":1195,"src":"20386:152:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1117,"nodeType":"Block","src":"20872:70:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1110,"name":"collateralAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1105,"src":"20886:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1111,"name":"redemptionFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":53,"src":"20905:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20886:32:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1113,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"20885:34:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1114,"name":"BPS_DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"20922:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20885:52:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1109,"id":1116,"nodeType":"Return","src":"20878:59:0"}]},"documentation":{"id":1103,"nodeType":"StructuredDocumentation","src":"20542:233:0","text":" @notice Given amount of `collateral`, returns how much in fees\n         are owed\n @param collateralAmount Amount of `collateral` to calculate fees\n                         (in decimals of `collateral`)"},"id":1118,"implemented":true,"kind":"function","modifiers":[],"name":"_getRedemptionFees","nameLocation":"20787:18:0","nodeType":"FunctionDefinition","parameters":{"id":1106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1105,"mutability":"mutable","name":"collateralAmount","nameLocation":"20819:16:0","nodeType":"VariableDeclaration","scope":1118,"src":"20811:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1104,"name":"uint256","nodeType":"ElementaryTypeName","src":"20811:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20805:34:0"},"returnParameters":{"id":1109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1108,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1118,"src":"20863:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1107,"name":"uint256","nodeType":"ElementaryTypeName","src":"20863:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20862:9:0"},"scope":1195,"src":"20778:164:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1142,"nodeType":"Block","src":"21312:164:0","statements":[{"assignments":[1129],"declarations":[{"constant":false,"id":1129,"mutability":"mutable","name":"amountE36","nameLocation":"21326:9:0","nodeType":"VariableDeclaration","scope":1142,"src":"21318:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1128,"name":"uint256","nodeType":"ElementaryTypeName","src":"21318:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1135,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1131,"name":"depositAmt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1121,"src":"21347:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1130,"name":"_scaleUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"21338:8:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":1132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21338:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31653138","id":1133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21361:4:0","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"src":"21338:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"21318:47:0"},{"expression":{"id":1140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1136,"name":"rwaAmountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"21439:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1137,"name":"amountE36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"21454:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1138,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1123,"src":"21466:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21454:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21439:32:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1141,"nodeType":"ExpressionStatement","src":"21439:32:0"}]},"documentation":{"id":1119,"nodeType":"StructuredDocumentation","src":"20946:239:0","text":" @notice Given a deposit amount and priceId, returns the amount\n         of `rwa` due\n @param depositAmt The amount deposited in units of `collateral`\n @param price      The price associated with this deposit"},"id":1143,"implemented":true,"kind":"function","modifiers":[],"name":"_getMintAmountForPrice","nameLocation":"21197:22:0","nodeType":"FunctionDefinition","parameters":{"id":1124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1121,"mutability":"mutable","name":"depositAmt","nameLocation":"21233:10:0","nodeType":"VariableDeclaration","scope":1143,"src":"21225:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1120,"name":"uint256","nodeType":"ElementaryTypeName","src":"21225:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1123,"mutability":"mutable","name":"price","nameLocation":"21257:5:0","nodeType":"VariableDeclaration","scope":1143,"src":"21249:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1122,"name":"uint256","nodeType":"ElementaryTypeName","src":"21249:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21219:47:0"},"returnParameters":{"id":1127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1126,"mutability":"mutable","name":"rwaAmountOut","nameLocation":"21298:12:0","nodeType":"VariableDeclaration","scope":1143,"src":"21290:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1125,"name":"uint256","nodeType":"ElementaryTypeName","src":"21290:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21289:22:0"},"scope":1195,"src":"21188:288:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1167,"nodeType":"Block","src":"21895:110:0","statements":[{"assignments":[1154],"declarations":[{"constant":false,"id":1154,"mutability":"mutable","name":"amountE36","nameLocation":"21909:9:0","nodeType":"VariableDeclaration","scope":1167,"src":"21901:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1153,"name":"uint256","nodeType":"ElementaryTypeName","src":"21901:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1158,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1155,"name":"rwaTokenAmountBurned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1146,"src":"21921:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1156,"name":"price","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1148,"src":"21944:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21921:28:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"21901:48:0"},{"expression":{"id":1165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1159,"name":"collateralOwed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"21955:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1161,"name":"amountE36","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1154,"src":"21983:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"31653138","id":1162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21995:4:0","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"src":"21983:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1160,"name":"_scaleDown","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"21972:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":1164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21972:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21955:45:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1166,"nodeType":"ExpressionStatement","src":"21955:45:0"}]},"documentation":{"id":1144,"nodeType":"StructuredDocumentation","src":"21480:272:0","text":" @notice Given a redemption amount and a priceId, returns the amount\n         of `collateral` due\n @param rwaTokenAmountBurned The amount of `rwa` burned for a redemption\n @param price                The price associated with this redemption"},"id":1168,"implemented":true,"kind":"function","modifiers":[],"name":"_getRedemptionAmountForRwa","nameLocation":"21764:26:0","nodeType":"FunctionDefinition","parameters":{"id":1149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1146,"mutability":"mutable","name":"rwaTokenAmountBurned","nameLocation":"21804:20:0","nodeType":"VariableDeclaration","scope":1168,"src":"21796:28:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1145,"name":"uint256","nodeType":"ElementaryTypeName","src":"21796:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1148,"mutability":"mutable","name":"price","nameLocation":"21838:5:0","nodeType":"VariableDeclaration","scope":1168,"src":"21830:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1147,"name":"uint256","nodeType":"ElementaryTypeName","src":"21830:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21790:57:0"},"returnParameters":{"id":1152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1151,"mutability":"mutable","name":"collateralOwed","nameLocation":"21879:14:0","nodeType":"VariableDeclaration","scope":1168,"src":"21871:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1150,"name":"uint256","nodeType":"ElementaryTypeName","src":"21871:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21870:24:0"},"scope":1195,"src":"21755:250:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1180,"nodeType":"Block","src":"22293:45:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1176,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"22306:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1177,"name":"decimalsMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"22315:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22306:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1175,"id":1179,"nodeType":"Return","src":"22299:34:0"}]},"documentation":{"id":1169,"nodeType":"StructuredDocumentation","src":"22009:215:0","text":" @notice Scale provided amount up by `decimalsMultiplier`\n @dev This helper is used for converting the collateral's decimals\n      representation to the RWA amount decimals representation."},"id":1181,"implemented":true,"kind":"function","modifiers":[],"name":"_scaleUp","nameLocation":"22236:8:0","nodeType":"FunctionDefinition","parameters":{"id":1172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1171,"mutability":"mutable","name":"amount","nameLocation":"22253:6:0","nodeType":"VariableDeclaration","scope":1181,"src":"22245:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1170,"name":"uint256","nodeType":"ElementaryTypeName","src":"22245:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22244:16:0"},"returnParameters":{"id":1175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1174,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1181,"src":"22284:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1173,"name":"uint256","nodeType":"ElementaryTypeName","src":"22284:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22283:9:0"},"scope":1195,"src":"22227:111:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1193,"nodeType":"Block","src":"22622:45:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1189,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1184,"src":"22635:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1190,"name":"decimalsMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"22644:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22635:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1188,"id":1192,"nodeType":"Return","src":"22628:34:0"}]},"documentation":{"id":1182,"nodeType":"StructuredDocumentation","src":"22342:209:0","text":" @notice Scale provided amount down by `decimalsMultiplier`\n @dev This helper is used for converting `rwa`'s decimal\n      representation to the `collateral`'s decimal representation"},"id":1194,"implemented":true,"kind":"function","modifiers":[],"name":"_scaleDown","nameLocation":"22563:10:0","nodeType":"FunctionDefinition","parameters":{"id":1185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1184,"mutability":"mutable","name":"amount","nameLocation":"22582:6:0","nodeType":"VariableDeclaration","scope":1194,"src":"22574:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1183,"name":"uint256","nodeType":"ElementaryTypeName","src":"22574:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22573:16:0"},"returnParameters":{"id":1188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1187,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1194,"src":"22613:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1186,"name":"uint256","nodeType":"ElementaryTypeName","src":"22613:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22612:9:0"},"scope":1195,"src":"22554:113:0","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1196,"src":"608:22061:0","usedErrors":[3861,3863,3865,3867,3869,3871,3873,3875,3877,3879,3881,3883,3885,3887,3889,3891]}],"src":"32:22638:0"},"id":0},"contracts/RWAHubOffChainRedemptions.sol":{"ast":{"absolutePath":"contracts/RWAHubOffChainRedemptions.sol","exportedSymbols":{"AccessControl":[1797],"AccessControlEnumerable":[1922],"Address":[2682],"Context":[2704],"ERC165":[2728],"EnumerableSet":[3327],"IAccessControl":[1995],"IAccessControlEnumerable":[2020],"IERC165":[3339],"IERC20":[2138],"IERC20Metadata":[2163],"IPricerReader":[3584],"IRWAHub":[3892],"IRWAHubOffChainRedemptions":[3941],"IRWALike":[3966],"RWAHub":[1195],"RWAHubOffChainRedemptions":[1345],"ReentrancyGuard":[2060],"SafeERC20":[2387],"Strings":[3542]},"id":1346,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1197,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"32:23:1"},{"absolutePath":"contracts/RWAHub.sol","file":"contracts/RWAHub.sol","id":1198,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1346,"sourceUnit":1196,"src":"57:30:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IRWAHubOffChainRedemptions.sol","file":"contracts/interfaces/IRWAHubOffChainRedemptions.sol","id":1199,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1346,"sourceUnit":3942,"src":"88:61:1","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1200,"name":"RWAHub","nameLocations":["200:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":1195,"src":"200:6:1"},"id":1201,"nodeType":"InheritanceSpecifier","src":"200:6:1"},{"baseName":{"id":1202,"name":"IRWAHubOffChainRedemptions","nameLocations":["210:26:1"],"nodeType":"IdentifierPath","referencedDeclaration":3941,"src":"210:26:1"},"id":1203,"nodeType":"InheritanceSpecifier","src":"210:26:1"}],"canonicalName":"RWAHubOffChainRedemptions","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1345,"linearizedBaseContracts":[1345,3941,1195,1922,1797,2728,3339,2020,1995,2704,2060,3892],"name":"RWAHubOffChainRedemptions","nameLocation":"169:25:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"dd45eef6","id":1205,"mutability":"mutable","name":"offChainRedemptionPaused","nameLocation":"302:24:1","nodeType":"VariableDeclaration","scope":1345,"src":"290:36:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1204,"name":"bool","nodeType":"ElementaryTypeName","src":"290:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"public"},{"constant":false,"functionSelector":"12589fb5","id":1207,"mutability":"mutable","name":"minimumOffChainRedemptionAmount","nameLocation":"387:31:1","nodeType":"VariableDeclaration","scope":1345,"src":"372:46:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1206,"name":"uint256","nodeType":"ElementaryTypeName","src":"372:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"body":{"id":1240,"nodeType":"Block","src":"840:158:1","statements":[{"expression":{"id":1238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1236,"name":"minimumOffChainRedemptionAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"935:31:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1237,"name":"_minimumRedemptionAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1223,"src":"969:24:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"935:58:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1239,"nodeType":"ExpressionStatement","src":"935:58:1"}]},"id":1241,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":1226,"name":"_collateral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"672:11:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1227,"name":"_rwa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1211,"src":"691:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1228,"name":"managerAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1213,"src":"703:12:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1229,"name":"pauser","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1215,"src":"723:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1230,"name":"_assetSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1217,"src":"737:12:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1231,"name":"_feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1219,"src":"757:13:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1232,"name":"_minimumDepositAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1221,"src":"778:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1233,"name":"_minimumRedemptionAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1223,"src":"807:24:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1234,"kind":"baseConstructorSpecifier","modifierName":{"id":1225,"name":"RWAHub","nameLocations":["658:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":1195,"src":"658:6:1"},"nodeType":"ModifierInvocation","src":"658:179:1"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1209,"mutability":"mutable","name":"_collateral","nameLocation":"448:11:1","nodeType":"VariableDeclaration","scope":1241,"src":"440:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1208,"name":"address","nodeType":"ElementaryTypeName","src":"440:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1211,"mutability":"mutable","name":"_rwa","nameLocation":"473:4:1","nodeType":"VariableDeclaration","scope":1241,"src":"465:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1210,"name":"address","nodeType":"ElementaryTypeName","src":"465:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1213,"mutability":"mutable","name":"managerAdmin","nameLocation":"491:12:1","nodeType":"VariableDeclaration","scope":1241,"src":"483:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1212,"name":"address","nodeType":"ElementaryTypeName","src":"483:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1215,"mutability":"mutable","name":"pauser","nameLocation":"517:6:1","nodeType":"VariableDeclaration","scope":1241,"src":"509:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1214,"name":"address","nodeType":"ElementaryTypeName","src":"509:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1217,"mutability":"mutable","name":"_assetSender","nameLocation":"537:12:1","nodeType":"VariableDeclaration","scope":1241,"src":"529:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1216,"name":"address","nodeType":"ElementaryTypeName","src":"529:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1219,"mutability":"mutable","name":"_feeRecipient","nameLocation":"563:13:1","nodeType":"VariableDeclaration","scope":1241,"src":"555:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1218,"name":"address","nodeType":"ElementaryTypeName","src":"555:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1221,"mutability":"mutable","name":"_minimumDepositAmount","nameLocation":"590:21:1","nodeType":"VariableDeclaration","scope":1241,"src":"582:29:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1220,"name":"uint256","nodeType":"ElementaryTypeName","src":"582:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1223,"mutability":"mutable","name":"_minimumRedemptionAmount","nameLocation":"625:24:1","nodeType":"VariableDeclaration","scope":1241,"src":"617:32:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1222,"name":"uint256","nodeType":"ElementaryTypeName","src":"617:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"434:219:1"},"returnParameters":{"id":1235,"nodeType":"ParameterList","parameters":[],"src":"840:0:1"},"scope":1345,"src":"423:575:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[3901],"body":{"id":1286,"nodeType":"Block","src":"1462:382:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1254,"name":"amountRWATokenToRedeem","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"1472:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1255,"name":"minimumOffChainRedemptionAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"1497:31:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1472:56:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1261,"nodeType":"IfStatement","src":"1468:104:1","trueBody":{"id":1260,"nodeType":"Block","src":"1530:42:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1257,"name":"RedemptionTooSmall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3867,"src":"1545:18:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1545:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1259,"nodeType":"RevertStatement","src":"1538:27:1"}]}},{"assignments":[1263],"declarations":[{"constant":false,"id":1263,"mutability":"mutable","name":"redemptionId","nameLocation":"1586:12:1","nodeType":"VariableDeclaration","scope":1286,"src":"1578:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1262,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1578:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1269,"initialValue":{"arguments":[{"id":1267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1609:26:1","subExpression":{"id":1266,"name":"redemptionRequestCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":64,"src":"1609:24:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1265,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1601:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1264,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1601:7:1","typeDescriptions":{}}},"id":1268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1601:35:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1578:58:1"},{"expression":{"arguments":[{"expression":{"id":1273,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1656:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1660:6:1","memberName":"sender","nodeType":"MemberAccess","src":"1656:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1275,"name":"amountRWATokenToRedeem","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"1668:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1270,"name":"rwa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22,"src":"1643:3:1","typeDescriptions":{"typeIdentifier":"t_contract$_IRWALike_$3966","typeString":"contract IRWALike"}},"id":1272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1647:8:1","memberName":"burnFrom","nodeType":"MemberAccess","referencedDeclaration":3965,"src":"1643:12:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) external"}},"id":1276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1643:48:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1277,"nodeType":"ExpressionStatement","src":"1643:48:1"},{"eventCall":{"arguments":[{"expression":{"id":1279,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1746:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1750:6:1","memberName":"sender","nodeType":"MemberAccess","src":"1746:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1281,"name":"redemptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1263,"src":"1764:12:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1282,"name":"amountRWATokenToRedeem","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"1784:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1283,"name":"offChainDestination","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1246,"src":"1814:19:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1278,"name":"RedemptionRequestedServicedOffChain","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3923,"src":"1703:35:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bytes32_$_t_uint256_$_t_bytes32_$returns$__$","typeString":"function (address,bytes32,uint256,bytes32)"}},"id":1284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1703:136:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1285,"nodeType":"EmitStatement","src":"1698:141:1"}]},"documentation":{"id":1242,"nodeType":"StructuredDocumentation","src":"1002:281:1","text":" @notice Request a redemption to be serviced off chain.\n @param amountRWATokenToRedeem The requested redemption amount\n @param offChainDestination    A hash of the destination to which\n                               the request should be serviced to."},"functionSelector":"f80a36d6","id":1287,"implemented":true,"kind":"function","modifiers":[{"id":1249,"kind":"modifierInvocation","modifierName":{"id":1248,"name":"nonReentrant","nameLocations":["1411:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":2059,"src":"1411:12:1"},"nodeType":"ModifierInvocation","src":"1411:12:1"},{"arguments":[{"id":1251,"name":"offChainRedemptionPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1205,"src":"1436:24:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1252,"kind":"modifierInvocation","modifierName":{"id":1250,"name":"ifNotPaused","nameLocations":["1424:11:1"],"nodeType":"IdentifierPath","referencedDeclaration":1018,"src":"1424:11:1"},"nodeType":"ModifierInvocation","src":"1424:37:1"}],"name":"requestRedemptionServicedOffchain","nameLocation":"1295:33:1","nodeType":"FunctionDefinition","parameters":{"id":1247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1244,"mutability":"mutable","name":"amountRWATokenToRedeem","nameLocation":"1342:22:1","nodeType":"VariableDeclaration","scope":1287,"src":"1334:30:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1243,"name":"uint256","nodeType":"ElementaryTypeName","src":"1334:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1246,"mutability":"mutable","name":"offChainDestination","nameLocation":"1378:19:1","nodeType":"VariableDeclaration","scope":1287,"src":"1370:27:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1245,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1370:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1328:73:1"},"returnParameters":{"id":1253,"nodeType":"ParameterList","parameters":[],"src":"1462:0:1"},"scope":1345,"src":"1286:558:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[3904],"body":{"id":1303,"nodeType":"Block","src":"1980:89:1","statements":[{"expression":{"id":1296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1294,"name":"offChainRedemptionPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1205,"src":"1986:24:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1295,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2013:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1986:31:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1297,"nodeType":"ExpressionStatement","src":"1986:31:1"},{"eventCall":{"arguments":[{"expression":{"id":1299,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2053:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2057:6:1","memberName":"sender","nodeType":"MemberAccess","src":"2053:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1298,"name":"OffChainRedemptionPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3928,"src":"2028:24:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2028:36:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1302,"nodeType":"EmitStatement","src":"2023:41:1"}]},"documentation":{"id":1288,"nodeType":"StructuredDocumentation","src":"1848:62:1","text":" @notice Function to pause off chain redemptoins"},"functionSelector":"49cbbf2a","id":1304,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":1291,"name":"PAUSER_ADMIN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"1966:12:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1292,"kind":"modifierInvocation","modifierName":{"id":1290,"name":"onlyRole","nameLocations":["1957:8:1"],"nodeType":"IdentifierPath","referencedDeclaration":1529,"src":"1957:8:1"},"nodeType":"ModifierInvocation","src":"1957:22:1"}],"name":"pauseOffChainRedemption","nameLocation":"1922:23:1","nodeType":"FunctionDefinition","parameters":{"id":1289,"nodeType":"ParameterList","parameters":[],"src":"1945:2:1"},"returnParameters":{"id":1293,"nodeType":"ParameterList","parameters":[],"src":"1980:0:1"},"scope":1345,"src":"1913:156:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[3907],"body":{"id":1320,"nodeType":"Block","src":"2210:92:1","statements":[{"expression":{"id":1313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1311,"name":"offChainRedemptionPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1205,"src":"2216:24:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2243:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2216:32:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1314,"nodeType":"ExpressionStatement","src":"2216:32:1"},{"eventCall":{"arguments":[{"expression":{"id":1316,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2286:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2290:6:1","memberName":"sender","nodeType":"MemberAccess","src":"2286:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1315,"name":"OffChainRedemptionUnpaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3933,"src":"2259:26:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1318,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2259:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1319,"nodeType":"EmitStatement","src":"2254:43:1"}]},"documentation":{"id":1305,"nodeType":"StructuredDocumentation","src":"2073:64:1","text":" @notice Function to unpause off chain redemptoins"},"functionSelector":"4dfe7af2","id":1321,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":1308,"name":"MANAGER_ADMIN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"2195:13:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1309,"kind":"modifierInvocation","modifierName":{"id":1307,"name":"onlyRole","nameLocations":["2186:8:1"],"nodeType":"IdentifierPath","referencedDeclaration":1529,"src":"2186:8:1"},"nodeType":"ModifierInvocation","src":"2186:23:1"}],"name":"unpauseOffChainRedemption","nameLocation":"2149:25:1","nodeType":"FunctionDefinition","parameters":{"id":1306,"nodeType":"ParameterList","parameters":[],"src":"2174:2:1"},"returnParameters":{"id":1310,"nodeType":"ParameterList","parameters":[],"src":"2210:0:1"},"scope":1345,"src":"2140:162:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[3912],"body":{"id":1343,"nodeType":"Block","src":"2653:238:1","statements":[{"assignments":[1331],"declarations":[{"constant":false,"id":1331,"mutability":"mutable","name":"oldMinimum","nameLocation":"2667:10:1","nodeType":"VariableDeclaration","scope":1343,"src":"2659:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1330,"name":"uint256","nodeType":"ElementaryTypeName","src":"2659:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1333,"initialValue":{"id":1332,"name":"minimumOffChainRedemptionAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"2680:31:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2659:52:1"},{"expression":{"id":1336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1334,"name":"minimumOffChainRedemptionAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1207,"src":"2717:31:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1335,"name":"_minimumOffChainRedemptionAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"2751:32:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2717:66:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1337,"nodeType":"ExpressionStatement","src":"2717:66:1"},{"eventCall":{"arguments":[{"id":1339,"name":"oldMinimum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1331,"src":"2830:10:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1340,"name":"_minimumOffChainRedemptionAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"2848:32:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1338,"name":"OffChainRedemptionMinimumSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3940,"src":"2794:28:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":1341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2794:92:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1342,"nodeType":"EmitStatement","src":"2789:97:1"}]},"documentation":{"id":1322,"nodeType":"StructuredDocumentation","src":"2306:223:1","text":" @notice Admin Function to set the minimum off chain redemption amount\n @param _minimumOffChainRedemptionAmount The new minimum off chain\n                                         redemption amount"},"functionSelector":"e4107c97","id":1344,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":1327,"name":"MANAGER_ADMIN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"2638:13:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1328,"kind":"modifierInvocation","modifierName":{"id":1326,"name":"onlyRole","nameLocations":["2629:8:1"],"nodeType":"IdentifierPath","referencedDeclaration":1529,"src":"2629:8:1"},"nodeType":"ModifierInvocation","src":"2629:23:1"}],"name":"setOffChainRedemptionMinimum","nameLocation":"2541:28:1","nodeType":"FunctionDefinition","parameters":{"id":1325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1324,"mutability":"mutable","name":"_minimumOffChainRedemptionAmount","nameLocation":"2583:32:1","nodeType":"VariableDeclaration","scope":1344,"src":"2575:40:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1323,"name":"uint256","nodeType":"ElementaryTypeName","src":"2575:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2569:50:1"},"returnParameters":{"id":1329,"nodeType":"ParameterList","parameters":[],"src":"2653:0:1"},"scope":1345,"src":"2532:359:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1346,"src":"151:2742:1","usedErrors":[3861,3863,3865,3867,3869,3871,3873,3875,3877,3879,3881,3883,3885,3887,3889,3891]}],"src":"32:2862:1"},"id":1},"contracts/abby/ABBYManager.sol":{"ast":{"absolutePath":"contracts/abby/ABBYManager.sol","exportedSymbols":{"ABBYManager":[1488],"AccessControl":[1797],"AccessControlEnumerable":[1922],"Address":[2682],"Context":[2704],"ERC165":[2728],"EnumerableSet":[3327],"IABBYManager":[3567],"IAccessControl":[1995],"IAccessControlEnumerable":[2020],"IERC165":[3339],"IERC20":[2138],"IERC20Metadata":[2163],"IPricerReader":[3584],"IRWAHub":[3892],"IRWAHubOffChainRedemptions":[3941],"IRWALike":[3966],"RWAHub":[1195],"RWAHubOffChainRedemptions":[1345],"ReentrancyGuard":[2060],"SafeERC20":[2387],"Strings":[3542]},"id":1489,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1347,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"32:23:2"},{"absolutePath":"contracts/RWAHubOffChainRedemptions.sol","file":"contracts/RWAHubOffChainRedemptions.sol","id":1348,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1489,"sourceUnit":1346,"src":"57:49:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IABBYManager.sol","file":"contracts/interfaces/IABBYManager.sol","id":1349,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1489,"sourceUnit":3568,"src":"220:47:2","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1350,"name":"RWAHubOffChainRedemptions","nameLocations":["295:25:2"],"nodeType":"IdentifierPath","referencedDeclaration":1345,"src":"295:25:2"},"id":1351,"nodeType":"InheritanceSpecifier","src":"295:25:2"},{"baseName":{"id":1352,"name":"IABBYManager","nameLocations":["324:12:2"],"nodeType":"IdentifierPath","referencedDeclaration":3567,"src":"324:12:2"},"id":1353,"nodeType":"InheritanceSpecifier","src":"324:12:2"}],"canonicalName":"ABBYManager","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1488,"linearizedBaseContracts":[1488,3567,1345,3941,1195,1922,1797,2728,3339,2020,1995,2704,2060,3892],"name":"ABBYManager","nameLocation":"278:11:2","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"f4a20307","id":1358,"mutability":"constant","name":"TIMESTAMP_SETTER_ROLE","nameLocation":"365:21:2","nodeType":"VariableDeclaration","scope":1488,"src":"341:86:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1354,"name":"bytes32","nodeType":"ElementaryTypeName","src":"341:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"54494d455354414d505f5345545445525f524f4c45","id":1356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"403:23:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_ced4eb9faeb19ab0e2e05a20ade58d82157e1035a3fbff4bc38dd5e609f22b93","typeString":"literal_string \"TIMESTAMP_SETTER_ROLE\""},"value":"TIMESTAMP_SETTER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ced4eb9faeb19ab0e2e05a20ade58d82157e1035a3fbff4bc38dd5e609f22b93","typeString":"literal_string \"TIMESTAMP_SETTER_ROLE\""}],"id":1355,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"393:9:2","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"393:34:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"functionSelector":"8a07df1e","id":1362,"mutability":"mutable","name":"depositIdToClaimableTimestamp","nameLocation":"467:29:2","nodeType":"VariableDeclaration","scope":1488,"src":"432:64:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":1361,"keyType":{"id":1359,"name":"bytes32","nodeType":"ElementaryTypeName","src":"440:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"432:27:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueType":{"id":1360,"name":"uint256","nodeType":"ElementaryTypeName","src":"451:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"body":{"id":1393,"nodeType":"Block","src":"960:2:2","statements":[]},"id":1394,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":1383,"name":"_collateral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"792:11:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1384,"name":"_rwa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"811:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1385,"name":"managerAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1368,"src":"823:12:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1386,"name":"pauser","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"843:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1387,"name":"_assetSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1372,"src":"857:12:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1388,"name":"_feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1374,"src":"877:13:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1389,"name":"_minimumDepositAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1376,"src":"898:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1390,"name":"_minimumRedemptionAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1378,"src":"927:24:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1391,"kind":"baseConstructorSpecifier","modifierName":{"id":1382,"name":"RWAHubOffChainRedemptions","nameLocations":["759:25:2"],"nodeType":"IdentifierPath","referencedDeclaration":1345,"src":"759:25:2"},"nodeType":"ModifierInvocation","src":"759:198:2"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1364,"mutability":"mutable","name":"_collateral","nameLocation":"526:11:2","nodeType":"VariableDeclaration","scope":1394,"src":"518:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1363,"name":"address","nodeType":"ElementaryTypeName","src":"518:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1366,"mutability":"mutable","name":"_rwa","nameLocation":"551:4:2","nodeType":"VariableDeclaration","scope":1394,"src":"543:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1365,"name":"address","nodeType":"ElementaryTypeName","src":"543:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1368,"mutability":"mutable","name":"managerAdmin","nameLocation":"569:12:2","nodeType":"VariableDeclaration","scope":1394,"src":"561:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1367,"name":"address","nodeType":"ElementaryTypeName","src":"561:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1370,"mutability":"mutable","name":"pauser","nameLocation":"595:6:2","nodeType":"VariableDeclaration","scope":1394,"src":"587:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1369,"name":"address","nodeType":"ElementaryTypeName","src":"587:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1372,"mutability":"mutable","name":"_assetSender","nameLocation":"615:12:2","nodeType":"VariableDeclaration","scope":1394,"src":"607:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1371,"name":"address","nodeType":"ElementaryTypeName","src":"607:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1374,"mutability":"mutable","name":"_feeRecipient","nameLocation":"641:13:2","nodeType":"VariableDeclaration","scope":1394,"src":"633:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1373,"name":"address","nodeType":"ElementaryTypeName","src":"633:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1376,"mutability":"mutable","name":"_minimumDepositAmount","nameLocation":"668:21:2","nodeType":"VariableDeclaration","scope":1394,"src":"660:29:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1375,"name":"uint256","nodeType":"ElementaryTypeName","src":"660:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1378,"mutability":"mutable","name":"_minimumRedemptionAmount","nameLocation":"703:24:2","nodeType":"VariableDeclaration","scope":1394,"src":"695:32:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1377,"name":"uint256","nodeType":"ElementaryTypeName","src":"695:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1380,"mutability":"mutable","name":"blocklist","nameLocation":"741:9:2","nodeType":"VariableDeclaration","scope":1394,"src":"733:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1379,"name":"address","nodeType":"ElementaryTypeName","src":"733:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"512:242:2"},"returnParameters":{"id":1392,"nodeType":"ParameterList","parameters":[],"src":"960:0:2"},"scope":1488,"src":"501:461:2","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[427],"body":{"id":1433,"nodeType":"Block","src":"1893:309:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1401,"name":"depositIdToClaimableTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1362,"src":"1903:29:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":1403,"indexExpression":{"id":1402,"name":"depositId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1397,"src":"1933:9:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1903:40:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1947:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1903:45:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1410,"nodeType":"IfStatement","src":"1899:99:2","trueBody":{"id":1409,"nodeType":"Block","src":"1950:48:2","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1406,"name":"ClaimableTimestampNotSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3566,"src":"1965:24:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1965:26:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1408,"nodeType":"RevertStatement","src":"1958:33:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1411,"name":"depositIdToClaimableTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1362,"src":"2008:29:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":1413,"indexExpression":{"id":1412,"name":"depositId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1397,"src":"2038:9:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2008:40:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":1414,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2051:5:2","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2057:9:2","memberName":"timestamp","nodeType":"MemberAccess","src":"2051:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2008:58:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1421,"nodeType":"IfStatement","src":"2004:107:2","trueBody":{"id":1420,"nodeType":"Block","src":"2068:43:2","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1417,"name":"MintNotYetClaimable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"2083:19:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2083:21:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1419,"nodeType":"RevertStatement","src":"2076:28:2"}]}},{"expression":{"arguments":[{"id":1425,"name":"depositId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1397,"src":"2134:9:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1422,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2117:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ABBYManager_$1488_$","typeString":"type(contract super ABBYManager)"}},"id":1424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2123:10:2","memberName":"_claimMint","nodeType":"MemberAccess","referencedDeclaration":427,"src":"2117:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":1426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2117:27:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1427,"nodeType":"ExpressionStatement","src":"2117:27:2"},{"expression":{"id":1431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"2150:47:2","subExpression":{"baseExpression":{"id":1428,"name":"depositIdToClaimableTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1362,"src":"2157:29:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":1430,"indexExpression":{"id":1429,"name":"depositId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1397,"src":"2187:9:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2157:40:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1432,"nodeType":"ExpressionStatement","src":"2150:47:2"}]},"documentation":{"id":1395,"nodeType":"StructuredDocumentation","src":"1481:344:2","text":" @notice Internal hook that is called by `claimMint` to enforce the time\n         at which a user can claim their ABBY\n @param depositId The depositId to check the claimable timestamp for\n @dev This function will call the `_claimMint` function in the parent\n      once ABBY-specific checks have been made"},"id":1434,"implemented":true,"kind":"function","modifiers":[],"name":"_claimMint","nameLocation":"1837:10:2","nodeType":"FunctionDefinition","overrides":{"id":1399,"nodeType":"OverrideSpecifier","overrides":[],"src":"1884:8:2"},"parameters":{"id":1398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1397,"mutability":"mutable","name":"depositId","nameLocation":"1856:9:2","nodeType":"VariableDeclaration","scope":1434,"src":"1848:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1396,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1848:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1847:19:2"},"returnParameters":{"id":1400,"nodeType":"ParameterList","parameters":[],"src":"1893:0:2"},"scope":1488,"src":"1828:374:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[3552],"body":{"id":1486,"nodeType":"Block","src":"3082:328:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1446,"name":"claimTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1437,"src":"3092:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1447,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3109:5:2","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3115:9:2","memberName":"timestamp","nodeType":"MemberAccess","src":"3109:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3092:32:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1454,"nodeType":"IfStatement","src":"3088:86:2","trueBody":{"id":1453,"nodeType":"Block","src":"3126:48:2","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1450,"name":"ClaimableTimestampInPast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3564,"src":"3141:24:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3141:26:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1452,"nodeType":"RevertStatement","src":"3134:33:2"}]}},{"assignments":[1456],"declarations":[{"constant":false,"id":1456,"mutability":"mutable","name":"depositsSize","nameLocation":"3188:12:2","nodeType":"VariableDeclaration","scope":1486,"src":"3180:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1455,"name":"uint256","nodeType":"ElementaryTypeName","src":"3180:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1459,"initialValue":{"expression":{"id":1457,"name":"depositIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1440,"src":"3203:10:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3214:6:2","memberName":"length","nodeType":"MemberAccess","src":"3203:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3180:40:2"},{"body":{"id":1484,"nodeType":"Block","src":"3265:141:2","statements":[{"expression":{"id":1475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1469,"name":"depositIdToClaimableTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1362,"src":"3273:29:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":1473,"indexExpression":{"baseExpression":{"id":1470,"name":"depositIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1440,"src":"3303:10:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1472,"indexExpression":{"id":1471,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"3314:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3303:13:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3273:44:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1474,"name":"claimTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1437,"src":"3320:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3273:61:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1476,"nodeType":"ExpressionStatement","src":"3273:61:2"},{"eventCall":{"arguments":[{"id":1478,"name":"claimTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1437,"src":"3369:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":1479,"name":"depositIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1440,"src":"3385:10:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1481,"indexExpression":{"id":1480,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"3396:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3385:13:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1477,"name":"ClaimableTimestampSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"3347:21:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_bytes32_$returns$__$","typeString":"function (uint256,bytes32)"}},"id":1482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3347:52:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1483,"nodeType":"EmitStatement","src":"3342:57:2"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1463,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"3242:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1464,"name":"depositsSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1456,"src":"3246:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3242:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1485,"initializationExpression":{"assignments":[1461],"declarations":[{"constant":false,"id":1461,"mutability":"mutable","name":"i","nameLocation":"3239:1:2","nodeType":"VariableDeclaration","scope":1485,"src":"3231:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1460,"name":"uint256","nodeType":"ElementaryTypeName","src":"3231:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1462,"nodeType":"VariableDeclarationStatement","src":"3231:9:2"},"loopExpression":{"expression":{"id":1467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"3260:3:2","subExpression":{"id":1466,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"3262:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1468,"nodeType":"ExpressionStatement","src":"3260:3:2"},"nodeType":"ForStatement","src":"3226:180:2"}]},"documentation":{"id":1435,"nodeType":"StructuredDocumentation","src":"2710:230:2","text":" @notice Set the claimable timestamp for a list of depositIds\n @param claimTimestamp The timestamp at which the deposit can be claimed\n @param depositIds The depositIds to set the claimable timestamp for"},"functionSelector":"d0c835ce","id":1487,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":1443,"name":"TIMESTAMP_SETTER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1358,"src":"3059:21:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1444,"kind":"modifierInvocation","modifierName":{"id":1442,"name":"onlyRole","nameLocations":["3050:8:2"],"nodeType":"IdentifierPath","referencedDeclaration":1529,"src":"3050:8:2"},"nodeType":"ModifierInvocation","src":"3050:31:2"}],"name":"setClaimableTimestamp","nameLocation":"2952:21:2","nodeType":"FunctionDefinition","parameters":{"id":1441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1437,"mutability":"mutable","name":"claimTimestamp","nameLocation":"2987:14:2","nodeType":"VariableDeclaration","scope":1487,"src":"2979:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1436,"name":"uint256","nodeType":"ElementaryTypeName","src":"2979:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1440,"mutability":"mutable","name":"depositIds","nameLocation":"3026:10:2","nodeType":"VariableDeclaration","scope":1487,"src":"3007:29:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1438,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3007:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1439,"nodeType":"ArrayTypeName","src":"3007:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"2973:67:2"},"returnParameters":{"id":1445,"nodeType":"ParameterList","parameters":[],"src":"3082:0:2"},"scope":1488,"src":"2943:467:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1489,"src":"269:3143:2","usedErrors":[3562,3564,3566,3861,3863,3865,3867,3869,3871,3873,3875,3877,3879,3881,3883,3885,3887,3889,3891]}],"src":"32:3381:2"},"id":2},"contracts/external/openzeppelin/contracts/access/AccessControl.sol":{"ast":{"absolutePath":"contracts/external/openzeppelin/contracts/access/AccessControl.sol","exportedSymbols":{"AccessControl":[1797],"Context":[2704],"ERC165":[2728],"IAccessControl":[1995],"IERC165":[3339],"Strings":[3542]},"id":1798,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1490,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:3"},{"absolutePath":"contracts/external/openzeppelin/contracts/access/IAccessControl.sol","file":"contracts/external/openzeppelin/contracts/access/IAccessControl.sol","id":1491,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1798,"sourceUnit":1996,"src":"133:77:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/external/openzeppelin/contracts/utils/Context.sol","file":"contracts/external/openzeppelin/contracts/utils/Context.sol","id":1492,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1798,"sourceUnit":2705,"src":"211:69:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/external/openzeppelin/contracts/utils/Strings.sol","file":"contracts/external/openzeppelin/contracts/utils/Strings.sol","id":1493,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1798,"sourceUnit":3543,"src":"281:69:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/external/openzeppelin/contracts/utils/ERC165.sol","file":"contracts/external/openzeppelin/contracts/utils/ERC165.sol","id":1494,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1798,"sourceUnit":2729,"src":"351:68:3","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1496,"name":"Context","nameLocations":["1991:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":2704,"src":"1991:7:3"},"id":1497,"nodeType":"InheritanceSpecifier","src":"1991:7:3"},{"baseName":{"id":1498,"name":"IAccessControl","nameLocations":["2000:14:3"],"nodeType":"IdentifierPath","referencedDeclaration":1995,"src":"2000:14:3"},"id":1499,"nodeType":"InheritanceSpecifier","src":"2000:14:3"},{"baseName":{"id":1500,"name":"ERC165","nameLocations":["2016:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":2728,"src":"2016:6:3"},"id":1501,"nodeType":"InheritanceSpecifier","src":"2016:6:3"}],"canonicalName":"AccessControl","contractDependencies":[],"contractKind":"contract","documentation":{"id":1495,"nodeType":"StructuredDocumentation","src":"421:1534:3","text":" @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it."},"fullyImplemented":true,"id":1797,"linearizedBaseContracts":[1797,2728,3339,1995,2704],"name":"AccessControl","nameLocation":"1974:13:3","nodeType":"ContractDefinition","nodes":[{"canonicalName":"AccessControl.RoleData","id":1508,"members":[{"constant":false,"id":1505,"mutability":"mutable","name":"members","nameLocation":"2074:7:3","nodeType":"VariableDeclaration","scope":1508,"src":"2049:32:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":1504,"keyType":{"id":1502,"name":"address","nodeType":"ElementaryTypeName","src":"2057:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2049:24:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":1503,"name":"bool","nodeType":"ElementaryTypeName","src":"2068:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":1507,"mutability":"mutable","name":"adminRole","nameLocation":"2095:9:3","nodeType":"VariableDeclaration","scope":1508,"src":"2087:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1506,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2087:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"RoleData","nameLocation":"2034:8:3","nodeType":"StructDefinition","scope":1797,"src":"2027:82:3","visibility":"public"},{"constant":false,"id":1513,"mutability":"mutable","name":"_roles","nameLocation":"2150:6:3","nodeType":"VariableDeclaration","scope":1797,"src":"2113:43:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$1508_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData)"},"typeName":{"id":1512,"keyType":{"id":1509,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2121:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2113:28:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$1508_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData)"},"valueType":{"id":1511,"nodeType":"UserDefinedTypeName","pathNode":{"id":1510,"name":"RoleData","nameLocations":["2132:8:3"],"nodeType":"IdentifierPath","referencedDeclaration":1508,"src":"2132:8:3"},"referencedDeclaration":1508,"src":"2132:8:3","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$1508_storage_ptr","typeString":"struct AccessControl.RoleData"}}},"visibility":"private"},{"constant":true,"functionSelector":"a217fddf","id":1516,"mutability":"constant","name":"DEFAULT_ADMIN_ROLE","nameLocation":"2185:18:3","nodeType":"VariableDeclaration","scope":1797,"src":"2161:49:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1514,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2161:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30783030","id":1515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2206:4:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"public"},{"body":{"id":1528,"nodeType":"Block","src":"2607:48:3","statements":[{"expression":{"arguments":[{"id":1522,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1519,"src":"2624:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1523,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2694,"src":"2630:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2630:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1521,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1613,"src":"2613:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) view"}},"id":1525,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2613:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1526,"nodeType":"ExpressionStatement","src":"2613:30:3"},{"id":1527,"nodeType":"PlaceholderStatement","src":"2649:1:3"}]},"documentation":{"id":1517,"nodeType":"StructuredDocumentation","src":"2215:357:3","text":" @dev Modifier that checks that an account has a specific role. Reverts\n with a standardized message including the required role.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n _Available since v4.1._"},"id":1529,"name":"onlyRole","nameLocation":"2584:8:3","nodeType":"ModifierDefinition","parameters":{"id":1520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1519,"mutability":"mutable","name":"role","nameLocation":"2601:4:3","nodeType":"VariableDeclaration","scope":1529,"src":"2593:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1518,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2593:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2592:14:3"},"src":"2575:80:3","virtual":false,"visibility":"internal"},{"baseFunctions":[2727],"body":{"id":1550,"nodeType":"Block","src":"2827:117:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1538,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1532,"src":"2846:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1540,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1995,"src":"2866:14:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$1995_$","typeString":"type(contract IAccessControl)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$1995_$","typeString":"type(contract IAccessControl)"}],"id":1539,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2861:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2861:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControl_$1995","typeString":"type(contract IAccessControl)"}},"id":1542,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2882:11:3","memberName":"interfaceId","nodeType":"MemberAccess","src":"2861:32:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2846:47:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1546,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1532,"src":"2927:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":1544,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2903:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControl_$1797_$","typeString":"type(contract super AccessControl)"}},"id":1545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2909:17:3","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":2727,"src":"2903:23:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":1547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2903:36:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2846:93:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1537,"id":1549,"nodeType":"Return","src":"2833:106:3"}]},"documentation":{"id":1530,"nodeType":"StructuredDocumentation","src":"2659:52:3","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1551,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2723:17:3","nodeType":"FunctionDefinition","overrides":{"id":1534,"nodeType":"OverrideSpecifier","overrides":[],"src":"2797:8:3"},"parameters":{"id":1533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1532,"mutability":"mutable","name":"interfaceId","nameLocation":"2748:11:3","nodeType":"VariableDeclaration","scope":1551,"src":"2741:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1531,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2741:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2740:20:3"},"returnParameters":{"id":1537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1536,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1551,"src":"2819:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1535,"name":"bool","nodeType":"ElementaryTypeName","src":"2819:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2818:6:3"},"scope":1797,"src":"2714:230:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1962],"body":{"id":1569,"nodeType":"Block","src":"3137:47:3","statements":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":1562,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"3150:6:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$1508_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":1564,"indexExpression":{"id":1563,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1554,"src":"3157:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3150:12:3","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$1508_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":1565,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3163:7:3","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":1505,"src":"3150:20:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1567,"indexExpression":{"id":1566,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1556,"src":"3171:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3150:29:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1561,"id":1568,"nodeType":"Return","src":"3143:36:3"}]},"documentation":{"id":1552,"nodeType":"StructuredDocumentation","src":"2948:72:3","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":1570,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"3032:7:3","nodeType":"FunctionDefinition","overrides":{"id":1558,"nodeType":"OverrideSpecifier","overrides":[],"src":"3107:8:3"},"parameters":{"id":1557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1554,"mutability":"mutable","name":"role","nameLocation":"3048:4:3","nodeType":"VariableDeclaration","scope":1570,"src":"3040:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1553,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3040:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1556,"mutability":"mutable","name":"account","nameLocation":"3062:7:3","nodeType":"VariableDeclaration","scope":1570,"src":"3054:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1555,"name":"address","nodeType":"ElementaryTypeName","src":"3054:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3039:31:3"},"returnParameters":{"id":1561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1560,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1570,"src":"3129:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1559,"name":"bool","nodeType":"ElementaryTypeName","src":"3129:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3128:6:3"},"scope":1797,"src":"3023:161:3","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1612,"nodeType":"Block","src":"3522:313:3","statements":[{"condition":{"id":1582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3532:23:3","subExpression":{"arguments":[{"id":1579,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1573,"src":"3541:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1580,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1575,"src":"3547:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1578,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"3533:7:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":1581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3533:22:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1611,"nodeType":"IfStatement","src":"3528:303:3","trueBody":{"id":1610,"nodeType":"Block","src":"3557:274:3","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","id":1588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3629:25:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},"value":"AccessControl: account "},{"arguments":[{"arguments":[{"id":1593,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1575,"src":"3696:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1592,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3688:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1591,"name":"uint160","nodeType":"ElementaryTypeName","src":"3688:7:3","typeDescriptions":{}}},"id":1594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3688:16:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"hexValue":"3230","id":1595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3706:2:3","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"}],"expression":{"id":1589,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"3668:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$3542_$","typeString":"type(library Strings)"}},"id":1590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3676:11:3","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":3541,"src":"3668:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1596,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3668:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"206973206d697373696e6720726f6c6520","id":1597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3723:19:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},"value":" is missing role "},{"arguments":[{"arguments":[{"id":1602,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1573,"src":"3784:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1601,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3776:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1600,"name":"uint256","nodeType":"ElementaryTypeName","src":"3776:7:3","typeDescriptions":{}}},"id":1603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3776:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"3332","id":1604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3791:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"expression":{"id":1598,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"3756:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$3542_$","typeString":"type(library Strings)"}},"id":1599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3764:11:3","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":3541,"src":"3756:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1605,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3756:38:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1586,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3599:3:3","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1587,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3603:12:3","memberName":"encodePacked","nodeType":"MemberAccess","src":"3599:16:3","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3599:207:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1585,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3581:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1584,"name":"string","nodeType":"ElementaryTypeName","src":"3581:6:3","typeDescriptions":{}}},"id":1607,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3581:235:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1583,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3565:6:3","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3565:259:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1609,"nodeType":"ExpressionStatement","src":"3565:259:3"}]}}]},"documentation":{"id":1571,"nodeType":"StructuredDocumentation","src":"3188:258:3","text":" @dev Revert with a standard message if `account` is missing `role`.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/"},"id":1613,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3458:10:3","nodeType":"FunctionDefinition","parameters":{"id":1576,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1573,"mutability":"mutable","name":"role","nameLocation":"3477:4:3","nodeType":"VariableDeclaration","scope":1613,"src":"3469:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1572,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3469:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1575,"mutability":"mutable","name":"account","nameLocation":"3491:7:3","nodeType":"VariableDeclaration","scope":1613,"src":"3483:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1574,"name":"address","nodeType":"ElementaryTypeName","src":"3483:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3468:31:3"},"returnParameters":{"id":1577,"nodeType":"ParameterList","parameters":[],"src":"3522:0:3"},"scope":1797,"src":"3449:386:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[1970],"body":{"id":1627,"nodeType":"Block","src":"4107:40:3","statements":[{"expression":{"expression":{"baseExpression":{"id":1622,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"4120:6:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$1508_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":1624,"indexExpression":{"id":1623,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1616,"src":"4127:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4120:12:3","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$1508_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":1625,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4133:9:3","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":1507,"src":"4120:22:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1621,"id":1626,"nodeType":"Return","src":"4113:29:3"}]},"documentation":{"id":1614,"nodeType":"StructuredDocumentation","src":"3839:160:3","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."},"functionSelector":"248a9ca3","id":1628,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"4011:12:3","nodeType":"FunctionDefinition","overrides":{"id":1618,"nodeType":"OverrideSpecifier","overrides":[],"src":"4074:8:3"},"parameters":{"id":1617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1616,"mutability":"mutable","name":"role","nameLocation":"4032:4:3","nodeType":"VariableDeclaration","scope":1628,"src":"4024:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1615,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4024:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4023:14:3"},"returnParameters":{"id":1621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1620,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1628,"src":"4096:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1619,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4096:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4095:9:3"},"scope":1797,"src":"4002:145:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1978],"body":{"id":1647,"nodeType":"Block","src":"4496:36:3","statements":[{"expression":{"arguments":[{"id":1643,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1631,"src":"4513:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1644,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1633,"src":"4519:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1642,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1765,"src":"4502:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":1645,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4502:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1646,"nodeType":"ExpressionStatement","src":"4502:25:3"}]},"documentation":{"id":1629,"nodeType":"StructuredDocumentation","src":"4151:221:3","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"2f2ff15d","id":1648,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":1638,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1631,"src":"4487:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1637,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1628,"src":"4474:12:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":1639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4474:18:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1640,"kind":"modifierInvocation","modifierName":{"id":1636,"name":"onlyRole","nameLocations":["4465:8:3"],"nodeType":"IdentifierPath","referencedDeclaration":1529,"src":"4465:8:3"},"nodeType":"ModifierInvocation","src":"4465:28:3"}],"name":"grantRole","nameLocation":"4384:9:3","nodeType":"FunctionDefinition","overrides":{"id":1635,"nodeType":"OverrideSpecifier","overrides":[],"src":"4452:8:3"},"parameters":{"id":1634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1631,"mutability":"mutable","name":"role","nameLocation":"4402:4:3","nodeType":"VariableDeclaration","scope":1648,"src":"4394:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1630,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4394:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1633,"mutability":"mutable","name":"account","nameLocation":"4416:7:3","nodeType":"VariableDeclaration","scope":1648,"src":"4408:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1632,"name":"address","nodeType":"ElementaryTypeName","src":"4408:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4393:31:3"},"returnParameters":{"id":1641,"nodeType":"ParameterList","parameters":[],"src":"4496:0:3"},"scope":1797,"src":"4375:157:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1986],"body":{"id":1667,"nodeType":"Block","src":"4868:37:3","statements":[{"expression":{"arguments":[{"id":1663,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1651,"src":"4886:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1664,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1653,"src":"4892:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1662,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1796,"src":"4874:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":1665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4874:26:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1666,"nodeType":"ExpressionStatement","src":"4874:26:3"}]},"documentation":{"id":1649,"nodeType":"StructuredDocumentation","src":"4536:207:3","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"d547741f","id":1668,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":1658,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1651,"src":"4859:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1657,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1628,"src":"4846:12:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":1659,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4846:18:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1660,"kind":"modifierInvocation","modifierName":{"id":1656,"name":"onlyRole","nameLocations":["4837:8:3"],"nodeType":"IdentifierPath","referencedDeclaration":1529,"src":"4837:8:3"},"nodeType":"ModifierInvocation","src":"4837:28:3"}],"name":"revokeRole","nameLocation":"4755:10:3","nodeType":"FunctionDefinition","overrides":{"id":1655,"nodeType":"OverrideSpecifier","overrides":[],"src":"4824:8:3"},"parameters":{"id":1654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1651,"mutability":"mutable","name":"role","nameLocation":"4774:4:3","nodeType":"VariableDeclaration","scope":1668,"src":"4766:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1650,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4766:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1653,"mutability":"mutable","name":"account","nameLocation":"4788:7:3","nodeType":"VariableDeclaration","scope":1668,"src":"4780:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1652,"name":"address","nodeType":"ElementaryTypeName","src":"4780:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4765:31:3"},"returnParameters":{"id":1661,"nodeType":"ParameterList","parameters":[],"src":"4868:0:3"},"scope":1797,"src":"4746:159:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1994],"body":{"id":1690,"nodeType":"Block","src":"5443:145:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1678,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1673,"src":"5464:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1679,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2694,"src":"5475:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5475:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5464:23:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66","id":1682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5495:49:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""},"value":"AccessControl: can only renounce roles for self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""}],"id":1677,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5449:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5449:101:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1684,"nodeType":"ExpressionStatement","src":"5449:101:3"},{"expression":{"arguments":[{"id":1686,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1671,"src":"5569:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1687,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1673,"src":"5575:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1685,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1796,"src":"5557:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":1688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5557:26:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1689,"nodeType":"ExpressionStatement","src":"5557:26:3"}]},"documentation":{"id":1669,"nodeType":"StructuredDocumentation","src":"4909:454:3","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`."},"functionSelector":"36568abe","id":1691,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"5375:12:3","nodeType":"FunctionDefinition","overrides":{"id":1675,"nodeType":"OverrideSpecifier","overrides":[],"src":"5434:8:3"},"parameters":{"id":1674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1671,"mutability":"mutable","name":"role","nameLocation":"5396:4:3","nodeType":"VariableDeclaration","scope":1691,"src":"5388:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1670,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5388:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1673,"mutability":"mutable","name":"account","nameLocation":"5410:7:3","nodeType":"VariableDeclaration","scope":1691,"src":"5402:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1672,"name":"address","nodeType":"ElementaryTypeName","src":"5402:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5387:31:3"},"returnParameters":{"id":1676,"nodeType":"ParameterList","parameters":[],"src":"5443:0:3"},"scope":1797,"src":"5366:222:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1704,"nodeType":"Block","src":"6257:36:3","statements":[{"expression":{"arguments":[{"id":1700,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"6274:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1701,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1696,"src":"6280:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1699,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1765,"src":"6263:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":1702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6263:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1703,"nodeType":"ExpressionStatement","src":"6263:25:3"}]},"documentation":{"id":1692,"nodeType":"StructuredDocumentation","src":"5592:594:3","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event. Note that unlike {grantRole}, this function doesn't perform any\n checks on the calling account.\n [WARNING]\n ====\n This function should only be called from the constructor when setting\n up the initial roles for the system.\n Using this function in any other way is effectively circumventing the admin\n system imposed by {AccessControl}.\n ====\n NOTE: This function is deprecated in favor of {_grantRole}."},"id":1705,"implemented":true,"kind":"function","modifiers":[],"name":"_setupRole","nameLocation":"6198:10:3","nodeType":"FunctionDefinition","parameters":{"id":1697,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1694,"mutability":"mutable","name":"role","nameLocation":"6217:4:3","nodeType":"VariableDeclaration","scope":1705,"src":"6209:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1693,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6209:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1696,"mutability":"mutable","name":"account","nameLocation":"6231:7:3","nodeType":"VariableDeclaration","scope":1705,"src":"6223:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1695,"name":"address","nodeType":"ElementaryTypeName","src":"6223:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6208:31:3"},"returnParameters":{"id":1698,"nodeType":"ParameterList","parameters":[],"src":"6257:0:3"},"scope":1797,"src":"6189:104:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1732,"nodeType":"Block","src":"6479:160:3","statements":[{"assignments":[1714],"declarations":[{"constant":false,"id":1714,"mutability":"mutable","name":"previousAdminRole","nameLocation":"6493:17:3","nodeType":"VariableDeclaration","scope":1732,"src":"6485:25:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1713,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6485:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1718,"initialValue":{"arguments":[{"id":1716,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1708,"src":"6526:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1715,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1628,"src":"6513:12:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":1717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6513:18:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6485:46:3"},{"expression":{"id":1724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":1719,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"6537:6:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$1508_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":1721,"indexExpression":{"id":1720,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1708,"src":"6544:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6537:12:3","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$1508_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":1722,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6550:9:3","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":1507,"src":"6537:22:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1723,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1710,"src":"6562:9:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6537:34:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1725,"nodeType":"ExpressionStatement","src":"6537:34:3"},{"eventCall":{"arguments":[{"id":1727,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1708,"src":"6599:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1728,"name":"previousAdminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1714,"src":"6605:17:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1729,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1710,"src":"6624:9:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1726,"name":"RoleAdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1934,"src":"6582:16:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32,bytes32)"}},"id":1730,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6582:52:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1731,"nodeType":"EmitStatement","src":"6577:57:3"}]},"documentation":{"id":1706,"nodeType":"StructuredDocumentation","src":"6297:106:3","text":" @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."},"id":1733,"implemented":true,"kind":"function","modifiers":[],"name":"_setRoleAdmin","nameLocation":"6415:13:3","nodeType":"FunctionDefinition","parameters":{"id":1711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1708,"mutability":"mutable","name":"role","nameLocation":"6437:4:3","nodeType":"VariableDeclaration","scope":1733,"src":"6429:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1707,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6429:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1710,"mutability":"mutable","name":"adminRole","nameLocation":"6451:9:3","nodeType":"VariableDeclaration","scope":1733,"src":"6443:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1709,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6443:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6428:33:3"},"returnParameters":{"id":1712,"nodeType":"ParameterList","parameters":[],"src":"6479:0:3"},"scope":1797,"src":"6406:233:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1764,"nodeType":"Block","src":"6817:143:3","statements":[{"condition":{"id":1745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6827:23:3","subExpression":{"arguments":[{"id":1742,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1736,"src":"6836:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1743,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1738,"src":"6842:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1741,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"6828:7:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":1744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6828:22:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1763,"nodeType":"IfStatement","src":"6823:133:3","trueBody":{"id":1762,"nodeType":"Block","src":"6852:104:3","statements":[{"expression":{"id":1753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":1746,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"6860:6:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$1508_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":1748,"indexExpression":{"id":1747,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1736,"src":"6867:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6860:12:3","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$1508_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":1749,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6873:7:3","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":1505,"src":"6860:20:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1751,"indexExpression":{"id":1750,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1738,"src":"6881:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6860:29:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6892:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"6860:36:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1754,"nodeType":"ExpressionStatement","src":"6860:36:3"},{"eventCall":{"arguments":[{"id":1756,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1736,"src":"6921:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1757,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1738,"src":"6927:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1758,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2694,"src":"6936:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6936:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1755,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1943,"src":"6909:11:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":1760,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6909:40:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1761,"nodeType":"EmitStatement","src":"6904:45:3"}]}}]},"documentation":{"id":1734,"nodeType":"StructuredDocumentation","src":"6643:103:3","text":" @dev Grants `role` to `account`.\n Internal function without access restriction."},"id":1765,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"6758:10:3","nodeType":"FunctionDefinition","parameters":{"id":1739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1736,"mutability":"mutable","name":"role","nameLocation":"6777:4:3","nodeType":"VariableDeclaration","scope":1765,"src":"6769:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1735,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6769:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1738,"mutability":"mutable","name":"account","nameLocation":"6791:7:3","nodeType":"VariableDeclaration","scope":1765,"src":"6783:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1737,"name":"address","nodeType":"ElementaryTypeName","src":"6783:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6768:31:3"},"returnParameters":{"id":1740,"nodeType":"ParameterList","parameters":[],"src":"6817:0:3"},"scope":1797,"src":"6749:211:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1795,"nodeType":"Block","src":"7142:143:3","statements":[{"condition":{"arguments":[{"id":1774,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1768,"src":"7160:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1775,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1770,"src":"7166:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1773,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"7152:7:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":1776,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7152:22:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1794,"nodeType":"IfStatement","src":"7148:133:3","trueBody":{"id":1793,"nodeType":"Block","src":"7176:105:3","statements":[{"expression":{"id":1784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":1777,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"7184:6:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$1508_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":1779,"indexExpression":{"id":1778,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1768,"src":"7191:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7184:12:3","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$1508_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":1780,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7197:7:3","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":1505,"src":"7184:20:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1782,"indexExpression":{"id":1781,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1770,"src":"7205:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7184:29:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1783,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7216:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"7184:37:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1785,"nodeType":"ExpressionStatement","src":"7184:37:3"},{"eventCall":{"arguments":[{"id":1787,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1768,"src":"7246:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1788,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1770,"src":"7252:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1789,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2694,"src":"7261:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1790,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7261:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1786,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1952,"src":"7234:11:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":1791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7234:40:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1792,"nodeType":"EmitStatement","src":"7229:45:3"}]}}]},"documentation":{"id":1766,"nodeType":"StructuredDocumentation","src":"6964:106:3","text":" @dev Revokes `role` from `account`.\n Internal function without access restriction."},"id":1796,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"7082:11:3","nodeType":"FunctionDefinition","parameters":{"id":1771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1768,"mutability":"mutable","name":"role","nameLocation":"7102:4:3","nodeType":"VariableDeclaration","scope":1796,"src":"7094:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1767,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7094:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1770,"mutability":"mutable","name":"account","nameLocation":"7116:7:3","nodeType":"VariableDeclaration","scope":1796,"src":"7108:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1769,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7093:31:3"},"returnParameters":{"id":1772,"nodeType":"ParameterList","parameters":[],"src":"7142:0:3"},"scope":1797,"src":"7073:212:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1798,"src":"1956:5331:3","usedErrors":[]}],"src":"108:7180:3"},"id":3},"contracts/external/openzeppelin/contracts/access/AccessControlEnumerable.sol":{"ast":{"absolutePath":"contracts/external/openzeppelin/contracts/access/AccessControlEnumerable.sol","exportedSymbols":{"AccessControl":[1797],"AccessControlEnumerable":[1922],"Context":[2704],"ERC165":[2728],"EnumerableSet":[3327],"IAccessControl":[1995],"IAccessControlEnumerable":[2020],"IERC165":[3339],"Strings":[3542]},"id":1923,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1799,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"118:23:4"},{"absolutePath":"contracts/external/openzeppelin/contracts/access/IAccessControlEnumerable.sol","file":"contracts/external/openzeppelin/contracts/access/IAccessControlEnumerable.sol","id":1800,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1923,"sourceUnit":2021,"src":"143:87:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/external/openzeppelin/contracts/access/AccessControl.sol","file":"contracts/external/openzeppelin/contracts/access/AccessControl.sol","id":1801,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1923,"sourceUnit":1798,"src":"231:76:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/external/openzeppelin/contracts/utils/EnumerableSet.sol","file":"contracts/external/openzeppelin/contracts/utils/EnumerableSet.sol","id":1802,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1923,"sourceUnit":3328,"src":"308:75:4","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1804,"name":"IAccessControlEnumerable","nameLocations":["527:24:4"],"nodeType":"IdentifierPath","referencedDeclaration":2020,"src":"527:24:4"},"id":1805,"nodeType":"InheritanceSpecifier","src":"527:24:4"},{"baseName":{"id":1806,"name":"AccessControl","nameLocations":["555:13:4"],"nodeType":"IdentifierPath","referencedDeclaration":1797,"src":"555:13:4"},"id":1807,"nodeType":"InheritanceSpecifier","src":"555:13:4"}],"canonicalName":"AccessControlEnumerable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1803,"nodeType":"StructuredDocumentation","src":"385:94:4","text":" @dev Extension of {AccessControl} that allows enumerating the members of each role."},"fullyImplemented":true,"id":1922,"linearizedBaseContracts":[1922,1797,2728,3339,2020,1995,2704],"name":"AccessControlEnumerable","nameLocation":"498:23:4","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1811,"libraryName":{"id":1808,"name":"EnumerableSet","nameLocations":["579:13:4"],"nodeType":"IdentifierPath","referencedDeclaration":3327,"src":"579:13:4"},"nodeType":"UsingForDirective","src":"573:49:4","typeName":{"id":1810,"nodeType":"UserDefinedTypeName","pathNode":{"id":1809,"name":"EnumerableSet.AddressSet","nameLocations":["597:13:4","611:10:4"],"nodeType":"IdentifierPath","referencedDeclaration":3040,"src":"597:24:4"},"referencedDeclaration":3040,"src":"597:24:4","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3040_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}}},{"constant":false,"id":1816,"mutability":"mutable","name":"_roleMembers","nameLocation":"679:12:4","nodeType":"VariableDeclaration","scope":1922,"src":"626:65:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$3040_storage_$","typeString":"mapping(bytes32 => struct EnumerableSet.AddressSet)"},"typeName":{"id":1815,"keyType":{"id":1812,"name":"bytes32","nodeType":"ElementaryTypeName","src":"634:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"626:44:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$3040_storage_$","typeString":"mapping(bytes32 => struct EnumerableSet.AddressSet)"},"valueType":{"id":1814,"nodeType":"UserDefinedTypeName","pathNode":{"id":1813,"name":"EnumerableSet.AddressSet","nameLocations":["645:13:4","659:10:4"],"nodeType":"IdentifierPath","referencedDeclaration":3040,"src":"645:24:4"},"referencedDeclaration":3040,"src":"645:24:4","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3040_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}}},"visibility":"private"},{"baseFunctions":[1551],"body":{"id":1837,"nodeType":"Block","src":"864:127:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1825,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1819,"src":"883:11:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1827,"name":"IAccessControlEnumerable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2020,"src":"903:24:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControlEnumerable_$2020_$","typeString":"type(contract IAccessControlEnumerable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControlEnumerable_$2020_$","typeString":"type(contract IAccessControlEnumerable)"}],"id":1826,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"898:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"898:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControlEnumerable_$2020","typeString":"type(contract IAccessControlEnumerable)"}},"id":1829,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"929:11:4","memberName":"interfaceId","nodeType":"MemberAccess","src":"898:42:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"883:57:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1833,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1819,"src":"974:11:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":1831,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"950:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControlEnumerable_$1922_$","typeString":"type(contract super AccessControlEnumerable)"}},"id":1832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"956:17:4","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1551,"src":"950:23:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":1834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"950:36:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"883:103:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1824,"id":1836,"nodeType":"Return","src":"870:116:4"}]},"documentation":{"id":1817,"nodeType":"StructuredDocumentation","src":"696:52:4","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1838,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"760:17:4","nodeType":"FunctionDefinition","overrides":{"id":1821,"nodeType":"OverrideSpecifier","overrides":[],"src":"834:8:4"},"parameters":{"id":1820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1819,"mutability":"mutable","name":"interfaceId","nameLocation":"785:11:4","nodeType":"VariableDeclaration","scope":1838,"src":"778:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1818,"name":"bytes4","nodeType":"ElementaryTypeName","src":"778:6:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"777:20:4"},"returnParameters":{"id":1824,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1823,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1838,"src":"856:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1822,"name":"bool","nodeType":"ElementaryTypeName","src":"856:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"855:6:4"},"scope":1922,"src":"751:240:4","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2011],"body":{"id":1856,"nodeType":"Block","src":"1671:46:4","statements":[{"expression":{"arguments":[{"id":1853,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1843,"src":"1706:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":1849,"name":"_roleMembers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1816,"src":"1684:12:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$3040_storage_$","typeString":"mapping(bytes32 => struct EnumerableSet.AddressSet storage ref)"}},"id":1851,"indexExpression":{"id":1850,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1841,"src":"1697:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1684:18:4","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3040_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":1852,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1703:2:4","memberName":"at","nodeType":"MemberAccess","referencedDeclaration":3163,"src":"1684:21:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$3040_storage_ptr_$_t_uint256_$returns$_t_address_$bound_to$_t_struct$_AddressSet_$3040_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,uint256) view returns (address)"}},"id":1854,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1684:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1848,"id":1855,"nodeType":"Return","src":"1677:35:4"}]},"documentation":{"id":1839,"nodeType":"StructuredDocumentation","src":"995:552:4","text":" @dev Returns one of the accounts that have `role`. `index` must be a\n value between 0 and {getRoleMemberCount}, non-inclusive.\n Role bearers are not sorted in any particular way, and their ordering may\n change at any point.\n WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n you perform all queries on the same block. See the following\n https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n for more information."},"functionSelector":"9010d07c","id":1857,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleMember","nameLocation":"1559:13:4","nodeType":"FunctionDefinition","overrides":{"id":1845,"nodeType":"OverrideSpecifier","overrides":[],"src":"1638:8:4"},"parameters":{"id":1844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1841,"mutability":"mutable","name":"role","nameLocation":"1581:4:4","nodeType":"VariableDeclaration","scope":1857,"src":"1573:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1840,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1573:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1843,"mutability":"mutable","name":"index","nameLocation":"1595:5:4","nodeType":"VariableDeclaration","scope":1857,"src":"1587:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1842,"name":"uint256","nodeType":"ElementaryTypeName","src":"1587:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1572:29:4"},"returnParameters":{"id":1848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1847,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1857,"src":"1660:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1846,"name":"address","nodeType":"ElementaryTypeName","src":"1660:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1659:9:4"},"scope":1922,"src":"1550:167:4","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2019],"body":{"id":1872,"nodeType":"Block","src":"1986:45:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":1866,"name":"_roleMembers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1816,"src":"1999:12:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$3040_storage_$","typeString":"mapping(bytes32 => struct EnumerableSet.AddressSet storage ref)"}},"id":1868,"indexExpression":{"id":1867,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1860,"src":"2012:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1999:18:4","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3040_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":1869,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2018:6:4","memberName":"length","nodeType":"MemberAccess","referencedDeclaration":3136,"src":"1999:25:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$3040_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_AddressSet_$3040_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer) view returns (uint256)"}},"id":1870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1999:27:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1865,"id":1871,"nodeType":"Return","src":"1992:34:4"}]},"documentation":{"id":1858,"nodeType":"StructuredDocumentation","src":"1721:151:4","text":" @dev Returns the number of accounts that have `role`. Can be used\n together with {getRoleMember} to enumerate all bearers of a role."},"functionSelector":"ca15c873","id":1873,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleMemberCount","nameLocation":"1884:18:4","nodeType":"FunctionDefinition","overrides":{"id":1862,"nodeType":"OverrideSpecifier","overrides":[],"src":"1953:8:4"},"parameters":{"id":1861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1860,"mutability":"mutable","name":"role","nameLocation":"1911:4:4","nodeType":"VariableDeclaration","scope":1873,"src":"1903:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1859,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1903:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1902:14:4"},"returnParameters":{"id":1865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1864,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1873,"src":"1975:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1863,"name":"uint256","nodeType":"ElementaryTypeName","src":"1975:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1974:9:4"},"scope":1922,"src":"1875:156:4","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1765],"body":{"id":1896,"nodeType":"Block","src":"2188:79:4","statements":[{"expression":{"arguments":[{"id":1885,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1876,"src":"2211:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1886,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1878,"src":"2217:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1882,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2194:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControlEnumerable_$1922_$","typeString":"type(contract super AccessControlEnumerable)"}},"id":1884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2200:10:4","memberName":"_grantRole","nodeType":"MemberAccess","referencedDeclaration":1765,"src":"2194:16:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":1887,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2194:31:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1888,"nodeType":"ExpressionStatement","src":"2194:31:4"},{"expression":{"arguments":[{"id":1893,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1878,"src":"2254:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":1889,"name":"_roleMembers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1816,"src":"2231:12:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$3040_storage_$","typeString":"mapping(bytes32 => struct EnumerableSet.AddressSet storage ref)"}},"id":1891,"indexExpression":{"id":1890,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1876,"src":"2244:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2231:18:4","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3040_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":1892,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2250:3:4","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":3067,"src":"2231:22:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressSet_$3040_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressSet_$3040_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"}},"id":1894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2231:31:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1895,"nodeType":"ExpressionStatement","src":"2231:31:4"}]},"documentation":{"id":1874,"nodeType":"StructuredDocumentation","src":"2035:73:4","text":" @dev Overload {_grantRole} to track enumerable memberships"},"id":1897,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"2120:10:4","nodeType":"FunctionDefinition","overrides":{"id":1880,"nodeType":"OverrideSpecifier","overrides":[],"src":"2179:8:4"},"parameters":{"id":1879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1876,"mutability":"mutable","name":"role","nameLocation":"2139:4:4","nodeType":"VariableDeclaration","scope":1897,"src":"2131:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1875,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2131:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1878,"mutability":"mutable","name":"account","nameLocation":"2153:7:4","nodeType":"VariableDeclaration","scope":1897,"src":"2145:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1877,"name":"address","nodeType":"ElementaryTypeName","src":"2145:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2130:31:4"},"returnParameters":{"id":1881,"nodeType":"ParameterList","parameters":[],"src":"2188:0:4"},"scope":1922,"src":"2111:156:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[1796],"body":{"id":1920,"nodeType":"Block","src":"2440:83:4","statements":[{"expression":{"arguments":[{"id":1909,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1900,"src":"2464:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1910,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1902,"src":"2470:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1906,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2446:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControlEnumerable_$1922_$","typeString":"type(contract super AccessControlEnumerable)"}},"id":1908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2452:11:4","memberName":"_revokeRole","nodeType":"MemberAccess","referencedDeclaration":1796,"src":"2446:17:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":1911,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2446:32:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1912,"nodeType":"ExpressionStatement","src":"2446:32:4"},{"expression":{"arguments":[{"id":1917,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1902,"src":"2510:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":1913,"name":"_roleMembers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1816,"src":"2484:12:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_AddressSet_$3040_storage_$","typeString":"mapping(bytes32 => struct EnumerableSet.AddressSet storage ref)"}},"id":1915,"indexExpression":{"id":1914,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1900,"src":"2497:4:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2484:18:4","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3040_storage","typeString":"struct EnumerableSet.AddressSet storage ref"}},"id":1916,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2503:6:4","memberName":"remove","nodeType":"MemberAccess","referencedDeclaration":3094,"src":"2484:25:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressSet_$3040_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_AddressSet_$3040_storage_ptr_$","typeString":"function (struct EnumerableSet.AddressSet storage pointer,address) returns (bool)"}},"id":1918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2484:34:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1919,"nodeType":"ExpressionStatement","src":"2484:34:4"}]},"documentation":{"id":1898,"nodeType":"StructuredDocumentation","src":"2271:74:4","text":" @dev Overload {_revokeRole} to track enumerable memberships"},"id":1921,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"2357:11:4","nodeType":"FunctionDefinition","overrides":{"id":1904,"nodeType":"OverrideSpecifier","overrides":[],"src":"2429:8:4"},"parameters":{"id":1903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1900,"mutability":"mutable","name":"role","nameLocation":"2377:4:4","nodeType":"VariableDeclaration","scope":1921,"src":"2369:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1899,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2369:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1902,"mutability":"mutable","name":"account","nameLocation":"2391:7:4","nodeType":"VariableDeclaration","scope":1921,"src":"2383:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1901,"name":"address","nodeType":"ElementaryTypeName","src":"2383:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2368:31:4"},"returnParameters":{"id":1905,"nodeType":"ParameterList","parameters":[],"src":"2440:0:4"},"scope":1922,"src":"2348:175:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1923,"src":"480:2045:4","usedErrors":[]}],"src":"118:2408:4"},"id":4},"contracts/external/openzeppelin/contracts/access/IAccessControl.sol":{"ast":{"absolutePath":"contracts/external/openzeppelin/contracts/access/IAccessControl.sol","exportedSymbols":{"IAccessControl":[1995]},"id":1996,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1924,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"94:23:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControl","contractDependencies":[],"contractKind":"interface","documentation":{"id":1925,"nodeType":"StructuredDocumentation","src":"119:89:5","text":" @dev External interface of AccessControl declared to support ERC165 detection."},"fullyImplemented":false,"id":1995,"linearizedBaseContracts":[1995],"name":"IAccessControl","nameLocation":"219:14:5","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1926,"nodeType":"StructuredDocumentation","src":"238:278:5","text":" @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted signaling this.\n _Available since v3.1._"},"eventSelector":"bd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff","id":1934,"name":"RoleAdminChanged","nameLocation":"525:16:5","nodeType":"EventDefinition","parameters":{"id":1933,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1928,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"563:4:5","nodeType":"VariableDeclaration","scope":1934,"src":"547:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1927,"name":"bytes32","nodeType":"ElementaryTypeName","src":"547:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1930,"indexed":true,"mutability":"mutable","name":"previousAdminRole","nameLocation":"589:17:5","nodeType":"VariableDeclaration","scope":1934,"src":"573:33:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1929,"name":"bytes32","nodeType":"ElementaryTypeName","src":"573:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1932,"indexed":true,"mutability":"mutable","name":"newAdminRole","nameLocation":"628:12:5","nodeType":"VariableDeclaration","scope":1934,"src":"612:28:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1931,"name":"bytes32","nodeType":"ElementaryTypeName","src":"612:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"541:103:5"},"src":"519:126:5"},{"anonymous":false,"documentation":{"id":1935,"nodeType":"StructuredDocumentation","src":"649:202:5","text":" @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call, an admin role\n bearer except when using {AccessControl-_setupRole}."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":1943,"name":"RoleGranted","nameLocation":"860:11:5","nodeType":"EventDefinition","parameters":{"id":1942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1937,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"893:4:5","nodeType":"VariableDeclaration","scope":1943,"src":"877:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1936,"name":"bytes32","nodeType":"ElementaryTypeName","src":"877:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1939,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"919:7:5","nodeType":"VariableDeclaration","scope":1943,"src":"903:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1938,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1941,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"948:6:5","nodeType":"VariableDeclaration","scope":1943,"src":"932:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1940,"name":"address","nodeType":"ElementaryTypeName","src":"932:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"871:87:5"},"src":"854:105:5"},{"anonymous":false,"documentation":{"id":1944,"nodeType":"StructuredDocumentation","src":"963:263:5","text":" @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":1952,"name":"RoleRevoked","nameLocation":"1235:11:5","nodeType":"EventDefinition","parameters":{"id":1951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1946,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1268:4:5","nodeType":"VariableDeclaration","scope":1952,"src":"1252:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1945,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1252:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1948,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1294:7:5","nodeType":"VariableDeclaration","scope":1952,"src":"1278:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1947,"name":"address","nodeType":"ElementaryTypeName","src":"1278:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1950,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1323:6:5","nodeType":"VariableDeclaration","scope":1952,"src":"1307:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1949,"name":"address","nodeType":"ElementaryTypeName","src":"1307:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1246:87:5"},"src":"1229:105:5"},{"documentation":{"id":1953,"nodeType":"StructuredDocumentation","src":"1338:72:5","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":1962,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"1422:7:5","nodeType":"FunctionDefinition","parameters":{"id":1958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1955,"mutability":"mutable","name":"role","nameLocation":"1438:4:5","nodeType":"VariableDeclaration","scope":1962,"src":"1430:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1954,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1430:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1957,"mutability":"mutable","name":"account","nameLocation":"1452:7:5","nodeType":"VariableDeclaration","scope":1962,"src":"1444:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1956,"name":"address","nodeType":"ElementaryTypeName","src":"1444:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1429:31:5"},"returnParameters":{"id":1961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1960,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1962,"src":"1484:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1959,"name":"bool","nodeType":"ElementaryTypeName","src":"1484:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1483:6:5"},"scope":1995,"src":"1413:77:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1963,"nodeType":"StructuredDocumentation","src":"1494:174:5","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."},"functionSelector":"248a9ca3","id":1970,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"1680:12:5","nodeType":"FunctionDefinition","parameters":{"id":1966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1965,"mutability":"mutable","name":"role","nameLocation":"1701:4:5","nodeType":"VariableDeclaration","scope":1970,"src":"1693:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1964,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1693:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1692:14:5"},"returnParameters":{"id":1969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1968,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1970,"src":"1730:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1967,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1730:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1729:9:5"},"scope":1995,"src":"1671:68:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1971,"nodeType":"StructuredDocumentation","src":"1743:221:5","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"2f2ff15d","id":1978,"implemented":false,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"1976:9:5","nodeType":"FunctionDefinition","parameters":{"id":1976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1973,"mutability":"mutable","name":"role","nameLocation":"1994:4:5","nodeType":"VariableDeclaration","scope":1978,"src":"1986:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1972,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1986:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1975,"mutability":"mutable","name":"account","nameLocation":"2008:7:5","nodeType":"VariableDeclaration","scope":1978,"src":"2000:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1974,"name":"address","nodeType":"ElementaryTypeName","src":"2000:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1985:31:5"},"returnParameters":{"id":1977,"nodeType":"ParameterList","parameters":[],"src":"2025:0:5"},"scope":1995,"src":"1967:59:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1979,"nodeType":"StructuredDocumentation","src":"2030:207:5","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"d547741f","id":1986,"implemented":false,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"2249:10:5","nodeType":"FunctionDefinition","parameters":{"id":1984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1981,"mutability":"mutable","name":"role","nameLocation":"2268:4:5","nodeType":"VariableDeclaration","scope":1986,"src":"2260:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1980,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2260:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1983,"mutability":"mutable","name":"account","nameLocation":"2282:7:5","nodeType":"VariableDeclaration","scope":1986,"src":"2274:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1982,"name":"address","nodeType":"ElementaryTypeName","src":"2274:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2259:31:5"},"returnParameters":{"id":1985,"nodeType":"ParameterList","parameters":[],"src":"2299:0:5"},"scope":1995,"src":"2240:60:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1987,"nodeType":"StructuredDocumentation","src":"2304:454:5","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`."},"functionSelector":"36568abe","id":1994,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2770:12:5","nodeType":"FunctionDefinition","parameters":{"id":1992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1989,"mutability":"mutable","name":"role","nameLocation":"2791:4:5","nodeType":"VariableDeclaration","scope":1994,"src":"2783:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1988,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2783:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1991,"mutability":"mutable","name":"account","nameLocation":"2805:7:5","nodeType":"VariableDeclaration","scope":1994,"src":"2797:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1990,"name":"address","nodeType":"ElementaryTypeName","src":"2797:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2782:31:5"},"returnParameters":{"id":1993,"nodeType":"ParameterList","parameters":[],"src":"2822:0:5"},"scope":1995,"src":"2761:62:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1996,"src":"209:2616:5","usedErrors":[]}],"src":"94:2732:5"},"id":5},"contracts/external/openzeppelin/contracts/access/IAccessControlEnumerable.sol":{"ast":{"absolutePath":"contracts/external/openzeppelin/contracts/access/IAccessControlEnumerable.sol","exportedSymbols":{"IAccessControl":[1995],"IAccessControlEnumerable":[2020]},"id":2021,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1997,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"104:23:6"},{"absolutePath":"contracts/external/openzeppelin/contracts/access/IAccessControl.sol","file":"contracts/external/openzeppelin/contracts/access/IAccessControl.sol","id":1998,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2021,"sourceUnit":1996,"src":"129:77:6","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2000,"name":"IAccessControl","nameLocations":["346:14:6"],"nodeType":"IdentifierPath","referencedDeclaration":1995,"src":"346:14:6"},"id":2001,"nodeType":"InheritanceSpecifier","src":"346:14:6"}],"canonicalName":"IAccessControlEnumerable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1999,"nodeType":"StructuredDocumentation","src":"208:99:6","text":" @dev External interface of AccessControlEnumerable declared to support ERC165 detection."},"fullyImplemented":false,"id":2020,"linearizedBaseContracts":[2020,1995],"name":"IAccessControlEnumerable","nameLocation":"318:24:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2002,"nodeType":"StructuredDocumentation","src":"365:552:6","text":" @dev Returns one of the accounts that have `role`. `index` must be a\n value between 0 and {getRoleMemberCount}, non-inclusive.\n Role bearers are not sorted in any particular way, and their ordering may\n change at any point.\n WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n you perform all queries on the same block. See the following\n https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n for more information."},"functionSelector":"9010d07c","id":2011,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleMember","nameLocation":"929:13:6","nodeType":"FunctionDefinition","parameters":{"id":2007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2004,"mutability":"mutable","name":"role","nameLocation":"951:4:6","nodeType":"VariableDeclaration","scope":2011,"src":"943:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2003,"name":"bytes32","nodeType":"ElementaryTypeName","src":"943:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2006,"mutability":"mutable","name":"index","nameLocation":"965:5:6","nodeType":"VariableDeclaration","scope":2011,"src":"957:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2005,"name":"uint256","nodeType":"ElementaryTypeName","src":"957:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"942:29:6"},"returnParameters":{"id":2010,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2009,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2011,"src":"1007:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2008,"name":"address","nodeType":"ElementaryTypeName","src":"1007:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1006:9:6"},"scope":2020,"src":"920:96:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2012,"nodeType":"StructuredDocumentation","src":"1020:151:6","text":" @dev Returns the number of accounts that have `role`. Can be used\n together with {getRoleMember} to enumerate all bearers of a role."},"functionSelector":"ca15c873","id":2019,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleMemberCount","nameLocation":"1183:18:6","nodeType":"FunctionDefinition","parameters":{"id":2015,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2014,"mutability":"mutable","name":"role","nameLocation":"1210:4:6","nodeType":"VariableDeclaration","scope":2019,"src":"1202:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2013,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1202:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1201:14:6"},"returnParameters":{"id":2018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2017,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2019,"src":"1239:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2016,"name":"uint256","nodeType":"ElementaryTypeName","src":"1239:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1238:9:6"},"scope":2020,"src":"1174:74:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2021,"src":"308:942:6","usedErrors":[]}],"src":"104:1147:6"},"id":6},"contracts/external/openzeppelin/contracts/security/ReentrancyGuard.sol":{"ast":{"absolutePath":"contracts/external/openzeppelin/contracts/security/ReentrancyGuard.sol","exportedSymbols":{"ReentrancyGuard":[2060]},"id":2061,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2022,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"97:23:7"},{"abstract":true,"baseContracts":[],"canonicalName":"ReentrancyGuard","contractDependencies":[],"contractKind":"contract","documentation":{"id":2023,"nodeType":"StructuredDocumentation","src":"122:750:7","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":2060,"linearizedBaseContracts":[2060],"name":"ReentrancyGuard","nameLocation":"891:15:7","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":2026,"mutability":"constant","name":"_NOT_ENTERED","nameLocation":"1664:12:7","nodeType":"VariableDeclaration","scope":2060,"src":"1639:41:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2024,"name":"uint256","nodeType":"ElementaryTypeName","src":"1639:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":2025,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1679:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":2029,"mutability":"constant","name":"_ENTERED","nameLocation":"1709:8:7","nodeType":"VariableDeclaration","scope":2060,"src":"1684:37:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2027,"name":"uint256","nodeType":"ElementaryTypeName","src":"1684:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":2028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1720:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":2031,"mutability":"mutable","name":"_status","nameLocation":"1742:7:7","nodeType":"VariableDeclaration","scope":2060,"src":"1726:23:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2030,"name":"uint256","nodeType":"ElementaryTypeName","src":"1726:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":2038,"nodeType":"Block","src":"1768:33:7","statements":[{"expression":{"id":2036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2034,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"1774:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2035,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2026,"src":"1784:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1774:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2037,"nodeType":"ExpressionStatement","src":"1774:22:7"}]},"id":2039,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2032,"nodeType":"ParameterList","parameters":[],"src":"1765:2:7"},"returnParameters":{"id":2033,"nodeType":"ParameterList","parameters":[],"src":"1768:0:7"},"scope":2060,"src":"1754:47:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2058,"nodeType":"Block","src":"2186:387:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2043,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"2267:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2044,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2029,"src":"2278:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2267:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","id":2046,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2288:33:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""},"value":"ReentrancyGuard: reentrant call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""}],"id":2042,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2259:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2259:63:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2048,"nodeType":"ExpressionStatement","src":"2259:63:7"},{"expression":{"id":2051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2049,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"2389:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2050,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2029,"src":"2399:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2389:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2052,"nodeType":"ExpressionStatement","src":"2389:18:7"},{"id":2053,"nodeType":"PlaceholderStatement","src":"2414:1:7"},{"expression":{"id":2056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2054,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"2546:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2055,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2026,"src":"2556:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2546:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2057,"nodeType":"ExpressionStatement","src":"2546:22:7"}]},"documentation":{"id":2040,"nodeType":"StructuredDocumentation","src":"1805:354:7","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":2059,"name":"nonReentrant","nameLocation":"2171:12:7","nodeType":"ModifierDefinition","parameters":{"id":2041,"nodeType":"ParameterList","parameters":[],"src":"2183:2:7"},"src":"2162:411:7","virtual":false,"visibility":"internal"}],"scope":2061,"src":"873:1702:7","usedErrors":[]}],"src":"97:2479:7"},"id":7},"contracts/external/openzeppelin/contracts/token/IERC20.sol":{"ast":{"absolutePath":"contracts/external/openzeppelin/contracts/token/IERC20.sol","exportedSymbols":{"IERC20":[2138]},"id":2139,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2062,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:8"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":2063,"nodeType":"StructuredDocumentation","src":"131:70:8","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":2138,"linearizedBaseContracts":[2138],"name":"IERC20","nameLocation":"212:6:8","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2064,"nodeType":"StructuredDocumentation","src":"223:62:8","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":2069,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"297:11:8","nodeType":"FunctionDefinition","parameters":{"id":2065,"nodeType":"ParameterList","parameters":[],"src":"308:2:8"},"returnParameters":{"id":2068,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2067,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2069,"src":"334:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2066,"name":"uint256","nodeType":"ElementaryTypeName","src":"334:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"333:9:8"},"scope":2138,"src":"288:55:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2070,"nodeType":"StructuredDocumentation","src":"347:68:8","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":2077,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"427:9:8","nodeType":"FunctionDefinition","parameters":{"id":2073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2072,"mutability":"mutable","name":"account","nameLocation":"445:7:8","nodeType":"VariableDeclaration","scope":2077,"src":"437:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2071,"name":"address","nodeType":"ElementaryTypeName","src":"437:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"436:17:8"},"returnParameters":{"id":2076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2075,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2077,"src":"477:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2074,"name":"uint256","nodeType":"ElementaryTypeName","src":"477:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"476:9:8"},"scope":2138,"src":"418:68:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2078,"nodeType":"StructuredDocumentation","src":"490:190:8","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":2087,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"692:8:8","nodeType":"FunctionDefinition","parameters":{"id":2083,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2080,"mutability":"mutable","name":"to","nameLocation":"709:2:8","nodeType":"VariableDeclaration","scope":2087,"src":"701:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2079,"name":"address","nodeType":"ElementaryTypeName","src":"701:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2082,"mutability":"mutable","name":"amount","nameLocation":"721:6:8","nodeType":"VariableDeclaration","scope":2087,"src":"713:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2081,"name":"uint256","nodeType":"ElementaryTypeName","src":"713:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"700:28:8"},"returnParameters":{"id":2086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2085,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2087,"src":"747:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2084,"name":"bool","nodeType":"ElementaryTypeName","src":"747:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"746:6:8"},"scope":2138,"src":"683:70:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2088,"nodeType":"StructuredDocumentation","src":"757:252:8","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":2097,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1021:9:8","nodeType":"FunctionDefinition","parameters":{"id":2093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2090,"mutability":"mutable","name":"owner","nameLocation":"1039:5:8","nodeType":"VariableDeclaration","scope":2097,"src":"1031:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2089,"name":"address","nodeType":"ElementaryTypeName","src":"1031:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2092,"mutability":"mutable","name":"spender","nameLocation":"1054:7:8","nodeType":"VariableDeclaration","scope":2097,"src":"1046:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2091,"name":"address","nodeType":"ElementaryTypeName","src":"1046:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1030:32:8"},"returnParameters":{"id":2096,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2095,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2097,"src":"1098:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2094,"name":"uint256","nodeType":"ElementaryTypeName","src":"1098:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1097:9:8"},"scope":2138,"src":"1012:95:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2098,"nodeType":"StructuredDocumentation","src":"1111:616:8","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":2107,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"1739:7:8","nodeType":"FunctionDefinition","parameters":{"id":2103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2100,"mutability":"mutable","name":"spender","nameLocation":"1755:7:8","nodeType":"VariableDeclaration","scope":2107,"src":"1747:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2099,"name":"address","nodeType":"ElementaryTypeName","src":"1747:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2102,"mutability":"mutable","name":"amount","nameLocation":"1772:6:8","nodeType":"VariableDeclaration","scope":2107,"src":"1764:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2101,"name":"uint256","nodeType":"ElementaryTypeName","src":"1764:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1746:33:8"},"returnParameters":{"id":2106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2105,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2107,"src":"1798:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2104,"name":"bool","nodeType":"ElementaryTypeName","src":"1798:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1797:6:8"},"scope":2138,"src":"1730:74:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2108,"nodeType":"StructuredDocumentation","src":"1808:271:8","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":2119,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2091:12:8","nodeType":"FunctionDefinition","parameters":{"id":2115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2110,"mutability":"mutable","name":"from","nameLocation":"2117:4:8","nodeType":"VariableDeclaration","scope":2119,"src":"2109:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2109,"name":"address","nodeType":"ElementaryTypeName","src":"2109:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2112,"mutability":"mutable","name":"to","nameLocation":"2135:2:8","nodeType":"VariableDeclaration","scope":2119,"src":"2127:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2111,"name":"address","nodeType":"ElementaryTypeName","src":"2127:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2114,"mutability":"mutable","name":"amount","nameLocation":"2151:6:8","nodeType":"VariableDeclaration","scope":2119,"src":"2143:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2113,"name":"uint256","nodeType":"ElementaryTypeName","src":"2143:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2103:58:8"},"returnParameters":{"id":2118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2117,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2119,"src":"2180:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2116,"name":"bool","nodeType":"ElementaryTypeName","src":"2180:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2179:6:8"},"scope":2138,"src":"2082:104:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":{"id":2120,"nodeType":"StructuredDocumentation","src":"2190:148:8","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":2128,"name":"Transfer","nameLocation":"2347:8:8","nodeType":"EventDefinition","parameters":{"id":2127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2122,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"2372:4:8","nodeType":"VariableDeclaration","scope":2128,"src":"2356:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2121,"name":"address","nodeType":"ElementaryTypeName","src":"2356:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2124,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"2394:2:8","nodeType":"VariableDeclaration","scope":2128,"src":"2378:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2123,"name":"address","nodeType":"ElementaryTypeName","src":"2378:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2126,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"2406:5:8","nodeType":"VariableDeclaration","scope":2128,"src":"2398:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2125,"name":"uint256","nodeType":"ElementaryTypeName","src":"2398:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2355:57:8"},"src":"2341:72:8"},{"anonymous":false,"documentation":{"id":2129,"nodeType":"StructuredDocumentation","src":"2417:142:8","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":2137,"name":"Approval","nameLocation":"2568:8:8","nodeType":"EventDefinition","parameters":{"id":2136,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2131,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"2593:5:8","nodeType":"VariableDeclaration","scope":2137,"src":"2577:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2130,"name":"address","nodeType":"ElementaryTypeName","src":"2577:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2133,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"2616:7:8","nodeType":"VariableDeclaration","scope":2137,"src":"2600:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2132,"name":"address","nodeType":"ElementaryTypeName","src":"2600:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2135,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"2633:5:8","nodeType":"VariableDeclaration","scope":2137,"src":"2625:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2134,"name":"uint256","nodeType":"ElementaryTypeName","src":"2625:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2576:63:8"},"src":"2562:78:8"}],"scope":2139,"src":"202:2440:8","usedErrors":[]}],"src":"106:2537:8"},"id":8},"contracts/external/openzeppelin/contracts/token/IERC20Metadata.sol":{"ast":{"absolutePath":"contracts/external/openzeppelin/contracts/token/IERC20Metadata.sol","exportedSymbols":{"IERC20":[2138],"IERC20Metadata":[2163]},"id":2164,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2140,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"110:23:9"},{"absolutePath":"contracts/external/openzeppelin/contracts/token/IERC20.sol","file":"contracts/external/openzeppelin/contracts/token/IERC20.sol","id":2141,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2164,"sourceUnit":2139,"src":"135:68:9","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2143,"name":"IERC20","nameLocations":["350:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2138,"src":"350:6:9"},"id":2144,"nodeType":"InheritanceSpecifier","src":"350:6:9"}],"canonicalName":"IERC20Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":2142,"nodeType":"StructuredDocumentation","src":"205:116:9","text":" @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"},"fullyImplemented":false,"id":2163,"linearizedBaseContracts":[2163,2138],"name":"IERC20Metadata","nameLocation":"332:14:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2145,"nodeType":"StructuredDocumentation","src":"361:50:9","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":2150,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"423:4:9","nodeType":"FunctionDefinition","parameters":{"id":2146,"nodeType":"ParameterList","parameters":[],"src":"427:2:9"},"returnParameters":{"id":2149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2148,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2150,"src":"453:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2147,"name":"string","nodeType":"ElementaryTypeName","src":"453:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"452:15:9"},"scope":2163,"src":"414:54:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2151,"nodeType":"StructuredDocumentation","src":"472:52:9","text":" @dev Returns the symbol of the token."},"functionSelector":"95d89b41","id":2156,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"536:6:9","nodeType":"FunctionDefinition","parameters":{"id":2152,"nodeType":"ParameterList","parameters":[],"src":"542:2:9"},"returnParameters":{"id":2155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2154,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2156,"src":"568:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2153,"name":"string","nodeType":"ElementaryTypeName","src":"568:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"567:15:9"},"scope":2163,"src":"527:56:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2157,"nodeType":"StructuredDocumentation","src":"587:61:9","text":" @dev Returns the decimals places of the token."},"functionSelector":"313ce567","id":2162,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"660:8:9","nodeType":"FunctionDefinition","parameters":{"id":2158,"nodeType":"ParameterList","parameters":[],"src":"668:2:9"},"returnParameters":{"id":2161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2160,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2162,"src":"694:5:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2159,"name":"uint8","nodeType":"ElementaryTypeName","src":"694:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"693:7:9"},"scope":2163,"src":"651:50:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2164,"src":"322:381:9","usedErrors":[]}],"src":"110:594:9"},"id":9},"contracts/external/openzeppelin/contracts/token/SafeERC20.sol":{"ast":{"absolutePath":"contracts/external/openzeppelin/contracts/token/SafeERC20.sol","exportedSymbols":{"Address":[2682],"IERC20":[2138],"SafeERC20":[2387]},"id":2388,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2165,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:10"},{"absolutePath":"contracts/external/openzeppelin/contracts/token/IERC20.sol","file":"contracts/external/openzeppelin/contracts/token/IERC20.sol","id":2166,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2388,"sourceUnit":2139,"src":"125:68:10","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/external/openzeppelin/contracts/utils/Address.sol","file":"contracts/external/openzeppelin/contracts/utils/Address.sol","id":2167,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2388,"sourceUnit":2683,"src":"194:69:10","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20","contractDependencies":[],"contractKind":"library","documentation":{"id":2168,"nodeType":"StructuredDocumentation","src":"265:457:10","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":2387,"linearizedBaseContracts":[2387],"name":"SafeERC20","nameLocation":"731:9:10","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2171,"libraryName":{"id":2169,"name":"Address","nameLocations":["751:7:10"],"nodeType":"IdentifierPath","referencedDeclaration":2682,"src":"751:7:10"},"nodeType":"UsingForDirective","src":"745:26:10","typeName":{"id":2170,"name":"address","nodeType":"ElementaryTypeName","src":"763:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":2193,"nodeType":"Block","src":"863:115:10","statements":[{"expression":{"arguments":[{"id":2182,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2174,"src":"896:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":2185,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2174,"src":"932:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"}},"id":2186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"938:8:10","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2087,"src":"932:14:10","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":2187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"947:8:10","memberName":"selector","nodeType":"MemberAccess","src":"932:23:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":2188,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2176,"src":"957:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2189,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2178,"src":"961:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2183,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"909:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2184,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"913:18:10","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"909:22:10","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":2190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"909:58:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2181,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2386,"src":"869:19:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2138_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":2191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"869:104:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2192,"nodeType":"ExpressionStatement","src":"869:104:10"}]},"id":2194,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"784:12:10","nodeType":"FunctionDefinition","parameters":{"id":2179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2174,"mutability":"mutable","name":"token","nameLocation":"809:5:10","nodeType":"VariableDeclaration","scope":2194,"src":"802:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"},"typeName":{"id":2173,"nodeType":"UserDefinedTypeName","pathNode":{"id":2172,"name":"IERC20","nameLocations":["802:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":2138,"src":"802:6:10"},"referencedDeclaration":2138,"src":"802:6:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2176,"mutability":"mutable","name":"to","nameLocation":"828:2:10","nodeType":"VariableDeclaration","scope":2194,"src":"820:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2175,"name":"address","nodeType":"ElementaryTypeName","src":"820:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2178,"mutability":"mutable","name":"value","nameLocation":"844:5:10","nodeType":"VariableDeclaration","scope":2194,"src":"836:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2177,"name":"uint256","nodeType":"ElementaryTypeName","src":"836:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"796:57:10"},"returnParameters":{"id":2180,"nodeType":"ParameterList","parameters":[],"src":"863:0:10"},"scope":2387,"src":"775:203:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2219,"nodeType":"Block","src":"1092:125:10","statements":[{"expression":{"arguments":[{"id":2207,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2197,"src":"1125:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":2210,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2197,"src":"1161:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"}},"id":2211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1167:12:10","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":2119,"src":"1161:18:10","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":2212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1180:8:10","memberName":"selector","nodeType":"MemberAccess","src":"1161:27:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":2213,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2199,"src":"1190:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2214,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2201,"src":"1196:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2215,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2203,"src":"1200:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2208,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1138:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2209,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1142:18:10","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1138:22:10","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":2216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1138:68:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2206,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2386,"src":"1098:19:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2138_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":2217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1098:114:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2218,"nodeType":"ExpressionStatement","src":"1098:114:10"}]},"id":2220,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"991:16:10","nodeType":"FunctionDefinition","parameters":{"id":2204,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2197,"mutability":"mutable","name":"token","nameLocation":"1020:5:10","nodeType":"VariableDeclaration","scope":2220,"src":"1013:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"},"typeName":{"id":2196,"nodeType":"UserDefinedTypeName","pathNode":{"id":2195,"name":"IERC20","nameLocations":["1013:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":2138,"src":"1013:6:10"},"referencedDeclaration":2138,"src":"1013:6:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2199,"mutability":"mutable","name":"from","nameLocation":"1039:4:10","nodeType":"VariableDeclaration","scope":2220,"src":"1031:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2198,"name":"address","nodeType":"ElementaryTypeName","src":"1031:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2201,"mutability":"mutable","name":"to","nameLocation":"1057:2:10","nodeType":"VariableDeclaration","scope":2220,"src":"1049:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2200,"name":"address","nodeType":"ElementaryTypeName","src":"1049:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2203,"mutability":"mutable","name":"value","nameLocation":"1073:5:10","nodeType":"VariableDeclaration","scope":2220,"src":"1065:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2202,"name":"uint256","nodeType":"ElementaryTypeName","src":"1065:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1007:75:10"},"returnParameters":{"id":2205,"nodeType":"ParameterList","parameters":[],"src":"1092:0:10"},"scope":2387,"src":"982:235:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2263,"nodeType":"Block","src":"1553:477:10","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2232,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2228,"src":"1780:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1789:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1780:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2235,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1779:12:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":2240,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1820:4:10","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$2387","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$2387","typeString":"library SafeERC20"}],"id":2239,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1812:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2238,"name":"address","nodeType":"ElementaryTypeName","src":"1812:7:10","typeDescriptions":{}}},"id":2241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1812:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2242,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2226,"src":"1827:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2236,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"1796:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"}},"id":2237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1802:9:10","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":2097,"src":"1796:15:10","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":2243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1796:39:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1839:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1796:44:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2246,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1795:46:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1779:62:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":2248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1849:56:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":2231,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1764:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2249,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1764:147:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2250,"nodeType":"ExpressionStatement","src":"1764:147:10"},{"expression":{"arguments":[{"id":2252,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"1944:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":2255,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"1980:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"}},"id":2256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1986:7:10","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2107,"src":"1980:13:10","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":2257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1994:8:10","memberName":"selector","nodeType":"MemberAccess","src":"1980:22:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":2258,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2226,"src":"2004:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2259,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2228,"src":"2013:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2253,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1957:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2254,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1961:18:10","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1957:22:10","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":2260,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1957:62:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2251,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2386,"src":"1917:19:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2138_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1917:108:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2262,"nodeType":"ExpressionStatement","src":"1917:108:10"}]},"documentation":{"id":2221,"nodeType":"StructuredDocumentation","src":"1221:237:10","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":2264,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1470:11:10","nodeType":"FunctionDefinition","parameters":{"id":2229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2224,"mutability":"mutable","name":"token","nameLocation":"1494:5:10","nodeType":"VariableDeclaration","scope":2264,"src":"1487:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"},"typeName":{"id":2223,"nodeType":"UserDefinedTypeName","pathNode":{"id":2222,"name":"IERC20","nameLocations":["1487:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":2138,"src":"1487:6:10"},"referencedDeclaration":2138,"src":"1487:6:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2226,"mutability":"mutable","name":"spender","nameLocation":"1513:7:10","nodeType":"VariableDeclaration","scope":2264,"src":"1505:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2225,"name":"address","nodeType":"ElementaryTypeName","src":"1505:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2228,"mutability":"mutable","name":"value","nameLocation":"1534:5:10","nodeType":"VariableDeclaration","scope":2264,"src":"1526:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2227,"name":"uint256","nodeType":"ElementaryTypeName","src":"1526:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1481:62:10"},"returnParameters":{"id":2230,"nodeType":"ParameterList","parameters":[],"src":"1553:0:10"},"scope":2387,"src":"1461:569:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2299,"nodeType":"Block","src":"2136:202:10","statements":[{"assignments":[2275],"declarations":[{"constant":false,"id":2275,"mutability":"mutable","name":"newAllowance","nameLocation":"2150:12:10","nodeType":"VariableDeclaration","scope":2299,"src":"2142:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2274,"name":"uint256","nodeType":"ElementaryTypeName","src":"2142:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2286,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":2280,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2189:4:10","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$2387","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$2387","typeString":"library SafeERC20"}],"id":2279,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2181:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2278,"name":"address","nodeType":"ElementaryTypeName","src":"2181:7:10","typeDescriptions":{}}},"id":2281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2181:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2282,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2269,"src":"2196:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2276,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"2165:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"}},"id":2277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2171:9:10","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":2097,"src":"2165:15:10","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":2283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2165:39:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2284,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2271,"src":"2207:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2165:47:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2142:70:10"},{"expression":{"arguments":[{"id":2288,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"2245:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":2291,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"2281:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"}},"id":2292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2287:7:10","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2107,"src":"2281:13:10","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":2293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2295:8:10","memberName":"selector","nodeType":"MemberAccess","src":"2281:22:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":2294,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2269,"src":"2305:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2295,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2275,"src":"2314:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2289,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2258:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2290,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2262:18:10","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2258:22:10","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":2296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2258:69:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2287,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2386,"src":"2218:19:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2138_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":2297,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2218:115:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2298,"nodeType":"ExpressionStatement","src":"2218:115:10"}]},"id":2300,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2043:21:10","nodeType":"FunctionDefinition","parameters":{"id":2272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2267,"mutability":"mutable","name":"token","nameLocation":"2077:5:10","nodeType":"VariableDeclaration","scope":2300,"src":"2070:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"},"typeName":{"id":2266,"nodeType":"UserDefinedTypeName","pathNode":{"id":2265,"name":"IERC20","nameLocations":["2070:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":2138,"src":"2070:6:10"},"referencedDeclaration":2138,"src":"2070:6:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2269,"mutability":"mutable","name":"spender","nameLocation":"2096:7:10","nodeType":"VariableDeclaration","scope":2300,"src":"2088:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2268,"name":"address","nodeType":"ElementaryTypeName","src":"2088:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2271,"mutability":"mutable","name":"value","nameLocation":"2117:5:10","nodeType":"VariableDeclaration","scope":2300,"src":"2109:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2270,"name":"uint256","nodeType":"ElementaryTypeName","src":"2109:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2064:62:10"},"returnParameters":{"id":2273,"nodeType":"ParameterList","parameters":[],"src":"2136:0:10"},"scope":2387,"src":"2034:304:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2347,"nodeType":"Block","src":"2444:384:10","statements":[{"id":2346,"nodeType":"UncheckedBlock","src":"2450:374:10","statements":[{"assignments":[2311],"declarations":[{"constant":false,"id":2311,"mutability":"mutable","name":"oldAllowance","nameLocation":"2476:12:10","nodeType":"VariableDeclaration","scope":2346,"src":"2468:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2310,"name":"uint256","nodeType":"ElementaryTypeName","src":"2468:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2320,"initialValue":{"arguments":[{"arguments":[{"id":2316,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2515:4:10","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$2387","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$2387","typeString":"library SafeERC20"}],"id":2315,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2507:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2314,"name":"address","nodeType":"ElementaryTypeName","src":"2507:7:10","typeDescriptions":{}}},"id":2317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2507:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2318,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2305,"src":"2522:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2312,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2303,"src":"2491:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"}},"id":2313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2497:9:10","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":2097,"src":"2491:15:10","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":2319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2491:39:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2468:62:10"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2322,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"2555:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2323,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"2571:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2555:21:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":2325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2586:43:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":2321,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2538:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2538:99:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2327,"nodeType":"ExpressionStatement","src":"2538:99:10"},{"assignments":[2329],"declarations":[{"constant":false,"id":2329,"mutability":"mutable","name":"newAllowance","nameLocation":"2653:12:10","nodeType":"VariableDeclaration","scope":2346,"src":"2645:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2328,"name":"uint256","nodeType":"ElementaryTypeName","src":"2645:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2333,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2330,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"2668:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2331,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"2683:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2668:20:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2645:43:10"},{"expression":{"arguments":[{"id":2335,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2303,"src":"2725:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":2338,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2303,"src":"2763:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"}},"id":2339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2769:7:10","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2107,"src":"2763:13:10","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":2340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2777:8:10","memberName":"selector","nodeType":"MemberAccess","src":"2763:22:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":2341,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2305,"src":"2787:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2342,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2329,"src":"2796:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2336,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2740:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2337,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2744:18:10","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2740:22:10","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":2343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2740:69:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2334,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2386,"src":"2696:19:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2138_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":2344,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2696:121:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2345,"nodeType":"ExpressionStatement","src":"2696:121:10"}]}]},"id":2348,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"2351:21:10","nodeType":"FunctionDefinition","parameters":{"id":2308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2303,"mutability":"mutable","name":"token","nameLocation":"2385:5:10","nodeType":"VariableDeclaration","scope":2348,"src":"2378:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"},"typeName":{"id":2302,"nodeType":"UserDefinedTypeName","pathNode":{"id":2301,"name":"IERC20","nameLocations":["2378:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":2138,"src":"2378:6:10"},"referencedDeclaration":2138,"src":"2378:6:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2305,"mutability":"mutable","name":"spender","nameLocation":"2404:7:10","nodeType":"VariableDeclaration","scope":2348,"src":"2396:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2304,"name":"address","nodeType":"ElementaryTypeName","src":"2396:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2307,"mutability":"mutable","name":"value","nameLocation":"2425:5:10","nodeType":"VariableDeclaration","scope":2348,"src":"2417:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2306,"name":"uint256","nodeType":"ElementaryTypeName","src":"2417:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2372:62:10"},"returnParameters":{"id":2309,"nodeType":"ParameterList","parameters":[],"src":"2444:0:10"},"scope":2387,"src":"2342:486:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2385,"nodeType":"Block","src":"3267:628:10","statements":[{"assignments":[2358],"declarations":[{"constant":false,"id":2358,"mutability":"mutable","name":"returndata","nameLocation":"3613:10:10","nodeType":"VariableDeclaration","scope":2385,"src":"3600:23:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2357,"name":"bytes","nodeType":"ElementaryTypeName","src":"3600:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2367,"initialValue":{"arguments":[{"id":2364,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"3660:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":2365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3666:34:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":2361,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2352,"src":"3640:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"}],"id":2360,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3632:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2359,"name":"address","nodeType":"ElementaryTypeName","src":"3632:7:10","typeDescriptions":{}}},"id":2362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3632:14:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3647:12:10","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":2476,"src":"3632:27:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":2366,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3632:69:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3600:101:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2368,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"3711:10:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3722:6:10","memberName":"length","nodeType":"MemberAccess","src":"3711:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3731:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3711:21:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2384,"nodeType":"IfStatement","src":"3707:184:10","trueBody":{"id":2383,"nodeType":"Block","src":"3734:157:10","statements":[{"expression":{"arguments":[{"arguments":[{"id":2375,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"3803:10:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":2377,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3816:4:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":2376,"name":"bool","nodeType":"ElementaryTypeName","src":"3816:4:10","typeDescriptions":{}}}],"id":2378,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3815:6:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":2373,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3792:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2374,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3796:6:10","memberName":"decode","nodeType":"MemberAccess","src":"3792:10:10","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2379,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3792:30:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":2380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3832:44:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":2372,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3775:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3775:109:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2382,"nodeType":"ExpressionStatement","src":"3775:109:10"}]}}]},"documentation":{"id":2349,"nodeType":"StructuredDocumentation","src":"2832:362:10","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":2386,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"3206:19:10","nodeType":"FunctionDefinition","parameters":{"id":2355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2352,"mutability":"mutable","name":"token","nameLocation":"3233:5:10","nodeType":"VariableDeclaration","scope":2386,"src":"3226:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"},"typeName":{"id":2351,"nodeType":"UserDefinedTypeName","pathNode":{"id":2350,"name":"IERC20","nameLocations":["3226:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":2138,"src":"3226:6:10"},"referencedDeclaration":2138,"src":"3226:6:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2138","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2354,"mutability":"mutable","name":"data","nameLocation":"3253:4:10","nodeType":"VariableDeclaration","scope":2386,"src":"3240:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2353,"name":"bytes","nodeType":"ElementaryTypeName","src":"3240:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3225:33:10"},"returnParameters":{"id":2356,"nodeType":"ParameterList","parameters":[],"src":"3267:0:10"},"scope":2387,"src":"3197:698:10","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":2388,"src":"723:3174:10","usedErrors":[]}],"src":"100:3798:10"},"id":10},"contracts/external/openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"contracts/external/openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[2682]},"id":2683,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2389,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:11"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":2390,"nodeType":"StructuredDocumentation","src":"126:67:11","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":2682,"linearizedBaseContracts":[2682],"name":"Address","nameLocation":"202:7:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":2404,"nodeType":"Block","src":"1187:236:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2398,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2393,"src":"1395:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1403:4:11","memberName":"code","nodeType":"MemberAccess","src":"1395:12:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1408:6:11","memberName":"length","nodeType":"MemberAccess","src":"1395:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1417:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1395:23:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2397,"id":2403,"nodeType":"Return","src":"1388:30:11"}]},"documentation":{"id":2391,"nodeType":"StructuredDocumentation","src":"214:904:11","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":2405,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1130:10:11","nodeType":"FunctionDefinition","parameters":{"id":2394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2393,"mutability":"mutable","name":"account","nameLocation":"1149:7:11","nodeType":"VariableDeclaration","scope":2405,"src":"1141:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2392,"name":"address","nodeType":"ElementaryTypeName","src":"1141:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1140:17:11"},"returnParameters":{"id":2397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2396,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2405,"src":"1181:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2395,"name":"bool","nodeType":"ElementaryTypeName","src":"1181:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1180:6:11"},"scope":2682,"src":"1121:302:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2438,"nodeType":"Block","src":"2377:245:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2416,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2399:4:11","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2682","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2682","typeString":"library Address"}],"id":2415,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2391:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2414,"name":"address","nodeType":"ElementaryTypeName","src":"2391:7:11","typeDescriptions":{}}},"id":2417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2391:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2405:7:11","memberName":"balance","nodeType":"MemberAccess","src":"2391:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2419,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2410,"src":"2416:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2391:31:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":2421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2424:31:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":2413,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2383:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2422,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2383:73:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2423,"nodeType":"ExpressionStatement","src":"2383:73:11"},{"assignments":[2425,null],"declarations":[{"constant":false,"id":2425,"mutability":"mutable","name":"success","nameLocation":"2469:7:11","nodeType":"VariableDeclaration","scope":2438,"src":"2464:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2424,"name":"bool","nodeType":"ElementaryTypeName","src":"2464:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":2432,"initialValue":{"arguments":[{"hexValue":"","id":2430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2512:2:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":2426,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2408,"src":"2482:9:11","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2492:4:11","memberName":"call","nodeType":"MemberAccess","src":"2482:14:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2428,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2410,"src":"2504:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2482:29:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2482:33:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2463:52:11"},{"expression":{"arguments":[{"id":2434,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"2536:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":2435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2551:60:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":2433,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2521:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2521:96:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2437,"nodeType":"ExpressionStatement","src":"2521:96:11"}]},"documentation":{"id":2406,"nodeType":"StructuredDocumentation","src":"1427:876:11","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":2439,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2315:9:11","nodeType":"FunctionDefinition","parameters":{"id":2411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2408,"mutability":"mutable","name":"recipient","nameLocation":"2341:9:11","nodeType":"VariableDeclaration","scope":2439,"src":"2325:25:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2407,"name":"address","nodeType":"ElementaryTypeName","src":"2325:15:11","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":2410,"mutability":"mutable","name":"amount","nameLocation":"2360:6:11","nodeType":"VariableDeclaration","scope":2439,"src":"2352:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2409,"name":"uint256","nodeType":"ElementaryTypeName","src":"2352:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2324:43:11"},"returnParameters":{"id":2412,"nodeType":"ParameterList","parameters":[],"src":"2377:0:11"},"scope":2682,"src":"2306:316:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2455,"nodeType":"Block","src":"3425:78:11","statements":[{"expression":{"arguments":[{"id":2450,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"3451:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2451,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2444,"src":"3459:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":2452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3465:32:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":2449,"name":"functionCall","nodeType":"Identifier","overloadedDeclarations":[2456,2476],"referencedDeclaration":2476,"src":"3438:12:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":2453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3438:60:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2448,"id":2454,"nodeType":"Return","src":"3431:67:11"}]},"documentation":{"id":2440,"nodeType":"StructuredDocumentation","src":"2626:697:11","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":2456,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3335:12:11","nodeType":"FunctionDefinition","parameters":{"id":2445,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2442,"mutability":"mutable","name":"target","nameLocation":"3356:6:11","nodeType":"VariableDeclaration","scope":2456,"src":"3348:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2441,"name":"address","nodeType":"ElementaryTypeName","src":"3348:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2444,"mutability":"mutable","name":"data","nameLocation":"3377:4:11","nodeType":"VariableDeclaration","scope":2456,"src":"3364:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2443,"name":"bytes","nodeType":"ElementaryTypeName","src":"3364:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3347:35:11"},"returnParameters":{"id":2448,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2447,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2456,"src":"3409:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2446,"name":"bytes","nodeType":"ElementaryTypeName","src":"3409:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3408:14:11"},"scope":2682,"src":"3326:177:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2475,"nodeType":"Block","src":"3844:70:11","statements":[{"expression":{"arguments":[{"id":2469,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2459,"src":"3879:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2470,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"3887:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3893:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":2472,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"3896:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2468,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2496,2546],"referencedDeclaration":2546,"src":"3857:21:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3857:52:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2467,"id":2474,"nodeType":"Return","src":"3850:59:11"}]},"documentation":{"id":2457,"nodeType":"StructuredDocumentation","src":"3507:201:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2476,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3720:12:11","nodeType":"FunctionDefinition","parameters":{"id":2464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2459,"mutability":"mutable","name":"target","nameLocation":"3746:6:11","nodeType":"VariableDeclaration","scope":2476,"src":"3738:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2458,"name":"address","nodeType":"ElementaryTypeName","src":"3738:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2461,"mutability":"mutable","name":"data","nameLocation":"3771:4:11","nodeType":"VariableDeclaration","scope":2476,"src":"3758:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2460,"name":"bytes","nodeType":"ElementaryTypeName","src":"3758:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2463,"mutability":"mutable","name":"errorMessage","nameLocation":"3795:12:11","nodeType":"VariableDeclaration","scope":2476,"src":"3781:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2462,"name":"string","nodeType":"ElementaryTypeName","src":"3781:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3732:79:11"},"returnParameters":{"id":2467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2466,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2476,"src":"3830:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2465,"name":"bytes","nodeType":"ElementaryTypeName","src":"3830:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3829:14:11"},"scope":2682,"src":"3711:203:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2495,"nodeType":"Block","src":"4381:151:11","statements":[{"expression":{"arguments":[{"id":2489,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2479,"src":"4431:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2490,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2481,"src":"4447:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2491,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"4461:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":2492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4476:43:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":2488,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2496,2546],"referencedDeclaration":2546,"src":"4400:21:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4400:127:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2487,"id":2494,"nodeType":"Return","src":"4387:140:11"}]},"documentation":{"id":2477,"nodeType":"StructuredDocumentation","src":"3918:331:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":2496,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4261:21:11","nodeType":"FunctionDefinition","parameters":{"id":2484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2479,"mutability":"mutable","name":"target","nameLocation":"4296:6:11","nodeType":"VariableDeclaration","scope":2496,"src":"4288:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2478,"name":"address","nodeType":"ElementaryTypeName","src":"4288:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2481,"mutability":"mutable","name":"data","nameLocation":"4321:4:11","nodeType":"VariableDeclaration","scope":2496,"src":"4308:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2480,"name":"bytes","nodeType":"ElementaryTypeName","src":"4308:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2483,"mutability":"mutable","name":"value","nameLocation":"4339:5:11","nodeType":"VariableDeclaration","scope":2496,"src":"4331:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2482,"name":"uint256","nodeType":"ElementaryTypeName","src":"4331:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4282:66:11"},"returnParameters":{"id":2487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2486,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2496,"src":"4367:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2485,"name":"bytes","nodeType":"ElementaryTypeName","src":"4367:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4366:14:11"},"scope":2682,"src":"4252:280:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2545,"nodeType":"Block","src":"4927:320:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2513,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4956:4:11","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2682","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2682","typeString":"library Address"}],"id":2512,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4948:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2511,"name":"address","nodeType":"ElementaryTypeName","src":"4948:7:11","typeDescriptions":{}}},"id":2514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4948:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4962:7:11","memberName":"balance","nodeType":"MemberAccess","src":"4948:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2516,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2503,"src":"4973:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4948:30:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":2518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4986:40:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":2510,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4933:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4933:99:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2520,"nodeType":"ExpressionStatement","src":"4933:99:11"},{"expression":{"arguments":[{"arguments":[{"id":2523,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"5057:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2522,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2405,"src":"5046:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":2524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5046:18:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":2525,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5066:31:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":2521,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5038:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5038:60:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2527,"nodeType":"ExpressionStatement","src":"5038:60:11"},{"assignments":[2529,2531],"declarations":[{"constant":false,"id":2529,"mutability":"mutable","name":"success","nameLocation":"5111:7:11","nodeType":"VariableDeclaration","scope":2545,"src":"5106:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2528,"name":"bool","nodeType":"ElementaryTypeName","src":"5106:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2531,"mutability":"mutable","name":"returndata","nameLocation":"5133:10:11","nodeType":"VariableDeclaration","scope":2545,"src":"5120:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2530,"name":"bytes","nodeType":"ElementaryTypeName","src":"5120:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2538,"initialValue":{"arguments":[{"id":2536,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2501,"src":"5173:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2532,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"5147:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5154:4:11","memberName":"call","nodeType":"MemberAccess","src":"5147:11:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2534,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2503,"src":"5166:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5147:25:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5147:31:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5105:73:11"},{"expression":{"arguments":[{"id":2540,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2529,"src":"5208:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2541,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"5217:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2542,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"5229:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2539,"name":"verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2681,"src":"5191:16:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":2543,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5191:51:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2509,"id":2544,"nodeType":"Return","src":"5184:58:11"}]},"documentation":{"id":2497,"nodeType":"StructuredDocumentation","src":"4536:227:11","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2546,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4775:21:11","nodeType":"FunctionDefinition","parameters":{"id":2506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2499,"mutability":"mutable","name":"target","nameLocation":"4810:6:11","nodeType":"VariableDeclaration","scope":2546,"src":"4802:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2498,"name":"address","nodeType":"ElementaryTypeName","src":"4802:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2501,"mutability":"mutable","name":"data","nameLocation":"4835:4:11","nodeType":"VariableDeclaration","scope":2546,"src":"4822:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2500,"name":"bytes","nodeType":"ElementaryTypeName","src":"4822:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2503,"mutability":"mutable","name":"value","nameLocation":"4853:5:11","nodeType":"VariableDeclaration","scope":2546,"src":"4845:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2502,"name":"uint256","nodeType":"ElementaryTypeName","src":"4845:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2505,"mutability":"mutable","name":"errorMessage","nameLocation":"4878:12:11","nodeType":"VariableDeclaration","scope":2546,"src":"4864:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2504,"name":"string","nodeType":"ElementaryTypeName","src":"4864:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4796:98:11"},"returnParameters":{"id":2509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2508,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2546,"src":"4913:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2507,"name":"bytes","nodeType":"ElementaryTypeName","src":"4913:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4912:14:11"},"scope":2682,"src":"4766:481:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2562,"nodeType":"Block","src":"5524:97:11","statements":[{"expression":{"arguments":[{"id":2557,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2549,"src":"5562:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2558,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2551,"src":"5570:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":2559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5576:39:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":2556,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[2563,2598],"referencedDeclaration":2598,"src":"5543:18:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":2560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5543:73:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2555,"id":2561,"nodeType":"Return","src":"5530:86:11"}]},"documentation":{"id":2547,"nodeType":"StructuredDocumentation","src":"5251:156:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":2563,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5419:18:11","nodeType":"FunctionDefinition","parameters":{"id":2552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2549,"mutability":"mutable","name":"target","nameLocation":"5446:6:11","nodeType":"VariableDeclaration","scope":2563,"src":"5438:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2548,"name":"address","nodeType":"ElementaryTypeName","src":"5438:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2551,"mutability":"mutable","name":"data","nameLocation":"5467:4:11","nodeType":"VariableDeclaration","scope":2563,"src":"5454:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2550,"name":"bytes","nodeType":"ElementaryTypeName","src":"5454:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5437:35:11"},"returnParameters":{"id":2555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2554,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2563,"src":"5508:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2553,"name":"bytes","nodeType":"ElementaryTypeName","src":"5508:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5507:14:11"},"scope":2682,"src":"5410:211:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2597,"nodeType":"Block","src":"5935:214:11","statements":[{"expression":{"arguments":[{"arguments":[{"id":2577,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"5960:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2576,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2405,"src":"5949:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":2578,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5949:18:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374","id":2579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5969:38:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9","typeString":"literal_string \"Address: static call to non-contract\""},"value":"Address: static call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9","typeString":"literal_string \"Address: static call to non-contract\""}],"id":2575,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5941:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5941:67:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2581,"nodeType":"ExpressionStatement","src":"5941:67:11"},{"assignments":[2583,2585],"declarations":[{"constant":false,"id":2583,"mutability":"mutable","name":"success","nameLocation":"6021:7:11","nodeType":"VariableDeclaration","scope":2597,"src":"6016:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2582,"name":"bool","nodeType":"ElementaryTypeName","src":"6016:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2585,"mutability":"mutable","name":"returndata","nameLocation":"6043:10:11","nodeType":"VariableDeclaration","scope":2597,"src":"6030:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2584,"name":"bytes","nodeType":"ElementaryTypeName","src":"6030:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2590,"initialValue":{"arguments":[{"id":2588,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"6075:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2586,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"6057:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6064:10:11","memberName":"staticcall","nodeType":"MemberAccess","src":"6057:17:11","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":2589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6057:23:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6015:65:11"},{"expression":{"arguments":[{"id":2592,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"6110:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2593,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2585,"src":"6119:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2594,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2570,"src":"6131:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2591,"name":"verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2681,"src":"6093:16:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":2595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6093:51:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2574,"id":2596,"nodeType":"Return","src":"6086:58:11"}]},"documentation":{"id":2564,"nodeType":"StructuredDocumentation","src":"5625:163:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":2598,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5800:18:11","nodeType":"FunctionDefinition","parameters":{"id":2571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2566,"mutability":"mutable","name":"target","nameLocation":"5832:6:11","nodeType":"VariableDeclaration","scope":2598,"src":"5824:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2565,"name":"address","nodeType":"ElementaryTypeName","src":"5824:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2568,"mutability":"mutable","name":"data","nameLocation":"5857:4:11","nodeType":"VariableDeclaration","scope":2598,"src":"5844:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2567,"name":"bytes","nodeType":"ElementaryTypeName","src":"5844:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2570,"mutability":"mutable","name":"errorMessage","nameLocation":"5881:12:11","nodeType":"VariableDeclaration","scope":2598,"src":"5867:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2569,"name":"string","nodeType":"ElementaryTypeName","src":"5867:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5818:79:11"},"returnParameters":{"id":2574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2573,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2598,"src":"5921:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2572,"name":"bytes","nodeType":"ElementaryTypeName","src":"5921:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5920:14:11"},"scope":2682,"src":"5791:358:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2614,"nodeType":"Block","src":"6421:133:11","statements":[{"expression":{"arguments":[{"id":2609,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2601,"src":"6470:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2610,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"6486:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":2611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6500:41:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":2608,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[2615,2650],"referencedDeclaration":2650,"src":"6440:20:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":2612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6440:109:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2607,"id":2613,"nodeType":"Return","src":"6427:122:11"}]},"documentation":{"id":2599,"nodeType":"StructuredDocumentation","src":"6153:158:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":2615,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6323:20:11","nodeType":"FunctionDefinition","parameters":{"id":2604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2601,"mutability":"mutable","name":"target","nameLocation":"6352:6:11","nodeType":"VariableDeclaration","scope":2615,"src":"6344:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2600,"name":"address","nodeType":"ElementaryTypeName","src":"6344:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2603,"mutability":"mutable","name":"data","nameLocation":"6373:4:11","nodeType":"VariableDeclaration","scope":2615,"src":"6360:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2602,"name":"bytes","nodeType":"ElementaryTypeName","src":"6360:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6343:35:11"},"returnParameters":{"id":2607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2606,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2615,"src":"6405:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2605,"name":"bytes","nodeType":"ElementaryTypeName","src":"6405:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6404:14:11"},"scope":2682,"src":"6314:240:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2649,"nodeType":"Block","src":"6867:218:11","statements":[{"expression":{"arguments":[{"arguments":[{"id":2629,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2618,"src":"6892:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2628,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2405,"src":"6881:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":2630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6881:18:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374","id":2631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6901:40:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""},"value":"Address: delegate call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""}],"id":2627,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6873:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2632,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6873:69:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2633,"nodeType":"ExpressionStatement","src":"6873:69:11"},{"assignments":[2635,2637],"declarations":[{"constant":false,"id":2635,"mutability":"mutable","name":"success","nameLocation":"6955:7:11","nodeType":"VariableDeclaration","scope":2649,"src":"6950:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2634,"name":"bool","nodeType":"ElementaryTypeName","src":"6950:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2637,"mutability":"mutable","name":"returndata","nameLocation":"6977:10:11","nodeType":"VariableDeclaration","scope":2649,"src":"6964:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2636,"name":"bytes","nodeType":"ElementaryTypeName","src":"6964:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2642,"initialValue":{"arguments":[{"id":2640,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2620,"src":"7011:4:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2638,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2618,"src":"6991:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6998:12:11","memberName":"delegatecall","nodeType":"MemberAccess","src":"6991:19:11","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":2641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6991:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6949:67:11"},{"expression":{"arguments":[{"id":2644,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2635,"src":"7046:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2645,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"7055:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2646,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2622,"src":"7067:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2643,"name":"verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2681,"src":"7029:16:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":2647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7029:51:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2626,"id":2648,"nodeType":"Return","src":"7022:58:11"}]},"documentation":{"id":2616,"nodeType":"StructuredDocumentation","src":"6558:165:11","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":2650,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6735:20:11","nodeType":"FunctionDefinition","parameters":{"id":2623,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2618,"mutability":"mutable","name":"target","nameLocation":"6769:6:11","nodeType":"VariableDeclaration","scope":2650,"src":"6761:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2617,"name":"address","nodeType":"ElementaryTypeName","src":"6761:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2620,"mutability":"mutable","name":"data","nameLocation":"6794:4:11","nodeType":"VariableDeclaration","scope":2650,"src":"6781:17:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2619,"name":"bytes","nodeType":"ElementaryTypeName","src":"6781:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2622,"mutability":"mutable","name":"errorMessage","nameLocation":"6818:12:11","nodeType":"VariableDeclaration","scope":2650,"src":"6804:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2621,"name":"string","nodeType":"ElementaryTypeName","src":"6804:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6755:79:11"},"returnParameters":{"id":2626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2625,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2650,"src":"6853:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2624,"name":"bytes","nodeType":"ElementaryTypeName","src":"6853:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6852:14:11"},"scope":2682,"src":"6726:359:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2680,"nodeType":"Block","src":"7437:436:11","statements":[{"condition":{"id":2662,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2653,"src":"7447:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2678,"nodeType":"Block","src":"7494:375:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2666,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2655,"src":"7566:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7577:6:11","memberName":"length","nodeType":"MemberAccess","src":"7566:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7586:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7566:21:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2676,"nodeType":"Block","src":"7824:39:11","statements":[{"expression":{"arguments":[{"id":2673,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"7841:12:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2672,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"7834:6:11","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7834:20:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2675,"nodeType":"ExpressionStatement","src":"7834:20:11"}]},"id":2677,"nodeType":"IfStatement","src":"7562:301:11","trueBody":{"id":2671,"nodeType":"Block","src":"7589:229:11","statements":[{"AST":{"nodeType":"YulBlock","src":"7693:117:11","statements":[{"nodeType":"YulVariableDeclaration","src":"7705:40:11","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"7734:10:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7728:5:11"},"nodeType":"YulFunctionCall","src":"7728:17:11"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"7709:15:11","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7767:2:11","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"7771:10:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7763:3:11"},"nodeType":"YulFunctionCall","src":"7763:19:11"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"7784:15:11"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7756:6:11"},"nodeType":"YulFunctionCall","src":"7756:44:11"},"nodeType":"YulExpressionStatement","src":"7756:44:11"}]},"evmVersion":"london","externalReferences":[{"declaration":2655,"isOffset":false,"isSlot":false,"src":"7734:10:11","valueSize":1},{"declaration":2655,"isOffset":false,"isSlot":false,"src":"7771:10:11","valueSize":1}],"id":2670,"nodeType":"InlineAssembly","src":"7684:126:11"}]}}]},"id":2679,"nodeType":"IfStatement","src":"7443:426:11","trueBody":{"id":2665,"nodeType":"Block","src":"7456:32:11","statements":[{"expression":{"id":2663,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2655,"src":"7471:10:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2661,"id":2664,"nodeType":"Return","src":"7464:17:11"}]}}]},"documentation":{"id":2651,"nodeType":"StructuredDocumentation","src":"7089:199:11","text":" @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"},"id":2681,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"7300:16:11","nodeType":"FunctionDefinition","parameters":{"id":2658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2653,"mutability":"mutable","name":"success","nameLocation":"7327:7:11","nodeType":"VariableDeclaration","scope":2681,"src":"7322:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2652,"name":"bool","nodeType":"ElementaryTypeName","src":"7322:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2655,"mutability":"mutable","name":"returndata","nameLocation":"7353:10:11","nodeType":"VariableDeclaration","scope":2681,"src":"7340:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2654,"name":"bytes","nodeType":"ElementaryTypeName","src":"7340:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2657,"mutability":"mutable","name":"errorMessage","nameLocation":"7383:12:11","nodeType":"VariableDeclaration","scope":2681,"src":"7369:26:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2656,"name":"string","nodeType":"ElementaryTypeName","src":"7369:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7316:83:11"},"returnParameters":{"id":2661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2660,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2681,"src":"7423:12:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2659,"name":"bytes","nodeType":"ElementaryTypeName","src":"7423:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7422:14:11"},"scope":2682,"src":"7291:582:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2683,"src":"194:7681:11","usedErrors":[]}],"src":"101:7775:11"},"id":11},"contracts/external/openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"contracts/external/openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[2704]},"id":2705,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2684,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:12"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":2685,"nodeType":"StructuredDocumentation","src":"111:496:12","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":2704,"linearizedBaseContracts":[2704],"name":"Context","nameLocation":"626:7:12","nodeType":"ContractDefinition","nodes":[{"body":{"id":2693,"nodeType":"Block","src":"700:28:12","statements":[{"expression":{"expression":{"id":2690,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"713:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"717:6:12","memberName":"sender","nodeType":"MemberAccess","src":"713:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2689,"id":2692,"nodeType":"Return","src":"706:17:12"}]},"id":2694,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"647:10:12","nodeType":"FunctionDefinition","parameters":{"id":2686,"nodeType":"ParameterList","parameters":[],"src":"657:2:12"},"returnParameters":{"id":2689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2688,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2694,"src":"691:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2687,"name":"address","nodeType":"ElementaryTypeName","src":"691:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"690:9:12"},"scope":2704,"src":"638:90:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2702,"nodeType":"Block","src":"799:26:12","statements":[{"expression":{"expression":{"id":2699,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"812:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"816:4:12","memberName":"data","nodeType":"MemberAccess","src":"812:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2698,"id":2701,"nodeType":"Return","src":"805:15:12"}]},"id":2703,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"741:8:12","nodeType":"FunctionDefinition","parameters":{"id":2695,"nodeType":"ParameterList","parameters":[],"src":"749:2:12"},"returnParameters":{"id":2698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2697,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2703,"src":"783:14:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2696,"name":"bytes","nodeType":"ElementaryTypeName","src":"783:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"782:16:12"},"scope":2704,"src":"732:93:12","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":2705,"src":"608:219:12","usedErrors":[]}],"src":"86:742:12"},"id":12},"contracts/external/openzeppelin/contracts/utils/ERC165.sol":{"ast":{"absolutePath":"contracts/external/openzeppelin/contracts/utils/ERC165.sol","exportedSymbols":{"ERC165":[2728],"IERC165":[3339]},"id":2729,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2706,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:13"},{"absolutePath":"contracts/external/openzeppelin/contracts/utils/IERC165.sol","file":"contracts/external/openzeppelin/contracts/utils/IERC165.sol","id":2707,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2729,"sourceUnit":3340,"src":"124:69:13","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2709,"name":"IERC165","nameLocations":["800:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":3339,"src":"800:7:13"},"id":2710,"nodeType":"InheritanceSpecifier","src":"800:7:13"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":2708,"nodeType":"StructuredDocumentation","src":"195:576:13","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":2728,"linearizedBaseContracts":[2728,3339],"name":"ERC165","nameLocation":"790:6:13","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[3338],"body":{"id":2726,"nodeType":"Block","src":"980:58:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2719,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2713,"src":"993:11:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2721,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3339,"src":"1013:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$3339_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$3339_$","typeString":"type(contract IERC165)"}],"id":2720,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1008:4:13","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$3339","typeString":"type(contract IERC165)"}},"id":2723,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1022:11:13","memberName":"interfaceId","nodeType":"MemberAccess","src":"1008:25:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"993:40:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2718,"id":2725,"nodeType":"Return","src":"986:47:13"}]},"documentation":{"id":2711,"nodeType":"StructuredDocumentation","src":"812:52:13","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":2727,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"876:17:13","nodeType":"FunctionDefinition","overrides":{"id":2715,"nodeType":"OverrideSpecifier","overrides":[],"src":"950:8:13"},"parameters":{"id":2714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2713,"mutability":"mutable","name":"interfaceId","nameLocation":"901:11:13","nodeType":"VariableDeclaration","scope":2727,"src":"894:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2712,"name":"bytes4","nodeType":"ElementaryTypeName","src":"894:6:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"893:20:13"},"returnParameters":{"id":2718,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2717,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2727,"src":"972:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2716,"name":"bool","nodeType":"ElementaryTypeName","src":"972:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"971:6:13"},"scope":2728,"src":"867:171:13","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":2729,"src":"772:268:13","usedErrors":[]}],"src":"99:942:13"},"id":13},"contracts/external/openzeppelin/contracts/utils/EnumerableSet.sol":{"ast":{"absolutePath":"contracts/external/openzeppelin/contracts/utils/EnumerableSet.sol","exportedSymbols":{"EnumerableSet":[3327]},"id":3328,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2730,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:14"},{"abstract":false,"baseContracts":[],"canonicalName":"EnumerableSet","contractDependencies":[],"contractKind":"library","documentation":{"id":2731,"nodeType":"StructuredDocumentation","src":"125:686:14","text":" @dev Library for managing\n https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n types.\n Sets have the following properties:\n - Elements are added, removed, and checked for existence in constant time\n (O(1)).\n - Elements are enumerated in O(n). No guarantees are made on the ordering.\n ```\n contract Example {\n     // Add the library methods\n     using EnumerableSet for EnumerableSet.AddressSet;\n     // Declare a set state variable\n     EnumerableSet.AddressSet private mySet;\n }\n ```\n As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n and `uint256` (`UintSet`) are supported."},"fullyImplemented":true,"id":3327,"linearizedBaseContracts":[3327],"name":"EnumerableSet","nameLocation":"820:13:14","nodeType":"ContractDefinition","nodes":[{"canonicalName":"EnumerableSet.Set","id":2739,"members":[{"constant":false,"id":2734,"mutability":"mutable","name":"_values","nameLocation":"1318:7:14","nodeType":"VariableDeclaration","scope":2739,"src":"1308:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2732,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1308:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2733,"nodeType":"ArrayTypeName","src":"1308:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2738,"mutability":"mutable","name":"_indexes","nameLocation":"1474:8:14","nodeType":"VariableDeclaration","scope":2739,"src":"1446:36:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":2737,"keyType":{"id":2735,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1454:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1446:27:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueType":{"id":2736,"name":"uint256","nodeType":"ElementaryTypeName","src":"1465:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"}],"name":"Set","nameLocation":"1269:3:14","nodeType":"StructDefinition","scope":3327,"src":"1262:225:14","visibility":"public"},{"body":{"id":2780,"nodeType":"Block","src":"1712:285:14","statements":[{"condition":{"id":2754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1722:22:14","subExpression":{"arguments":[{"id":2751,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"1733:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},{"id":2752,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2745,"src":"1738:5:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2750,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"1723:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2739_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":2753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1723:21:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2778,"nodeType":"Block","src":"1966:27:14","statements":[{"expression":{"hexValue":"66616c7365","id":2776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1981:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":2749,"id":2777,"nodeType":"Return","src":"1974:12:14"}]},"id":2779,"nodeType":"IfStatement","src":"1718:275:14","trueBody":{"id":2775,"nodeType":"Block","src":"1746:214:14","statements":[{"expression":{"arguments":[{"id":2760,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2745,"src":"1771:5:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"expression":{"id":2755,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"1754:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2758,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1758:7:14","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2734,"src":"1754:11:14","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1766:4:14","memberName":"push","nodeType":"MemberAccess","src":"1754:16:14","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$_t_bytes32_$returns$__$bound_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer,bytes32)"}},"id":2761,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1754:23:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2762,"nodeType":"ExpressionStatement","src":"1754:23:14"},{"expression":{"id":2771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2763,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"1894:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2766,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1898:8:14","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":2738,"src":"1894:12:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2767,"indexExpression":{"id":2765,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2745,"src":"1907:5:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1894:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":2768,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"1916:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2769,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1920:7:14","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2734,"src":"1916:11:14","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1928:6:14","memberName":"length","nodeType":"MemberAccess","src":"1916:18:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1894:40:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2772,"nodeType":"ExpressionStatement","src":"1894:40:14"},{"expression":{"hexValue":"74727565","id":2773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1949:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2749,"id":2774,"nodeType":"Return","src":"1942:11:14"}]}}]},"documentation":{"id":2740,"nodeType":"StructuredDocumentation","src":"1491:149:14","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":2781,"implemented":true,"kind":"function","modifiers":[],"name":"_add","nameLocation":"1652:4:14","nodeType":"FunctionDefinition","parameters":{"id":2746,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2743,"mutability":"mutable","name":"set","nameLocation":"1669:3:14","nodeType":"VariableDeclaration","scope":2781,"src":"1657:15:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":2742,"nodeType":"UserDefinedTypeName","pathNode":{"id":2741,"name":"Set","nameLocations":["1657:3:14"],"nodeType":"IdentifierPath","referencedDeclaration":2739,"src":"1657:3:14"},"referencedDeclaration":2739,"src":"1657:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":2745,"mutability":"mutable","name":"value","nameLocation":"1682:5:14","nodeType":"VariableDeclaration","scope":2781,"src":"1674:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2744,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1674:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1656:32:14"},"returnParameters":{"id":2749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2748,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2781,"src":"1706:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2747,"name":"bool","nodeType":"ElementaryTypeName","src":"1706:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1705:6:14"},"scope":3327,"src":"1643:354:14","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2864,"nodeType":"Block","src":"2223:1170:14","statements":[{"assignments":[2793],"declarations":[{"constant":false,"id":2793,"mutability":"mutable","name":"valueIndex","nameLocation":"2333:10:14","nodeType":"VariableDeclaration","scope":2864,"src":"2325:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2792,"name":"uint256","nodeType":"ElementaryTypeName","src":"2325:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2798,"initialValue":{"baseExpression":{"expression":{"id":2794,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"2346:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2795,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2350:8:14","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":2738,"src":"2346:12:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2797,"indexExpression":{"id":2796,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2787,"src":"2359:5:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2346:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2325:40:14"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2799,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2793,"src":"2376:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2390:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2376:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2862,"nodeType":"Block","src":"3362:27:14","statements":[{"expression":{"hexValue":"66616c7365","id":2860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3377:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":2791,"id":2861,"nodeType":"Return","src":"3370:12:14"}]},"id":2863,"nodeType":"IfStatement","src":"2372:1017:14","trueBody":{"id":2859,"nodeType":"Block","src":"2393:963:14","statements":[{"assignments":[2803],"declarations":[{"constant":false,"id":2803,"mutability":"mutable","name":"toDeleteIndex","nameLocation":"2723:13:14","nodeType":"VariableDeclaration","scope":2859,"src":"2715:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2802,"name":"uint256","nodeType":"ElementaryTypeName","src":"2715:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2807,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2804,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2793,"src":"2739:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2752:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2739:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2715:38:14"},{"assignments":[2809],"declarations":[{"constant":false,"id":2809,"mutability":"mutable","name":"lastIndex","nameLocation":"2769:9:14","nodeType":"VariableDeclaration","scope":2859,"src":"2761:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2808,"name":"uint256","nodeType":"ElementaryTypeName","src":"2761:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2815,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2810,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"2781:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2811,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2785:7:14","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2734,"src":"2781:11:14","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2793:6:14","memberName":"length","nodeType":"MemberAccess","src":"2781:18:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2802:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2781:22:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2761:42:14"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2816,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2809,"src":"2816:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2817,"name":"toDeleteIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2803,"src":"2829:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2816:26:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2843,"nodeType":"IfStatement","src":"2812:352:14","trueBody":{"id":2842,"nodeType":"Block","src":"2844:320:14","statements":[{"assignments":[2820],"declarations":[{"constant":false,"id":2820,"mutability":"mutable","name":"lastvalue","nameLocation":"2862:9:14","nodeType":"VariableDeclaration","scope":2842,"src":"2854:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2819,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2854:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2825,"initialValue":{"baseExpression":{"expression":{"id":2821,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"2874:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2822,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2878:7:14","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2734,"src":"2874:11:14","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2824,"indexExpression":{"id":2823,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2809,"src":"2886:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2874:22:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2854:42:14"},{"expression":{"id":2832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2826,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"2980:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2829,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2984:7:14","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2734,"src":"2980:11:14","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2830,"indexExpression":{"id":2828,"name":"toDeleteIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2803,"src":"2992:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2980:26:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2831,"name":"lastvalue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2820,"src":"3009:9:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2980:38:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2833,"nodeType":"ExpressionStatement","src":"2980:38:14"},{"expression":{"id":2840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2834,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"3076:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2837,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3080:8:14","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":2738,"src":"3076:12:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2838,"indexExpression":{"id":2836,"name":"lastvalue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2820,"src":"3089:9:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3076:23:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2839,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2793,"src":"3102:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3076:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2841,"nodeType":"ExpressionStatement","src":"3076:36:14"}]}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":2844,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"3230:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2847,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3234:7:14","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2734,"src":"3230:11:14","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3242:3:14","memberName":"pop","nodeType":"MemberAccess","src":"3230:15:14","typeDescriptions":{"typeIdentifier":"t_function_arraypop_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$returns$__$bound_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer)"}},"id":2849,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3230:17:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2850,"nodeType":"ExpressionStatement","src":"3230:17:14"},{"expression":{"id":2855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"3303:26:14","subExpression":{"baseExpression":{"expression":{"id":2851,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"3310:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2852,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3314:8:14","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":2738,"src":"3310:12:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2854,"indexExpression":{"id":2853,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2787,"src":"3323:5:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3310:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2856,"nodeType":"ExpressionStatement","src":"3303:26:14"},{"expression":{"hexValue":"74727565","id":2857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3345:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2791,"id":2858,"nodeType":"Return","src":"3338:11:14"}]}}]},"documentation":{"id":2782,"nodeType":"StructuredDocumentation","src":"2001:147:14","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":2865,"implemented":true,"kind":"function","modifiers":[],"name":"_remove","nameLocation":"2160:7:14","nodeType":"FunctionDefinition","parameters":{"id":2788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2785,"mutability":"mutable","name":"set","nameLocation":"2180:3:14","nodeType":"VariableDeclaration","scope":2865,"src":"2168:15:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":2784,"nodeType":"UserDefinedTypeName","pathNode":{"id":2783,"name":"Set","nameLocations":["2168:3:14"],"nodeType":"IdentifierPath","referencedDeclaration":2739,"src":"2168:3:14"},"referencedDeclaration":2739,"src":"2168:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":2787,"mutability":"mutable","name":"value","nameLocation":"2193:5:14","nodeType":"VariableDeclaration","scope":2865,"src":"2185:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2786,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2185:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2167:32:14"},"returnParameters":{"id":2791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2790,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2865,"src":"2217:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2789,"name":"bool","nodeType":"ElementaryTypeName","src":"2217:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2216:6:14"},"scope":3327,"src":"2151:1242:14","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2883,"nodeType":"Block","src":"3559:42:14","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":2876,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2869,"src":"3572:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2877,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3576:8:14","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":2738,"src":"3572:12:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2879,"indexExpression":{"id":2878,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2871,"src":"3585:5:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3572:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3595:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3572:24:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2875,"id":2882,"nodeType":"Return","src":"3565:31:14"}]},"documentation":{"id":2866,"nodeType":"StructuredDocumentation","src":"3397:66:14","text":" @dev Returns true if the value is in the set. O(1)."},"id":2884,"implemented":true,"kind":"function","modifiers":[],"name":"_contains","nameLocation":"3475:9:14","nodeType":"FunctionDefinition","parameters":{"id":2872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2869,"mutability":"mutable","name":"set","nameLocation":"3497:3:14","nodeType":"VariableDeclaration","scope":2884,"src":"3485:15:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":2868,"nodeType":"UserDefinedTypeName","pathNode":{"id":2867,"name":"Set","nameLocations":["3485:3:14"],"nodeType":"IdentifierPath","referencedDeclaration":2739,"src":"3485:3:14"},"referencedDeclaration":2739,"src":"3485:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":2871,"mutability":"mutable","name":"value","nameLocation":"3510:5:14","nodeType":"VariableDeclaration","scope":2884,"src":"3502:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2870,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3502:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3484:32:14"},"returnParameters":{"id":2875,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2874,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2884,"src":"3551:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2873,"name":"bool","nodeType":"ElementaryTypeName","src":"3551:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3550:6:14"},"scope":3327,"src":"3466:135:14","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":2897,"nodeType":"Block","src":"3739:36:14","statements":[{"expression":{"expression":{"expression":{"id":2893,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2888,"src":"3752:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2894,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3756:7:14","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2734,"src":"3752:11:14","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3764:6:14","memberName":"length","nodeType":"MemberAccess","src":"3752:18:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2892,"id":2896,"nodeType":"Return","src":"3745:25:14"}]},"documentation":{"id":2885,"nodeType":"StructuredDocumentation","src":"3605:66:14","text":" @dev Returns the number of values on the set. O(1)."},"id":2898,"implemented":true,"kind":"function","modifiers":[],"name":"_length","nameLocation":"3683:7:14","nodeType":"FunctionDefinition","parameters":{"id":2889,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2888,"mutability":"mutable","name":"set","nameLocation":"3703:3:14","nodeType":"VariableDeclaration","scope":2898,"src":"3691:15:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":2887,"nodeType":"UserDefinedTypeName","pathNode":{"id":2886,"name":"Set","nameLocations":["3691:3:14"],"nodeType":"IdentifierPath","referencedDeclaration":2739,"src":"3691:3:14"},"referencedDeclaration":2739,"src":"3691:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"src":"3690:17:14"},"returnParameters":{"id":2892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2891,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2898,"src":"3730:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2890,"name":"uint256","nodeType":"ElementaryTypeName","src":"3730:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3729:9:14"},"scope":3327,"src":"3674:101:14","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":2914,"nodeType":"Block","src":"4171:36:14","statements":[{"expression":{"baseExpression":{"expression":{"id":2909,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2902,"src":"4184:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2910,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4188:7:14","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2734,"src":"4184:11:14","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2912,"indexExpression":{"id":2911,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2904,"src":"4196:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4184:18:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2908,"id":2913,"nodeType":"Return","src":"4177:25:14"}]},"documentation":{"id":2899,"nodeType":"StructuredDocumentation","src":"3779:313:14","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":2915,"implemented":true,"kind":"function","modifiers":[],"name":"_at","nameLocation":"4104:3:14","nodeType":"FunctionDefinition","parameters":{"id":2905,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2902,"mutability":"mutable","name":"set","nameLocation":"4120:3:14","nodeType":"VariableDeclaration","scope":2915,"src":"4108:15:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":2901,"nodeType":"UserDefinedTypeName","pathNode":{"id":2900,"name":"Set","nameLocations":["4108:3:14"],"nodeType":"IdentifierPath","referencedDeclaration":2739,"src":"4108:3:14"},"referencedDeclaration":2739,"src":"4108:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"},{"constant":false,"id":2904,"mutability":"mutable","name":"index","nameLocation":"4133:5:14","nodeType":"VariableDeclaration","scope":2915,"src":"4125:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2903,"name":"uint256","nodeType":"ElementaryTypeName","src":"4125:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4107:32:14"},"returnParameters":{"id":2908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2907,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2915,"src":"4162:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2906,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4162:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4161:9:14"},"scope":3327,"src":"4095:112:14","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":2928,"nodeType":"Block","src":"4803:29:14","statements":[{"expression":{"expression":{"id":2925,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2919,"src":"4816:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set storage pointer"}},"id":2926,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4820:7:14","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":2734,"src":"4816:11:14","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"functionReturnParameters":2924,"id":2927,"nodeType":"Return","src":"4809:18:14"}]},"documentation":{"id":2916,"nodeType":"StructuredDocumentation","src":"4211:515:14","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":2929,"implemented":true,"kind":"function","modifiers":[],"name":"_values","nameLocation":"4738:7:14","nodeType":"FunctionDefinition","parameters":{"id":2920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2919,"mutability":"mutable","name":"set","nameLocation":"4758:3:14","nodeType":"VariableDeclaration","scope":2929,"src":"4746:15:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":2918,"nodeType":"UserDefinedTypeName","pathNode":{"id":2917,"name":"Set","nameLocations":["4746:3:14"],"nodeType":"IdentifierPath","referencedDeclaration":2739,"src":"4746:3:14"},"referencedDeclaration":2739,"src":"4746:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"src":"4745:17:14"},"returnParameters":{"id":2924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2923,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2929,"src":"4785:16:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2921,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4785:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2922,"nodeType":"ArrayTypeName","src":"4785:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"4784:18:14"},"scope":3327,"src":"4729:103:14","stateMutability":"view","virtual":false,"visibility":"private"},{"canonicalName":"EnumerableSet.Bytes32Set","id":2933,"members":[{"constant":false,"id":2932,"mutability":"mutable","name":"_inner","nameLocation":"4881:6:14","nodeType":"VariableDeclaration","scope":2933,"src":"4877:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":2931,"nodeType":"UserDefinedTypeName","pathNode":{"id":2930,"name":"Set","nameLocations":["4877:3:14"],"nodeType":"IdentifierPath","referencedDeclaration":2739,"src":"4877:3:14"},"referencedDeclaration":2739,"src":"4877:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"Bytes32Set","nameLocation":"4860:10:14","nodeType":"StructDefinition","scope":3327,"src":"4853:39:14","visibility":"public"},{"body":{"id":2950,"nodeType":"Block","src":"5124:41:14","statements":[{"expression":{"arguments":[{"expression":{"id":2945,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2937,"src":"5142:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2933_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":2946,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5146:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2932,"src":"5142:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":2947,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2939,"src":"5154:5:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2944,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2781,"src":"5137:4:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$2739_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":2948,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5137:23:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2943,"id":2949,"nodeType":"Return","src":"5130:30:14"}]},"documentation":{"id":2934,"nodeType":"StructuredDocumentation","src":"4896:149:14","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":2951,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"5057:3:14","nodeType":"FunctionDefinition","parameters":{"id":2940,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2937,"mutability":"mutable","name":"set","nameLocation":"5080:3:14","nodeType":"VariableDeclaration","scope":2951,"src":"5061:22:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2933_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":2936,"nodeType":"UserDefinedTypeName","pathNode":{"id":2935,"name":"Bytes32Set","nameLocations":["5061:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":2933,"src":"5061:10:14"},"referencedDeclaration":2933,"src":"5061:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2933_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":2939,"mutability":"mutable","name":"value","nameLocation":"5093:5:14","nodeType":"VariableDeclaration","scope":2951,"src":"5085:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2938,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5085:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5060:39:14"},"returnParameters":{"id":2943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2942,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2951,"src":"5118:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2941,"name":"bool","nodeType":"ElementaryTypeName","src":"5118:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5117:6:14"},"scope":3327,"src":"5048:117:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2968,"nodeType":"Block","src":"5408:44:14","statements":[{"expression":{"arguments":[{"expression":{"id":2963,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2955,"src":"5429:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2933_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":2964,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5433:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2932,"src":"5429:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":2965,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2957,"src":"5441:5:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2962,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2865,"src":"5421:7:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$2739_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":2966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5421:26:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2961,"id":2967,"nodeType":"Return","src":"5414:33:14"}]},"documentation":{"id":2952,"nodeType":"StructuredDocumentation","src":"5169:147:14","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":2969,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"5328:6:14","nodeType":"FunctionDefinition","parameters":{"id":2958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2955,"mutability":"mutable","name":"set","nameLocation":"5354:3:14","nodeType":"VariableDeclaration","scope":2969,"src":"5335:22:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2933_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":2954,"nodeType":"UserDefinedTypeName","pathNode":{"id":2953,"name":"Bytes32Set","nameLocations":["5335:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":2933,"src":"5335:10:14"},"referencedDeclaration":2933,"src":"5335:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2933_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":2957,"mutability":"mutable","name":"value","nameLocation":"5367:5:14","nodeType":"VariableDeclaration","scope":2969,"src":"5359:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2956,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5359:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5334:39:14"},"returnParameters":{"id":2961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2960,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2969,"src":"5400:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2959,"name":"bool","nodeType":"ElementaryTypeName","src":"5400:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5399:6:14"},"scope":3327,"src":"5319:133:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2986,"nodeType":"Block","src":"5625:46:14","statements":[{"expression":{"arguments":[{"expression":{"id":2981,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"5648:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2933_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":2982,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5652:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2932,"src":"5648:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":2983,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2975,"src":"5660:5:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2980,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"5638:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2739_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":2984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5638:28:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2979,"id":2985,"nodeType":"Return","src":"5631:35:14"}]},"documentation":{"id":2970,"nodeType":"StructuredDocumentation","src":"5456:66:14","text":" @dev Returns true if the value is in the set. O(1)."},"id":2987,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"5534:8:14","nodeType":"FunctionDefinition","parameters":{"id":2976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2973,"mutability":"mutable","name":"set","nameLocation":"5562:3:14","nodeType":"VariableDeclaration","scope":2987,"src":"5543:22:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2933_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":2972,"nodeType":"UserDefinedTypeName","pathNode":{"id":2971,"name":"Bytes32Set","nameLocations":["5543:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":2933,"src":"5543:10:14"},"referencedDeclaration":2933,"src":"5543:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2933_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":2975,"mutability":"mutable","name":"value","nameLocation":"5575:5:14","nodeType":"VariableDeclaration","scope":2987,"src":"5567:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2974,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5567:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5542:39:14"},"returnParameters":{"id":2979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2978,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2987,"src":"5617:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2977,"name":"bool","nodeType":"ElementaryTypeName","src":"5617:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5616:6:14"},"scope":3327,"src":"5525:146:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3001,"nodeType":"Block","src":"5816:37:14","statements":[{"expression":{"arguments":[{"expression":{"id":2997,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2991,"src":"5837:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2933_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":2998,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5841:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2932,"src":"5837:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":2996,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2898,"src":"5829:7:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2739_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":2999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5829:19:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2995,"id":3000,"nodeType":"Return","src":"5822:26:14"}]},"documentation":{"id":2988,"nodeType":"StructuredDocumentation","src":"5675:66:14","text":" @dev Returns the number of values in the set. O(1)."},"id":3002,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"5753:6:14","nodeType":"FunctionDefinition","parameters":{"id":2992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2991,"mutability":"mutable","name":"set","nameLocation":"5779:3:14","nodeType":"VariableDeclaration","scope":3002,"src":"5760:22:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2933_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":2990,"nodeType":"UserDefinedTypeName","pathNode":{"id":2989,"name":"Bytes32Set","nameLocations":["5760:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":2933,"src":"5760:10:14"},"referencedDeclaration":2933,"src":"5760:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2933_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"}],"src":"5759:24:14"},"returnParameters":{"id":2995,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2994,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3002,"src":"5807:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2993,"name":"uint256","nodeType":"ElementaryTypeName","src":"5807:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5806:9:14"},"scope":3327,"src":"5744:109:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3019,"nodeType":"Block","src":"6270:40:14","statements":[{"expression":{"arguments":[{"expression":{"id":3014,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3006,"src":"6287:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2933_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":3015,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6291:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2932,"src":"6287:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":3016,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3008,"src":"6299:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3013,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2915,"src":"6283:3:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2739_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":3017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6283:22:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3012,"id":3018,"nodeType":"Return","src":"6276:29:14"}]},"documentation":{"id":3003,"nodeType":"StructuredDocumentation","src":"5857:313:14","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":3020,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"6182:2:14","nodeType":"FunctionDefinition","parameters":{"id":3009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3006,"mutability":"mutable","name":"set","nameLocation":"6204:3:14","nodeType":"VariableDeclaration","scope":3020,"src":"6185:22:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2933_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":3005,"nodeType":"UserDefinedTypeName","pathNode":{"id":3004,"name":"Bytes32Set","nameLocations":["6185:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":2933,"src":"6185:10:14"},"referencedDeclaration":2933,"src":"6185:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2933_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":3008,"mutability":"mutable","name":"index","nameLocation":"6217:5:14","nodeType":"VariableDeclaration","scope":3020,"src":"6209:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3007,"name":"uint256","nodeType":"ElementaryTypeName","src":"6209:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6184:39:14"},"returnParameters":{"id":3012,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3011,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3020,"src":"6259:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3010,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6259:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6258:9:14"},"scope":3327,"src":"6173:137:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3035,"nodeType":"Block","src":"6927:37:14","statements":[{"expression":{"arguments":[{"expression":{"id":3031,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3024,"src":"6948:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2933_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set storage pointer"}},"id":3032,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6952:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2932,"src":"6948:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":3030,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2929,"src":"6940:7:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2739_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":3033,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6940:19:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"functionReturnParameters":3029,"id":3034,"nodeType":"Return","src":"6933:26:14"}]},"documentation":{"id":3021,"nodeType":"StructuredDocumentation","src":"6314:515:14","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":3036,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"6841:6:14","nodeType":"FunctionDefinition","parameters":{"id":3025,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3024,"mutability":"mutable","name":"set","nameLocation":"6867:3:14","nodeType":"VariableDeclaration","scope":3036,"src":"6848:22:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2933_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"},"typeName":{"id":3023,"nodeType":"UserDefinedTypeName","pathNode":{"id":3022,"name":"Bytes32Set","nameLocations":["6848:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":2933,"src":"6848:10:14"},"referencedDeclaration":2933,"src":"6848:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2933_storage_ptr","typeString":"struct EnumerableSet.Bytes32Set"}},"visibility":"internal"}],"src":"6847:24:14"},"returnParameters":{"id":3029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3028,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3036,"src":"6907:16:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3026,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6907:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3027,"nodeType":"ArrayTypeName","src":"6907:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"6906:18:14"},"scope":3327,"src":"6832:132:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSet.AddressSet","id":3040,"members":[{"constant":false,"id":3039,"mutability":"mutable","name":"_inner","nameLocation":"7013:6:14","nodeType":"VariableDeclaration","scope":3040,"src":"7009:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":3038,"nodeType":"UserDefinedTypeName","pathNode":{"id":3037,"name":"Set","nameLocations":["7009:3:14"],"nodeType":"IdentifierPath","referencedDeclaration":2739,"src":"7009:3:14"},"referencedDeclaration":2739,"src":"7009:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"AddressSet","nameLocation":"6992:10:14","nodeType":"StructDefinition","scope":3327,"src":"6985:39:14","visibility":"public"},{"body":{"id":3066,"nodeType":"Block","src":"7256:68:14","statements":[{"expression":{"arguments":[{"expression":{"id":3052,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3044,"src":"7274:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3040_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":3053,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7278:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3039,"src":"7274:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":3060,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3046,"src":"7310:5:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3059,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7302:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3058,"name":"uint160","nodeType":"ElementaryTypeName","src":"7302:7:14","typeDescriptions":{}}},"id":3061,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7302:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3057,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7294:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3056,"name":"uint256","nodeType":"ElementaryTypeName","src":"7294:7:14","typeDescriptions":{}}},"id":3062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7294:23:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3055,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7286:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3054,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7286:7:14","typeDescriptions":{}}},"id":3063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7286:32:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3051,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2781,"src":"7269:4:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$2739_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":3064,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7269:50:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3050,"id":3065,"nodeType":"Return","src":"7262:57:14"}]},"documentation":{"id":3041,"nodeType":"StructuredDocumentation","src":"7028:149:14","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":3067,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"7189:3:14","nodeType":"FunctionDefinition","parameters":{"id":3047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3044,"mutability":"mutable","name":"set","nameLocation":"7212:3:14","nodeType":"VariableDeclaration","scope":3067,"src":"7193:22:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3040_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":3043,"nodeType":"UserDefinedTypeName","pathNode":{"id":3042,"name":"AddressSet","nameLocations":["7193:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":3040,"src":"7193:10:14"},"referencedDeclaration":3040,"src":"7193:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3040_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":3046,"mutability":"mutable","name":"value","nameLocation":"7225:5:14","nodeType":"VariableDeclaration","scope":3067,"src":"7217:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3045,"name":"address","nodeType":"ElementaryTypeName","src":"7217:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7192:39:14"},"returnParameters":{"id":3050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3049,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3067,"src":"7250:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3048,"name":"bool","nodeType":"ElementaryTypeName","src":"7250:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7249:6:14"},"scope":3327,"src":"7180:144:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3093,"nodeType":"Block","src":"7567:71:14","statements":[{"expression":{"arguments":[{"expression":{"id":3079,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3071,"src":"7588:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3040_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":3080,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7592:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3039,"src":"7588:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":3087,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3073,"src":"7624:5:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3086,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7616:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3085,"name":"uint160","nodeType":"ElementaryTypeName","src":"7616:7:14","typeDescriptions":{}}},"id":3088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7616:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3084,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7608:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3083,"name":"uint256","nodeType":"ElementaryTypeName","src":"7608:7:14","typeDescriptions":{}}},"id":3089,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7608:23:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3082,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7600:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3081,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7600:7:14","typeDescriptions":{}}},"id":3090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7600:32:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3078,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2865,"src":"7580:7:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$2739_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":3091,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7580:53:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3077,"id":3092,"nodeType":"Return","src":"7573:60:14"}]},"documentation":{"id":3068,"nodeType":"StructuredDocumentation","src":"7328:147:14","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":3094,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"7487:6:14","nodeType":"FunctionDefinition","parameters":{"id":3074,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3071,"mutability":"mutable","name":"set","nameLocation":"7513:3:14","nodeType":"VariableDeclaration","scope":3094,"src":"7494:22:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3040_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":3070,"nodeType":"UserDefinedTypeName","pathNode":{"id":3069,"name":"AddressSet","nameLocations":["7494:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":3040,"src":"7494:10:14"},"referencedDeclaration":3040,"src":"7494:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3040_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":3073,"mutability":"mutable","name":"value","nameLocation":"7526:5:14","nodeType":"VariableDeclaration","scope":3094,"src":"7518:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3072,"name":"address","nodeType":"ElementaryTypeName","src":"7518:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7493:39:14"},"returnParameters":{"id":3077,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3076,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3094,"src":"7559:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3075,"name":"bool","nodeType":"ElementaryTypeName","src":"7559:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7558:6:14"},"scope":3327,"src":"7478:160:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3120,"nodeType":"Block","src":"7811:73:14","statements":[{"expression":{"arguments":[{"expression":{"id":3106,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3098,"src":"7834:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3040_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":3107,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7838:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3039,"src":"7834:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":3114,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3100,"src":"7870:5:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3113,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7862:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3112,"name":"uint160","nodeType":"ElementaryTypeName","src":"7862:7:14","typeDescriptions":{}}},"id":3115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7862:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3111,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7854:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3110,"name":"uint256","nodeType":"ElementaryTypeName","src":"7854:7:14","typeDescriptions":{}}},"id":3116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7854:23:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3109,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7846:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3108,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7846:7:14","typeDescriptions":{}}},"id":3117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7846:32:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3105,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"7824:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2739_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":3118,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7824:55:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3104,"id":3119,"nodeType":"Return","src":"7817:62:14"}]},"documentation":{"id":3095,"nodeType":"StructuredDocumentation","src":"7642:66:14","text":" @dev Returns true if the value is in the set. O(1)."},"id":3121,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"7720:8:14","nodeType":"FunctionDefinition","parameters":{"id":3101,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3098,"mutability":"mutable","name":"set","nameLocation":"7748:3:14","nodeType":"VariableDeclaration","scope":3121,"src":"7729:22:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3040_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":3097,"nodeType":"UserDefinedTypeName","pathNode":{"id":3096,"name":"AddressSet","nameLocations":["7729:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":3040,"src":"7729:10:14"},"referencedDeclaration":3040,"src":"7729:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3040_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":3100,"mutability":"mutable","name":"value","nameLocation":"7761:5:14","nodeType":"VariableDeclaration","scope":3121,"src":"7753:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3099,"name":"address","nodeType":"ElementaryTypeName","src":"7753:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7728:39:14"},"returnParameters":{"id":3104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3103,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3121,"src":"7803:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3102,"name":"bool","nodeType":"ElementaryTypeName","src":"7803:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7802:6:14"},"scope":3327,"src":"7711:173:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3135,"nodeType":"Block","src":"8029:37:14","statements":[{"expression":{"arguments":[{"expression":{"id":3131,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3125,"src":"8050:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3040_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":3132,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8054:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3039,"src":"8050:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":3130,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2898,"src":"8042:7:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2739_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":3133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8042:19:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3129,"id":3134,"nodeType":"Return","src":"8035:26:14"}]},"documentation":{"id":3122,"nodeType":"StructuredDocumentation","src":"7888:66:14","text":" @dev Returns the number of values in the set. O(1)."},"id":3136,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"7966:6:14","nodeType":"FunctionDefinition","parameters":{"id":3126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3125,"mutability":"mutable","name":"set","nameLocation":"7992:3:14","nodeType":"VariableDeclaration","scope":3136,"src":"7973:22:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3040_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":3124,"nodeType":"UserDefinedTypeName","pathNode":{"id":3123,"name":"AddressSet","nameLocations":["7973:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":3040,"src":"7973:10:14"},"referencedDeclaration":3040,"src":"7973:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3040_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"}],"src":"7972:24:14"},"returnParameters":{"id":3129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3128,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3136,"src":"8020:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3127,"name":"uint256","nodeType":"ElementaryTypeName","src":"8020:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8019:9:14"},"scope":3327,"src":"7957:109:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3162,"nodeType":"Block","src":"8483:67:14","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":3154,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3140,"src":"8524:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3040_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":3155,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8528:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3039,"src":"8524:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":3156,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"8536:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3153,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2915,"src":"8520:3:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2739_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":3157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8520:22:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3152,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8512:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3151,"name":"uint256","nodeType":"ElementaryTypeName","src":"8512:7:14","typeDescriptions":{}}},"id":3158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8512:31:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3150,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8504:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3149,"name":"uint160","nodeType":"ElementaryTypeName","src":"8504:7:14","typeDescriptions":{}}},"id":3159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8504:40:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3148,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8496:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3147,"name":"address","nodeType":"ElementaryTypeName","src":"8496:7:14","typeDescriptions":{}}},"id":3160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8496:49:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3146,"id":3161,"nodeType":"Return","src":"8489:56:14"}]},"documentation":{"id":3137,"nodeType":"StructuredDocumentation","src":"8070:313:14","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":3163,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"8395:2:14","nodeType":"FunctionDefinition","parameters":{"id":3143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3140,"mutability":"mutable","name":"set","nameLocation":"8417:3:14","nodeType":"VariableDeclaration","scope":3163,"src":"8398:22:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3040_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":3139,"nodeType":"UserDefinedTypeName","pathNode":{"id":3138,"name":"AddressSet","nameLocations":["8398:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":3040,"src":"8398:10:14"},"referencedDeclaration":3040,"src":"8398:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3040_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"},{"constant":false,"id":3142,"mutability":"mutable","name":"index","nameLocation":"8430:5:14","nodeType":"VariableDeclaration","scope":3163,"src":"8422:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3141,"name":"uint256","nodeType":"ElementaryTypeName","src":"8422:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8397:39:14"},"returnParameters":{"id":3146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3145,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3163,"src":"8472:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3144,"name":"address","nodeType":"ElementaryTypeName","src":"8472:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8471:9:14"},"scope":3327,"src":"8386:164:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3192,"nodeType":"Block","src":"9167:148:14","statements":[{"assignments":[3177],"declarations":[{"constant":false,"id":3177,"mutability":"mutable","name":"store","nameLocation":"9190:5:14","nodeType":"VariableDeclaration","scope":3192,"src":"9173:22:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3175,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9173:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3176,"nodeType":"ArrayTypeName","src":"9173:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":3182,"initialValue":{"arguments":[{"expression":{"id":3179,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3167,"src":"9206:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3040_storage_ptr","typeString":"struct EnumerableSet.AddressSet storage pointer"}},"id":3180,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9210:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3039,"src":"9206:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":3178,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2929,"src":"9198:7:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2739_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":3181,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9198:19:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"9173:44:14"},{"assignments":[3187],"declarations":[{"constant":false,"id":3187,"mutability":"mutable","name":"result","nameLocation":"9240:6:14","nodeType":"VariableDeclaration","scope":3192,"src":"9223:23:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3185,"name":"address","nodeType":"ElementaryTypeName","src":"9223:7:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3186,"nodeType":"ArrayTypeName","src":"9223:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":3188,"nodeType":"VariableDeclarationStatement","src":"9223:23:14"},{"AST":{"nodeType":"YulBlock","src":"9262:29:14","statements":[{"nodeType":"YulAssignment","src":"9270:15:14","value":{"name":"store","nodeType":"YulIdentifier","src":"9280:5:14"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"9270:6:14"}]}]},"evmVersion":"london","externalReferences":[{"declaration":3187,"isOffset":false,"isSlot":false,"src":"9270:6:14","valueSize":1},{"declaration":3177,"isOffset":false,"isSlot":false,"src":"9280:5:14","valueSize":1}],"id":3189,"nodeType":"InlineAssembly","src":"9253:38:14"},{"expression":{"id":3190,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3187,"src":"9304:6:14","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":3172,"id":3191,"nodeType":"Return","src":"9297:13:14"}]},"documentation":{"id":3164,"nodeType":"StructuredDocumentation","src":"8554:515:14","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":3193,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"9081:6:14","nodeType":"FunctionDefinition","parameters":{"id":3168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3167,"mutability":"mutable","name":"set","nameLocation":"9107:3:14","nodeType":"VariableDeclaration","scope":3193,"src":"9088:22:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3040_storage_ptr","typeString":"struct EnumerableSet.AddressSet"},"typeName":{"id":3166,"nodeType":"UserDefinedTypeName","pathNode":{"id":3165,"name":"AddressSet","nameLocations":["9088:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":3040,"src":"9088:10:14"},"referencedDeclaration":3040,"src":"9088:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$3040_storage_ptr","typeString":"struct EnumerableSet.AddressSet"}},"visibility":"internal"}],"src":"9087:24:14"},"returnParameters":{"id":3172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3171,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3193,"src":"9147:16:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3169,"name":"address","nodeType":"ElementaryTypeName","src":"9147:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3170,"nodeType":"ArrayTypeName","src":"9147:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"9146:18:14"},"scope":3327,"src":"9072:243:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSet.UintSet","id":3197,"members":[{"constant":false,"id":3196,"mutability":"mutable","name":"_inner","nameLocation":"9358:6:14","nodeType":"VariableDeclaration","scope":3197,"src":"9354:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set"},"typeName":{"id":3195,"nodeType":"UserDefinedTypeName","pathNode":{"id":3194,"name":"Set","nameLocations":["9354:3:14"],"nodeType":"IdentifierPath","referencedDeclaration":2739,"src":"9354:3:14"},"referencedDeclaration":2739,"src":"9354:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage_ptr","typeString":"struct EnumerableSet.Set"}},"visibility":"internal"}],"name":"UintSet","nameLocation":"9340:7:14","nodeType":"StructDefinition","scope":3327,"src":"9333:36:14","visibility":"public"},{"body":{"id":3217,"nodeType":"Block","src":"9598:50:14","statements":[{"expression":{"arguments":[{"expression":{"id":3209,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3201,"src":"9616:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3197_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":3210,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9620:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3196,"src":"9616:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":3213,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3203,"src":"9636:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3212,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9628:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3211,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9628:7:14","typeDescriptions":{}}},"id":3214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9628:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3208,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2781,"src":"9611:4:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$2739_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":3215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9611:32:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3207,"id":3216,"nodeType":"Return","src":"9604:39:14"}]},"documentation":{"id":3198,"nodeType":"StructuredDocumentation","src":"9373:149:14","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":3218,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"9534:3:14","nodeType":"FunctionDefinition","parameters":{"id":3204,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3201,"mutability":"mutable","name":"set","nameLocation":"9554:3:14","nodeType":"VariableDeclaration","scope":3218,"src":"9538:19:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3197_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":3200,"nodeType":"UserDefinedTypeName","pathNode":{"id":3199,"name":"UintSet","nameLocations":["9538:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":3197,"src":"9538:7:14"},"referencedDeclaration":3197,"src":"9538:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3197_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":3203,"mutability":"mutable","name":"value","nameLocation":"9567:5:14","nodeType":"VariableDeclaration","scope":3218,"src":"9559:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3202,"name":"uint256","nodeType":"ElementaryTypeName","src":"9559:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9537:36:14"},"returnParameters":{"id":3207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3206,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3218,"src":"9592:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3205,"name":"bool","nodeType":"ElementaryTypeName","src":"9592:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9591:6:14"},"scope":3327,"src":"9525:123:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3238,"nodeType":"Block","src":"9878:53:14","statements":[{"expression":{"arguments":[{"expression":{"id":3230,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3222,"src":"9899:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3197_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":3231,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9903:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3196,"src":"9899:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":3234,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3224,"src":"9919:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3233,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9911:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3232,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9911:7:14","typeDescriptions":{}}},"id":3235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9911:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3229,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2865,"src":"9891:7:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$2739_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) returns (bool)"}},"id":3236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9891:35:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3228,"id":3237,"nodeType":"Return","src":"9884:42:14"}]},"documentation":{"id":3219,"nodeType":"StructuredDocumentation","src":"9652:147:14","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":3239,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"9811:6:14","nodeType":"FunctionDefinition","parameters":{"id":3225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3222,"mutability":"mutable","name":"set","nameLocation":"9834:3:14","nodeType":"VariableDeclaration","scope":3239,"src":"9818:19:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3197_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":3221,"nodeType":"UserDefinedTypeName","pathNode":{"id":3220,"name":"UintSet","nameLocations":["9818:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":3197,"src":"9818:7:14"},"referencedDeclaration":3197,"src":"9818:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3197_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":3224,"mutability":"mutable","name":"value","nameLocation":"9847:5:14","nodeType":"VariableDeclaration","scope":3239,"src":"9839:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3223,"name":"uint256","nodeType":"ElementaryTypeName","src":"9839:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9817:36:14"},"returnParameters":{"id":3228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3227,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3239,"src":"9872:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3226,"name":"bool","nodeType":"ElementaryTypeName","src":"9872:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9871:6:14"},"scope":3327,"src":"9802:129:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3259,"nodeType":"Block","src":"10101:55:14","statements":[{"expression":{"arguments":[{"expression":{"id":3251,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3243,"src":"10124:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3197_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":3252,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10128:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3196,"src":"10124:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"arguments":[{"id":3255,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3245,"src":"10144:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3254,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10136:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3253,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10136:7:14","typeDescriptions":{}}},"id":3256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10136:14:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3250,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"10114:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2739_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSet.Set storage pointer,bytes32) view returns (bool)"}},"id":3257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10114:37:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3249,"id":3258,"nodeType":"Return","src":"10107:44:14"}]},"documentation":{"id":3240,"nodeType":"StructuredDocumentation","src":"9935:66:14","text":" @dev Returns true if the value is in the set. O(1)."},"id":3260,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"10013:8:14","nodeType":"FunctionDefinition","parameters":{"id":3246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3243,"mutability":"mutable","name":"set","nameLocation":"10038:3:14","nodeType":"VariableDeclaration","scope":3260,"src":"10022:19:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3197_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":3242,"nodeType":"UserDefinedTypeName","pathNode":{"id":3241,"name":"UintSet","nameLocations":["10022:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":3197,"src":"10022:7:14"},"referencedDeclaration":3197,"src":"10022:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3197_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":3245,"mutability":"mutable","name":"value","nameLocation":"10051:5:14","nodeType":"VariableDeclaration","scope":3260,"src":"10043:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3244,"name":"uint256","nodeType":"ElementaryTypeName","src":"10043:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10021:36:14"},"returnParameters":{"id":3249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3248,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3260,"src":"10093:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3247,"name":"bool","nodeType":"ElementaryTypeName","src":"10093:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10092:6:14"},"scope":3327,"src":"10004:152:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3274,"nodeType":"Block","src":"10298:37:14","statements":[{"expression":{"arguments":[{"expression":{"id":3270,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"10319:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3197_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":3271,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10323:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3196,"src":"10319:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":3269,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2898,"src":"10311:7:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2739_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (uint256)"}},"id":3272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10311:19:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3268,"id":3273,"nodeType":"Return","src":"10304:26:14"}]},"documentation":{"id":3261,"nodeType":"StructuredDocumentation","src":"10160:66:14","text":" @dev Returns the number of values on the set. O(1)."},"id":3275,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"10238:6:14","nodeType":"FunctionDefinition","parameters":{"id":3265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3264,"mutability":"mutable","name":"set","nameLocation":"10261:3:14","nodeType":"VariableDeclaration","scope":3275,"src":"10245:19:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3197_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":3263,"nodeType":"UserDefinedTypeName","pathNode":{"id":3262,"name":"UintSet","nameLocations":["10245:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":3197,"src":"10245:7:14"},"referencedDeclaration":3197,"src":"10245:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3197_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"}],"src":"10244:21:14"},"returnParameters":{"id":3268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3267,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3275,"src":"10289:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3266,"name":"uint256","nodeType":"ElementaryTypeName","src":"10289:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10288:9:14"},"scope":3327,"src":"10229:106:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3295,"nodeType":"Block","src":"10749:49:14","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":3289,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3279,"src":"10774:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3197_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":3290,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10778:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3196,"src":"10774:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"}},{"id":3291,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3281,"src":"10786:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3288,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2915,"src":"10770:3:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2739_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSet.Set storage pointer,uint256) view returns (bytes32)"}},"id":3292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10770:22:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3287,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10762:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3286,"name":"uint256","nodeType":"ElementaryTypeName","src":"10762:7:14","typeDescriptions":{}}},"id":3293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10762:31:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3285,"id":3294,"nodeType":"Return","src":"10755:38:14"}]},"documentation":{"id":3276,"nodeType":"StructuredDocumentation","src":"10339:313:14","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":3296,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"10664:2:14","nodeType":"FunctionDefinition","parameters":{"id":3282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3279,"mutability":"mutable","name":"set","nameLocation":"10683:3:14","nodeType":"VariableDeclaration","scope":3296,"src":"10667:19:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3197_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":3278,"nodeType":"UserDefinedTypeName","pathNode":{"id":3277,"name":"UintSet","nameLocations":["10667:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":3197,"src":"10667:7:14"},"referencedDeclaration":3197,"src":"10667:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3197_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"},{"constant":false,"id":3281,"mutability":"mutable","name":"index","nameLocation":"10696:5:14","nodeType":"VariableDeclaration","scope":3296,"src":"10688:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3280,"name":"uint256","nodeType":"ElementaryTypeName","src":"10688:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10666:36:14"},"returnParameters":{"id":3285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3284,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3296,"src":"10738:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3283,"name":"uint256","nodeType":"ElementaryTypeName","src":"10738:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10737:9:14"},"scope":3327,"src":"10655:143:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3325,"nodeType":"Block","src":"11412:148:14","statements":[{"assignments":[3310],"declarations":[{"constant":false,"id":3310,"mutability":"mutable","name":"store","nameLocation":"11435:5:14","nodeType":"VariableDeclaration","scope":3325,"src":"11418:22:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3308,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11418:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3309,"nodeType":"ArrayTypeName","src":"11418:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":3315,"initialValue":{"arguments":[{"expression":{"id":3312,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3300,"src":"11451:3:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3197_storage_ptr","typeString":"struct EnumerableSet.UintSet storage pointer"}},"id":3313,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11455:6:14","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":3196,"src":"11451:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$2739_storage","typeString":"struct EnumerableSet.Set storage ref"}],"id":3311,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2929,"src":"11443:7:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$2739_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSet.Set storage pointer) view returns (bytes32[] memory)"}},"id":3314,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11443:19:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"11418:44:14"},{"assignments":[3320],"declarations":[{"constant":false,"id":3320,"mutability":"mutable","name":"result","nameLocation":"11485:6:14","nodeType":"VariableDeclaration","scope":3325,"src":"11468:23:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3318,"name":"uint256","nodeType":"ElementaryTypeName","src":"11468:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3319,"nodeType":"ArrayTypeName","src":"11468:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":3321,"nodeType":"VariableDeclarationStatement","src":"11468:23:14"},{"AST":{"nodeType":"YulBlock","src":"11507:29:14","statements":[{"nodeType":"YulAssignment","src":"11515:15:14","value":{"name":"store","nodeType":"YulIdentifier","src":"11525:5:14"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"11515:6:14"}]}]},"evmVersion":"london","externalReferences":[{"declaration":3320,"isOffset":false,"isSlot":false,"src":"11515:6:14","valueSize":1},{"declaration":3310,"isOffset":false,"isSlot":false,"src":"11525:5:14","valueSize":1}],"id":3322,"nodeType":"InlineAssembly","src":"11498:38:14"},{"expression":{"id":3323,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3320,"src":"11549:6:14","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":3305,"id":3324,"nodeType":"Return","src":"11542:13:14"}]},"documentation":{"id":3297,"nodeType":"StructuredDocumentation","src":"10802:515:14","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":3326,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"11329:6:14","nodeType":"FunctionDefinition","parameters":{"id":3301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3300,"mutability":"mutable","name":"set","nameLocation":"11352:3:14","nodeType":"VariableDeclaration","scope":3326,"src":"11336:19:14","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3197_storage_ptr","typeString":"struct EnumerableSet.UintSet"},"typeName":{"id":3299,"nodeType":"UserDefinedTypeName","pathNode":{"id":3298,"name":"UintSet","nameLocations":["11336:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":3197,"src":"11336:7:14"},"referencedDeclaration":3197,"src":"11336:7:14","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$3197_storage_ptr","typeString":"struct EnumerableSet.UintSet"}},"visibility":"internal"}],"src":"11335:21:14"},"returnParameters":{"id":3305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3304,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3326,"src":"11392:16:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3302,"name":"uint256","nodeType":"ElementaryTypeName","src":"11392:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3303,"nodeType":"ArrayTypeName","src":"11392:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"11391:18:14"},"scope":3327,"src":"11320:240:14","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":3328,"src":"812:10750:14","usedErrors":[]}],"src":"100:11463:14"},"id":14},"contracts/external/openzeppelin/contracts/utils/IERC165.sol":{"ast":{"absolutePath":"contracts/external/openzeppelin/contracts/utils/IERC165.sol","exportedSymbols":{"IERC165":[3339]},"id":3340,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3329,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:15"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":3330,"nodeType":"StructuredDocumentation","src":"125:279:15","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":3339,"linearizedBaseContracts":[3339],"name":"IERC165","nameLocation":"415:7:15","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3331,"nodeType":"StructuredDocumentation","src":"427:326:15","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":3338,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"765:17:15","nodeType":"FunctionDefinition","parameters":{"id":3334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3333,"mutability":"mutable","name":"interfaceId","nameLocation":"790:11:15","nodeType":"VariableDeclaration","scope":3338,"src":"783:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3332,"name":"bytes4","nodeType":"ElementaryTypeName","src":"783:6:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"782:20:15"},"returnParameters":{"id":3337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3336,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3338,"src":"826:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3335,"name":"bool","nodeType":"ElementaryTypeName","src":"826:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"825:6:15"},"scope":3339,"src":"756:76:15","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3340,"src":"405:429:15","usedErrors":[]}],"src":"100:735:15"},"id":15},"contracts/external/openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"contracts/external/openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Strings":[3542]},"id":3543,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3341,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:16"},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":3342,"nodeType":"StructuredDocumentation","src":"111:34:16","text":" @dev String operations."},"fullyImplemented":true,"id":3542,"linearizedBaseContracts":[3542],"name":"Strings","nameLocation":"154:7:16","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":3345,"mutability":"constant","name":"_HEX_SYMBOLS","nameLocation":"191:12:16","nodeType":"VariableDeclaration","scope":3542,"src":"166:58:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":3343,"name":"bytes16","nodeType":"ElementaryTypeName","src":"166:7:16","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":3344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"206:18:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"body":{"id":3423,"nodeType":"Block","src":"389:546:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3353,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3348,"src":"579:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"588:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"579:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3359,"nodeType":"IfStatement","src":"575:41:16","trueBody":{"id":3358,"nodeType":"Block","src":"591:25:16","statements":[{"expression":{"hexValue":"30","id":3356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"606:3:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"functionReturnParameters":3352,"id":3357,"nodeType":"Return","src":"599:10:16"}]}},{"assignments":[3361],"declarations":[{"constant":false,"id":3361,"mutability":"mutable","name":"temp","nameLocation":"629:4:16","nodeType":"VariableDeclaration","scope":3423,"src":"621:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3360,"name":"uint256","nodeType":"ElementaryTypeName","src":"621:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3363,"initialValue":{"id":3362,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3348,"src":"636:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"621:20:16"},{"assignments":[3365],"declarations":[{"constant":false,"id":3365,"mutability":"mutable","name":"digits","nameLocation":"655:6:16","nodeType":"VariableDeclaration","scope":3423,"src":"647:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3364,"name":"uint256","nodeType":"ElementaryTypeName","src":"647:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3366,"nodeType":"VariableDeclarationStatement","src":"647:14:16"},{"body":{"id":3377,"nodeType":"Block","src":"685:41:16","statements":[{"expression":{"id":3371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"693:8:16","subExpression":{"id":3370,"name":"digits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3365,"src":"693:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3372,"nodeType":"ExpressionStatement","src":"693:8:16"},{"expression":{"id":3375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3373,"name":"temp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3361,"src":"709:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":3374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"717:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"709:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3376,"nodeType":"ExpressionStatement","src":"709:10:16"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3367,"name":"temp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3361,"src":"674:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"682:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"674:9:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3378,"nodeType":"WhileStatement","src":"667:59:16"},{"assignments":[3380],"declarations":[{"constant":false,"id":3380,"mutability":"mutable","name":"buffer","nameLocation":"744:6:16","nodeType":"VariableDeclaration","scope":3423,"src":"731:19:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3379,"name":"bytes","nodeType":"ElementaryTypeName","src":"731:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3385,"initialValue":{"arguments":[{"id":3383,"name":"digits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3365,"src":"763:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3382,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"753:9:16","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":3381,"name":"bytes","nodeType":"ElementaryTypeName","src":"757:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":3384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"753:17:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"731:39:16"},{"body":{"id":3416,"nodeType":"Block","src":"795:109:16","statements":[{"expression":{"id":3391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3389,"name":"digits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3365,"src":"803:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":3390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"813:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"803:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3392,"nodeType":"ExpressionStatement","src":"803:11:16"},{"expression":{"id":3410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3393,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3380,"src":"822:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3395,"indexExpression":{"id":3394,"name":"digits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3365,"src":"829:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"822:14:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3438","id":3400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"852:2:16","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3403,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3348,"src":"865:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"3130","id":3404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"873:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"865:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3402,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"857:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3401,"name":"uint256","nodeType":"ElementaryTypeName","src":"857:7:16","typeDescriptions":{}}},"id":3406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"857:19:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"852:24:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3399,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"846:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3398,"name":"uint8","nodeType":"ElementaryTypeName","src":"846:5:16","typeDescriptions":{}}},"id":3408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"846:31:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":3397,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"839:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":3396,"name":"bytes1","nodeType":"ElementaryTypeName","src":"839:6:16","typeDescriptions":{}}},"id":3409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"839:39:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"822:56:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3411,"nodeType":"ExpressionStatement","src":"822:56:16"},{"expression":{"id":3414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3412,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3348,"src":"886:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":3413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"895:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"886:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3415,"nodeType":"ExpressionStatement","src":"886:11:16"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3386,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3348,"src":"783:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"792:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"783:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3417,"nodeType":"WhileStatement","src":"776:128:16"},{"expression":{"arguments":[{"id":3420,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3380,"src":"923:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3419,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"916:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3418,"name":"string","nodeType":"ElementaryTypeName","src":"916:6:16","typeDescriptions":{}}},"id":3421,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"916:14:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3352,"id":3422,"nodeType":"Return","src":"909:21:16"}]},"documentation":{"id":3346,"nodeType":"StructuredDocumentation","src":"229:86:16","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":3424,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"327:8:16","nodeType":"FunctionDefinition","parameters":{"id":3349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3348,"mutability":"mutable","name":"value","nameLocation":"344:5:16","nodeType":"VariableDeclaration","scope":3424,"src":"336:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3347,"name":"uint256","nodeType":"ElementaryTypeName","src":"336:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"335:15:16"},"returnParameters":{"id":3352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3351,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3424,"src":"374:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3350,"name":"string","nodeType":"ElementaryTypeName","src":"374:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"373:15:16"},"scope":3542,"src":"318:617:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3464,"nodeType":"Block","src":"1106:207:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3432,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3427,"src":"1116:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1125:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1116:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3438,"nodeType":"IfStatement","src":"1112:44:16","trueBody":{"id":3437,"nodeType":"Block","src":"1128:28:16","statements":[{"expression":{"hexValue":"30783030","id":3435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1143:6:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_27489e20a0060b723a1748bdff5e44570ee9fae64141728105692eac6031e8a4","typeString":"literal_string \"0x00\""},"value":"0x00"},"functionReturnParameters":3431,"id":3436,"nodeType":"Return","src":"1136:13:16"}]}},{"assignments":[3440],"declarations":[{"constant":false,"id":3440,"mutability":"mutable","name":"temp","nameLocation":"1169:4:16","nodeType":"VariableDeclaration","scope":3464,"src":"1161:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3439,"name":"uint256","nodeType":"ElementaryTypeName","src":"1161:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3442,"initialValue":{"id":3441,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3427,"src":"1176:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1161:20:16"},{"assignments":[3444],"declarations":[{"constant":false,"id":3444,"mutability":"mutable","name":"length","nameLocation":"1195:6:16","nodeType":"VariableDeclaration","scope":3464,"src":"1187:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3443,"name":"uint256","nodeType":"ElementaryTypeName","src":"1187:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3446,"initialValue":{"hexValue":"30","id":3445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1204:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1187:18:16"},{"body":{"id":3457,"nodeType":"Block","src":"1229:41:16","statements":[{"expression":{"id":3451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1237:8:16","subExpression":{"id":3450,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3444,"src":"1237:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3452,"nodeType":"ExpressionStatement","src":"1237:8:16"},{"expression":{"id":3455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3453,"name":"temp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3440,"src":"1253:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":3454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1262:1:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"1253:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3456,"nodeType":"ExpressionStatement","src":"1253:10:16"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3447,"name":"temp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3440,"src":"1218:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1226:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1218:9:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3458,"nodeType":"WhileStatement","src":"1211:59:16"},{"expression":{"arguments":[{"id":3460,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3427,"src":"1294:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3461,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3444,"src":"1301:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3459,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[3465,3541],"referencedDeclaration":3541,"src":"1282:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":3462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1282:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3431,"id":3463,"nodeType":"Return","src":"1275:33:16"}]},"documentation":{"id":3425,"nodeType":"StructuredDocumentation","src":"939:90:16","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":3465,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1041:11:16","nodeType":"FunctionDefinition","parameters":{"id":3428,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3427,"mutability":"mutable","name":"value","nameLocation":"1061:5:16","nodeType":"VariableDeclaration","scope":3465,"src":"1053:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3426,"name":"uint256","nodeType":"ElementaryTypeName","src":"1053:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1052:15:16"},"returnParameters":{"id":3431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3430,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3465,"src":"1091:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3429,"name":"string","nodeType":"ElementaryTypeName","src":"1091:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1090:15:16"},"scope":3542,"src":"1032:281:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3540,"nodeType":"Block","src":"1532:309:16","statements":[{"assignments":[3476],"declarations":[{"constant":false,"id":3476,"mutability":"mutable","name":"buffer","nameLocation":"1551:6:16","nodeType":"VariableDeclaration","scope":3540,"src":"1538:19:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3475,"name":"bytes","nodeType":"ElementaryTypeName","src":"1538:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3485,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1570:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3480,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"1574:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1570:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":3482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1583:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1570:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3478,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1560:9:16","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":3477,"name":"bytes","nodeType":"ElementaryTypeName","src":"1564:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":3484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1560:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1538:47:16"},{"expression":{"id":3490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3486,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3476,"src":"1591:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3488,"indexExpression":{"hexValue":"30","id":3487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1598:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1591:9:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1603:3:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1591:15:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3491,"nodeType":"ExpressionStatement","src":"1591:15:16"},{"expression":{"id":3496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3492,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3476,"src":"1612:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3494,"indexExpression":{"hexValue":"31","id":3493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1619:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1612:9:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":3495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1624:3:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1612:15:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3497,"nodeType":"ExpressionStatement","src":"1612:15:16"},{"body":{"id":3526,"nodeType":"Block","src":"1678:71:16","statements":[{"expression":{"id":3520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3512,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3476,"src":"1686:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3514,"indexExpression":{"id":3513,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3499,"src":"1693:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1686:9:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3515,"name":"_HEX_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3345,"src":"1698:12:16","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":3519,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3516,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3468,"src":"1711:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":3517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1719:3:16","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1711:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1698:25:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1686:37:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3521,"nodeType":"ExpressionStatement","src":"1686:37:16"},{"expression":{"id":3524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3522,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3468,"src":"1731:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1741:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1731:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3525,"nodeType":"ExpressionStatement","src":"1731:11:16"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3506,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3499,"src":"1666:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":3507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1670:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1666:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3527,"initializationExpression":{"assignments":[3499],"declarations":[{"constant":false,"id":3499,"mutability":"mutable","name":"i","nameLocation":"1646:1:16","nodeType":"VariableDeclaration","scope":3527,"src":"1638:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3498,"name":"uint256","nodeType":"ElementaryTypeName","src":"1638:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3505,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1650:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3501,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"1654:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1650:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1663:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1650:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1638:26:16"},"loopExpression":{"expression":{"id":3510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1673:3:16","subExpression":{"id":3509,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3499,"src":"1675:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3511,"nodeType":"ExpressionStatement","src":"1673:3:16"},"nodeType":"ForStatement","src":"1633:116:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3529,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3468,"src":"1762:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1771:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1762:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":3532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1774:34:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":3528,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1754:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1754:55:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3534,"nodeType":"ExpressionStatement","src":"1754:55:16"},{"expression":{"arguments":[{"id":3537,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3476,"src":"1829:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3536,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1822:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3535,"name":"string","nodeType":"ElementaryTypeName","src":"1822:6:16","typeDescriptions":{}}},"id":3538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1822:14:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3474,"id":3539,"nodeType":"Return","src":"1815:21:16"}]},"documentation":{"id":3466,"nodeType":"StructuredDocumentation","src":"1317:108:16","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":3541,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1437:11:16","nodeType":"FunctionDefinition","parameters":{"id":3471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3468,"mutability":"mutable","name":"value","nameLocation":"1457:5:16","nodeType":"VariableDeclaration","scope":3541,"src":"1449:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3467,"name":"uint256","nodeType":"ElementaryTypeName","src":"1449:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3470,"mutability":"mutable","name":"length","nameLocation":"1472:6:16","nodeType":"VariableDeclaration","scope":3541,"src":"1464:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3469,"name":"uint256","nodeType":"ElementaryTypeName","src":"1464:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1448:31:16"},"returnParameters":{"id":3474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3473,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3541,"src":"1515:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3472,"name":"string","nodeType":"ElementaryTypeName","src":"1515:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1514:15:16"},"scope":3542,"src":"1428:413:16","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3543,"src":"146:1697:16","usedErrors":[]}],"src":"86:1758:16"},"id":16},"contracts/interfaces/IABBYManager.sol":{"ast":{"absolutePath":"contracts/interfaces/IABBYManager.sol","exportedSymbols":{"IABBYManager":[3567]},"id":3568,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3544,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"32:23:17"},{"abstract":false,"baseContracts":[],"canonicalName":"IABBYManager","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3567,"linearizedBaseContracts":[3567],"name":"IABBYManager","nameLocation":"67:12:17","nodeType":"ContractDefinition","nodes":[{"functionSelector":"d0c835ce","id":3552,"implemented":false,"kind":"function","modifiers":[],"name":"setClaimableTimestamp","nameLocation":"93:21:17","nodeType":"FunctionDefinition","parameters":{"id":3550,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3546,"mutability":"mutable","name":"claimDate","nameLocation":"128:9:17","nodeType":"VariableDeclaration","scope":3552,"src":"120:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3545,"name":"uint256","nodeType":"ElementaryTypeName","src":"120:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3549,"mutability":"mutable","name":"depositIds","nameLocation":"162:10:17","nodeType":"VariableDeclaration","scope":3552,"src":"143:29:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3547,"name":"bytes32","nodeType":"ElementaryTypeName","src":"143:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3548,"nodeType":"ArrayTypeName","src":"143:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"114:62:17"},"returnParameters":{"id":3551,"nodeType":"ParameterList","parameters":[],"src":"185:0:17"},"scope":3567,"src":"84:102:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":{"id":3553,"nodeType":"StructuredDocumentation","src":"190:261:17","text":" @notice Event emitted when claimable timestamp is set\n @param claimTimestamp The timestamp at which the mint can be claimed\n @param depositId      The depositId that can claim at the given \n`claimTimestamp`"},"eventSelector":"15d20a98e8d4b1247fc51e2f6817929874a0769087776e52268eb1b4c8bdb2dd","id":3559,"name":"ClaimableTimestampSet","nameLocation":"460:21:17","nodeType":"EventDefinition","parameters":{"id":3558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3555,"indexed":true,"mutability":"mutable","name":"claimTimestamp","nameLocation":"503:14:17","nodeType":"VariableDeclaration","scope":3559,"src":"487:30:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3554,"name":"uint256","nodeType":"ElementaryTypeName","src":"487:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3557,"indexed":true,"mutability":"mutable","name":"depositId","nameLocation":"539:9:17","nodeType":"VariableDeclaration","scope":3559,"src":"523:25:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3556,"name":"bytes32","nodeType":"ElementaryTypeName","src":"523:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"481:71:17"},"src":"454:99:17"},{"documentation":{"id":3560,"nodeType":"StructuredDocumentation","src":"557:14:17","text":"ERRORS ///"},"errorSelector":"c26c2f3c","id":3562,"name":"MintNotYetClaimable","nameLocation":"580:19:17","nodeType":"ErrorDefinition","parameters":{"id":3561,"nodeType":"ParameterList","parameters":[],"src":"599:2:17"},"src":"574:28:17"},{"errorSelector":"412ed146","id":3564,"name":"ClaimableTimestampInPast","nameLocation":"611:24:17","nodeType":"ErrorDefinition","parameters":{"id":3563,"nodeType":"ParameterList","parameters":[],"src":"635:2:17"},"src":"605:33:17"},{"errorSelector":"56924b08","id":3566,"name":"ClaimableTimestampNotSet","nameLocation":"647:24:17","nodeType":"ErrorDefinition","parameters":{"id":3565,"nodeType":"ParameterList","parameters":[],"src":"671:2:17"},"src":"641:33:17"}],"scope":3568,"src":"57:619:17","usedErrors":[3562,3564,3566]}],"src":"32:645:17"},"id":17},"contracts/interfaces/IPricerReader.sol":{"ast":{"absolutePath":"contracts/interfaces/IPricerReader.sol","exportedSymbols":{"IPricerReader":[3584]},"id":3585,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3569,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"32:23:18"},{"abstract":false,"baseContracts":[],"canonicalName":"IPricerReader","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3584,"linearizedBaseContracts":[3584],"name":"IPricerReader","nameLocation":"67:13:18","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3570,"nodeType":"StructuredDocumentation","src":"85:113:18","text":" @notice Gets the latest price of the asset\n @return uint256 The latest price of the asset"},"functionSelector":"8e15f473","id":3575,"implemented":false,"kind":"function","modifiers":[],"name":"getLatestPrice","nameLocation":"210:14:18","nodeType":"FunctionDefinition","parameters":{"id":3571,"nodeType":"ParameterList","parameters":[],"src":"224:2:18"},"returnParameters":{"id":3574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3573,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3575,"src":"250:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3572,"name":"uint256","nodeType":"ElementaryTypeName","src":"250:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"249:9:18"},"scope":3584,"src":"201:58:18","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3576,"nodeType":"StructuredDocumentation","src":"263:207:18","text":" @notice Gets the price of the asset at a specific priceId\n @param priceId The priceId at which to get the price\n @return uint256 The price of the asset with the given priceId"},"functionSelector":"e7572230","id":3583,"implemented":false,"kind":"function","modifiers":[],"name":"getPrice","nameLocation":"482:8:18","nodeType":"FunctionDefinition","parameters":{"id":3579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3578,"mutability":"mutable","name":"priceId","nameLocation":"499:7:18","nodeType":"VariableDeclaration","scope":3583,"src":"491:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3577,"name":"uint256","nodeType":"ElementaryTypeName","src":"491:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"490:17:18"},"returnParameters":{"id":3582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3581,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3583,"src":"531:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3580,"name":"uint256","nodeType":"ElementaryTypeName","src":"531:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"530:9:18"},"scope":3584,"src":"473:67:18","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3585,"src":"57:485:18","usedErrors":[]}],"src":"32:511:18"},"id":18},"contracts/interfaces/IRWAHub.sol":{"ast":{"absolutePath":"contracts/interfaces/IRWAHub.sol","exportedSymbols":{"IRWAHub":[3892]},"id":3893,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3586,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"32:23:19"},{"abstract":false,"baseContracts":[],"canonicalName":"IRWAHub","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3892,"linearizedBaseContracts":[3892],"name":"IRWAHub","nameLocation":"67:7:19","nodeType":"ContractDefinition","nodes":[{"canonicalName":"IRWAHub.Depositor","id":3593,"members":[{"constant":false,"id":3588,"mutability":"mutable","name":"user","nameLocation":"179:4:19","nodeType":"VariableDeclaration","scope":3593,"src":"171:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3587,"name":"address","nodeType":"ElementaryTypeName","src":"171:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3590,"mutability":"mutable","name":"amountDepositedMinusFees","nameLocation":"197:24:19","nodeType":"VariableDeclaration","scope":3593,"src":"189:32:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3589,"name":"uint256","nodeType":"ElementaryTypeName","src":"189:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3592,"mutability":"mutable","name":"priceId","nameLocation":"235:7:19","nodeType":"VariableDeclaration","scope":3593,"src":"227:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3591,"name":"uint256","nodeType":"ElementaryTypeName","src":"227:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Depositor","nameLocation":"155:9:19","nodeType":"StructDefinition","scope":3892,"src":"148:99:19","visibility":"public"},{"canonicalName":"IRWAHub.Redeemer","id":3600,"members":[{"constant":false,"id":3595,"mutability":"mutable","name":"user","nameLocation":"351:4:19","nodeType":"VariableDeclaration","scope":3600,"src":"343:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3594,"name":"address","nodeType":"ElementaryTypeName","src":"343:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3597,"mutability":"mutable","name":"amountRwaTokenBurned","nameLocation":"369:20:19","nodeType":"VariableDeclaration","scope":3600,"src":"361:28:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3596,"name":"uint256","nodeType":"ElementaryTypeName","src":"361:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3599,"mutability":"mutable","name":"priceId","nameLocation":"403:7:19","nodeType":"VariableDeclaration","scope":3600,"src":"395:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3598,"name":"uint256","nodeType":"ElementaryTypeName","src":"395:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Redeemer","nameLocation":"328:8:19","nodeType":"StructDefinition","scope":3892,"src":"321:94:19","visibility":"public"},{"functionSelector":"d592d815","id":3605,"implemented":false,"kind":"function","modifiers":[],"name":"requestSubscription","nameLocation":"428:19:19","nodeType":"FunctionDefinition","parameters":{"id":3603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3602,"mutability":"mutable","name":"amount","nameLocation":"456:6:19","nodeType":"VariableDeclaration","scope":3605,"src":"448:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3601,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"447:16:19"},"returnParameters":{"id":3604,"nodeType":"ParameterList","parameters":[],"src":"472:0:19"},"scope":3892,"src":"419:54:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"4565e9ff","id":3611,"implemented":false,"kind":"function","modifiers":[],"name":"claimMint","nameLocation":"486:9:19","nodeType":"FunctionDefinition","parameters":{"id":3609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3608,"mutability":"mutable","name":"depositIds","nameLocation":"515:10:19","nodeType":"VariableDeclaration","scope":3611,"src":"496:29:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3606,"name":"bytes32","nodeType":"ElementaryTypeName","src":"496:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3607,"nodeType":"ArrayTypeName","src":"496:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"495:31:19"},"returnParameters":{"id":3610,"nodeType":"ParameterList","parameters":[],"src":"535:0:19"},"scope":3892,"src":"477:59:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"eeb3c910","id":3616,"implemented":false,"kind":"function","modifiers":[],"name":"requestRedemption","nameLocation":"549:17:19","nodeType":"FunctionDefinition","parameters":{"id":3614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3613,"mutability":"mutable","name":"amount","nameLocation":"575:6:19","nodeType":"VariableDeclaration","scope":3616,"src":"567:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3612,"name":"uint256","nodeType":"ElementaryTypeName","src":"567:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"566:16:19"},"returnParameters":{"id":3615,"nodeType":"ParameterList","parameters":[],"src":"591:0:19"},"scope":3892,"src":"540:52:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"244f5acf","id":3622,"implemented":false,"kind":"function","modifiers":[],"name":"claimRedemption","nameLocation":"605:15:19","nodeType":"FunctionDefinition","parameters":{"id":3620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3619,"mutability":"mutable","name":"redemptionIds","nameLocation":"640:13:19","nodeType":"VariableDeclaration","scope":3622,"src":"621:32:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3617,"name":"bytes32","nodeType":"ElementaryTypeName","src":"621:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3618,"nodeType":"ArrayTypeName","src":"621:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"620:34:19"},"returnParameters":{"id":3621,"nodeType":"ParameterList","parameters":[],"src":"663:0:19"},"scope":3892,"src":"596:68:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"2b5eceff","id":3635,"implemented":false,"kind":"function","modifiers":[],"name":"addProof","nameLocation":"677:8:19","nodeType":"FunctionDefinition","parameters":{"id":3633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3624,"mutability":"mutable","name":"txHash","nameLocation":"699:6:19","nodeType":"VariableDeclaration","scope":3635,"src":"691:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3623,"name":"bytes32","nodeType":"ElementaryTypeName","src":"691:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3626,"mutability":"mutable","name":"user","nameLocation":"719:4:19","nodeType":"VariableDeclaration","scope":3635,"src":"711:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3625,"name":"address","nodeType":"ElementaryTypeName","src":"711:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3628,"mutability":"mutable","name":"depositAmountAfterFee","nameLocation":"737:21:19","nodeType":"VariableDeclaration","scope":3635,"src":"729:29:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3627,"name":"uint256","nodeType":"ElementaryTypeName","src":"729:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3630,"mutability":"mutable","name":"feeAmount","nameLocation":"772:9:19","nodeType":"VariableDeclaration","scope":3635,"src":"764:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3629,"name":"uint256","nodeType":"ElementaryTypeName","src":"764:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3632,"mutability":"mutable","name":"timestamp","nameLocation":"795:9:19","nodeType":"VariableDeclaration","scope":3635,"src":"787:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3631,"name":"uint256","nodeType":"ElementaryTypeName","src":"787:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"685:123:19"},"returnParameters":{"id":3634,"nodeType":"ParameterList","parameters":[],"src":"817:0:19"},"scope":3892,"src":"668:150:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"87e2d06e","id":3644,"implemented":false,"kind":"function","modifiers":[],"name":"setPriceIdForDeposits","nameLocation":"831:21:19","nodeType":"FunctionDefinition","parameters":{"id":3642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3638,"mutability":"mutable","name":"depositIds","nameLocation":"877:10:19","nodeType":"VariableDeclaration","scope":3644,"src":"858:29:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3636,"name":"bytes32","nodeType":"ElementaryTypeName","src":"858:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3637,"nodeType":"ArrayTypeName","src":"858:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":3641,"mutability":"mutable","name":"priceIds","nameLocation":"912:8:19","nodeType":"VariableDeclaration","scope":3644,"src":"893:27:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3639,"name":"uint256","nodeType":"ElementaryTypeName","src":"893:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3640,"nodeType":"ArrayTypeName","src":"893:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"852:72:19"},"returnParameters":{"id":3643,"nodeType":"ParameterList","parameters":[],"src":"933:0:19"},"scope":3892,"src":"822:112:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"aa85c1df","id":3653,"implemented":false,"kind":"function","modifiers":[],"name":"setPriceIdForRedemptions","nameLocation":"947:24:19","nodeType":"FunctionDefinition","parameters":{"id":3651,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3647,"mutability":"mutable","name":"redemptionIds","nameLocation":"996:13:19","nodeType":"VariableDeclaration","scope":3653,"src":"977:32:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3645,"name":"bytes32","nodeType":"ElementaryTypeName","src":"977:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3646,"nodeType":"ArrayTypeName","src":"977:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":3650,"mutability":"mutable","name":"priceIds","nameLocation":"1034:8:19","nodeType":"VariableDeclaration","scope":3653,"src":"1015:27:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3648,"name":"uint256","nodeType":"ElementaryTypeName","src":"1015:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3649,"nodeType":"ArrayTypeName","src":"1015:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"971:75:19"},"returnParameters":{"id":3652,"nodeType":"ParameterList","parameters":[],"src":"1055:0:19"},"scope":3892,"src":"938:118:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"29390370","id":3658,"implemented":false,"kind":"function","modifiers":[],"name":"setPricer","nameLocation":"1069:9:19","nodeType":"FunctionDefinition","parameters":{"id":3656,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3655,"mutability":"mutable","name":"newPricer","nameLocation":"1087:9:19","nodeType":"VariableDeclaration","scope":3658,"src":"1079:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3654,"name":"address","nodeType":"ElementaryTypeName","src":"1079:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1078:19:19"},"returnParameters":{"id":3657,"nodeType":"ParameterList","parameters":[],"src":"1106:0:19"},"scope":3892,"src":"1060:47:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"de6afa82","id":3669,"implemented":false,"kind":"function","modifiers":[],"name":"overwriteDepositor","nameLocation":"1120:18:19","nodeType":"FunctionDefinition","parameters":{"id":3667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3660,"mutability":"mutable","name":"depositIdToOverride","nameLocation":"1152:19:19","nodeType":"VariableDeclaration","scope":3669,"src":"1144:27:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3659,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1144:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3662,"mutability":"mutable","name":"user","nameLocation":"1185:4:19","nodeType":"VariableDeclaration","scope":3669,"src":"1177:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3661,"name":"address","nodeType":"ElementaryTypeName","src":"1177:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3664,"mutability":"mutable","name":"depositAmountAfterFee","nameLocation":"1203:21:19","nodeType":"VariableDeclaration","scope":3669,"src":"1195:29:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3663,"name":"uint256","nodeType":"ElementaryTypeName","src":"1195:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3666,"mutability":"mutable","name":"priceId","nameLocation":"1238:7:19","nodeType":"VariableDeclaration","scope":3669,"src":"1230:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3665,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1138:111:19"},"returnParameters":{"id":3668,"nodeType":"ParameterList","parameters":[],"src":"1258:0:19"},"scope":3892,"src":"1111:148:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"258492cd","id":3680,"implemented":false,"kind":"function","modifiers":[],"name":"overwriteRedeemer","nameLocation":"1272:17:19","nodeType":"FunctionDefinition","parameters":{"id":3678,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3671,"mutability":"mutable","name":"redemptionIdToOverride","nameLocation":"1303:22:19","nodeType":"VariableDeclaration","scope":3680,"src":"1295:30:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3670,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1295:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3673,"mutability":"mutable","name":"user","nameLocation":"1339:4:19","nodeType":"VariableDeclaration","scope":3680,"src":"1331:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3672,"name":"address","nodeType":"ElementaryTypeName","src":"1331:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3675,"mutability":"mutable","name":"rwaTokenAmountBurned","nameLocation":"1357:20:19","nodeType":"VariableDeclaration","scope":3680,"src":"1349:28:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3674,"name":"uint256","nodeType":"ElementaryTypeName","src":"1349:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3677,"mutability":"mutable","name":"priceId","nameLocation":"1391:7:19","nodeType":"VariableDeclaration","scope":3680,"src":"1383:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3676,"name":"uint256","nodeType":"ElementaryTypeName","src":"1383:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1289:113:19"},"returnParameters":{"id":3679,"nodeType":"ParameterList","parameters":[],"src":"1411:0:19"},"scope":3892,"src":"1263:149:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":{"id":3681,"nodeType":"StructuredDocumentation","src":"1416:159:19","text":" @notice Event emitted when fee recipient is set\n @param oldFeeRecipient Old fee recipient\n @param newFeeRecipient New fee recipient"},"eventSelector":"15d80a013f22151bc7246e3bc132e12828cde19de98870475e3fa70840152721","id":3687,"name":"FeeRecipientSet","nameLocation":"1584:15:19","nodeType":"EventDefinition","parameters":{"id":3686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3683,"indexed":false,"mutability":"mutable","name":"oldFeeRecipient","nameLocation":"1608:15:19","nodeType":"VariableDeclaration","scope":3687,"src":"1600:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3682,"name":"address","nodeType":"ElementaryTypeName","src":"1600:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3685,"indexed":false,"mutability":"mutable","name":"newFeeRecipient","nameLocation":"1633:15:19","nodeType":"VariableDeclaration","scope":3687,"src":"1625:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3684,"name":"address","nodeType":"ElementaryTypeName","src":"1625:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1599:50:19"},"src":"1578:72:19"},{"anonymous":false,"documentation":{"id":3688,"nodeType":"StructuredDocumentation","src":"1654:197:19","text":" @notice Event emitted when the assetSender is changed\n @param oldAssetSender The address of the old assetSender\n @param newAssetSender The address of the new assetSender"},"eventSelector":"b09f298b2812193d5ada18beaadd6cb8f12b3640926d99de46e2a65394df829d","id":3694,"name":"AssetSenderSet","nameLocation":"1860:14:19","nodeType":"EventDefinition","parameters":{"id":3693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3690,"indexed":false,"mutability":"mutable","name":"oldAssetSender","nameLocation":"1883:14:19","nodeType":"VariableDeclaration","scope":3694,"src":"1875:22:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3689,"name":"address","nodeType":"ElementaryTypeName","src":"1875:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3692,"indexed":false,"mutability":"mutable","name":"newAssetSender","nameLocation":"1907:14:19","nodeType":"VariableDeclaration","scope":3694,"src":"1899:22:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3691,"name":"address","nodeType":"ElementaryTypeName","src":"1899:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1874:48:19"},"src":"1854:69:19"},{"anonymous":false,"documentation":{"id":3695,"nodeType":"StructuredDocumentation","src":"1927:213:19","text":" @notice Event emitted when minimum deposit amount is set\n @param oldMinimum Old minimum\n @param newMinimum New minimum\n @dev See inheriting contract for decimals representation"},"eventSelector":"e6e25add7363f8f8a40cbea9810d3115a33703b10972ef759104219b00657436","id":3701,"name":"MinimumDepositAmountSet","nameLocation":"2149:23:19","nodeType":"EventDefinition","parameters":{"id":3700,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3697,"indexed":false,"mutability":"mutable","name":"oldMinimum","nameLocation":"2181:10:19","nodeType":"VariableDeclaration","scope":3701,"src":"2173:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3696,"name":"uint256","nodeType":"ElementaryTypeName","src":"2173:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3699,"indexed":false,"mutability":"mutable","name":"newMinimum","nameLocation":"2201:10:19","nodeType":"VariableDeclaration","scope":3701,"src":"2193:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3698,"name":"uint256","nodeType":"ElementaryTypeName","src":"2193:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2172:40:19"},"src":"2143:70:19"},{"anonymous":false,"documentation":{"id":3702,"nodeType":"StructuredDocumentation","src":"2217:226:19","text":" @notice Event emitted when a new redeem minimum is set.\n         All units are in 1e18\n @param oldRedemptionMin The old redeem minimum value\n @param newRedemptionMin The new redeem minimum value"},"eventSelector":"fdaf6ed728cef208e62328a008209556f8281f3062b14dd08aaaa90fa1594211","id":3708,"name":"MinimumRedemptionAmountSet","nameLocation":"2452:26:19","nodeType":"EventDefinition","parameters":{"id":3707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3704,"indexed":false,"mutability":"mutable","name":"oldRedemptionMin","nameLocation":"2492:16:19","nodeType":"VariableDeclaration","scope":3708,"src":"2484:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3703,"name":"uint256","nodeType":"ElementaryTypeName","src":"2484:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3706,"indexed":false,"mutability":"mutable","name":"newRedemptionMin","nameLocation":"2522:16:19","nodeType":"VariableDeclaration","scope":3708,"src":"2514:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3705,"name":"uint256","nodeType":"ElementaryTypeName","src":"2514:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2478:64:19"},"src":"2446:97:19"},{"anonymous":false,"documentation":{"id":3709,"nodeType":"StructuredDocumentation","src":"2547:183:19","text":" @notice Event emitted when mint fee is set\n @param oldFee Old fee\n @param newFee New fee\n @dev See inheriting contract for decimals representation"},"eventSelector":"387269377ae17304805d5f88cea4252e5ca47346783c279aeb9e8627335a49ac","id":3715,"name":"MintFeeSet","nameLocation":"2739:10:19","nodeType":"EventDefinition","parameters":{"id":3714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3711,"indexed":false,"mutability":"mutable","name":"oldFee","nameLocation":"2758:6:19","nodeType":"VariableDeclaration","scope":3715,"src":"2750:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3710,"name":"uint256","nodeType":"ElementaryTypeName","src":"2750:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3713,"indexed":false,"mutability":"mutable","name":"newFee","nameLocation":"2774:6:19","nodeType":"VariableDeclaration","scope":3715,"src":"2766:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3712,"name":"uint256","nodeType":"ElementaryTypeName","src":"2766:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2749:32:19"},"src":"2733:49:19"},{"anonymous":false,"documentation":{"id":3716,"nodeType":"StructuredDocumentation","src":"2786:184:19","text":" @notice Event emitted when redeem fee is set\n @param oldFee Old fee\n @param newFee New fee\n @dev see inheriting contract for decimal representation"},"eventSelector":"2956acfe8584fb02384e06c675ee215bf10d55c3de1e6ff9b2f621e8a40c6470","id":3722,"name":"RedemptionFeeSet","nameLocation":"2979:16:19","nodeType":"EventDefinition","parameters":{"id":3721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3718,"indexed":false,"mutability":"mutable","name":"oldFee","nameLocation":"3004:6:19","nodeType":"VariableDeclaration","scope":3722,"src":"2996:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3717,"name":"uint256","nodeType":"ElementaryTypeName","src":"2996:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3720,"indexed":false,"mutability":"mutable","name":"newFee","nameLocation":"3020:6:19","nodeType":"VariableDeclaration","scope":3722,"src":"3012:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3719,"name":"uint256","nodeType":"ElementaryTypeName","src":"3012:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2995:32:19"},"src":"2973:55:19"},{"anonymous":false,"documentation":{"id":3723,"nodeType":"StructuredDocumentation","src":"3032:271:19","text":" @notice Event emitted when redemption request is submitted\n @param user         The user submitting the redemption request\n @param redemptionId The id corresponding to a given redemption\n @param rwaAmountIn  The amount of cash being burned"},"eventSelector":"80ebb30e7c30052bf403a20da869bdd033841684e93930d97c4af74238529b4f","id":3731,"name":"RedemptionRequested","nameLocation":"3312:19:19","nodeType":"EventDefinition","parameters":{"id":3730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3725,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"3353:4:19","nodeType":"VariableDeclaration","scope":3731,"src":"3337:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3724,"name":"address","nodeType":"ElementaryTypeName","src":"3337:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3727,"indexed":true,"mutability":"mutable","name":"redemptionId","nameLocation":"3379:12:19","nodeType":"VariableDeclaration","scope":3731,"src":"3363:28:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3726,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3363:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3729,"indexed":false,"mutability":"mutable","name":"rwaAmountIn","nameLocation":"3405:11:19","nodeType":"VariableDeclaration","scope":3731,"src":"3397:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3728,"name":"uint256","nodeType":"ElementaryTypeName","src":"3397:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3331:89:19"},"src":"3306:115:19"},{"anonymous":false,"documentation":{"id":3732,"nodeType":"StructuredDocumentation","src":"3425:455:19","text":" @notice Event emitted when a mint request is submitted\n @param user                      The user requesting to mint\n @param depositId                 The depositId of the request\n @param collateralAmountDeposited The total amount deposited\n @param depositAmountAfterFee     The value deposited - fee\n @param feeAmount                 The fee amount taken\n                                  (units of collateral)"},"eventSelector":"7cbce37c7b11d322316420484f40c29ce672ad3fa16752551a3dbe6ccfa04e14","id":3744,"name":"MintRequested","nameLocation":"3889:13:19","nodeType":"EventDefinition","parameters":{"id":3743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3734,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"3924:4:19","nodeType":"VariableDeclaration","scope":3744,"src":"3908:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3733,"name":"address","nodeType":"ElementaryTypeName","src":"3908:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3736,"indexed":true,"mutability":"mutable","name":"depositId","nameLocation":"3950:9:19","nodeType":"VariableDeclaration","scope":3744,"src":"3934:25:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3735,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3934:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3738,"indexed":false,"mutability":"mutable","name":"collateralAmountDeposited","nameLocation":"3973:25:19","nodeType":"VariableDeclaration","scope":3744,"src":"3965:33:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3737,"name":"uint256","nodeType":"ElementaryTypeName","src":"3965:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3740,"indexed":false,"mutability":"mutable","name":"depositAmountAfterFee","nameLocation":"4012:21:19","nodeType":"VariableDeclaration","scope":3744,"src":"4004:29:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3739,"name":"uint256","nodeType":"ElementaryTypeName","src":"4004:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3742,"indexed":false,"mutability":"mutable","name":"feeAmount","nameLocation":"4047:9:19","nodeType":"VariableDeclaration","scope":3744,"src":"4039:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3741,"name":"uint256","nodeType":"ElementaryTypeName","src":"4039:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3902:158:19"},"src":"3883:178:19"},{"anonymous":false,"documentation":{"id":3745,"nodeType":"StructuredDocumentation","src":"4065:573:19","text":" @notice Event emitted when a redemption request is completed\n @param user                     The address of the user getting the funds\n @param redemptionId             The id corresponding to a given redemption\n                                 requested\n @param rwaAmountRequested       Amount of RWA originally requested by the user\n @param collateralAmountReturned Amount of collateral received by the user\n @param price                    The price at which the redemption was\n                                 serviced at"},"eventSelector":"35908d59be205275271010c5ea7062a88a2b5fbafe268bb9070550276f0edadd","id":3757,"name":"RedemptionCompleted","nameLocation":"4647:19:19","nodeType":"EventDefinition","parameters":{"id":3756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3747,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"4688:4:19","nodeType":"VariableDeclaration","scope":3757,"src":"4672:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3746,"name":"address","nodeType":"ElementaryTypeName","src":"4672:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3749,"indexed":true,"mutability":"mutable","name":"redemptionId","nameLocation":"4714:12:19","nodeType":"VariableDeclaration","scope":3757,"src":"4698:28:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3748,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4698:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3751,"indexed":false,"mutability":"mutable","name":"rwaAmountRequested","nameLocation":"4740:18:19","nodeType":"VariableDeclaration","scope":3757,"src":"4732:26:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3750,"name":"uint256","nodeType":"ElementaryTypeName","src":"4732:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3753,"indexed":false,"mutability":"mutable","name":"collateralAmountReturned","nameLocation":"4772:24:19","nodeType":"VariableDeclaration","scope":3757,"src":"4764:32:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3752,"name":"uint256","nodeType":"ElementaryTypeName","src":"4764:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3755,"indexed":false,"mutability":"mutable","name":"price","nameLocation":"4810:5:19","nodeType":"VariableDeclaration","scope":3757,"src":"4802:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3754,"name":"uint256","nodeType":"ElementaryTypeName","src":"4802:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4666:153:19"},"src":"4641:179:19"},{"anonymous":false,"documentation":{"id":3758,"nodeType":"StructuredDocumentation","src":"4824:607:19","text":" @notice Event emitted when a Mint request is completed\n @param user                      The address of the user getting the funds\n @param depositId                 The depositId of the mint request\n @param rwaAmountOut              The amount of RWA token minted to the\n                                  user\n @param collateralAmountDeposited The amount of collateral deposited\n @param price                     The price set for the given\n                                  deposit id\n @param priceId                   The priceId used to determine price"},"eventSelector":"dd602cc9cb236502fb74f091872b4025184011dd96eee41099caa260842f2024","id":3772,"name":"MintCompleted","nameLocation":"5440:13:19","nodeType":"EventDefinition","parameters":{"id":3771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3760,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"5475:4:19","nodeType":"VariableDeclaration","scope":3772,"src":"5459:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3759,"name":"address","nodeType":"ElementaryTypeName","src":"5459:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3762,"indexed":true,"mutability":"mutable","name":"depositId","nameLocation":"5501:9:19","nodeType":"VariableDeclaration","scope":3772,"src":"5485:25:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3761,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5485:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3764,"indexed":false,"mutability":"mutable","name":"rwaAmountOut","nameLocation":"5524:12:19","nodeType":"VariableDeclaration","scope":3772,"src":"5516:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3763,"name":"uint256","nodeType":"ElementaryTypeName","src":"5516:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3766,"indexed":false,"mutability":"mutable","name":"collateralAmountDeposited","nameLocation":"5550:25:19","nodeType":"VariableDeclaration","scope":3772,"src":"5542:33:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3765,"name":"uint256","nodeType":"ElementaryTypeName","src":"5542:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3768,"indexed":false,"mutability":"mutable","name":"price","nameLocation":"5589:5:19","nodeType":"VariableDeclaration","scope":3772,"src":"5581:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3767,"name":"uint256","nodeType":"ElementaryTypeName","src":"5581:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3770,"indexed":false,"mutability":"mutable","name":"priceId","nameLocation":"5608:7:19","nodeType":"VariableDeclaration","scope":3772,"src":"5600:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3769,"name":"uint256","nodeType":"ElementaryTypeName","src":"5600:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5453:166:19"},"src":"5434:186:19"},{"anonymous":false,"documentation":{"id":3773,"nodeType":"StructuredDocumentation","src":"5624:238:19","text":" @notice Event emitted when a deposit has its corresponding priceId set\n @param depositIdSet The Deposit Id for which the price Id is being set\n @param priceIdSet   The price Id being associate with a deposit Id"},"eventSelector":"c2055184bbc2d10b90bf7df17a84f8bdda6b52377a976e41e0c1610fffafc0d7","id":3779,"name":"PriceIdSetForDeposit","nameLocation":"5871:20:19","nodeType":"EventDefinition","parameters":{"id":3778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3775,"indexed":true,"mutability":"mutable","name":"depositIdSet","nameLocation":"5913:12:19","nodeType":"VariableDeclaration","scope":3779,"src":"5897:28:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3774,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5897:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3777,"indexed":true,"mutability":"mutable","name":"priceIdSet","nameLocation":"5947:10:19","nodeType":"VariableDeclaration","scope":3779,"src":"5931:26:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3776,"name":"uint256","nodeType":"ElementaryTypeName","src":"5931:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5891:70:19"},"src":"5865:97:19"},{"anonymous":false,"documentation":{"id":3780,"nodeType":"StructuredDocumentation","src":"5966:282:19","text":" @notice Event Emitted when a redemption has its corresponding priceId set\n @param redemptionIdSet The Redemption Id for which the price Id is being\n                        set\n @param priceIdSet      The Price Id being associated with a redemption Id"},"eventSelector":"0005e86a70f400d1820ab5a0573a2be911d831ab28fe2e9448b34daab223b09c","id":3786,"name":"PriceIdSetForRedemption","nameLocation":"6257:23:19","nodeType":"EventDefinition","parameters":{"id":3785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3782,"indexed":true,"mutability":"mutable","name":"redemptionIdSet","nameLocation":"6302:15:19","nodeType":"VariableDeclaration","scope":3786,"src":"6286:31:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3781,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6286:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3784,"indexed":true,"mutability":"mutable","name":"priceIdSet","nameLocation":"6339:10:19","nodeType":"VariableDeclaration","scope":3786,"src":"6323:26:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3783,"name":"uint256","nodeType":"ElementaryTypeName","src":"6323:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6280:73:19"},"src":"6251:103:19"},{"anonymous":false,"documentation":{"id":3787,"nodeType":"StructuredDocumentation","src":"6358:197:19","text":" @notice Event emitted when a new Pricer contract is set\n @param oldPricer The address of the old pricer contract\n @param newPricer The address of the new pricer contract"},"eventSelector":"801352e72ef9b80b3992ccbedf07ab0e133e7da7aaccf0024abf23f4f32eb99a","id":3793,"name":"NewPricerSet","nameLocation":"6564:12:19","nodeType":"EventDefinition","parameters":{"id":3792,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3789,"indexed":false,"mutability":"mutable","name":"oldPricer","nameLocation":"6585:9:19","nodeType":"VariableDeclaration","scope":3793,"src":"6577:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3788,"name":"address","nodeType":"ElementaryTypeName","src":"6577:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3791,"indexed":false,"mutability":"mutable","name":"newPricer","nameLocation":"6604:9:19","nodeType":"VariableDeclaration","scope":3793,"src":"6596:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3790,"name":"address","nodeType":"ElementaryTypeName","src":"6596:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6576:38:19"},"src":"6558:57:19"},{"anonymous":false,"documentation":{"id":3794,"nodeType":"StructuredDocumentation","src":"6619:388:19","text":" @notice Event emitted when deposit proof has been added\n @param txHash                Tx hash of the deposit\n @param user                  Address of the user who made the deposit\n @param depositAmountAfterFee Amount of the deposit after fees\n @param feeAmount             Amount of fees taken\n @param timestamp             Timestamp of the deposit"},"eventSelector":"c985471d1cb1bb75da0d54fa5ab10f7171e952cefcc0bf4fc7c2546c19d1811f","id":3806,"name":"DepositProofAdded","nameLocation":"7016:17:19","nodeType":"EventDefinition","parameters":{"id":3805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3796,"indexed":true,"mutability":"mutable","name":"txHash","nameLocation":"7055:6:19","nodeType":"VariableDeclaration","scope":3806,"src":"7039:22:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3795,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7039:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3798,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"7083:4:19","nodeType":"VariableDeclaration","scope":3806,"src":"7067:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3797,"name":"address","nodeType":"ElementaryTypeName","src":"7067:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3800,"indexed":false,"mutability":"mutable","name":"depositAmountAfterFee","nameLocation":"7101:21:19","nodeType":"VariableDeclaration","scope":3806,"src":"7093:29:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3799,"name":"uint256","nodeType":"ElementaryTypeName","src":"7093:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3802,"indexed":false,"mutability":"mutable","name":"feeAmount","nameLocation":"7136:9:19","nodeType":"VariableDeclaration","scope":3806,"src":"7128:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3801,"name":"uint256","nodeType":"ElementaryTypeName","src":"7128:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3804,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"7159:9:19","nodeType":"VariableDeclaration","scope":3806,"src":"7151:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3803,"name":"uint256","nodeType":"ElementaryTypeName","src":"7151:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7033:139:19"},"src":"7010:163:19"},{"anonymous":false,"documentation":{"id":3807,"nodeType":"StructuredDocumentation","src":"7177:124:19","text":" @notice Event emitted when subscriptions are paused\n @param caller Address which initiated the pause"},"eventSelector":"cd71257f2998474633e94cfffa045014068f6218ffdca256b6f4aa9d5f15fb89","id":3811,"name":"SubscriptionPaused","nameLocation":"7310:18:19","nodeType":"EventDefinition","parameters":{"id":3810,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3809,"indexed":false,"mutability":"mutable","name":"caller","nameLocation":"7337:6:19","nodeType":"VariableDeclaration","scope":3811,"src":"7329:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3808,"name":"address","nodeType":"ElementaryTypeName","src":"7329:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7328:16:19"},"src":"7304:41:19"},{"anonymous":false,"documentation":{"id":3812,"nodeType":"StructuredDocumentation","src":"7349:122:19","text":" @notice Event emitted when redemptions are paused\n @param caller Address which initiated the pause"},"eventSelector":"71e0406677c0570b2a66b1a4feeccf5c1cba2d6729435461e27a312b15410d04","id":3816,"name":"RedemptionPaused","nameLocation":"7480:16:19","nodeType":"EventDefinition","parameters":{"id":3815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3814,"indexed":false,"mutability":"mutable","name":"caller","nameLocation":"7505:6:19","nodeType":"VariableDeclaration","scope":3816,"src":"7497:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3813,"name":"address","nodeType":"ElementaryTypeName","src":"7497:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7496:16:19"},"src":"7474:39:19"},{"anonymous":false,"documentation":{"id":3817,"nodeType":"StructuredDocumentation","src":"7517:128:19","text":" @notice Event emitted when subscriptions are unpaused\n @param caller Address which initiated the unpause"},"eventSelector":"94482ee2b195c365dbbc2d689fd5a088d2b219abe44360ba8895525c9471d66f","id":3821,"name":"SubscriptionUnpaused","nameLocation":"7654:20:19","nodeType":"EventDefinition","parameters":{"id":3820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3819,"indexed":false,"mutability":"mutable","name":"caller","nameLocation":"7683:6:19","nodeType":"VariableDeclaration","scope":3821,"src":"7675:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3818,"name":"address","nodeType":"ElementaryTypeName","src":"7675:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7674:16:19"},"src":"7648:43:19"},{"anonymous":false,"documentation":{"id":3822,"nodeType":"StructuredDocumentation","src":"7695:126:19","text":" @notice Event emitted when redemptions are unpaused\n @param caller Address which initiated the unpause"},"eventSelector":"c641b9c4afa539cedcbe2e5f3e47d9f092175b5d0b8ae72dffa634a3eb3e47e4","id":3826,"name":"RedemptionUnpaused","nameLocation":"7830:18:19","nodeType":"EventDefinition","parameters":{"id":3825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3824,"indexed":false,"mutability":"mutable","name":"caller","nameLocation":"7857:6:19","nodeType":"VariableDeclaration","scope":3826,"src":"7849:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3823,"name":"address","nodeType":"ElementaryTypeName","src":"7849:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7848:16:19"},"src":"7824:41:19"},{"anonymous":false,"eventSelector":"7e506b1f11218d4c947d5a59a97fd996c42afc2b024b6aeaec050930eb2b3399","id":3842,"name":"DepositorOverwritten","nameLocation":"7875:20:19","nodeType":"EventDefinition","parameters":{"id":3841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3828,"indexed":true,"mutability":"mutable","name":"depositId","nameLocation":"7917:9:19","nodeType":"VariableDeclaration","scope":3842,"src":"7901:25:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3827,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7901:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3830,"indexed":false,"mutability":"mutable","name":"oldDepositor","nameLocation":"7940:12:19","nodeType":"VariableDeclaration","scope":3842,"src":"7932:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3829,"name":"address","nodeType":"ElementaryTypeName","src":"7932:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3832,"indexed":false,"mutability":"mutable","name":"newDepositor","nameLocation":"7966:12:19","nodeType":"VariableDeclaration","scope":3842,"src":"7958:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3831,"name":"address","nodeType":"ElementaryTypeName","src":"7958:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3834,"indexed":false,"mutability":"mutable","name":"oldPriceId","nameLocation":"7992:10:19","nodeType":"VariableDeclaration","scope":3842,"src":"7984:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3833,"name":"uint256","nodeType":"ElementaryTypeName","src":"7984:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3836,"indexed":false,"mutability":"mutable","name":"newPriceId","nameLocation":"8016:10:19","nodeType":"VariableDeclaration","scope":3842,"src":"8008:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3835,"name":"uint256","nodeType":"ElementaryTypeName","src":"8008:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3838,"indexed":false,"mutability":"mutable","name":"oldDepositAmount","nameLocation":"8040:16:19","nodeType":"VariableDeclaration","scope":3842,"src":"8032:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3837,"name":"uint256","nodeType":"ElementaryTypeName","src":"8032:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3840,"indexed":false,"mutability":"mutable","name":"newDepositAmount","nameLocation":"8070:16:19","nodeType":"VariableDeclaration","scope":3842,"src":"8062:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3839,"name":"uint256","nodeType":"ElementaryTypeName","src":"8062:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7895:195:19"},"src":"7869:222:19"},{"anonymous":false,"eventSelector":"5a0c55c421ae3aac2379811eca16aaee32b6e64411322b624118d4219b9350a0","id":3858,"name":"RedeemerOverwritten","nameLocation":"8101:19:19","nodeType":"EventDefinition","parameters":{"id":3857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3844,"indexed":true,"mutability":"mutable","name":"redemptionId","nameLocation":"8142:12:19","nodeType":"VariableDeclaration","scope":3858,"src":"8126:28:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3843,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8126:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3846,"indexed":false,"mutability":"mutable","name":"oldRedeemer","nameLocation":"8168:11:19","nodeType":"VariableDeclaration","scope":3858,"src":"8160:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3845,"name":"address","nodeType":"ElementaryTypeName","src":"8160:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3848,"indexed":false,"mutability":"mutable","name":"newRedeemer","nameLocation":"8193:11:19","nodeType":"VariableDeclaration","scope":3858,"src":"8185:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3847,"name":"address","nodeType":"ElementaryTypeName","src":"8185:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3850,"indexed":false,"mutability":"mutable","name":"oldPriceId","nameLocation":"8218:10:19","nodeType":"VariableDeclaration","scope":3858,"src":"8210:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3849,"name":"uint256","nodeType":"ElementaryTypeName","src":"8210:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3852,"indexed":false,"mutability":"mutable","name":"newPriceId","nameLocation":"8242:10:19","nodeType":"VariableDeclaration","scope":3858,"src":"8234:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3851,"name":"uint256","nodeType":"ElementaryTypeName","src":"8234:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3854,"indexed":false,"mutability":"mutable","name":"oldRWATokenAmountBurned","nameLocation":"8266:23:19","nodeType":"VariableDeclaration","scope":3858,"src":"8258:31:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3853,"name":"uint256","nodeType":"ElementaryTypeName","src":"8258:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3856,"indexed":false,"mutability":"mutable","name":"newRWATokenAmountBurned","nameLocation":"8303:23:19","nodeType":"VariableDeclaration","scope":3858,"src":"8295:31:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3855,"name":"uint256","nodeType":"ElementaryTypeName","src":"8295:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8120:210:19"},"src":"8095:236:19"},{"documentation":{"id":3859,"nodeType":"StructuredDocumentation","src":"8335:14:19","text":"ERRORS ///"},"errorSelector":"8718c771","id":3861,"name":"PriceIdNotSet","nameLocation":"8358:13:19","nodeType":"ErrorDefinition","parameters":{"id":3860,"nodeType":"ParameterList","parameters":[],"src":"8371:2:19"},"src":"8352:22:19"},{"errorSelector":"cc6e40b3","id":3863,"name":"ArraySizeMismatch","nameLocation":"8383:17:19","nodeType":"ErrorDefinition","parameters":{"id":3862,"nodeType":"ParameterList","parameters":[],"src":"8400:2:19"},"src":"8377:26:19"},{"errorSelector":"6ba4a1c7","id":3865,"name":"DepositTooSmall","nameLocation":"8412:15:19","nodeType":"ErrorDefinition","parameters":{"id":3864,"nodeType":"ParameterList","parameters":[],"src":"8427:2:19"},"src":"8406:24:19"},{"errorSelector":"b2b7a73e","id":3867,"name":"RedemptionTooSmall","nameLocation":"8439:18:19","nodeType":"ErrorDefinition","parameters":{"id":3866,"nodeType":"ParameterList","parameters":[],"src":"8457:2:19"},"src":"8433:27:19"},{"errorSelector":"811f24a5","id":3869,"name":"TxnAlreadyValidated","nameLocation":"8469:19:19","nodeType":"ErrorDefinition","parameters":{"id":3868,"nodeType":"ParameterList","parameters":[],"src":"8488:2:19"},"src":"8463:28:19"},{"errorSelector":"a1aeceb7","id":3871,"name":"CollateralCannotBeZero","nameLocation":"8500:22:19","nodeType":"ErrorDefinition","parameters":{"id":3870,"nodeType":"ParameterList","parameters":[],"src":"8522:2:19"},"src":"8494:31:19"},{"errorSelector":"071aeb1d","id":3873,"name":"RWACannotBeZero","nameLocation":"8534:15:19","nodeType":"ErrorDefinition","parameters":{"id":3872,"nodeType":"ParameterList","parameters":[],"src":"8549:2:19"},"src":"8528:24:19"},{"errorSelector":"3b2b1d55","id":3875,"name":"AssetSenderCannotBeZero","nameLocation":"8561:23:19","nodeType":"ErrorDefinition","parameters":{"id":3874,"nodeType":"ParameterList","parameters":[],"src":"8584:2:19"},"src":"8555:32:19"},{"errorSelector":"9fb9f8aa","id":3877,"name":"FeeRecipientCannotBeZero","nameLocation":"8596:24:19","nodeType":"ErrorDefinition","parameters":{"id":3876,"nodeType":"ParameterList","parameters":[],"src":"8620:2:19"},"src":"8590:33:19"},{"errorSelector":"fc5bee12","id":3879,"name":"FeeTooLarge","nameLocation":"8632:11:19","nodeType":"ErrorDefinition","parameters":{"id":3878,"nodeType":"ParameterList","parameters":[],"src":"8643:2:19"},"src":"8626:20:19"},{"errorSelector":"c2f5625a","id":3881,"name":"AmountTooSmall","nameLocation":"8655:14:19","nodeType":"ErrorDefinition","parameters":{"id":3880,"nodeType":"ParameterList","parameters":[],"src":"8669:2:19"},"src":"8649:23:19"},{"errorSelector":"5a8a45b0","id":3883,"name":"DepositorNull","nameLocation":"8681:13:19","nodeType":"ErrorDefinition","parameters":{"id":3882,"nodeType":"ParameterList","parameters":[],"src":"8694:2:19"},"src":"8675:22:19"},{"errorSelector":"973d3aec","id":3885,"name":"RedeemerNull","nameLocation":"8706:12:19","nodeType":"ErrorDefinition","parameters":{"id":3884,"nodeType":"ParameterList","parameters":[],"src":"8718:2:19"},"src":"8700:21:19"},{"errorSelector":"6bbb3afc","id":3887,"name":"DepositProofAlreadyExists","nameLocation":"8730:25:19","nodeType":"ErrorDefinition","parameters":{"id":3886,"nodeType":"ParameterList","parameters":[],"src":"8755:2:19"},"src":"8724:34:19"},{"errorSelector":"aadfaddd","id":3889,"name":"FeaturePaused","nameLocation":"8767:13:19","nodeType":"ErrorDefinition","parameters":{"id":3888,"nodeType":"ParameterList","parameters":[],"src":"8780:2:19"},"src":"8761:22:19"},{"errorSelector":"89cf9848","id":3891,"name":"PriceIdAlreadySet","nameLocation":"8792:17:19","nodeType":"ErrorDefinition","parameters":{"id":3890,"nodeType":"ParameterList","parameters":[],"src":"8809:2:19"},"src":"8786:26:19"}],"scope":3893,"src":"57:8757:19","usedErrors":[3861,3863,3865,3867,3869,3871,3873,3875,3877,3879,3881,3883,3885,3887,3889,3891]}],"src":"32:8783:19"},"id":19},"contracts/interfaces/IRWAHubOffChainRedemptions.sol":{"ast":{"absolutePath":"contracts/interfaces/IRWAHubOffChainRedemptions.sol","exportedSymbols":{"IRWAHubOffChainRedemptions":[3941]},"id":3942,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3894,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"32:23:20"},{"abstract":false,"baseContracts":[],"canonicalName":"IRWAHubOffChainRedemptions","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3941,"linearizedBaseContracts":[3941],"name":"IRWAHubOffChainRedemptions","nameLocation":"67:26:20","nodeType":"ContractDefinition","nodes":[{"functionSelector":"f80a36d6","id":3901,"implemented":false,"kind":"function","modifiers":[],"name":"requestRedemptionServicedOffchain","nameLocation":"107:33:20","nodeType":"FunctionDefinition","parameters":{"id":3899,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3896,"mutability":"mutable","name":"amountRWATokenToRedeem","nameLocation":"154:22:20","nodeType":"VariableDeclaration","scope":3901,"src":"146:30:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3895,"name":"uint256","nodeType":"ElementaryTypeName","src":"146:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3898,"mutability":"mutable","name":"offChainDestination","nameLocation":"190:19:20","nodeType":"VariableDeclaration","scope":3901,"src":"182:27:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3897,"name":"bytes32","nodeType":"ElementaryTypeName","src":"182:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"140:73:20"},"returnParameters":{"id":3900,"nodeType":"ParameterList","parameters":[],"src":"222:0:20"},"scope":3941,"src":"98:125:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"49cbbf2a","id":3904,"implemented":false,"kind":"function","modifiers":[],"name":"pauseOffChainRedemption","nameLocation":"236:23:20","nodeType":"FunctionDefinition","parameters":{"id":3902,"nodeType":"ParameterList","parameters":[],"src":"259:2:20"},"returnParameters":{"id":3903,"nodeType":"ParameterList","parameters":[],"src":"270:0:20"},"scope":3941,"src":"227:44:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"4dfe7af2","id":3907,"implemented":false,"kind":"function","modifiers":[],"name":"unpauseOffChainRedemption","nameLocation":"284:25:20","nodeType":"FunctionDefinition","parameters":{"id":3905,"nodeType":"ParameterList","parameters":[],"src":"309:2:20"},"returnParameters":{"id":3906,"nodeType":"ParameterList","parameters":[],"src":"320:0:20"},"scope":3941,"src":"275:46:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e4107c97","id":3912,"implemented":false,"kind":"function","modifiers":[],"name":"setOffChainRedemptionMinimum","nameLocation":"334:28:20","nodeType":"FunctionDefinition","parameters":{"id":3910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3909,"mutability":"mutable","name":"minimumAmount","nameLocation":"371:13:20","nodeType":"VariableDeclaration","scope":3912,"src":"363:21:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3908,"name":"uint256","nodeType":"ElementaryTypeName","src":"363:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"362:23:20"},"returnParameters":{"id":3911,"nodeType":"ParameterList","parameters":[],"src":"394:0:20"},"scope":3941,"src":"325:70:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":{"id":3913,"nodeType":"StructuredDocumentation","src":"399:445:20","text":" @notice Event emitted when redemption request is submitted\n @param user                The user submitting the offchain redemption request\n @param redemptionId        The id corresponding to a given offchain redemption request\n @param rwaTokenAmountIn    The amount of cash being burned\n @param offChainDestination Hash of destination to which the request\n                            should be serviced to"},"eventSelector":"ad2102c6abc98f954bd5d61e6c0d19764db331f63019296309309a34f70e66a6","id":3923,"name":"RedemptionRequestedServicedOffChain","nameLocation":"853:35:20","nodeType":"EventDefinition","parameters":{"id":3922,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3915,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"910:4:20","nodeType":"VariableDeclaration","scope":3923,"src":"894:20:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3914,"name":"address","nodeType":"ElementaryTypeName","src":"894:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3917,"indexed":true,"mutability":"mutable","name":"redemptionId","nameLocation":"936:12:20","nodeType":"VariableDeclaration","scope":3923,"src":"920:28:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3916,"name":"bytes32","nodeType":"ElementaryTypeName","src":"920:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3919,"indexed":false,"mutability":"mutable","name":"rwaTokenAmountIn","nameLocation":"962:16:20","nodeType":"VariableDeclaration","scope":3923,"src":"954:24:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3918,"name":"uint256","nodeType":"ElementaryTypeName","src":"954:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3921,"indexed":false,"mutability":"mutable","name":"offChainDestination","nameLocation":"992:19:20","nodeType":"VariableDeclaration","scope":3923,"src":"984:27:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3920,"name":"bytes32","nodeType":"ElementaryTypeName","src":"984:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"888:127:20"},"src":"847:169:20"},{"anonymous":false,"documentation":{"id":3924,"nodeType":"StructuredDocumentation","src":"1020:155:20","text":" @notice Event emitted when the off chain redemption feature is\n         paused\n @param caller Address which initiated the pause"},"eventSelector":"dc41a92196ccc1ab8149c01bc68c2f506b10a7bb5cd2693c9516d176f5381ff4","id":3928,"name":"OffChainRedemptionPaused","nameLocation":"1184:24:20","nodeType":"EventDefinition","parameters":{"id":3927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3926,"indexed":false,"mutability":"mutable","name":"caller","nameLocation":"1217:6:20","nodeType":"VariableDeclaration","scope":3928,"src":"1209:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3925,"name":"address","nodeType":"ElementaryTypeName","src":"1209:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1208:16:20"},"src":"1178:47:20"},{"anonymous":false,"documentation":{"id":3929,"nodeType":"StructuredDocumentation","src":"1229:159:20","text":" @notice Event emitted when the off chain redemption feature is\n         unpaused\n @param caller Address which initiated the unpause"},"eventSelector":"53a8c40fc17c78d38e2c06aa8d2c550c1acbf7b30d087dbda289ab3dd41c235c","id":3933,"name":"OffChainRedemptionUnpaused","nameLocation":"1397:26:20","nodeType":"EventDefinition","parameters":{"id":3932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3931,"indexed":false,"mutability":"mutable","name":"caller","nameLocation":"1432:6:20","nodeType":"VariableDeclaration","scope":3933,"src":"1424:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3930,"name":"address","nodeType":"ElementaryTypeName","src":"1424:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1423:16:20"},"src":"1391:49:20"},{"anonymous":false,"documentation":{"id":3934,"nodeType":"StructuredDocumentation","src":"1444:217:20","text":" @notice Event emitted when the off chain redemption minimum is\n         updated\n @param oldMinimum the old minimum redemption amount\n @param newMinimum the new minimum redemption amount"},"eventSelector":"1071422bad736c3651d3d3b7a4eda70e84e9c85a08f21c955d79ded03bbf06bb","id":3940,"name":"OffChainRedemptionMinimumSet","nameLocation":"1670:28:20","nodeType":"EventDefinition","parameters":{"id":3939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3936,"indexed":false,"mutability":"mutable","name":"oldMinimum","nameLocation":"1707:10:20","nodeType":"VariableDeclaration","scope":3940,"src":"1699:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3935,"name":"uint256","nodeType":"ElementaryTypeName","src":"1699:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3938,"indexed":false,"mutability":"mutable","name":"newMinimum","nameLocation":"1727:10:20","nodeType":"VariableDeclaration","scope":3940,"src":"1719:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3937,"name":"uint256","nodeType":"ElementaryTypeName","src":"1719:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1698:40:20"},"src":"1664:75:20"}],"scope":3942,"src":"57:1684:20","usedErrors":[]}],"src":"32:1710:20"},"id":20},"contracts/interfaces/IRWALike.sol":{"ast":{"absolutePath":"contracts/interfaces/IRWALike.sol","exportedSymbols":{"IERC20":[2138],"IRWALike":[3966]},"id":3967,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3943,"literals":["solidity","0.8",".16"],"nodeType":"PragmaDirective","src":"32:23:21"},{"absolutePath":"contracts/external/openzeppelin/contracts/token/IERC20.sol","file":"contracts/external/openzeppelin/contracts/token/IERC20.sol","id":3944,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3967,"sourceUnit":2139,"src":"209:68:21","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3945,"name":"IERC20","nameLocations":["301:6:21"],"nodeType":"IdentifierPath","referencedDeclaration":2138,"src":"301:6:21"},"id":3946,"nodeType":"InheritanceSpecifier","src":"301:6:21"}],"canonicalName":"IRWALike","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3966,"linearizedBaseContracts":[3966,2138],"name":"IRWALike","nameLocation":"289:8:21","nodeType":"ContractDefinition","nodes":[{"functionSelector":"40c10f19","id":3953,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"321:4:21","nodeType":"FunctionDefinition","parameters":{"id":3951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3948,"mutability":"mutable","name":"to","nameLocation":"334:2:21","nodeType":"VariableDeclaration","scope":3953,"src":"326:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3947,"name":"address","nodeType":"ElementaryTypeName","src":"326:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3950,"mutability":"mutable","name":"amount","nameLocation":"346:6:21","nodeType":"VariableDeclaration","scope":3953,"src":"338:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3949,"name":"uint256","nodeType":"ElementaryTypeName","src":"338:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"325:28:21"},"returnParameters":{"id":3952,"nodeType":"ParameterList","parameters":[],"src":"362:0:21"},"scope":3966,"src":"312:51:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"42966c68","id":3958,"implemented":false,"kind":"function","modifiers":[],"name":"burn","nameLocation":"376:4:21","nodeType":"FunctionDefinition","parameters":{"id":3956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3955,"mutability":"mutable","name":"amount","nameLocation":"389:6:21","nodeType":"VariableDeclaration","scope":3958,"src":"381:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3954,"name":"uint256","nodeType":"ElementaryTypeName","src":"381:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"380:16:21"},"returnParameters":{"id":3957,"nodeType":"ParameterList","parameters":[],"src":"405:0:21"},"scope":3966,"src":"367:39:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"79cc6790","id":3965,"implemented":false,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"419:8:21","nodeType":"FunctionDefinition","parameters":{"id":3963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3960,"mutability":"mutable","name":"from","nameLocation":"436:4:21","nodeType":"VariableDeclaration","scope":3965,"src":"428:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3959,"name":"address","nodeType":"ElementaryTypeName","src":"428:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3962,"mutability":"mutable","name":"amount","nameLocation":"450:6:21","nodeType":"VariableDeclaration","scope":3965,"src":"442:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3961,"name":"uint256","nodeType":"ElementaryTypeName","src":"442:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"427:30:21"},"returnParameters":{"id":3964,"nodeType":"ParameterList","parameters":[],"src":"466:0:21"},"scope":3966,"src":"410:57:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3967,"src":"279:190:21","usedErrors":[]}],"src":"32:438:21"},"id":21}},"contracts":{"contracts/RWAHub.sol":{"RWAHub":{"abi":[{"inputs":[],"name":"AmountTooSmall","type":"error"},{"inputs":[],"name":"ArraySizeMismatch","type":"error"},{"inputs":[],"name":"AssetSenderCannotBeZero","type":"error"},{"inputs":[],"name":"CollateralCannotBeZero","type":"error"},{"inputs":[],"name":"DepositProofAlreadyExists","type":"error"},{"inputs":[],"name":"DepositTooSmall","type":"error"},{"inputs":[],"name":"DepositorNull","type":"error"},{"inputs":[],"name":"FeaturePaused","type":"error"},{"inputs":[],"name":"FeeRecipientCannotBeZero","type":"error"},{"inputs":[],"name":"FeeTooLarge","type":"error"},{"inputs":[],"name":"PriceIdAlreadySet","type":"error"},{"inputs":[],"name":"PriceIdNotSet","type":"error"},{"inputs":[],"name":"RWACannotBeZero","type":"error"},{"inputs":[],"name":"RedeemerNull","type":"error"},{"inputs":[],"name":"RedemptionTooSmall","type":"error"},{"inputs":[],"name":"TxnAlreadyValidated","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oldAssetSender","type":"address"},{"indexed":false,"internalType":"address","name":"newAssetSender","type":"address"}],"name":"AssetSenderSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"txHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"depositAmountAfterFee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"feeAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"DepositProofAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"depositId","type":"bytes32"},{"indexed":false,"internalType":"address","name":"oldDepositor","type":"address"},{"indexed":false,"internalType":"address","name":"newDepositor","type":"address"},{"indexed":false,"internalType":"uint256","name":"oldPriceId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newPriceId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"oldDepositAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDepositAmount","type":"uint256"}],"name":"DepositorOverwritten","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oldFeeRecipient","type":"address"},{"indexed":false,"internalType":"address","name":"newFeeRecipient","type":"address"}],"name":"FeeRecipientSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldMinimum","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newMinimum","type":"uint256"}],"name":"MinimumDepositAmountSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldRedemptionMin","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newRedemptionMin","type":"uint256"}],"name":"MinimumRedemptionAmountSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"bytes32","name":"depositId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"rwaAmountOut","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"collateralAmountDeposited","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"priceId","type":"uint256"}],"name":"MintCompleted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldFee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newFee","type":"uint256"}],"name":"MintFeeSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"bytes32","name":"depositId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"collateralAmountDeposited","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"depositAmountAfterFee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"feeAmount","type":"uint256"}],"name":"MintRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oldPricer","type":"address"},{"indexed":false,"internalType":"address","name":"newPricer","type":"address"}],"name":"NewPricerSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"depositIdSet","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"priceIdSet","type":"uint256"}],"name":"PriceIdSetForDeposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"redemptionIdSet","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"priceIdSet","type":"uint256"}],"name":"PriceIdSetForRedemption","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"redemptionId","type":"bytes32"},{"indexed":false,"internalType":"address","name":"oldRedeemer","type":"address"},{"indexed":false,"internalType":"address","name":"newRedeemer","type":"address"},{"indexed":false,"internalType":"uint256","name":"oldPriceId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newPriceId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"oldRWATokenAmountBurned","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newRWATokenAmountBurned","type":"uint256"}],"name":"RedeemerOverwritten","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"bytes32","name":"redemptionId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"rwaAmountRequested","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"collateralAmountReturned","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"}],"name":"RedemptionCompleted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldFee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newFee","type":"uint256"}],"name":"RedemptionFeeSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"RedemptionPaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"bytes32","name":"redemptionId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"rwaAmountIn","type":"uint256"}],"name":"RedemptionRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"RedemptionUnpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"SubscriptionPaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"SubscriptionUnpaused","type":"event"},{"inputs":[],"name":"BPS_DENOMINATOR","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MANAGER_ADMIN","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PAUSER_ADMIN","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PRICE_ID_SETTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"RELAYER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"txHash","type":"bytes32"},{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"depositAmountAfterFee","type":"uint256"},{"internalType":"uint256","name":"feeAmount","type":"uint256"},{"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"addProof","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"assetRecipient","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"assetSender","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"depositIds","type":"bytes32[]"}],"name":"claimMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"redemptionIds","type":"bytes32[]"}],"name":"claimRedemption","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"collateral","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimalsMultiplier","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"depositIdToDepositor","outputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"amountDepositedMinusFees","type":"uint256"},{"internalType":"uint256","name":"priceId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeRecipient","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minimumDepositAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minimumRedemptionAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"mintFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"depositIdToOverwrite","type":"bytes32"},{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"depositAmountAfterFee","type":"uint256"},{"internalType":"uint256","name":"priceId","type":"uint256"}],"name":"overwriteDepositor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"redemptionIdToOverwrite","type":"bytes32"},{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"rwaTokenAmountBurned","type":"uint256"},{"internalType":"uint256","name":"priceId","type":"uint256"}],"name":"overwriteRedeemer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pauseRedemption","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pauseSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pricer","outputs":[{"internalType":"contract IPricerReader","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"redemptionFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"redemptionIdToRedeemer","outputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"amountRwaTokenBurned","type":"uint256"},{"internalType":"uint256","name":"priceId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"redemptionPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"redemptionRequestCounter","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"requestRedemption","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"requestSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rwa","outputs":[{"internalType":"contract IRWALike","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newAssetSender","type":"address"}],"name":"setAssetSender","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newFeeRecipient","type":"address"}],"name":"setFeeRecipient","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"minDepositAmount","type":"uint256"}],"name":"setMinimumDepositAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_minimumRedemptionAmount","type":"uint256"}],"name":"setMinimumRedemptionAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_mintFee","type":"uint256"}],"name":"setMintFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"depositIds","type":"bytes32[]"},{"internalType":"uint256[]","name":"priceIds","type":"uint256[]"}],"name":"setPriceIdForDeposits","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"redemptionIds","type":"bytes32[]"},{"internalType":"uint256[]","name":"priceIds","type":"uint256[]"}],"name":"setPriceIdForRedemptions","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newPricer","type":"address"}],"name":"setPricer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_redemptionFee","type":"uint256"}],"name":"setRedemptionFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"subscriptionPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"subscriptionRequestCounter","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpauseRedemption","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpauseSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"addProof(bytes32,address,uint256,uint256,uint256)":{"details":"txHash is used as the depositId in storageAll amounts are in decimals of `collateral`","params":{"depositAmountAfterFee":"The amount of the deposit after fees","feeAmount":"The amount of the fees taken","timestamp":"The timestamp of the deposit","txHash":"The transaction hash of the deposit","user":"The address of the user who made the deposit"}},"claimMint(bytes32[])":{"details":"Implicitly does all transfer checks present in underlying `rwa`The priceId corresponding to a given depositId must be set prior to      claiming a mint","params":{"depositIds":"An array containing the deposit Ids one wishes to claim"}},"claimRedemption(bytes32[])":{"details":"Implicitly does all checks present in underlying `rwa`The price Id corresponding to a redemptionId must be set prior to      claiming a redemption","params":{"redemptionIds":"an Array of redemption Id's which ought to fulfilled"}},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"overwriteDepositor(bytes32,address,uint256,uint256)":{"params":{"depositAmountAfterFee":"The deposit value for the new entry","depositIdToOverwrite":"The depositId of the entry we wish to                              overwrite","priceId":"The priceId to be associated with the new                              entry","user":"The user for the new entry"}},"overwriteRedeemer(bytes32,address,uint256,uint256)":{"params":{"priceId":"The priceID to be associated with the new                                entry","redemptionIdToOverwrite":"The redemptionId of the entry we wish to                                overwrite","rwaTokenAmountBurned":"The burn amount for the new entry","user":"The user for the new entry"}},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"requestRedemption(uint256)":{"params":{"amount":"The amount (in units of `rwa`) that a user wishes to redeem               from the fund"}},"requestSubscription(uint256)":{"params":{"amount":"The amount of collateral one wished to deposit"}},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."},"setAssetSender(address)":{"params":{"newAssetSender":"The address of the new `assetSender`"}},"setFeeRecipient(address)":{"params":{"newFeeRecipient":"The address of the new `feeRecipient`"}},"setMinimumDepositAmount(uint256)":{"params":{"minDepositAmount":"The minimum amount required to submit a deposit                         request"}},"setMinimumRedemptionAmount(uint256)":{"params":{"_minimumRedemptionAmount":"The minimum amount required to submit a                                 redemption request"}},"setMintFee(uint256)":{"details":"The maximum fee that can be set is 10_000 bps, or 100%","params":{"_mintFee":"The new mint fee specified in basis points"}},"setPriceIdForDeposits(bytes32[],uint256[])":{"details":"Array size must match","params":{"depositIds":"an Array of deposit Ids to be associated","priceIds":"an Array of price Ids to be associated"}},"setPriceIdForRedemptions(bytes32[],uint256[])":{"params":{"priceIds":"an Array of priceIds to associate","redemptionIds":"an Array of redemptionIds to associate"}},"setPricer(address)":{"params":{"newPricer":"The address of the new pricer contract"}},"setRedemptionFee(uint256)":{"details":"The maximum fee that can be set is 10_000 bps, or 100%","params":{"_redemptionFee":"The new redeem fee specified in basis points"}},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"MANAGER_ADMIN":{"details":"Role based access control roles"},"minimumDepositAmount":{"details":"Mint/Redeem Parameters"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"BPS_DENOMINATOR()":"e1a45218","DEFAULT_ADMIN_ROLE()":"a217fddf","MANAGER_ADMIN()":"078a6be8","PAUSER_ADMIN()":"85c4e79e","PRICE_ID_SETTER_ROLE()":"bcc70283","RELAYER_ROLE()":"926d7d7f","addProof(bytes32,address,uint256,uint256,uint256)":"2b5eceff","assetRecipient()":"3bfa67fe","assetSender()":"ee75d7d4","claimMint(bytes32[])":"4565e9ff","claimRedemption(bytes32[])":"244f5acf","collateral()":"d8dfeb45","decimalsMultiplier()":"bb13245f","depositIdToDepositor(bytes32)":"5d591d68","feeRecipient()":"46904840","getRoleAdmin(bytes32)":"248a9ca3","getRoleMember(bytes32,uint256)":"9010d07c","getRoleMemberCount(bytes32)":"ca15c873","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","minimumDepositAmount()":"080c279a","minimumRedemptionAmount()":"e0f486ef","mintFee()":"13966db5","overwriteDepositor(bytes32,address,uint256,uint256)":"de6afa82","overwriteRedeemer(bytes32,address,uint256,uint256)":"258492cd","pauseRedemption()":"92bccb80","pauseSubscription()":"2056aa12","pricer()":"a6138ed9","redemptionFee()":"458f5815","redemptionIdToRedeemer(bytes32)":"38fed708","redemptionPaused()":"73a95ddd","redemptionRequestCounter()":"354181f3","renounceRole(bytes32,address)":"36568abe","requestRedemption(uint256)":"eeb3c910","requestSubscription(uint256)":"d592d815","revokeRole(bytes32,address)":"d547741f","rwa()":"95e4b251","setAssetSender(address)":"525decd6","setFeeRecipient(address)":"e74b981b","setMinimumDepositAmount(uint256)":"aab483d6","setMinimumRedemptionAmount(uint256)":"4ef1ccd1","setMintFee(uint256)":"eddd0d9c","setPriceIdForDeposits(bytes32[],uint256[])":"87e2d06e","setPriceIdForRedemptions(bytes32[],uint256[])":"aa85c1df","setPricer(address)":"29390370","setRedemptionFee(uint256)":"7dbc1df0","subscriptionPaused()":"cd4d0bcf","subscriptionRequestCounter()":"07bda1bb","supportsInterface(bytes4)":"01ffc9a7","unpauseRedemption()":"8d044c06","unpauseSubscription()":"837018fa"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AmountTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArraySizeMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AssetSenderCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollateralCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositProofAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositorNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeaturePaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeRecipientCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceIdAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceIdNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RWACannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemerNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedemptionTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TxnAlreadyValidated\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAssetSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAssetSender\",\"type\":\"address\"}],\"name\":\"AssetSenderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmountAfterFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DepositProofAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"depositId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDepositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDepositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPriceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPriceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDepositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDepositAmount\",\"type\":\"uint256\"}],\"name\":\"DepositorOverwritten\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldFeeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinimum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimum\",\"type\":\"uint256\"}],\"name\":\"MinimumDepositAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRedemptionMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRedemptionMin\",\"type\":\"uint256\"}],\"name\":\"MinimumRedemptionAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"depositId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rwaAmountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmountDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"}],\"name\":\"MintCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"MintFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"depositId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmountDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmountAfterFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"MintRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPricer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPricer\",\"type\":\"address\"}],\"name\":\"NewPricerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"depositIdSet\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceIdSet\",\"type\":\"uint256\"}],\"name\":\"PriceIdSetForDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"redemptionIdSet\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceIdSet\",\"type\":\"uint256\"}],\"name\":\"PriceIdSetForRedemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"redemptionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRedeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRedeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPriceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPriceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRWATokenAmountBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRWATokenAmountBurned\",\"type\":\"uint256\"}],\"name\":\"RedeemerOverwritten\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"redemptionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rwaAmountRequested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmountReturned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"RedemptionCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"RedemptionFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RedemptionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"redemptionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rwaAmountIn\",\"type\":\"uint256\"}],\"name\":\"RedemptionRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RedemptionUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SubscriptionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SubscriptionUnpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BPS_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_ID_SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmountAfterFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"addProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"depositIds\",\"type\":\"bytes32[]\"}],\"name\":\"claimMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"redemptionIds\",\"type\":\"bytes32[]\"}],\"name\":\"claimRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalsMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"depositIdToDepositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountDepositedMinusFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumRedemptionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"depositIdToOverwrite\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmountAfterFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"}],\"name\":\"overwriteDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"redemptionIdToOverwrite\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rwaTokenAmountBurned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"}],\"name\":\"overwriteRedeemer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricer\",\"outputs\":[{\"internalType\":\"contract IPricerReader\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"redemptionIdToRedeemer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountRwaTokenBurned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionRequestCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rwa\",\"outputs\":[{\"internalType\":\"contract IRWALike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAssetSender\",\"type\":\"address\"}],\"name\":\"setAssetSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minDepositAmount\",\"type\":\"uint256\"}],\"name\":\"setMinimumDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumRedemptionAmount\",\"type\":\"uint256\"}],\"name\":\"setMinimumRedemptionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintFee\",\"type\":\"uint256\"}],\"name\":\"setMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"depositIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"priceIds\",\"type\":\"uint256[]\"}],\"name\":\"setPriceIdForDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"redemptionIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"priceIds\",\"type\":\"uint256[]\"}],\"name\":\"setPriceIdForRedemptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPricer\",\"type\":\"address\"}],\"name\":\"setPricer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redemptionFee\",\"type\":\"uint256\"}],\"name\":\"setRedemptionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionRequestCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addProof(bytes32,address,uint256,uint256,uint256)\":{\"details\":\"txHash is used as the depositId in storageAll amounts are in decimals of `collateral`\",\"params\":{\"depositAmountAfterFee\":\"The amount of the deposit after fees\",\"feeAmount\":\"The amount of the fees taken\",\"timestamp\":\"The timestamp of the deposit\",\"txHash\":\"The transaction hash of the deposit\",\"user\":\"The address of the user who made the deposit\"}},\"claimMint(bytes32[])\":{\"details\":\"Implicitly does all transfer checks present in underlying `rwa`The priceId corresponding to a given depositId must be set prior to      claiming a mint\",\"params\":{\"depositIds\":\"An array containing the deposit Ids one wishes to claim\"}},\"claimRedemption(bytes32[])\":{\"details\":\"Implicitly does all checks present in underlying `rwa`The price Id corresponding to a redemptionId must be set prior to      claiming a redemption\",\"params\":{\"redemptionIds\":\"an Array of redemption Id's which ought to fulfilled\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"overwriteDepositor(bytes32,address,uint256,uint256)\":{\"params\":{\"depositAmountAfterFee\":\"The deposit value for the new entry\",\"depositIdToOverwrite\":\"The depositId of the entry we wish to                              overwrite\",\"priceId\":\"The priceId to be associated with the new                              entry\",\"user\":\"The user for the new entry\"}},\"overwriteRedeemer(bytes32,address,uint256,uint256)\":{\"params\":{\"priceId\":\"The priceID to be associated with the new                                entry\",\"redemptionIdToOverwrite\":\"The redemptionId of the entry we wish to                                overwrite\",\"rwaTokenAmountBurned\":\"The burn amount for the new entry\",\"user\":\"The user for the new entry\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"requestRedemption(uint256)\":{\"params\":{\"amount\":\"The amount (in units of `rwa`) that a user wishes to redeem               from the fund\"}},\"requestSubscription(uint256)\":{\"params\":{\"amount\":\"The amount of collateral one wished to deposit\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setAssetSender(address)\":{\"params\":{\"newAssetSender\":\"The address of the new `assetSender`\"}},\"setFeeRecipient(address)\":{\"params\":{\"newFeeRecipient\":\"The address of the new `feeRecipient`\"}},\"setMinimumDepositAmount(uint256)\":{\"params\":{\"minDepositAmount\":\"The minimum amount required to submit a deposit                         request\"}},\"setMinimumRedemptionAmount(uint256)\":{\"params\":{\"_minimumRedemptionAmount\":\"The minimum amount required to submit a                                 redemption request\"}},\"setMintFee(uint256)\":{\"details\":\"The maximum fee that can be set is 10_000 bps, or 100%\",\"params\":{\"_mintFee\":\"The new mint fee specified in basis points\"}},\"setPriceIdForDeposits(bytes32[],uint256[])\":{\"details\":\"Array size must match\",\"params\":{\"depositIds\":\"an Array of deposit Ids to be associated\",\"priceIds\":\"an Array of price Ids to be associated\"}},\"setPriceIdForRedemptions(bytes32[],uint256[])\":{\"params\":{\"priceIds\":\"an Array of priceIds to associate\",\"redemptionIds\":\"an Array of redemptionIds to associate\"}},\"setPricer(address)\":{\"params\":{\"newPricer\":\"The address of the new pricer contract\"}},\"setRedemptionFee(uint256)\":{\"details\":\"The maximum fee that can be set is 10_000 bps, or 100%\",\"params\":{\"_redemptionFee\":\"The new redeem fee specified in basis points\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"MANAGER_ADMIN\":{\"details\":\"Role based access control roles\"},\"minimumDepositAmount\":{\"details\":\"Mint/Redeem Parameters\"}},\"version\":1},\"userdoc\":{\"errors\":{\"PriceIdNotSet()\":[{\"notice\":\"ERRORS ///\"}]},\"events\":{\"AssetSenderSet(address,address)\":{\"notice\":\"Event emitted when the assetSender is changed\"},\"DepositProofAdded(bytes32,address,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when deposit proof has been added\"},\"FeeRecipientSet(address,address)\":{\"notice\":\"Event emitted when fee recipient is set\"},\"MinimumDepositAmountSet(uint256,uint256)\":{\"notice\":\"Event emitted when minimum deposit amount is set\"},\"MinimumRedemptionAmountSet(uint256,uint256)\":{\"notice\":\"Event emitted when a new redeem minimum is set.         All units are in 1e18\"},\"MintCompleted(address,bytes32,uint256,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a Mint request is completed\"},\"MintFeeSet(uint256,uint256)\":{\"notice\":\"Event emitted when mint fee is set\"},\"MintRequested(address,bytes32,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a mint request is submitted\"},\"NewPricerSet(address,address)\":{\"notice\":\"Event emitted when a new Pricer contract is set\"},\"PriceIdSetForDeposit(bytes32,uint256)\":{\"notice\":\"Event emitted when a deposit has its corresponding priceId set\"},\"PriceIdSetForRedemption(bytes32,uint256)\":{\"notice\":\"Event Emitted when a redemption has its corresponding priceId set\"},\"RedemptionCompleted(address,bytes32,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a redemption request is completed\"},\"RedemptionFeeSet(uint256,uint256)\":{\"notice\":\"Event emitted when redeem fee is set\"},\"RedemptionPaused(address)\":{\"notice\":\"Event emitted when redemptions are paused\"},\"RedemptionRequested(address,bytes32,uint256)\":{\"notice\":\"Event emitted when redemption request is submitted\"},\"RedemptionUnpaused(address)\":{\"notice\":\"Event emitted when redemptions are unpaused\"},\"SubscriptionPaused(address)\":{\"notice\":\"Event emitted when subscriptions are paused\"},\"SubscriptionUnpaused(address)\":{\"notice\":\"Event emitted when subscriptions are unpaused\"}},\"kind\":\"user\",\"methods\":{\"addProof(bytes32,address,uint256,uint256,uint256)\":{\"notice\":\"Adds a deposit proof to the contract\"},\"claimMint(bytes32[])\":{\"notice\":\"Function used to claim tokens corresponding to a deposit request\"},\"claimRedemption(bytes32[])\":{\"notice\":\"Function to claim collateral corresponding to a redemption request\"},\"constructor\":{\"notice\":\"constructor\"},\"overwriteDepositor(bytes32,address,uint256,uint256)\":{\"notice\":\"Admin function to overwrite entries in the depoitIdToDepositor         mapping\"},\"overwriteRedeemer(bytes32,address,uint256,uint256)\":{\"notice\":\"Admin function to overwrite entries in the redemptionIdToRedeemer         mapping\"},\"pauseRedemption()\":{\"notice\":\"Function to pause redemptions to RWAHub\"},\"pauseSubscription()\":{\"notice\":\"Function to pause subscription to RWAHub\"},\"requestRedemption(uint256)\":{\"notice\":\"Function used by users to request a redemption from the fund\"},\"requestSubscription(uint256)\":{\"notice\":\"Function used by users to request subscription to the fund\"},\"setAssetSender(address)\":{\"notice\":\"Admin function to set the address of `assetSender`\"},\"setFeeRecipient(address)\":{\"notice\":\"Admin function to set the address of `feeRecipient`\"},\"setMinimumDepositAmount(uint256)\":{\"notice\":\"Admin function to set the minimum amount required for a deposit\"},\"setMinimumRedemptionAmount(uint256)\":{\"notice\":\"Admin function to set the minimum amount to redeem\"},\"setMintFee(uint256)\":{\"notice\":\"Admin function to set the mint fee\"},\"setPriceIdForDeposits(bytes32[],uint256[])\":{\"notice\":\"Admin function to associate a depositId with a given Price Id\"},\"setPriceIdForRedemptions(bytes32[],uint256[])\":{\"notice\":\"Admin function to associate redemptionId with a given priceId\"},\"setPricer(address)\":{\"notice\":\"Admin function to set the address of the Pricer contract\"},\"setRedemptionFee(uint256)\":{\"notice\":\"Admin function to set the redeem fee\"},\"unpauseRedemption()\":{\"notice\":\"Function to unpause redemptions to RWAHub\"},\"unpauseSubscription()\":{\"notice\":\"Function to unpause subscriptions to RWAHub\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RWAHub.sol\":\"RWAHub\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/RWAHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"contracts/interfaces/IPricerReader.sol\\\";\\nimport \\\"contracts/interfaces/IRWALike.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/token/IERC20.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/token/SafeERC20.sol\\\";\\nimport \\\"contracts/interfaces/IRWAHub.sol\\\";\\n\\n// Additional Dependencies\\nimport \\\"contracts/external/openzeppelin/contracts/token/IERC20Metadata.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nabstract contract RWAHub is IRWAHub, ReentrancyGuard, AccessControlEnumerable {\\n  using SafeERC20 for IERC20;\\n  // RWA Token contract\\n  IRWALike public immutable rwa;\\n  // Pointer to Pricer\\n  IPricerReader public pricer;\\n  // Address to receive deposits\\n  address public constant assetRecipient =\\n    0x0686b3a7B9bE2751bB51084a6E0E7DB7f1746eb1; // ABBY - CB Deposit Address\\n  // Address to send redemptions\\n  address public assetSender;\\n  // Address fee recipient\\n  address public feeRecipient;\\n  // Mapping from deposit Id -> Depositor\\n  mapping(bytes32 => Depositor) public depositIdToDepositor;\\n  // Mapping from redemptionId -> Redeemer\\n  mapping(bytes32 => Redeemer) public redemptionIdToRedeemer;\\n\\n  /// @dev Mint/Redeem Parameters\\n  // Minimum amount that must be deposited to mint the RWA token\\n  // Denoted in decimals of `collateral`\\n  uint256 public minimumDepositAmount;\\n\\n  // Minimum amount that must be redeemed for a withdraw request\\n  uint256 public minimumRedemptionAmount;\\n\\n  // Minting fee specified in basis points\\n  uint256 public mintFee = 0;\\n\\n  // Redemption fee specified in basis points\\n  uint256 public redemptionFee = 0;\\n\\n  // The asset accepted by the RWAHub\\n  IERC20 public immutable collateral;\\n\\n  // Decimal multiplier representing the difference between `rwa` decimals\\n  // In `collateral` token decimals\\n  uint256 public immutable decimalsMultiplier;\\n\\n  // Deposit counter to map subscription requests to\\n  uint256 public subscriptionRequestCounter = 1;\\n\\n  // Redemption Id to map from\\n  uint256 public redemptionRequestCounter = 1;\\n\\n  // Helper constant that allows us to specify basis points in calculations\\n  uint256 public constant BPS_DENOMINATOR = 10_000;\\n\\n  // Pause variables\\n  bool public redemptionPaused;\\n  bool public subscriptionPaused;\\n\\n  /// @dev Role based access control roles\\n  bytes32 public constant MANAGER_ADMIN = keccak256(\\\"MANAGER_ADMIN\\\");\\n  bytes32 public constant PAUSER_ADMIN = keccak256(\\\"PAUSER_ADMIN\\\");\\n  bytes32 public constant PRICE_ID_SETTER_ROLE =\\n    keccak256(\\\"PRICE_ID_SETTER_ROLE\\\");\\n  bytes32 public constant RELAYER_ROLE = keccak256(\\\"RELAYER_ROLE\\\");\\n\\n  /// @notice constructor\\n  constructor(\\n    address _collateral,\\n    address _rwa,\\n    address managerAdmin,\\n    address pauser,\\n    address _assetSender,\\n    address _feeRecipient,\\n    uint256 _minimumDepositAmount,\\n    uint256 _minimumRedemptionAmount\\n  ) {\\n    if (_collateral == address(0)) {\\n      revert CollateralCannotBeZero();\\n    }\\n    if (_rwa == address(0)) {\\n      revert RWACannotBeZero();\\n    }\\n    if (_assetSender == address(0)) {\\n      revert AssetSenderCannotBeZero();\\n    }\\n    if (_feeRecipient == address(0)) {\\n      revert FeeRecipientCannotBeZero();\\n    }\\n\\n    _grantRole(DEFAULT_ADMIN_ROLE, managerAdmin);\\n    _grantRole(MANAGER_ADMIN, managerAdmin);\\n    _grantRole(PAUSER_ADMIN, pauser);\\n    _grantRole(PRICE_ID_SETTER_ROLE, managerAdmin);\\n    _grantRole(keccak256(\\\"TIMESTAMP_SETTER_ROLE\\\"), managerAdmin);\\n    \\n    _setRoleAdmin(PAUSER_ADMIN, MANAGER_ADMIN);\\n    _setRoleAdmin(PRICE_ID_SETTER_ROLE, MANAGER_ADMIN);\\n    _setRoleAdmin(RELAYER_ROLE, MANAGER_ADMIN);\\n\\n    collateral = IERC20(_collateral);\\n    rwa = IRWALike(_rwa);\\n    feeRecipient = _feeRecipient;\\n    assetSender = _assetSender;\\n    minimumDepositAmount = _minimumDepositAmount;\\n    minimumRedemptionAmount = _minimumRedemptionAmount;\\n\\n    decimalsMultiplier =\\n      10 **\\n        (IERC20Metadata(_rwa).decimals() -\\n          IERC20Metadata(_collateral).decimals());\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                  Subscription/Redemption Functions\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Function used by users to request subscription to the fund\\n   *\\n   * @param amount The amount of collateral one wished to deposit\\n   */\\n  function requestSubscription(\\n    uint256 amount\\n  )\\n    external\\n    virtual\\n    nonReentrant\\n    ifNotPaused(subscriptionPaused)\\n  {\\n    if (amount < minimumDepositAmount) {\\n      revert DepositTooSmall();\\n    }\\n\\n    uint256 feesInCollateral = _getMintFees(amount);\\n    uint256 depositAmountAfterFee = amount - feesInCollateral;\\n\\n    // Link the depositor to their deposit ID\\n    bytes32 depositId = bytes32(subscriptionRequestCounter++);\\n    depositIdToDepositor[depositId] = Depositor(\\n      msg.sender,\\n      depositAmountAfterFee,\\n      0\\n    );\\n\\n    if (feesInCollateral > 0) {\\n      collateral.safeTransferFrom(msg.sender, feeRecipient, feesInCollateral);\\n    }\\n\\n    collateral.safeTransferFrom(\\n      msg.sender,\\n      assetRecipient,\\n      depositAmountAfterFee\\n    );\\n\\n    emit MintRequested(\\n      msg.sender,\\n      depositId,\\n      amount,\\n      depositAmountAfterFee,\\n      feesInCollateral\\n    );\\n  }\\n\\n  /**\\n   * @notice Function used to claim tokens corresponding to a deposit request\\n   *\\n   * @param depositIds An array containing the deposit Ids one wishes to claim\\n   *\\n   * @dev Implicitly does all transfer checks present in underlying `rwa`\\n   * @dev The priceId corresponding to a given depositId must be set prior to\\n   *      claiming a mint\\n   */\\n  function claimMint(\\n    bytes32[] calldata depositIds\\n  ) external virtual nonReentrant ifNotPaused(subscriptionPaused) {\\n    uint256 depositsSize = depositIds.length;\\n    for (uint256 i = 0; i < depositsSize; ++i) {\\n      _claimMint(depositIds[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Internal claim mint helper\\n   *\\n   * @dev This function can be overriden to implement custom claiming logic\\n   */\\n  function _claimMint(bytes32 depositId) internal virtual {\\n    Depositor memory depositor = depositIdToDepositor[depositId];\\n    // Revert if priceId is not set\\n    if (depositor.priceId == 0) {\\n      revert PriceIdNotSet();\\n    }\\n\\n    uint256 price = pricer.getPrice(depositor.priceId);\\n    uint256 rwaOwed = _getMintAmountForPrice(\\n      depositor.amountDepositedMinusFees,\\n      price\\n    );\\n\\n    delete depositIdToDepositor[depositId];\\n    rwa.mint(depositor.user, rwaOwed);\\n\\n    emit MintCompleted(\\n      depositor.user,\\n      depositId,\\n      rwaOwed,\\n      depositor.amountDepositedMinusFees,\\n      price,\\n      depositor.priceId\\n    );\\n  }\\n\\n  /**\\n   * @notice Function used by users to request a redemption from the fund\\n   *\\n   * @param amount The amount (in units of `rwa`) that a user wishes to redeem\\n   *               from the fund\\n   */\\n  function requestRedemption(\\n    uint256 amount\\n  ) external virtual nonReentrant ifNotPaused(redemptionPaused) {\\n    if (amount < minimumRedemptionAmount) {\\n      revert RedemptionTooSmall();\\n    }\\n    bytes32 redemptionId = bytes32(redemptionRequestCounter++);\\n    redemptionIdToRedeemer[redemptionId] = Redeemer(msg.sender, amount, 0);\\n\\n    rwa.burnFrom(msg.sender, amount);\\n\\n    emit RedemptionRequested(msg.sender, redemptionId, amount);\\n  }\\n\\n  /**\\n   * @notice Function to claim collateral corresponding to a redemption request\\n   *\\n   * @param redemptionIds an Array of redemption Id's which ought to fulfilled\\n   *\\n   * @dev Implicitly does all checks present in underlying `rwa`\\n   * @dev The price Id corresponding to a redemptionId must be set prior to\\n   *      claiming a redemption\\n   */\\n  function claimRedemption(\\n    bytes32[] calldata redemptionIds\\n  ) external virtual nonReentrant ifNotPaused(redemptionPaused) {\\n    uint256 fees;\\n    uint256 redemptionsSize = redemptionIds.length;\\n    // for (uint256 i = 0; i < redemptionsSize; ++i) {\\n    //   Redeemer memory member = redemptionIdToRedeemer[redemptionIds[i]];\\n    //   //_checkRestrictions(member.user);\\n    //   if (member.priceId == 0) {\\n    //     // Then the price for this redemption has not been set\\n    //     revert PriceIdNotSet();\\n    //   }\\n\\n    //   // Calculate collateral due and fees\\n    //   uint256 price = pricer.getPrice(member.priceId);\\n    //   uint256 collateralDue = _getRedemptionAmountForRwa(\\n    //     member.amountRwaTokenBurned,\\n    //     price\\n    //   );\\n    //   uint256 fee = _getRedemptionFees(collateralDue);\\n    //   uint256 collateralDuePostFees = collateralDue - fee;\\n    //   fees += fee;\\n\\n    //   delete redemptionIdToRedeemer[redemptionIds[i]];\\n\\n    //   collateral.safeTransferFrom(\\n    //     assetSender,\\n    //     member.user,\\n    //     collateralDuePostFees\\n    //   );\\n\\n    //   emit RedemptionCompleted(\\n    //     member.user,\\n    //     redemptionIds[i],\\n    //     member.amountRwaTokenBurned,\\n    //     collateralDuePostFees,\\n    //     price\\n    //   );\\n    // }\\n    // if (fees > 0) {\\n    //   collateral.safeTransferFrom(assetSender, feeRecipient, fees);\\n    // }\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                         Relayer Functions\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Adds a deposit proof to the contract\\n   *\\n   * @param txHash                The transaction hash of the deposit\\n   * @param user                  The address of the user who made the deposit\\n   * @param depositAmountAfterFee The amount of the deposit after fees\\n   * @param feeAmount             The amount of the fees taken\\n   * @param timestamp             The timestamp of the deposit\\n   *\\n   * @dev txHash is used as the depositId in storage\\n   * @dev All amounts are in decimals of `collateral`\\n   */\\n  function addProof(\\n    bytes32 txHash,\\n    address user,\\n    uint256 depositAmountAfterFee,\\n    uint256 feeAmount,\\n    uint256 timestamp\\n  ) external override onlyRole(RELAYER_ROLE) {\\n    if (depositIdToDepositor[txHash].user != address(0)) {\\n      revert DepositProofAlreadyExists();\\n    }\\n    depositIdToDepositor[txHash] = Depositor(user, depositAmountAfterFee, 0);\\n    emit DepositProofAdded(\\n      txHash,\\n      user,\\n      depositAmountAfterFee,\\n      feeAmount,\\n      timestamp\\n    );\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                           PriceId Setters\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Admin function to associate a depositId with a given Price Id\\n   *\\n   * @param depositIds an Array of deposit Ids to be associated\\n   * @param priceIds   an Array of price Ids to be associated\\n   *\\n   * @dev Array size must match\\n   */\\n  function setPriceIdForDeposits(\\n    bytes32[] calldata depositIds,\\n    uint256[] calldata priceIds\\n  ) external virtual onlyRole(PRICE_ID_SETTER_ROLE) {\\n    uint256 depositsSize = depositIds.length;\\n    if (depositsSize != priceIds.length) {\\n      revert ArraySizeMismatch();\\n    }\\n    for (uint256 i = 0; i < depositsSize; ++i) {\\n      if (depositIdToDepositor[depositIds[i]].user == address(0)) {\\n        revert DepositorNull();\\n      }\\n      if (depositIdToDepositor[depositIds[i]].priceId != 0) {\\n        revert PriceIdAlreadySet();\\n      }\\n      depositIdToDepositor[depositIds[i]].priceId = priceIds[i];\\n      emit PriceIdSetForDeposit(depositIds[i], priceIds[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Admin function to associate redemptionId with a given priceId\\n   *\\n   * @param redemptionIds an Array of redemptionIds to associate\\n   * @param priceIds  an Array of priceIds to associate\\n   */\\n  function setPriceIdForRedemptions(\\n    bytes32[] calldata redemptionIds,\\n    uint256[] calldata priceIds\\n  ) external virtual onlyRole(PRICE_ID_SETTER_ROLE) {\\n    uint256 redemptionsSize = redemptionIds.length;\\n    if (redemptionsSize != priceIds.length) {\\n      revert ArraySizeMismatch();\\n    }\\n    for (uint256 i = 0; i < redemptionsSize; ++i) {\\n      if (redemptionIdToRedeemer[redemptionIds[i]].priceId != 0) {\\n        revert PriceIdAlreadySet();\\n      }\\n      redemptionIdToRedeemer[redemptionIds[i]].priceId = priceIds[i];\\n      emit PriceIdSetForRedemption(redemptionIds[i], priceIds[i]);\\n    }\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                           Admin Setters\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Admin function to overwrite entries in the depoitIdToDepositor\\n   *         mapping\\n   *\\n   * @param depositIdToOverwrite  The depositId of the entry we wish to\\n   *                              overwrite\\n   * @param user                  The user for the new entry\\n   * @param depositAmountAfterFee The deposit value for the new entry\\n   * @param priceId               The priceId to be associated with the new\\n   *                              entry\\n   */\\n  function overwriteDepositor(\\n    bytes32 depositIdToOverwrite,\\n    address user,\\n    uint256 depositAmountAfterFee,\\n    uint256 priceId\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    Depositor memory oldDepositor = depositIdToDepositor[depositIdToOverwrite];\\n\\n    depositIdToDepositor[depositIdToOverwrite] = Depositor(\\n      user,\\n      depositAmountAfterFee,\\n      priceId\\n    );\\n\\n    emit DepositorOverwritten(\\n      depositIdToOverwrite,\\n      oldDepositor.user,\\n      user,\\n      oldDepositor.priceId,\\n      priceId,\\n      oldDepositor.amountDepositedMinusFees,\\n      depositAmountAfterFee\\n    );\\n  }\\n\\n  /**\\n   * @notice Admin function to overwrite entries in the redemptionIdToRedeemer\\n   *         mapping\\n   *\\n   * @param redemptionIdToOverwrite The redemptionId of the entry we wish to\\n   *                                overwrite\\n   * @param user                    The user for the new entry\\n   * @param rwaTokenAmountBurned    The burn amount for the new entry\\n   * @param priceId                 The priceID to be associated with the new\\n   *                                entry\\n   */\\n  function overwriteRedeemer(\\n    bytes32 redemptionIdToOverwrite,\\n    address user,\\n    uint256 rwaTokenAmountBurned,\\n    uint256 priceId\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    Redeemer memory oldRedeemer = redemptionIdToRedeemer[\\n      redemptionIdToOverwrite\\n    ];\\n    redemptionIdToRedeemer[redemptionIdToOverwrite] = Redeemer(\\n      user,\\n      rwaTokenAmountBurned,\\n      priceId\\n    );\\n    emit RedeemerOverwritten(\\n      redemptionIdToOverwrite,\\n      oldRedeemer.user,\\n      user,\\n      oldRedeemer.priceId,\\n      priceId,\\n      oldRedeemer.amountRwaTokenBurned,\\n      rwaTokenAmountBurned\\n    );\\n  }\\n\\n  /**\\n   * @notice Admin function to set the minimum amount to redeem\\n   *\\n   * @param _minimumRedemptionAmount The minimum amount required to submit a\\n   *                                 redemption request\\n   */\\n  function setMinimumRedemptionAmount(\\n    uint256 _minimumRedemptionAmount\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    if (_minimumRedemptionAmount < BPS_DENOMINATOR) {\\n      revert AmountTooSmall();\\n    }\\n    uint256 oldRedeemMinimum = minimumRedemptionAmount;\\n    minimumRedemptionAmount = _minimumRedemptionAmount;\\n    emit MinimumRedemptionAmountSet(oldRedeemMinimum, _minimumRedemptionAmount);\\n  }\\n\\n  /**\\n   * @notice Admin function to set the minimum amount required for a deposit\\n   *\\n   * @param minDepositAmount The minimum amount required to submit a deposit\\n   *                         request\\n   */\\n  function setMinimumDepositAmount(\\n    uint256 minDepositAmount\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    if (minDepositAmount < BPS_DENOMINATOR) {\\n      revert AmountTooSmall();\\n    }\\n    uint256 oldMinimumDepositAmount = minimumDepositAmount;\\n    minimumDepositAmount = minDepositAmount;\\n    emit MinimumDepositAmountSet(oldMinimumDepositAmount, minDepositAmount);\\n  }\\n\\n  /**\\n   * @notice Admin function to set the mint fee\\n   *\\n   * @param _mintFee The new mint fee specified in basis points\\n   *\\n   * @dev The maximum fee that can be set is 10_000 bps, or 100%\\n   */\\n  function setMintFee(uint256 _mintFee) external onlyRole(MANAGER_ADMIN) {\\n    if (_mintFee > BPS_DENOMINATOR) {\\n      revert FeeTooLarge();\\n    }\\n    uint256 oldMintFee = mintFee;\\n    mintFee = _mintFee;\\n    emit MintFeeSet(oldMintFee, _mintFee);\\n  }\\n\\n  /**\\n   * @notice Admin function to set the redeem fee\\n   *\\n   * @param _redemptionFee The new redeem fee specified in basis points\\n   *\\n   * @dev The maximum fee that can be set is 10_000 bps, or 100%\\n   */\\n  function setRedemptionFee(\\n    uint256 _redemptionFee\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    if (_redemptionFee > BPS_DENOMINATOR) {\\n      revert FeeTooLarge();\\n    }\\n    uint256 oldRedeemFee = redemptionFee;\\n    redemptionFee = _redemptionFee;\\n    emit RedemptionFeeSet(oldRedeemFee, _redemptionFee);\\n  }\\n\\n  /**\\n   * @notice Admin function to set the address of the Pricer contract\\n   *\\n   * @param newPricer The address of the new pricer contract\\n   */\\n  function setPricer(address newPricer) external onlyRole(MANAGER_ADMIN) {\\n    address oldPricer = address(pricer);\\n    pricer = IPricerReader(newPricer);\\n    emit NewPricerSet(oldPricer, newPricer);\\n  }\\n\\n  /**\\n   * @notice Admin function to set the address of `feeRecipient`\\n   *\\n   * @param newFeeRecipient The address of the new `feeRecipient`\\n   */\\n  function setFeeRecipient(\\n    address newFeeRecipient\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    address oldFeeRecipient = feeRecipient;\\n    feeRecipient = newFeeRecipient;\\n    emit FeeRecipientSet(oldFeeRecipient, feeRecipient);\\n  }\\n\\n  /**\\n   * @notice Admin function to set the address of `assetSender`\\n   *\\n   * @param newAssetSender The address of the new `assetSender`\\n   */\\n  function setAssetSender(\\n    address newAssetSender\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    address oldAssetSender = assetSender;\\n    assetSender = newAssetSender;\\n    emit AssetSenderSet(oldAssetSender, newAssetSender);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                            Pause Utils\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Modifier to check if a feature is paused\\n   *\\n   * @param feature The feature to check if paused\\n   */\\n  modifier ifNotPaused(bool feature) {\\n    if (feature) {\\n      revert FeaturePaused();\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Function to pause subscription to RWAHub\\n   */\\n  function pauseSubscription() external onlyRole(PAUSER_ADMIN) {\\n    subscriptionPaused = true;\\n    emit SubscriptionPaused(msg.sender);\\n  }\\n\\n  /**\\n   * @notice Function to pause redemptions to RWAHub\\n   */\\n  function pauseRedemption() external onlyRole(PAUSER_ADMIN) {\\n    redemptionPaused = true;\\n    emit RedemptionPaused(msg.sender);\\n  }\\n\\n  /**\\n   * @notice Function to unpause subscriptions to RWAHub\\n   */\\n  function unpauseSubscription() external onlyRole(MANAGER_ADMIN) {\\n    subscriptionPaused = false;\\n    emit SubscriptionUnpaused(msg.sender);\\n  }\\n\\n  /**\\n   * @notice Function to unpause redemptions to RWAHub\\n   */\\n  function unpauseRedemption() external onlyRole(MANAGER_ADMIN) {\\n    redemptionPaused = false;\\n    emit RedemptionUnpaused(msg.sender);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                      Check Restriction Utils\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Modifier to check restrictions status of an account\\n   *\\n   * @param account The account to check\\n   */\\n  /*modifier checkRestrictions(address account) {\\n    _checkRestrictions(account);\\n    _;\\n  }*/\\n\\n  /**\\n   * @notice internal function to check restriction status\\n   *         of an address\\n   *\\n   * @param account The account to check restriction status for\\n   *\\n   * @dev This function is virtual to be overridden by child contract\\n   *      to check restrictions on a more granular level\\n   */\\n  //function _checkRestrictions(address account) internal view virtual;\\n\\n  /*//////////////////////////////////////////////////////////////\\n                           Math Utils\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Given amount of `collateral`, returns how much in fees\\n   *         are owed\\n   *\\n   *\\n   * @param collateralAmount Amount `collateral` to calculate fees\\n   *                         (in decimals of `collateral`)\\n   */\\n  function _getMintFees(\\n    uint256 collateralAmount\\n  ) internal view returns (uint256) {\\n    return (collateralAmount * mintFee) / BPS_DENOMINATOR;\\n  }\\n\\n  /**\\n   * @notice Given amount of `collateral`, returns how much in fees\\n   *         are owed\\n   *\\n   * @param collateralAmount Amount of `collateral` to calculate fees\\n   *                         (in decimals of `collateral`)\\n   */\\n  function _getRedemptionFees(\\n    uint256 collateralAmount\\n  ) internal view returns (uint256) {\\n    return (collateralAmount * redemptionFee) / BPS_DENOMINATOR;\\n  }\\n\\n  /**\\n   * @notice Given a deposit amount and priceId, returns the amount\\n   *         of `rwa` due\\n   *\\n   * @param depositAmt The amount deposited in units of `collateral`\\n   * @param price      The price associated with this deposit\\n   */\\n  function _getMintAmountForPrice(\\n    uint256 depositAmt,\\n    uint256 price\\n  ) internal view returns (uint256 rwaAmountOut) {\\n    uint256 amountE36 = _scaleUp(depositAmt) * 1e18;\\n    // Will revert with div by 0 if price not defined for a priceId\\n    rwaAmountOut = amountE36 / price;\\n  }\\n\\n  /**\\n   * @notice Given a redemption amount and a priceId, returns the amount\\n   *         of `collateral` due\\n   *\\n   * @param rwaTokenAmountBurned The amount of `rwa` burned for a redemption\\n   * @param price                The price associated with this redemption\\n   */\\n  function _getRedemptionAmountForRwa(\\n    uint256 rwaTokenAmountBurned,\\n    uint256 price\\n  ) internal view returns (uint256 collateralOwed) {\\n    uint256 amountE36 = rwaTokenAmountBurned * price;\\n    collateralOwed = _scaleDown(amountE36 / 1e18);\\n  }\\n\\n  /**\\n   * @notice Scale provided amount up by `decimalsMultiplier`\\n   *\\n   * @dev This helper is used for converting the collateral's decimals\\n   *      representation to the RWA amount decimals representation.\\n   */\\n  function _scaleUp(uint256 amount) internal view returns (uint256) {\\n    return amount * decimalsMultiplier;\\n  }\\n\\n  /**\\n   * @notice Scale provided amount down by `decimalsMultiplier`\\n   *\\n   * @dev This helper is used for converting `rwa`'s decimal\\n   *      representation to the `collateral`'s decimal representation\\n   */\\n  function _scaleDown(uint256 amount) internal view returns (uint256) {\\n    return amount / decimalsMultiplier;\\n  }\\n}\\n\",\"keccak256\":\"0x43b10191833d4a124fb6edfaacbfbd19eecaefe80df2c13900d32e600bf6ec1a\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/utils/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n  struct RoleData {\\n    mapping(address => bool) members;\\n    bytes32 adminRole;\\n  }\\n\\n  mapping(bytes32 => RoleData) private _roles;\\n\\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n  /**\\n   * @dev Modifier that checks that an account has a specific role. Reverts\\n   * with a standardized message including the required role.\\n   *\\n   * The format of the revert reason is given by the following regular expression:\\n   *\\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n   *\\n   * _Available since v4.1._\\n   */\\n  modifier onlyRole(bytes32 role) {\\n    _checkRole(role, _msgSender());\\n    _;\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IAccessControl).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return _roles[role].members[account];\\n  }\\n\\n  /**\\n   * @dev Revert with a standard message if `account` is missing `role`.\\n   *\\n   * The format of the revert reason is given by the following regular expression:\\n   *\\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n   */\\n  function _checkRole(bytes32 role, address account) internal view virtual {\\n    if (!hasRole(role, account)) {\\n      revert(\\n        string(\\n          abi.encodePacked(\\n            \\\"AccessControl: account \\\",\\n            Strings.toHexString(uint160(account), 20),\\n            \\\" is missing role \\\",\\n            Strings.toHexString(uint256(role), 32)\\n          )\\n        )\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bytes32)\\n  {\\n    return _roles[role].adminRole;\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function grantRole(bytes32 role, address account)\\n    public\\n    virtual\\n    override\\n    onlyRole(getRoleAdmin(role))\\n  {\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function revokeRole(bytes32 role, address account)\\n    public\\n    virtual\\n    override\\n    onlyRole(getRoleAdmin(role))\\n  {\\n    _revokeRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   */\\n  function renounceRole(bytes32 role, address account) public virtual override {\\n    require(\\n      account == _msgSender(),\\n      \\\"AccessControl: can only renounce roles for self\\\"\\n    );\\n\\n    _revokeRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event. Note that unlike {grantRole}, this function doesn't perform any\\n   * checks on the calling account.\\n   *\\n   * [WARNING]\\n   * ====\\n   * This function should only be called from the constructor when setting\\n   * up the initial roles for the system.\\n   *\\n   * Using this function in any other way is effectively circumventing the admin\\n   * system imposed by {AccessControl}.\\n   * ====\\n   *\\n   * NOTE: This function is deprecated in favor of {_grantRole}.\\n   */\\n  function _setupRole(bytes32 role, address account) internal virtual {\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Sets `adminRole` as ``role``'s admin role.\\n   *\\n   * Emits a {RoleAdminChanged} event.\\n   */\\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n    bytes32 previousAdminRole = getRoleAdmin(role);\\n    _roles[role].adminRole = adminRole;\\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * Internal function without access restriction.\\n   */\\n  function _grantRole(bytes32 role, address account) internal virtual {\\n    if (!hasRole(role, account)) {\\n      _roles[role].members[account] = true;\\n      emit RoleGranted(role, account, _msgSender());\\n    }\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * Internal function without access restriction.\\n   */\\n  function _revokeRole(bytes32 role, address account) internal virtual {\\n    if (hasRole(role, account)) {\\n      _roles[role].members[account] = false;\\n      emit RoleRevoked(role, account, _msgSender());\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xe7e809b0d89fa668d9707e3c107974a005f2acd136c425cd78f6d828c219aa40\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/access/IAccessControlEnumerable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is\\n  IAccessControlEnumerable,\\n  AccessControl\\n{\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IAccessControlEnumerable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\n   *\\n   * Role bearers are not sorted in any particular way, and their ordering may\\n   * change at any point.\\n   *\\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n   * you perform all queries on the same block. See the following\\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n   * for more information.\\n   */\\n  function getRoleMember(bytes32 role, uint256 index)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (address)\\n  {\\n    return _roleMembers[role].at(index);\\n  }\\n\\n  /**\\n   * @dev Returns the number of accounts that have `role`. Can be used\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\n   */\\n  function getRoleMemberCount(bytes32 role)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _roleMembers[role].length();\\n  }\\n\\n  /**\\n   * @dev Overload {_grantRole} to track enumerable memberships\\n   */\\n  function _grantRole(bytes32 role, address account) internal virtual override {\\n    super._grantRole(role, account);\\n    _roleMembers[role].add(account);\\n  }\\n\\n  /**\\n   * @dev Overload {_revokeRole} to track enumerable memberships\\n   */\\n  function _revokeRole(bytes32 role, address account)\\n    internal\\n    virtual\\n    override\\n  {\\n    super._revokeRole(role, account);\\n    _roleMembers[role].remove(account);\\n  }\\n}\\n\",\"keccak256\":\"0xf0155eaa75c379807c202eb9a0db8a073e5d93d6f9144b42d194c2ecd49ddb33\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n  /**\\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n   *\\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n   * {RoleAdminChanged} not being emitted signaling this.\\n   *\\n   * _Available since v3.1._\\n   */\\n  event RoleAdminChanged(\\n    bytes32 indexed role,\\n    bytes32 indexed previousAdminRole,\\n    bytes32 indexed newAdminRole\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is granted `role`.\\n   *\\n   * `sender` is the account that originated the contract call, an admin role\\n   * bearer except when using {AccessControl-_setupRole}.\\n   */\\n  event RoleGranted(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is revoked `role`.\\n   *\\n   * `sender` is the account that originated the contract call:\\n   *   - if using `revokeRole`, it is the admin role bearer\\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n   */\\n  event RoleRevoked(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function grantRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function revokeRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   */\\n  function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x02787a6b562763467c448f39369285b1903615e81c787f45c0b163a1ff9e07d5\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n  /**\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\n   *\\n   * Role bearers are not sorted in any particular way, and their ordering may\\n   * change at any point.\\n   *\\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n   * you perform all queries on the same block. See the following\\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n   * for more information.\\n   */\\n  function getRoleMember(bytes32 role, uint256 index)\\n    external\\n    view\\n    returns (address);\\n\\n  /**\\n   * @dev Returns the number of accounts that have `role`. Can be used\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\n   */\\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc29b5788f8deef40aee3f1b1f67fdfd7b84ebcc0f0d2e73db14185de07f3c50b\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n  // Booleans are more expensive than uint256 or any type that takes up a full\\n  // word because each write operation emits an extra SLOAD to first read the\\n  // slot's contents, replace the bits taken up by the boolean, and then write\\n  // back. This is the compiler's defense against contract upgrades and\\n  // pointer aliasing, and it cannot be disabled.\\n\\n  // The values being non-zero value makes deployment a bit more expensive,\\n  // but in exchange the refund on every call to nonReentrant will be lower in\\n  // amount. Since refunds are capped to a percentage of the total\\n  // transaction's gas, it is best to keep them low in cases like this one, to\\n  // increase the likelihood of the full refund coming into effect.\\n  uint256 private constant _NOT_ENTERED = 1;\\n  uint256 private constant _ENTERED = 2;\\n\\n  uint256 private _status;\\n\\n  constructor() {\\n    _status = _NOT_ENTERED;\\n  }\\n\\n  /**\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n   * Calling a `nonReentrant` function from another `nonReentrant`\\n   * function is not supported. It is possible to prevent this from happening\\n   * by making the `nonReentrant` function external, and making it call a\\n   * `private` function that does the actual work.\\n   */\\n  modifier nonReentrant() {\\n    // On the first call to nonReentrant, _notEntered will be true\\n    require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n    // Any calls to nonReentrant after this point will fail\\n    _status = _ENTERED;\\n\\n    _;\\n\\n    // By storing the original value once again, a refund is triggered (see\\n    // https://eips.ethereum.org/EIPS/eip-2200)\\n    _status = _NOT_ENTERED;\\n  }\\n}\\n\",\"keccak256\":\"0x0134fde2cc9450792bc761f05588383e3b1baf78454dba8b6a592dd39895cd08\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x2d0b233e43b64bb4afb057ccc16493c9b3c22d334a4ac6636915c7ef7f06b118\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/token/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/token/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token.\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the decimals places of the token.\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x099220ebd191f57aa291f8c00866eb8c943680d9790d46ec82010b933d68550f\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/token/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/token/IERC20.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transfer.selector, to, value)\\n    );\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n    );\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n   * {IERC20-approve}, and its usage is discouraged.\\n   *\\n   * Whenever possible, use {safeIncreaseAllowance} and\\n   * {safeDecreaseAllowance} instead.\\n   */\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    // safeApprove should only be called when setting an initial allowance,\\n    // or when resetting it to zero. To increase and decrease it, use\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    );\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, value)\\n    );\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function safeDecreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    unchecked {\\n      uint256 oldAllowance = token.allowance(address(this), spender);\\n      require(\\n        oldAllowance >= value,\\n        \\\"SafeERC20: decreased allowance below zero\\\"\\n      );\\n      uint256 newAllowance = oldAllowance - value;\\n      _callOptionalReturn(\\n        token,\\n        abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   * @param token The token targeted by the call.\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\n   */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata =\\n      address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(\\n        abi.decode(returndata, (bool)),\\n        \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n      );\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x7d9d09b80a08d34c67244192d626551d2d4921328ac5aa3f0839e7daa48ac6c0\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(\\n      success,\\n      \\\"Address: unable to send value, recipient may have reverted\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data)\\n    internal\\n    returns (bytes memory)\\n  {\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return\\n      functionCallWithValue(\\n        target,\\n        data,\\n        value,\\n        \\\"Address: low-level call with value failed\\\"\\n      );\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(\\n      address(this).balance >= value,\\n      \\\"Address: insufficient balance for call\\\"\\n    );\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data)\\n    internal\\n    view\\n    returns (bytes memory)\\n  {\\n    return\\n      functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data)\\n    internal\\n    returns (bytes memory)\\n  {\\n    return\\n      functionDelegateCall(\\n        target,\\n        data,\\n        \\\"Address: low-level delegate call failed\\\"\\n      );\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x40bfbd7537f14756fbb70025e858781190d73b9cc60ab85c3f518de6268a40da\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0x197651ff7207345936e19940e36235967fe866449caa294e19642b6c6aaa62f8\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/utils/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return interfaceId == type(IERC165).interfaceId;\\n  }\\n}\\n\",\"keccak256\":\"0x092935b6d168de393154e5b5622bbc5f57c99eb14a5a5af3dc2cda6a19add989\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      if (lastIndex != toDeleteIndex) {\\n        bytes32 lastvalue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastvalue;\\n        // Update the index for the moved value\\n        set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function _contains(Set storage set, bytes32 value)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    return set._values[index];\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\n    return set._values;\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value)\\n    internal\\n    returns (bool)\\n  {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index)\\n    internal\\n    view\\n    returns (bytes32)\\n  {\\n    return _at(set._inner, index);\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(Bytes32Set storage set)\\n    internal\\n    view\\n    returns (bytes32[] memory)\\n  {\\n    return _values(set._inner);\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value)\\n    internal\\n    returns (bool)\\n  {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(AddressSet storage set)\\n    internal\\n    view\\n    returns (address[] memory)\\n  {\\n    bytes32[] memory store = _values(set._inner);\\n    address[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(UintSet storage set, uint256 value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintSet storage set, uint256 index)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return uint256(_at(set._inner, index));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(UintSet storage set)\\n    internal\\n    view\\n    returns (uint256[] memory)\\n  {\\n    bytes32[] memory store = _values(set._inner);\\n    uint256[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x6dfd57320c54054f69d620239b72c0230a3912520dff78f26dec2a709592555c\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x64e1d4f776a4bf02f7ab4187741c2e50c767bfa04f4ef1f920edba78c2918020\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n  bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0x00\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 length = 0;\\n    while (temp != 0) {\\n      length++;\\n      temp >>= 8;\\n    }\\n    return toHexString(value, length);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n   */\\n  function toHexString(uint256 value, uint256 length)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n      value >>= 4;\\n    }\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\n    return string(buffer);\\n  }\\n}\\n\",\"keccak256\":\"0x132805e1b4569cd64ef45bb19ce1f3387263de8d8c9b28926bd8eb1e44bba84a\",\"license\":\"MIT\"},\"contracts/interfaces/IPricerReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IPricerReader {\\n  /**\\n   * @notice Gets the latest price of the asset\\n   *\\n   * @return uint256 The latest price of the asset\\n   */\\n  function getLatestPrice() external view returns (uint256);\\n\\n  /**\\n   * @notice Gets the price of the asset at a specific priceId\\n   *\\n   * @param priceId The priceId at which to get the price\\n   *\\n   * @return uint256 The price of the asset with the given priceId\\n   */\\n  function getPrice(uint256 priceId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf8fc0dbad93e41a2815909ba3187e0e416be4565e1bb3a25413223a41add1b9d\",\"license\":\"MIT\"},\"contracts/interfaces/IRWAHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IRWAHub {\\n  // Struct to contain the deposit information for a given depositId\\n  struct Depositor {\\n    address user;\\n    uint256 amountDepositedMinusFees;\\n    uint256 priceId;\\n  }\\n\\n  // Struc to contain withdrawal infromation for a given redemptionId\\n  struct Redeemer {\\n    address user;\\n    uint256 amountRwaTokenBurned;\\n    uint256 priceId;\\n  }\\n\\n  function requestSubscription(uint256 amount) external;\\n\\n  function claimMint(bytes32[] calldata depositIds) external;\\n\\n  function requestRedemption(uint256 amount) external;\\n\\n  function claimRedemption(bytes32[] calldata redemptionIds) external;\\n\\n  function addProof(\\n    bytes32 txHash,\\n    address user,\\n    uint256 depositAmountAfterFee,\\n    uint256 feeAmount,\\n    uint256 timestamp\\n  ) external;\\n\\n  function setPriceIdForDeposits(\\n    bytes32[] calldata depositIds,\\n    uint256[] calldata priceIds\\n  ) external;\\n\\n  function setPriceIdForRedemptions(\\n    bytes32[] calldata redemptionIds,\\n    uint256[] calldata priceIds\\n  ) external;\\n\\n  function setPricer(address newPricer) external;\\n\\n  function overwriteDepositor(\\n    bytes32 depositIdToOverride,\\n    address user,\\n    uint256 depositAmountAfterFee,\\n    uint256 priceId\\n  ) external;\\n\\n  function overwriteRedeemer(\\n    bytes32 redemptionIdToOverride,\\n    address user,\\n    uint256 rwaTokenAmountBurned,\\n    uint256 priceId\\n  ) external;\\n\\n  /**\\n   * @notice Event emitted when fee recipient is set\\n   *\\n   * @param oldFeeRecipient Old fee recipient\\n   * @param newFeeRecipient New fee recipient\\n   */\\n  event FeeRecipientSet(address oldFeeRecipient, address newFeeRecipient);\\n\\n  /**\\n   * @notice Event emitted when the assetSender is changed\\n   *\\n   * @param oldAssetSender The address of the old assetSender\\n   * @param newAssetSender The address of the new assetSender\\n   */\\n  event AssetSenderSet(address oldAssetSender, address newAssetSender);\\n\\n  /**\\n   * @notice Event emitted when minimum deposit amount is set\\n   *\\n   * @param oldMinimum Old minimum\\n   * @param newMinimum New minimum\\n   *\\n   * @dev See inheriting contract for decimals representation\\n   */\\n  event MinimumDepositAmountSet(uint256 oldMinimum, uint256 newMinimum);\\n\\n  /**\\n   * @notice Event emitted when a new redeem minimum is set.\\n   *         All units are in 1e18\\n   *\\n   * @param oldRedemptionMin The old redeem minimum value\\n   * @param newRedemptionMin The new redeem minimum value\\n   */\\n  event MinimumRedemptionAmountSet(\\n    uint256 oldRedemptionMin,\\n    uint256 newRedemptionMin\\n  );\\n\\n  /**\\n   * @notice Event emitted when mint fee is set\\n   *\\n   * @param oldFee Old fee\\n   * @param newFee New fee\\n   *\\n   * @dev See inheriting contract for decimals representation\\n   */\\n  event MintFeeSet(uint256 oldFee, uint256 newFee);\\n\\n  /**\\n   * @notice Event emitted when redeem fee is set\\n   *\\n   * @param oldFee Old fee\\n   * @param newFee New fee\\n   *\\n   * @dev see inheriting contract for decimal representation\\n   */\\n  event RedemptionFeeSet(uint256 oldFee, uint256 newFee);\\n\\n  /**\\n   * @notice Event emitted when redemption request is submitted\\n   *\\n   * @param user         The user submitting the redemption request\\n   * @param redemptionId The id corresponding to a given redemption\\n   * @param rwaAmountIn  The amount of cash being burned\\n   */\\n  event RedemptionRequested(\\n    address indexed user,\\n    bytes32 indexed redemptionId,\\n    uint256 rwaAmountIn\\n  );\\n\\n  /**\\n   * @notice Event emitted when a mint request is submitted\\n   *\\n   * @param user                      The user requesting to mint\\n   * @param depositId                 The depositId of the request\\n   * @param collateralAmountDeposited The total amount deposited\\n   * @param depositAmountAfterFee     The value deposited - fee\\n   * @param feeAmount                 The fee amount taken\\n   *                                  (units of collateral)\\n   */\\n  event MintRequested(\\n    address indexed user,\\n    bytes32 indexed depositId,\\n    uint256 collateralAmountDeposited,\\n    uint256 depositAmountAfterFee,\\n    uint256 feeAmount\\n  );\\n\\n  /**\\n   * @notice Event emitted when a redemption request is completed\\n   *\\n   * @param user                     The address of the user getting the funds\\n   * @param redemptionId             The id corresponding to a given redemption\\n   *                                 requested\\n   * @param rwaAmountRequested       Amount of RWA originally requested by the user\\n   * @param collateralAmountReturned Amount of collateral received by the user\\n   * @param price                    The price at which the redemption was\\n   *                                 serviced at\\n   */\\n  event RedemptionCompleted(\\n    address indexed user,\\n    bytes32 indexed redemptionId,\\n    uint256 rwaAmountRequested,\\n    uint256 collateralAmountReturned,\\n    uint256 price\\n  );\\n\\n  /**\\n   * @notice Event emitted when a Mint request is completed\\n   *\\n   * @param user                      The address of the user getting the funds\\n   * @param depositId                 The depositId of the mint request\\n   * @param rwaAmountOut              The amount of RWA token minted to the\\n   *                                  user\\n   * @param collateralAmountDeposited The amount of collateral deposited\\n   * @param price                     The price set for the given\\n   *                                  deposit id\\n   * @param priceId                   The priceId used to determine price\\n   */\\n  event MintCompleted(\\n    address indexed user,\\n    bytes32 indexed depositId,\\n    uint256 rwaAmountOut,\\n    uint256 collateralAmountDeposited,\\n    uint256 price,\\n    uint256 priceId\\n  );\\n\\n  /**\\n   * @notice Event emitted when a deposit has its corresponding priceId set\\n   *\\n   * @param depositIdSet The Deposit Id for which the price Id is being set\\n   * @param priceIdSet   The price Id being associate with a deposit Id\\n   */\\n  event PriceIdSetForDeposit(\\n    bytes32 indexed depositIdSet,\\n    uint256 indexed priceIdSet\\n  );\\n\\n  /**\\n   * @notice Event Emitted when a redemption has its corresponding priceId set\\n   *\\n   * @param redemptionIdSet The Redemption Id for which the price Id is being\\n   *                        set\\n   * @param priceIdSet      The Price Id being associated with a redemption Id\\n   */\\n  event PriceIdSetForRedemption(\\n    bytes32 indexed redemptionIdSet,\\n    uint256 indexed priceIdSet\\n  );\\n\\n  /**\\n   * @notice Event emitted when a new Pricer contract is set\\n   *\\n   * @param oldPricer The address of the old pricer contract\\n   * @param newPricer The address of the new pricer contract\\n   */\\n  event NewPricerSet(address oldPricer, address newPricer);\\n\\n  /**\\n   * @notice Event emitted when deposit proof has been added\\n   *\\n   * @param txHash                Tx hash of the deposit\\n   * @param user                  Address of the user who made the deposit\\n   * @param depositAmountAfterFee Amount of the deposit after fees\\n   * @param feeAmount             Amount of fees taken\\n   * @param timestamp             Timestamp of the deposit\\n   */\\n  event DepositProofAdded(\\n    bytes32 indexed txHash,\\n    address indexed user,\\n    uint256 depositAmountAfterFee,\\n    uint256 feeAmount,\\n    uint256 timestamp\\n  );\\n\\n  /**\\n   * @notice Event emitted when subscriptions are paused\\n   *\\n   * @param caller Address which initiated the pause\\n   */\\n  event SubscriptionPaused(address caller);\\n\\n  /**\\n   * @notice Event emitted when redemptions are paused\\n   *\\n   * @param caller Address which initiated the pause\\n   */\\n  event RedemptionPaused(address caller);\\n\\n  /**\\n   * @notice Event emitted when subscriptions are unpaused\\n   *\\n   * @param caller Address which initiated the unpause\\n   */\\n  event SubscriptionUnpaused(address caller);\\n\\n  /**\\n   * @notice Event emitted when redemptions are unpaused\\n   *\\n   * @param caller Address which initiated the unpause\\n   */\\n  event RedemptionUnpaused(address caller);\\n\\n  event DepositorOverwritten(\\n    bytes32 indexed depositId,\\n    address oldDepositor,\\n    address newDepositor,\\n    uint256 oldPriceId,\\n    uint256 newPriceId,\\n    uint256 oldDepositAmount,\\n    uint256 newDepositAmount\\n  );\\n\\n  event RedeemerOverwritten(\\n    bytes32 indexed redemptionId,\\n    address oldRedeemer,\\n    address newRedeemer,\\n    uint256 oldPriceId,\\n    uint256 newPriceId,\\n    uint256 oldRWATokenAmountBurned,\\n    uint256 newRWATokenAmountBurned\\n  );\\n\\n  /// ERRORS ///\\n  error PriceIdNotSet();\\n  error ArraySizeMismatch();\\n  error DepositTooSmall();\\n  error RedemptionTooSmall();\\n  error TxnAlreadyValidated();\\n  error CollateralCannotBeZero();\\n  error RWACannotBeZero();\\n  error AssetSenderCannotBeZero();\\n  error FeeRecipientCannotBeZero();\\n  error FeeTooLarge();\\n  error AmountTooSmall();\\n  error DepositorNull();\\n  error RedeemerNull();\\n  error DepositProofAlreadyExists();\\n  error FeaturePaused();\\n  error PriceIdAlreadySet();\\n}\\n\",\"keccak256\":\"0x4b67d5db4ec8244fe8585660e221b0d5b228373416010e87b00e693ef6de1c1a\",\"license\":\"MIT\"},\"contracts/interfaces/IRWALike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n// This interface is not inherited directly by RWA, instead, it is a\\n// subset of functions provided by all RWA tokens that the RWA Hub\\n// Client uses.\\nimport \\\"contracts/external/openzeppelin/contracts/token/IERC20.sol\\\";\\n\\ninterface IRWALike is IERC20 {\\n  function mint(address to, uint256 amount) external;\\n\\n  function burn(uint256 amount) external;\\n\\n  function burnFrom(address from, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x990096ba99f5588e7a377baee18809e8fb0dfd9d14aad08281adb7defcb703ea\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2031,"contract":"contracts/RWAHub.sol:RWAHub","label":"_status","offset":0,"slot":"0","type":"t_uint256"},{"astId":1513,"contract":"contracts/RWAHub.sol:RWAHub","label":"_roles","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_struct(RoleData)1508_storage)"},{"astId":1816,"contract":"contracts/RWAHub.sol:RWAHub","label":"_roleMembers","offset":0,"slot":"2","type":"t_mapping(t_bytes32,t_struct(AddressSet)3040_storage)"},{"astId":25,"contract":"contracts/RWAHub.sol:RWAHub","label":"pricer","offset":0,"slot":"3","type":"t_contract(IPricerReader)3584"},{"astId":30,"contract":"contracts/RWAHub.sol:RWAHub","label":"assetSender","offset":0,"slot":"4","type":"t_address"},{"astId":32,"contract":"contracts/RWAHub.sol:RWAHub","label":"feeRecipient","offset":0,"slot":"5","type":"t_address"},{"astId":37,"contract":"contracts/RWAHub.sol:RWAHub","label":"depositIdToDepositor","offset":0,"slot":"6","type":"t_mapping(t_bytes32,t_struct(Depositor)3593_storage)"},{"astId":42,"contract":"contracts/RWAHub.sol:RWAHub","label":"redemptionIdToRedeemer","offset":0,"slot":"7","type":"t_mapping(t_bytes32,t_struct(Redeemer)3600_storage)"},{"astId":45,"contract":"contracts/RWAHub.sol:RWAHub","label":"minimumDepositAmount","offset":0,"slot":"8","type":"t_uint256"},{"astId":47,"contract":"contracts/RWAHub.sol:RWAHub","label":"minimumRedemptionAmount","offset":0,"slot":"9","type":"t_uint256"},{"astId":50,"contract":"contracts/RWAHub.sol:RWAHub","label":"mintFee","offset":0,"slot":"10","type":"t_uint256"},{"astId":53,"contract":"contracts/RWAHub.sol:RWAHub","label":"redemptionFee","offset":0,"slot":"11","type":"t_uint256"},{"astId":61,"contract":"contracts/RWAHub.sol:RWAHub","label":"subscriptionRequestCounter","offset":0,"slot":"12","type":"t_uint256"},{"astId":64,"contract":"contracts/RWAHub.sol:RWAHub","label":"redemptionRequestCounter","offset":0,"slot":"13","type":"t_uint256"},{"astId":69,"contract":"contracts/RWAHub.sol:RWAHub","label":"redemptionPaused","offset":0,"slot":"14","type":"t_bool"},{"astId":71,"contract":"contracts/RWAHub.sol:RWAHub","label":"subscriptionPaused","offset":1,"slot":"14","type":"t_bool"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"base":"t_bytes32","encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(IPricerReader)3584":{"encoding":"inplace","label":"contract IPricerReader","numberOfBytes":"20"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(AddressSet)3040_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct EnumerableSet.AddressSet)","numberOfBytes":"32","value":"t_struct(AddressSet)3040_storage"},"t_mapping(t_bytes32,t_struct(Depositor)3593_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct IRWAHub.Depositor)","numberOfBytes":"32","value":"t_struct(Depositor)3593_storage"},"t_mapping(t_bytes32,t_struct(Redeemer)3600_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct IRWAHub.Redeemer)","numberOfBytes":"32","value":"t_struct(Redeemer)3600_storage"},"t_mapping(t_bytes32,t_struct(RoleData)1508_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)1508_storage"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(AddressSet)3040_storage":{"encoding":"inplace","label":"struct EnumerableSet.AddressSet","members":[{"astId":3039,"contract":"contracts/RWAHub.sol:RWAHub","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)2739_storage"}],"numberOfBytes":"64"},"t_struct(Depositor)3593_storage":{"encoding":"inplace","label":"struct IRWAHub.Depositor","members":[{"astId":3588,"contract":"contracts/RWAHub.sol:RWAHub","label":"user","offset":0,"slot":"0","type":"t_address"},{"astId":3590,"contract":"contracts/RWAHub.sol:RWAHub","label":"amountDepositedMinusFees","offset":0,"slot":"1","type":"t_uint256"},{"astId":3592,"contract":"contracts/RWAHub.sol:RWAHub","label":"priceId","offset":0,"slot":"2","type":"t_uint256"}],"numberOfBytes":"96"},"t_struct(Redeemer)3600_storage":{"encoding":"inplace","label":"struct IRWAHub.Redeemer","members":[{"astId":3595,"contract":"contracts/RWAHub.sol:RWAHub","label":"user","offset":0,"slot":"0","type":"t_address"},{"astId":3597,"contract":"contracts/RWAHub.sol:RWAHub","label":"amountRwaTokenBurned","offset":0,"slot":"1","type":"t_uint256"},{"astId":3599,"contract":"contracts/RWAHub.sol:RWAHub","label":"priceId","offset":0,"slot":"2","type":"t_uint256"}],"numberOfBytes":"96"},"t_struct(RoleData)1508_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":1505,"contract":"contracts/RWAHub.sol:RWAHub","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":1507,"contract":"contracts/RWAHub.sol:RWAHub","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(Set)2739_storage":{"encoding":"inplace","label":"struct EnumerableSet.Set","members":[{"astId":2734,"contract":"contracts/RWAHub.sol:RWAHub","label":"_values","offset":0,"slot":"0","type":"t_array(t_bytes32)dyn_storage"},{"astId":2738,"contract":"contracts/RWAHub.sol:RWAHub","label":"_indexes","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_uint256)"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"PriceIdNotSet()":[{"notice":"ERRORS ///"}]},"events":{"AssetSenderSet(address,address)":{"notice":"Event emitted when the assetSender is changed"},"DepositProofAdded(bytes32,address,uint256,uint256,uint256)":{"notice":"Event emitted when deposit proof has been added"},"FeeRecipientSet(address,address)":{"notice":"Event emitted when fee recipient is set"},"MinimumDepositAmountSet(uint256,uint256)":{"notice":"Event emitted when minimum deposit amount is set"},"MinimumRedemptionAmountSet(uint256,uint256)":{"notice":"Event emitted when a new redeem minimum is set.         All units are in 1e18"},"MintCompleted(address,bytes32,uint256,uint256,uint256,uint256)":{"notice":"Event emitted when a Mint request is completed"},"MintFeeSet(uint256,uint256)":{"notice":"Event emitted when mint fee is set"},"MintRequested(address,bytes32,uint256,uint256,uint256)":{"notice":"Event emitted when a mint request is submitted"},"NewPricerSet(address,address)":{"notice":"Event emitted when a new Pricer contract is set"},"PriceIdSetForDeposit(bytes32,uint256)":{"notice":"Event emitted when a deposit has its corresponding priceId set"},"PriceIdSetForRedemption(bytes32,uint256)":{"notice":"Event Emitted when a redemption has its corresponding priceId set"},"RedemptionCompleted(address,bytes32,uint256,uint256,uint256)":{"notice":"Event emitted when a redemption request is completed"},"RedemptionFeeSet(uint256,uint256)":{"notice":"Event emitted when redeem fee is set"},"RedemptionPaused(address)":{"notice":"Event emitted when redemptions are paused"},"RedemptionRequested(address,bytes32,uint256)":{"notice":"Event emitted when redemption request is submitted"},"RedemptionUnpaused(address)":{"notice":"Event emitted when redemptions are unpaused"},"SubscriptionPaused(address)":{"notice":"Event emitted when subscriptions are paused"},"SubscriptionUnpaused(address)":{"notice":"Event emitted when subscriptions are unpaused"}},"kind":"user","methods":{"addProof(bytes32,address,uint256,uint256,uint256)":{"notice":"Adds a deposit proof to the contract"},"claimMint(bytes32[])":{"notice":"Function used to claim tokens corresponding to a deposit request"},"claimRedemption(bytes32[])":{"notice":"Function to claim collateral corresponding to a redemption request"},"constructor":{"notice":"constructor"},"overwriteDepositor(bytes32,address,uint256,uint256)":{"notice":"Admin function to overwrite entries in the depoitIdToDepositor         mapping"},"overwriteRedeemer(bytes32,address,uint256,uint256)":{"notice":"Admin function to overwrite entries in the redemptionIdToRedeemer         mapping"},"pauseRedemption()":{"notice":"Function to pause redemptions to RWAHub"},"pauseSubscription()":{"notice":"Function to pause subscription to RWAHub"},"requestRedemption(uint256)":{"notice":"Function used by users to request a redemption from the fund"},"requestSubscription(uint256)":{"notice":"Function used by users to request subscription to the fund"},"setAssetSender(address)":{"notice":"Admin function to set the address of `assetSender`"},"setFeeRecipient(address)":{"notice":"Admin function to set the address of `feeRecipient`"},"setMinimumDepositAmount(uint256)":{"notice":"Admin function to set the minimum amount required for a deposit"},"setMinimumRedemptionAmount(uint256)":{"notice":"Admin function to set the minimum amount to redeem"},"setMintFee(uint256)":{"notice":"Admin function to set the mint fee"},"setPriceIdForDeposits(bytes32[],uint256[])":{"notice":"Admin function to associate a depositId with a given Price Id"},"setPriceIdForRedemptions(bytes32[],uint256[])":{"notice":"Admin function to associate redemptionId with a given priceId"},"setPricer(address)":{"notice":"Admin function to set the address of the Pricer contract"},"setRedemptionFee(uint256)":{"notice":"Admin function to set the redeem fee"},"unpauseRedemption()":{"notice":"Function to unpause redemptions to RWAHub"},"unpauseSubscription()":{"notice":"Function to unpause subscriptions to RWAHub"}},"version":1}}},"contracts/RWAHubOffChainRedemptions.sol":{"RWAHubOffChainRedemptions":{"abi":[{"inputs":[],"name":"AmountTooSmall","type":"error"},{"inputs":[],"name":"ArraySizeMismatch","type":"error"},{"inputs":[],"name":"AssetSenderCannotBeZero","type":"error"},{"inputs":[],"name":"CollateralCannotBeZero","type":"error"},{"inputs":[],"name":"DepositProofAlreadyExists","type":"error"},{"inputs":[],"name":"DepositTooSmall","type":"error"},{"inputs":[],"name":"DepositorNull","type":"error"},{"inputs":[],"name":"FeaturePaused","type":"error"},{"inputs":[],"name":"FeeRecipientCannotBeZero","type":"error"},{"inputs":[],"name":"FeeTooLarge","type":"error"},{"inputs":[],"name":"PriceIdAlreadySet","type":"error"},{"inputs":[],"name":"PriceIdNotSet","type":"error"},{"inputs":[],"name":"RWACannotBeZero","type":"error"},{"inputs":[],"name":"RedeemerNull","type":"error"},{"inputs":[],"name":"RedemptionTooSmall","type":"error"},{"inputs":[],"name":"TxnAlreadyValidated","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oldAssetSender","type":"address"},{"indexed":false,"internalType":"address","name":"newAssetSender","type":"address"}],"name":"AssetSenderSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"txHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"depositAmountAfterFee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"feeAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"DepositProofAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"depositId","type":"bytes32"},{"indexed":false,"internalType":"address","name":"oldDepositor","type":"address"},{"indexed":false,"internalType":"address","name":"newDepositor","type":"address"},{"indexed":false,"internalType":"uint256","name":"oldPriceId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newPriceId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"oldDepositAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDepositAmount","type":"uint256"}],"name":"DepositorOverwritten","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oldFeeRecipient","type":"address"},{"indexed":false,"internalType":"address","name":"newFeeRecipient","type":"address"}],"name":"FeeRecipientSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldMinimum","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newMinimum","type":"uint256"}],"name":"MinimumDepositAmountSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldRedemptionMin","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newRedemptionMin","type":"uint256"}],"name":"MinimumRedemptionAmountSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"bytes32","name":"depositId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"rwaAmountOut","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"collateralAmountDeposited","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"priceId","type":"uint256"}],"name":"MintCompleted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldFee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newFee","type":"uint256"}],"name":"MintFeeSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"bytes32","name":"depositId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"collateralAmountDeposited","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"depositAmountAfterFee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"feeAmount","type":"uint256"}],"name":"MintRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oldPricer","type":"address"},{"indexed":false,"internalType":"address","name":"newPricer","type":"address"}],"name":"NewPricerSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldMinimum","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newMinimum","type":"uint256"}],"name":"OffChainRedemptionMinimumSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"OffChainRedemptionPaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"OffChainRedemptionUnpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"depositIdSet","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"priceIdSet","type":"uint256"}],"name":"PriceIdSetForDeposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"redemptionIdSet","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"priceIdSet","type":"uint256"}],"name":"PriceIdSetForRedemption","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"redemptionId","type":"bytes32"},{"indexed":false,"internalType":"address","name":"oldRedeemer","type":"address"},{"indexed":false,"internalType":"address","name":"newRedeemer","type":"address"},{"indexed":false,"internalType":"uint256","name":"oldPriceId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newPriceId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"oldRWATokenAmountBurned","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newRWATokenAmountBurned","type":"uint256"}],"name":"RedeemerOverwritten","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"bytes32","name":"redemptionId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"rwaAmountRequested","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"collateralAmountReturned","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"}],"name":"RedemptionCompleted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldFee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newFee","type":"uint256"}],"name":"RedemptionFeeSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"RedemptionPaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"bytes32","name":"redemptionId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"rwaAmountIn","type":"uint256"}],"name":"RedemptionRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"bytes32","name":"redemptionId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"rwaTokenAmountIn","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"offChainDestination","type":"bytes32"}],"name":"RedemptionRequestedServicedOffChain","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"RedemptionUnpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"SubscriptionPaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"SubscriptionUnpaused","type":"event"},{"inputs":[],"name":"BPS_DENOMINATOR","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MANAGER_ADMIN","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PAUSER_ADMIN","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PRICE_ID_SETTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"RELAYER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"txHash","type":"bytes32"},{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"depositAmountAfterFee","type":"uint256"},{"internalType":"uint256","name":"feeAmount","type":"uint256"},{"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"addProof","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"assetRecipient","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"assetSender","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"depositIds","type":"bytes32[]"}],"name":"claimMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"redemptionIds","type":"bytes32[]"}],"name":"claimRedemption","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"collateral","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimalsMultiplier","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"depositIdToDepositor","outputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"amountDepositedMinusFees","type":"uint256"},{"internalType":"uint256","name":"priceId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeRecipient","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minimumDepositAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minimumOffChainRedemptionAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minimumRedemptionAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"mintFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"offChainRedemptionPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"depositIdToOverwrite","type":"bytes32"},{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"depositAmountAfterFee","type":"uint256"},{"internalType":"uint256","name":"priceId","type":"uint256"}],"name":"overwriteDepositor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"redemptionIdToOverwrite","type":"bytes32"},{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"rwaTokenAmountBurned","type":"uint256"},{"internalType":"uint256","name":"priceId","type":"uint256"}],"name":"overwriteRedeemer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pauseOffChainRedemption","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pauseRedemption","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pauseSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pricer","outputs":[{"internalType":"contract IPricerReader","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"redemptionFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"redemptionIdToRedeemer","outputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"amountRwaTokenBurned","type":"uint256"},{"internalType":"uint256","name":"priceId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"redemptionPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"redemptionRequestCounter","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"requestRedemption","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountRWATokenToRedeem","type":"uint256"},{"internalType":"bytes32","name":"offChainDestination","type":"bytes32"}],"name":"requestRedemptionServicedOffchain","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"requestSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rwa","outputs":[{"internalType":"contract IRWALike","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newAssetSender","type":"address"}],"name":"setAssetSender","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newFeeRecipient","type":"address"}],"name":"setFeeRecipient","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"minDepositAmount","type":"uint256"}],"name":"setMinimumDepositAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_minimumRedemptionAmount","type":"uint256"}],"name":"setMinimumRedemptionAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_mintFee","type":"uint256"}],"name":"setMintFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_minimumOffChainRedemptionAmount","type":"uint256"}],"name":"setOffChainRedemptionMinimum","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"depositIds","type":"bytes32[]"},{"internalType":"uint256[]","name":"priceIds","type":"uint256[]"}],"name":"setPriceIdForDeposits","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"redemptionIds","type":"bytes32[]"},{"internalType":"uint256[]","name":"priceIds","type":"uint256[]"}],"name":"setPriceIdForRedemptions","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newPricer","type":"address"}],"name":"setPricer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_redemptionFee","type":"uint256"}],"name":"setRedemptionFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"subscriptionPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"subscriptionRequestCounter","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpauseOffChainRedemption","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpauseRedemption","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpauseSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"addProof(bytes32,address,uint256,uint256,uint256)":{"details":"txHash is used as the depositId in storageAll amounts are in decimals of `collateral`","params":{"depositAmountAfterFee":"The amount of the deposit after fees","feeAmount":"The amount of the fees taken","timestamp":"The timestamp of the deposit","txHash":"The transaction hash of the deposit","user":"The address of the user who made the deposit"}},"claimMint(bytes32[])":{"details":"Implicitly does all transfer checks present in underlying `rwa`The priceId corresponding to a given depositId must be set prior to      claiming a mint","params":{"depositIds":"An array containing the deposit Ids one wishes to claim"}},"claimRedemption(bytes32[])":{"details":"Implicitly does all checks present in underlying `rwa`The price Id corresponding to a redemptionId must be set prior to      claiming a redemption","params":{"redemptionIds":"an Array of redemption Id's which ought to fulfilled"}},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"overwriteDepositor(bytes32,address,uint256,uint256)":{"params":{"depositAmountAfterFee":"The deposit value for the new entry","depositIdToOverwrite":"The depositId of the entry we wish to                              overwrite","priceId":"The priceId to be associated with the new                              entry","user":"The user for the new entry"}},"overwriteRedeemer(bytes32,address,uint256,uint256)":{"params":{"priceId":"The priceID to be associated with the new                                entry","redemptionIdToOverwrite":"The redemptionId of the entry we wish to                                overwrite","rwaTokenAmountBurned":"The burn amount for the new entry","user":"The user for the new entry"}},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"requestRedemption(uint256)":{"params":{"amount":"The amount (in units of `rwa`) that a user wishes to redeem               from the fund"}},"requestRedemptionServicedOffchain(uint256,bytes32)":{"params":{"amountRWATokenToRedeem":"The requested redemption amount","offChainDestination":"A hash of the destination to which                               the request should be serviced to."}},"requestSubscription(uint256)":{"params":{"amount":"The amount of collateral one wished to deposit"}},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."},"setAssetSender(address)":{"params":{"newAssetSender":"The address of the new `assetSender`"}},"setFeeRecipient(address)":{"params":{"newFeeRecipient":"The address of the new `feeRecipient`"}},"setMinimumDepositAmount(uint256)":{"params":{"minDepositAmount":"The minimum amount required to submit a deposit                         request"}},"setMinimumRedemptionAmount(uint256)":{"params":{"_minimumRedemptionAmount":"The minimum amount required to submit a                                 redemption request"}},"setMintFee(uint256)":{"details":"The maximum fee that can be set is 10_000 bps, or 100%","params":{"_mintFee":"The new mint fee specified in basis points"}},"setOffChainRedemptionMinimum(uint256)":{"params":{"_minimumOffChainRedemptionAmount":"The new minimum off chain                                         redemption amount"}},"setPriceIdForDeposits(bytes32[],uint256[])":{"details":"Array size must match","params":{"depositIds":"an Array of deposit Ids to be associated","priceIds":"an Array of price Ids to be associated"}},"setPriceIdForRedemptions(bytes32[],uint256[])":{"params":{"priceIds":"an Array of priceIds to associate","redemptionIds":"an Array of redemptionIds to associate"}},"setPricer(address)":{"params":{"newPricer":"The address of the new pricer contract"}},"setRedemptionFee(uint256)":{"details":"The maximum fee that can be set is 10_000 bps, or 100%","params":{"_redemptionFee":"The new redeem fee specified in basis points"}},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"BPS_DENOMINATOR()":"e1a45218","DEFAULT_ADMIN_ROLE()":"a217fddf","MANAGER_ADMIN()":"078a6be8","PAUSER_ADMIN()":"85c4e79e","PRICE_ID_SETTER_ROLE()":"bcc70283","RELAYER_ROLE()":"926d7d7f","addProof(bytes32,address,uint256,uint256,uint256)":"2b5eceff","assetRecipient()":"3bfa67fe","assetSender()":"ee75d7d4","claimMint(bytes32[])":"4565e9ff","claimRedemption(bytes32[])":"244f5acf","collateral()":"d8dfeb45","decimalsMultiplier()":"bb13245f","depositIdToDepositor(bytes32)":"5d591d68","feeRecipient()":"46904840","getRoleAdmin(bytes32)":"248a9ca3","getRoleMember(bytes32,uint256)":"9010d07c","getRoleMemberCount(bytes32)":"ca15c873","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","minimumDepositAmount()":"080c279a","minimumOffChainRedemptionAmount()":"12589fb5","minimumRedemptionAmount()":"e0f486ef","mintFee()":"13966db5","offChainRedemptionPaused()":"dd45eef6","overwriteDepositor(bytes32,address,uint256,uint256)":"de6afa82","overwriteRedeemer(bytes32,address,uint256,uint256)":"258492cd","pauseOffChainRedemption()":"49cbbf2a","pauseRedemption()":"92bccb80","pauseSubscription()":"2056aa12","pricer()":"a6138ed9","redemptionFee()":"458f5815","redemptionIdToRedeemer(bytes32)":"38fed708","redemptionPaused()":"73a95ddd","redemptionRequestCounter()":"354181f3","renounceRole(bytes32,address)":"36568abe","requestRedemption(uint256)":"eeb3c910","requestRedemptionServicedOffchain(uint256,bytes32)":"f80a36d6","requestSubscription(uint256)":"d592d815","revokeRole(bytes32,address)":"d547741f","rwa()":"95e4b251","setAssetSender(address)":"525decd6","setFeeRecipient(address)":"e74b981b","setMinimumDepositAmount(uint256)":"aab483d6","setMinimumRedemptionAmount(uint256)":"4ef1ccd1","setMintFee(uint256)":"eddd0d9c","setOffChainRedemptionMinimum(uint256)":"e4107c97","setPriceIdForDeposits(bytes32[],uint256[])":"87e2d06e","setPriceIdForRedemptions(bytes32[],uint256[])":"aa85c1df","setPricer(address)":"29390370","setRedemptionFee(uint256)":"7dbc1df0","subscriptionPaused()":"cd4d0bcf","subscriptionRequestCounter()":"07bda1bb","supportsInterface(bytes4)":"01ffc9a7","unpauseOffChainRedemption()":"4dfe7af2","unpauseRedemption()":"8d044c06","unpauseSubscription()":"837018fa"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AmountTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArraySizeMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AssetSenderCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollateralCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositProofAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositorNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeaturePaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeRecipientCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceIdAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceIdNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RWACannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemerNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedemptionTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TxnAlreadyValidated\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAssetSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAssetSender\",\"type\":\"address\"}],\"name\":\"AssetSenderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmountAfterFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DepositProofAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"depositId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDepositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDepositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPriceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPriceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDepositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDepositAmount\",\"type\":\"uint256\"}],\"name\":\"DepositorOverwritten\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldFeeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinimum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimum\",\"type\":\"uint256\"}],\"name\":\"MinimumDepositAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRedemptionMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRedemptionMin\",\"type\":\"uint256\"}],\"name\":\"MinimumRedemptionAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"depositId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rwaAmountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmountDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"}],\"name\":\"MintCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"MintFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"depositId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmountDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmountAfterFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"MintRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPricer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPricer\",\"type\":\"address\"}],\"name\":\"NewPricerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinimum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimum\",\"type\":\"uint256\"}],\"name\":\"OffChainRedemptionMinimumSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"OffChainRedemptionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"OffChainRedemptionUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"depositIdSet\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceIdSet\",\"type\":\"uint256\"}],\"name\":\"PriceIdSetForDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"redemptionIdSet\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceIdSet\",\"type\":\"uint256\"}],\"name\":\"PriceIdSetForRedemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"redemptionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRedeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRedeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPriceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPriceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRWATokenAmountBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRWATokenAmountBurned\",\"type\":\"uint256\"}],\"name\":\"RedeemerOverwritten\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"redemptionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rwaAmountRequested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmountReturned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"RedemptionCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"RedemptionFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RedemptionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"redemptionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rwaAmountIn\",\"type\":\"uint256\"}],\"name\":\"RedemptionRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"redemptionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rwaTokenAmountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"offChainDestination\",\"type\":\"bytes32\"}],\"name\":\"RedemptionRequestedServicedOffChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RedemptionUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SubscriptionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SubscriptionUnpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BPS_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_ID_SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmountAfterFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"addProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"depositIds\",\"type\":\"bytes32[]\"}],\"name\":\"claimMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"redemptionIds\",\"type\":\"bytes32[]\"}],\"name\":\"claimRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalsMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"depositIdToDepositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountDepositedMinusFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumOffChainRedemptionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumRedemptionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offChainRedemptionPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"depositIdToOverwrite\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmountAfterFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"}],\"name\":\"overwriteDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"redemptionIdToOverwrite\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rwaTokenAmountBurned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"}],\"name\":\"overwriteRedeemer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseOffChainRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricer\",\"outputs\":[{\"internalType\":\"contract IPricerReader\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"redemptionIdToRedeemer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountRwaTokenBurned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionRequestCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountRWATokenToRedeem\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"offChainDestination\",\"type\":\"bytes32\"}],\"name\":\"requestRedemptionServicedOffchain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rwa\",\"outputs\":[{\"internalType\":\"contract IRWALike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAssetSender\",\"type\":\"address\"}],\"name\":\"setAssetSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minDepositAmount\",\"type\":\"uint256\"}],\"name\":\"setMinimumDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumRedemptionAmount\",\"type\":\"uint256\"}],\"name\":\"setMinimumRedemptionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintFee\",\"type\":\"uint256\"}],\"name\":\"setMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumOffChainRedemptionAmount\",\"type\":\"uint256\"}],\"name\":\"setOffChainRedemptionMinimum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"depositIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"priceIds\",\"type\":\"uint256[]\"}],\"name\":\"setPriceIdForDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"redemptionIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"priceIds\",\"type\":\"uint256[]\"}],\"name\":\"setPriceIdForRedemptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPricer\",\"type\":\"address\"}],\"name\":\"setPricer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redemptionFee\",\"type\":\"uint256\"}],\"name\":\"setRedemptionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionRequestCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseOffChainRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addProof(bytes32,address,uint256,uint256,uint256)\":{\"details\":\"txHash is used as the depositId in storageAll amounts are in decimals of `collateral`\",\"params\":{\"depositAmountAfterFee\":\"The amount of the deposit after fees\",\"feeAmount\":\"The amount of the fees taken\",\"timestamp\":\"The timestamp of the deposit\",\"txHash\":\"The transaction hash of the deposit\",\"user\":\"The address of the user who made the deposit\"}},\"claimMint(bytes32[])\":{\"details\":\"Implicitly does all transfer checks present in underlying `rwa`The priceId corresponding to a given depositId must be set prior to      claiming a mint\",\"params\":{\"depositIds\":\"An array containing the deposit Ids one wishes to claim\"}},\"claimRedemption(bytes32[])\":{\"details\":\"Implicitly does all checks present in underlying `rwa`The price Id corresponding to a redemptionId must be set prior to      claiming a redemption\",\"params\":{\"redemptionIds\":\"an Array of redemption Id's which ought to fulfilled\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"overwriteDepositor(bytes32,address,uint256,uint256)\":{\"params\":{\"depositAmountAfterFee\":\"The deposit value for the new entry\",\"depositIdToOverwrite\":\"The depositId of the entry we wish to                              overwrite\",\"priceId\":\"The priceId to be associated with the new                              entry\",\"user\":\"The user for the new entry\"}},\"overwriteRedeemer(bytes32,address,uint256,uint256)\":{\"params\":{\"priceId\":\"The priceID to be associated with the new                                entry\",\"redemptionIdToOverwrite\":\"The redemptionId of the entry we wish to                                overwrite\",\"rwaTokenAmountBurned\":\"The burn amount for the new entry\",\"user\":\"The user for the new entry\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"requestRedemption(uint256)\":{\"params\":{\"amount\":\"The amount (in units of `rwa`) that a user wishes to redeem               from the fund\"}},\"requestRedemptionServicedOffchain(uint256,bytes32)\":{\"params\":{\"amountRWATokenToRedeem\":\"The requested redemption amount\",\"offChainDestination\":\"A hash of the destination to which                               the request should be serviced to.\"}},\"requestSubscription(uint256)\":{\"params\":{\"amount\":\"The amount of collateral one wished to deposit\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setAssetSender(address)\":{\"params\":{\"newAssetSender\":\"The address of the new `assetSender`\"}},\"setFeeRecipient(address)\":{\"params\":{\"newFeeRecipient\":\"The address of the new `feeRecipient`\"}},\"setMinimumDepositAmount(uint256)\":{\"params\":{\"minDepositAmount\":\"The minimum amount required to submit a deposit                         request\"}},\"setMinimumRedemptionAmount(uint256)\":{\"params\":{\"_minimumRedemptionAmount\":\"The minimum amount required to submit a                                 redemption request\"}},\"setMintFee(uint256)\":{\"details\":\"The maximum fee that can be set is 10_000 bps, or 100%\",\"params\":{\"_mintFee\":\"The new mint fee specified in basis points\"}},\"setOffChainRedemptionMinimum(uint256)\":{\"params\":{\"_minimumOffChainRedemptionAmount\":\"The new minimum off chain                                         redemption amount\"}},\"setPriceIdForDeposits(bytes32[],uint256[])\":{\"details\":\"Array size must match\",\"params\":{\"depositIds\":\"an Array of deposit Ids to be associated\",\"priceIds\":\"an Array of price Ids to be associated\"}},\"setPriceIdForRedemptions(bytes32[],uint256[])\":{\"params\":{\"priceIds\":\"an Array of priceIds to associate\",\"redemptionIds\":\"an Array of redemptionIds to associate\"}},\"setPricer(address)\":{\"params\":{\"newPricer\":\"The address of the new pricer contract\"}},\"setRedemptionFee(uint256)\":{\"details\":\"The maximum fee that can be set is 10_000 bps, or 100%\",\"params\":{\"_redemptionFee\":\"The new redeem fee specified in basis points\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"PriceIdNotSet()\":[{\"notice\":\"ERRORS ///\"}]},\"events\":{\"AssetSenderSet(address,address)\":{\"notice\":\"Event emitted when the assetSender is changed\"},\"DepositProofAdded(bytes32,address,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when deposit proof has been added\"},\"FeeRecipientSet(address,address)\":{\"notice\":\"Event emitted when fee recipient is set\"},\"MinimumDepositAmountSet(uint256,uint256)\":{\"notice\":\"Event emitted when minimum deposit amount is set\"},\"MinimumRedemptionAmountSet(uint256,uint256)\":{\"notice\":\"Event emitted when a new redeem minimum is set.         All units are in 1e18\"},\"MintCompleted(address,bytes32,uint256,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a Mint request is completed\"},\"MintFeeSet(uint256,uint256)\":{\"notice\":\"Event emitted when mint fee is set\"},\"MintRequested(address,bytes32,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a mint request is submitted\"},\"NewPricerSet(address,address)\":{\"notice\":\"Event emitted when a new Pricer contract is set\"},\"OffChainRedemptionMinimumSet(uint256,uint256)\":{\"notice\":\"Event emitted when the off chain redemption minimum is         updated\"},\"OffChainRedemptionPaused(address)\":{\"notice\":\"Event emitted when the off chain redemption feature is         paused\"},\"OffChainRedemptionUnpaused(address)\":{\"notice\":\"Event emitted when the off chain redemption feature is         unpaused\"},\"PriceIdSetForDeposit(bytes32,uint256)\":{\"notice\":\"Event emitted when a deposit has its corresponding priceId set\"},\"PriceIdSetForRedemption(bytes32,uint256)\":{\"notice\":\"Event Emitted when a redemption has its corresponding priceId set\"},\"RedemptionCompleted(address,bytes32,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a redemption request is completed\"},\"RedemptionFeeSet(uint256,uint256)\":{\"notice\":\"Event emitted when redeem fee is set\"},\"RedemptionPaused(address)\":{\"notice\":\"Event emitted when redemptions are paused\"},\"RedemptionRequested(address,bytes32,uint256)\":{\"notice\":\"Event emitted when redemption request is submitted\"},\"RedemptionRequestedServicedOffChain(address,bytes32,uint256,bytes32)\":{\"notice\":\"Event emitted when redemption request is submitted\"},\"RedemptionUnpaused(address)\":{\"notice\":\"Event emitted when redemptions are unpaused\"},\"SubscriptionPaused(address)\":{\"notice\":\"Event emitted when subscriptions are paused\"},\"SubscriptionUnpaused(address)\":{\"notice\":\"Event emitted when subscriptions are unpaused\"}},\"kind\":\"user\",\"methods\":{\"addProof(bytes32,address,uint256,uint256,uint256)\":{\"notice\":\"Adds a deposit proof to the contract\"},\"claimMint(bytes32[])\":{\"notice\":\"Function used to claim tokens corresponding to a deposit request\"},\"claimRedemption(bytes32[])\":{\"notice\":\"Function to claim collateral corresponding to a redemption request\"},\"overwriteDepositor(bytes32,address,uint256,uint256)\":{\"notice\":\"Admin function to overwrite entries in the depoitIdToDepositor         mapping\"},\"overwriteRedeemer(bytes32,address,uint256,uint256)\":{\"notice\":\"Admin function to overwrite entries in the redemptionIdToRedeemer         mapping\"},\"pauseOffChainRedemption()\":{\"notice\":\"Function to pause off chain redemptoins\"},\"pauseRedemption()\":{\"notice\":\"Function to pause redemptions to RWAHub\"},\"pauseSubscription()\":{\"notice\":\"Function to pause subscription to RWAHub\"},\"requestRedemption(uint256)\":{\"notice\":\"Function used by users to request a redemption from the fund\"},\"requestRedemptionServicedOffchain(uint256,bytes32)\":{\"notice\":\"Request a redemption to be serviced off chain.\"},\"requestSubscription(uint256)\":{\"notice\":\"Function used by users to request subscription to the fund\"},\"setAssetSender(address)\":{\"notice\":\"Admin function to set the address of `assetSender`\"},\"setFeeRecipient(address)\":{\"notice\":\"Admin function to set the address of `feeRecipient`\"},\"setMinimumDepositAmount(uint256)\":{\"notice\":\"Admin function to set the minimum amount required for a deposit\"},\"setMinimumRedemptionAmount(uint256)\":{\"notice\":\"Admin function to set the minimum amount to redeem\"},\"setMintFee(uint256)\":{\"notice\":\"Admin function to set the mint fee\"},\"setOffChainRedemptionMinimum(uint256)\":{\"notice\":\"Admin Function to set the minimum off chain redemption amount\"},\"setPriceIdForDeposits(bytes32[],uint256[])\":{\"notice\":\"Admin function to associate a depositId with a given Price Id\"},\"setPriceIdForRedemptions(bytes32[],uint256[])\":{\"notice\":\"Admin function to associate redemptionId with a given priceId\"},\"setPricer(address)\":{\"notice\":\"Admin function to set the address of the Pricer contract\"},\"setRedemptionFee(uint256)\":{\"notice\":\"Admin function to set the redeem fee\"},\"unpauseOffChainRedemption()\":{\"notice\":\"Function to unpause off chain redemptoins\"},\"unpauseRedemption()\":{\"notice\":\"Function to unpause redemptions to RWAHub\"},\"unpauseSubscription()\":{\"notice\":\"Function to unpause subscriptions to RWAHub\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RWAHubOffChainRedemptions.sol\":\"RWAHubOffChainRedemptions\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/RWAHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"contracts/interfaces/IPricerReader.sol\\\";\\nimport \\\"contracts/interfaces/IRWALike.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/token/IERC20.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/token/SafeERC20.sol\\\";\\nimport \\\"contracts/interfaces/IRWAHub.sol\\\";\\n\\n// Additional Dependencies\\nimport \\\"contracts/external/openzeppelin/contracts/token/IERC20Metadata.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nabstract contract RWAHub is IRWAHub, ReentrancyGuard, AccessControlEnumerable {\\n  using SafeERC20 for IERC20;\\n  // RWA Token contract\\n  IRWALike public immutable rwa;\\n  // Pointer to Pricer\\n  IPricerReader public pricer;\\n  // Address to receive deposits\\n  address public constant assetRecipient =\\n    0x0686b3a7B9bE2751bB51084a6E0E7DB7f1746eb1; // ABBY - CB Deposit Address\\n  // Address to send redemptions\\n  address public assetSender;\\n  // Address fee recipient\\n  address public feeRecipient;\\n  // Mapping from deposit Id -> Depositor\\n  mapping(bytes32 => Depositor) public depositIdToDepositor;\\n  // Mapping from redemptionId -> Redeemer\\n  mapping(bytes32 => Redeemer) public redemptionIdToRedeemer;\\n\\n  /// @dev Mint/Redeem Parameters\\n  // Minimum amount that must be deposited to mint the RWA token\\n  // Denoted in decimals of `collateral`\\n  uint256 public minimumDepositAmount;\\n\\n  // Minimum amount that must be redeemed for a withdraw request\\n  uint256 public minimumRedemptionAmount;\\n\\n  // Minting fee specified in basis points\\n  uint256 public mintFee = 0;\\n\\n  // Redemption fee specified in basis points\\n  uint256 public redemptionFee = 0;\\n\\n  // The asset accepted by the RWAHub\\n  IERC20 public immutable collateral;\\n\\n  // Decimal multiplier representing the difference between `rwa` decimals\\n  // In `collateral` token decimals\\n  uint256 public immutable decimalsMultiplier;\\n\\n  // Deposit counter to map subscription requests to\\n  uint256 public subscriptionRequestCounter = 1;\\n\\n  // Redemption Id to map from\\n  uint256 public redemptionRequestCounter = 1;\\n\\n  // Helper constant that allows us to specify basis points in calculations\\n  uint256 public constant BPS_DENOMINATOR = 10_000;\\n\\n  // Pause variables\\n  bool public redemptionPaused;\\n  bool public subscriptionPaused;\\n\\n  /// @dev Role based access control roles\\n  bytes32 public constant MANAGER_ADMIN = keccak256(\\\"MANAGER_ADMIN\\\");\\n  bytes32 public constant PAUSER_ADMIN = keccak256(\\\"PAUSER_ADMIN\\\");\\n  bytes32 public constant PRICE_ID_SETTER_ROLE =\\n    keccak256(\\\"PRICE_ID_SETTER_ROLE\\\");\\n  bytes32 public constant RELAYER_ROLE = keccak256(\\\"RELAYER_ROLE\\\");\\n\\n  /// @notice constructor\\n  constructor(\\n    address _collateral,\\n    address _rwa,\\n    address managerAdmin,\\n    address pauser,\\n    address _assetSender,\\n    address _feeRecipient,\\n    uint256 _minimumDepositAmount,\\n    uint256 _minimumRedemptionAmount\\n  ) {\\n    if (_collateral == address(0)) {\\n      revert CollateralCannotBeZero();\\n    }\\n    if (_rwa == address(0)) {\\n      revert RWACannotBeZero();\\n    }\\n    if (_assetSender == address(0)) {\\n      revert AssetSenderCannotBeZero();\\n    }\\n    if (_feeRecipient == address(0)) {\\n      revert FeeRecipientCannotBeZero();\\n    }\\n\\n    _grantRole(DEFAULT_ADMIN_ROLE, managerAdmin);\\n    _grantRole(MANAGER_ADMIN, managerAdmin);\\n    _grantRole(PAUSER_ADMIN, pauser);\\n    _grantRole(PRICE_ID_SETTER_ROLE, managerAdmin);\\n    _grantRole(keccak256(\\\"TIMESTAMP_SETTER_ROLE\\\"), managerAdmin);\\n    \\n    _setRoleAdmin(PAUSER_ADMIN, MANAGER_ADMIN);\\n    _setRoleAdmin(PRICE_ID_SETTER_ROLE, MANAGER_ADMIN);\\n    _setRoleAdmin(RELAYER_ROLE, MANAGER_ADMIN);\\n\\n    collateral = IERC20(_collateral);\\n    rwa = IRWALike(_rwa);\\n    feeRecipient = _feeRecipient;\\n    assetSender = _assetSender;\\n    minimumDepositAmount = _minimumDepositAmount;\\n    minimumRedemptionAmount = _minimumRedemptionAmount;\\n\\n    decimalsMultiplier =\\n      10 **\\n        (IERC20Metadata(_rwa).decimals() -\\n          IERC20Metadata(_collateral).decimals());\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                  Subscription/Redemption Functions\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Function used by users to request subscription to the fund\\n   *\\n   * @param amount The amount of collateral one wished to deposit\\n   */\\n  function requestSubscription(\\n    uint256 amount\\n  )\\n    external\\n    virtual\\n    nonReentrant\\n    ifNotPaused(subscriptionPaused)\\n  {\\n    if (amount < minimumDepositAmount) {\\n      revert DepositTooSmall();\\n    }\\n\\n    uint256 feesInCollateral = _getMintFees(amount);\\n    uint256 depositAmountAfterFee = amount - feesInCollateral;\\n\\n    // Link the depositor to their deposit ID\\n    bytes32 depositId = bytes32(subscriptionRequestCounter++);\\n    depositIdToDepositor[depositId] = Depositor(\\n      msg.sender,\\n      depositAmountAfterFee,\\n      0\\n    );\\n\\n    if (feesInCollateral > 0) {\\n      collateral.safeTransferFrom(msg.sender, feeRecipient, feesInCollateral);\\n    }\\n\\n    collateral.safeTransferFrom(\\n      msg.sender,\\n      assetRecipient,\\n      depositAmountAfterFee\\n    );\\n\\n    emit MintRequested(\\n      msg.sender,\\n      depositId,\\n      amount,\\n      depositAmountAfterFee,\\n      feesInCollateral\\n    );\\n  }\\n\\n  /**\\n   * @notice Function used to claim tokens corresponding to a deposit request\\n   *\\n   * @param depositIds An array containing the deposit Ids one wishes to claim\\n   *\\n   * @dev Implicitly does all transfer checks present in underlying `rwa`\\n   * @dev The priceId corresponding to a given depositId must be set prior to\\n   *      claiming a mint\\n   */\\n  function claimMint(\\n    bytes32[] calldata depositIds\\n  ) external virtual nonReentrant ifNotPaused(subscriptionPaused) {\\n    uint256 depositsSize = depositIds.length;\\n    for (uint256 i = 0; i < depositsSize; ++i) {\\n      _claimMint(depositIds[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Internal claim mint helper\\n   *\\n   * @dev This function can be overriden to implement custom claiming logic\\n   */\\n  function _claimMint(bytes32 depositId) internal virtual {\\n    Depositor memory depositor = depositIdToDepositor[depositId];\\n    // Revert if priceId is not set\\n    if (depositor.priceId == 0) {\\n      revert PriceIdNotSet();\\n    }\\n\\n    uint256 price = pricer.getPrice(depositor.priceId);\\n    uint256 rwaOwed = _getMintAmountForPrice(\\n      depositor.amountDepositedMinusFees,\\n      price\\n    );\\n\\n    delete depositIdToDepositor[depositId];\\n    rwa.mint(depositor.user, rwaOwed);\\n\\n    emit MintCompleted(\\n      depositor.user,\\n      depositId,\\n      rwaOwed,\\n      depositor.amountDepositedMinusFees,\\n      price,\\n      depositor.priceId\\n    );\\n  }\\n\\n  /**\\n   * @notice Function used by users to request a redemption from the fund\\n   *\\n   * @param amount The amount (in units of `rwa`) that a user wishes to redeem\\n   *               from the fund\\n   */\\n  function requestRedemption(\\n    uint256 amount\\n  ) external virtual nonReentrant ifNotPaused(redemptionPaused) {\\n    if (amount < minimumRedemptionAmount) {\\n      revert RedemptionTooSmall();\\n    }\\n    bytes32 redemptionId = bytes32(redemptionRequestCounter++);\\n    redemptionIdToRedeemer[redemptionId] = Redeemer(msg.sender, amount, 0);\\n\\n    rwa.burnFrom(msg.sender, amount);\\n\\n    emit RedemptionRequested(msg.sender, redemptionId, amount);\\n  }\\n\\n  /**\\n   * @notice Function to claim collateral corresponding to a redemption request\\n   *\\n   * @param redemptionIds an Array of redemption Id's which ought to fulfilled\\n   *\\n   * @dev Implicitly does all checks present in underlying `rwa`\\n   * @dev The price Id corresponding to a redemptionId must be set prior to\\n   *      claiming a redemption\\n   */\\n  function claimRedemption(\\n    bytes32[] calldata redemptionIds\\n  ) external virtual nonReentrant ifNotPaused(redemptionPaused) {\\n    uint256 fees;\\n    uint256 redemptionsSize = redemptionIds.length;\\n    // for (uint256 i = 0; i < redemptionsSize; ++i) {\\n    //   Redeemer memory member = redemptionIdToRedeemer[redemptionIds[i]];\\n    //   //_checkRestrictions(member.user);\\n    //   if (member.priceId == 0) {\\n    //     // Then the price for this redemption has not been set\\n    //     revert PriceIdNotSet();\\n    //   }\\n\\n    //   // Calculate collateral due and fees\\n    //   uint256 price = pricer.getPrice(member.priceId);\\n    //   uint256 collateralDue = _getRedemptionAmountForRwa(\\n    //     member.amountRwaTokenBurned,\\n    //     price\\n    //   );\\n    //   uint256 fee = _getRedemptionFees(collateralDue);\\n    //   uint256 collateralDuePostFees = collateralDue - fee;\\n    //   fees += fee;\\n\\n    //   delete redemptionIdToRedeemer[redemptionIds[i]];\\n\\n    //   collateral.safeTransferFrom(\\n    //     assetSender,\\n    //     member.user,\\n    //     collateralDuePostFees\\n    //   );\\n\\n    //   emit RedemptionCompleted(\\n    //     member.user,\\n    //     redemptionIds[i],\\n    //     member.amountRwaTokenBurned,\\n    //     collateralDuePostFees,\\n    //     price\\n    //   );\\n    // }\\n    // if (fees > 0) {\\n    //   collateral.safeTransferFrom(assetSender, feeRecipient, fees);\\n    // }\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                         Relayer Functions\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Adds a deposit proof to the contract\\n   *\\n   * @param txHash                The transaction hash of the deposit\\n   * @param user                  The address of the user who made the deposit\\n   * @param depositAmountAfterFee The amount of the deposit after fees\\n   * @param feeAmount             The amount of the fees taken\\n   * @param timestamp             The timestamp of the deposit\\n   *\\n   * @dev txHash is used as the depositId in storage\\n   * @dev All amounts are in decimals of `collateral`\\n   */\\n  function addProof(\\n    bytes32 txHash,\\n    address user,\\n    uint256 depositAmountAfterFee,\\n    uint256 feeAmount,\\n    uint256 timestamp\\n  ) external override onlyRole(RELAYER_ROLE) {\\n    if (depositIdToDepositor[txHash].user != address(0)) {\\n      revert DepositProofAlreadyExists();\\n    }\\n    depositIdToDepositor[txHash] = Depositor(user, depositAmountAfterFee, 0);\\n    emit DepositProofAdded(\\n      txHash,\\n      user,\\n      depositAmountAfterFee,\\n      feeAmount,\\n      timestamp\\n    );\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                           PriceId Setters\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Admin function to associate a depositId with a given Price Id\\n   *\\n   * @param depositIds an Array of deposit Ids to be associated\\n   * @param priceIds   an Array of price Ids to be associated\\n   *\\n   * @dev Array size must match\\n   */\\n  function setPriceIdForDeposits(\\n    bytes32[] calldata depositIds,\\n    uint256[] calldata priceIds\\n  ) external virtual onlyRole(PRICE_ID_SETTER_ROLE) {\\n    uint256 depositsSize = depositIds.length;\\n    if (depositsSize != priceIds.length) {\\n      revert ArraySizeMismatch();\\n    }\\n    for (uint256 i = 0; i < depositsSize; ++i) {\\n      if (depositIdToDepositor[depositIds[i]].user == address(0)) {\\n        revert DepositorNull();\\n      }\\n      if (depositIdToDepositor[depositIds[i]].priceId != 0) {\\n        revert PriceIdAlreadySet();\\n      }\\n      depositIdToDepositor[depositIds[i]].priceId = priceIds[i];\\n      emit PriceIdSetForDeposit(depositIds[i], priceIds[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Admin function to associate redemptionId with a given priceId\\n   *\\n   * @param redemptionIds an Array of redemptionIds to associate\\n   * @param priceIds  an Array of priceIds to associate\\n   */\\n  function setPriceIdForRedemptions(\\n    bytes32[] calldata redemptionIds,\\n    uint256[] calldata priceIds\\n  ) external virtual onlyRole(PRICE_ID_SETTER_ROLE) {\\n    uint256 redemptionsSize = redemptionIds.length;\\n    if (redemptionsSize != priceIds.length) {\\n      revert ArraySizeMismatch();\\n    }\\n    for (uint256 i = 0; i < redemptionsSize; ++i) {\\n      if (redemptionIdToRedeemer[redemptionIds[i]].priceId != 0) {\\n        revert PriceIdAlreadySet();\\n      }\\n      redemptionIdToRedeemer[redemptionIds[i]].priceId = priceIds[i];\\n      emit PriceIdSetForRedemption(redemptionIds[i], priceIds[i]);\\n    }\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                           Admin Setters\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Admin function to overwrite entries in the depoitIdToDepositor\\n   *         mapping\\n   *\\n   * @param depositIdToOverwrite  The depositId of the entry we wish to\\n   *                              overwrite\\n   * @param user                  The user for the new entry\\n   * @param depositAmountAfterFee The deposit value for the new entry\\n   * @param priceId               The priceId to be associated with the new\\n   *                              entry\\n   */\\n  function overwriteDepositor(\\n    bytes32 depositIdToOverwrite,\\n    address user,\\n    uint256 depositAmountAfterFee,\\n    uint256 priceId\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    Depositor memory oldDepositor = depositIdToDepositor[depositIdToOverwrite];\\n\\n    depositIdToDepositor[depositIdToOverwrite] = Depositor(\\n      user,\\n      depositAmountAfterFee,\\n      priceId\\n    );\\n\\n    emit DepositorOverwritten(\\n      depositIdToOverwrite,\\n      oldDepositor.user,\\n      user,\\n      oldDepositor.priceId,\\n      priceId,\\n      oldDepositor.amountDepositedMinusFees,\\n      depositAmountAfterFee\\n    );\\n  }\\n\\n  /**\\n   * @notice Admin function to overwrite entries in the redemptionIdToRedeemer\\n   *         mapping\\n   *\\n   * @param redemptionIdToOverwrite The redemptionId of the entry we wish to\\n   *                                overwrite\\n   * @param user                    The user for the new entry\\n   * @param rwaTokenAmountBurned    The burn amount for the new entry\\n   * @param priceId                 The priceID to be associated with the new\\n   *                                entry\\n   */\\n  function overwriteRedeemer(\\n    bytes32 redemptionIdToOverwrite,\\n    address user,\\n    uint256 rwaTokenAmountBurned,\\n    uint256 priceId\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    Redeemer memory oldRedeemer = redemptionIdToRedeemer[\\n      redemptionIdToOverwrite\\n    ];\\n    redemptionIdToRedeemer[redemptionIdToOverwrite] = Redeemer(\\n      user,\\n      rwaTokenAmountBurned,\\n      priceId\\n    );\\n    emit RedeemerOverwritten(\\n      redemptionIdToOverwrite,\\n      oldRedeemer.user,\\n      user,\\n      oldRedeemer.priceId,\\n      priceId,\\n      oldRedeemer.amountRwaTokenBurned,\\n      rwaTokenAmountBurned\\n    );\\n  }\\n\\n  /**\\n   * @notice Admin function to set the minimum amount to redeem\\n   *\\n   * @param _minimumRedemptionAmount The minimum amount required to submit a\\n   *                                 redemption request\\n   */\\n  function setMinimumRedemptionAmount(\\n    uint256 _minimumRedemptionAmount\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    if (_minimumRedemptionAmount < BPS_DENOMINATOR) {\\n      revert AmountTooSmall();\\n    }\\n    uint256 oldRedeemMinimum = minimumRedemptionAmount;\\n    minimumRedemptionAmount = _minimumRedemptionAmount;\\n    emit MinimumRedemptionAmountSet(oldRedeemMinimum, _minimumRedemptionAmount);\\n  }\\n\\n  /**\\n   * @notice Admin function to set the minimum amount required for a deposit\\n   *\\n   * @param minDepositAmount The minimum amount required to submit a deposit\\n   *                         request\\n   */\\n  function setMinimumDepositAmount(\\n    uint256 minDepositAmount\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    if (minDepositAmount < BPS_DENOMINATOR) {\\n      revert AmountTooSmall();\\n    }\\n    uint256 oldMinimumDepositAmount = minimumDepositAmount;\\n    minimumDepositAmount = minDepositAmount;\\n    emit MinimumDepositAmountSet(oldMinimumDepositAmount, minDepositAmount);\\n  }\\n\\n  /**\\n   * @notice Admin function to set the mint fee\\n   *\\n   * @param _mintFee The new mint fee specified in basis points\\n   *\\n   * @dev The maximum fee that can be set is 10_000 bps, or 100%\\n   */\\n  function setMintFee(uint256 _mintFee) external onlyRole(MANAGER_ADMIN) {\\n    if (_mintFee > BPS_DENOMINATOR) {\\n      revert FeeTooLarge();\\n    }\\n    uint256 oldMintFee = mintFee;\\n    mintFee = _mintFee;\\n    emit MintFeeSet(oldMintFee, _mintFee);\\n  }\\n\\n  /**\\n   * @notice Admin function to set the redeem fee\\n   *\\n   * @param _redemptionFee The new redeem fee specified in basis points\\n   *\\n   * @dev The maximum fee that can be set is 10_000 bps, or 100%\\n   */\\n  function setRedemptionFee(\\n    uint256 _redemptionFee\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    if (_redemptionFee > BPS_DENOMINATOR) {\\n      revert FeeTooLarge();\\n    }\\n    uint256 oldRedeemFee = redemptionFee;\\n    redemptionFee = _redemptionFee;\\n    emit RedemptionFeeSet(oldRedeemFee, _redemptionFee);\\n  }\\n\\n  /**\\n   * @notice Admin function to set the address of the Pricer contract\\n   *\\n   * @param newPricer The address of the new pricer contract\\n   */\\n  function setPricer(address newPricer) external onlyRole(MANAGER_ADMIN) {\\n    address oldPricer = address(pricer);\\n    pricer = IPricerReader(newPricer);\\n    emit NewPricerSet(oldPricer, newPricer);\\n  }\\n\\n  /**\\n   * @notice Admin function to set the address of `feeRecipient`\\n   *\\n   * @param newFeeRecipient The address of the new `feeRecipient`\\n   */\\n  function setFeeRecipient(\\n    address newFeeRecipient\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    address oldFeeRecipient = feeRecipient;\\n    feeRecipient = newFeeRecipient;\\n    emit FeeRecipientSet(oldFeeRecipient, feeRecipient);\\n  }\\n\\n  /**\\n   * @notice Admin function to set the address of `assetSender`\\n   *\\n   * @param newAssetSender The address of the new `assetSender`\\n   */\\n  function setAssetSender(\\n    address newAssetSender\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    address oldAssetSender = assetSender;\\n    assetSender = newAssetSender;\\n    emit AssetSenderSet(oldAssetSender, newAssetSender);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                            Pause Utils\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Modifier to check if a feature is paused\\n   *\\n   * @param feature The feature to check if paused\\n   */\\n  modifier ifNotPaused(bool feature) {\\n    if (feature) {\\n      revert FeaturePaused();\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Function to pause subscription to RWAHub\\n   */\\n  function pauseSubscription() external onlyRole(PAUSER_ADMIN) {\\n    subscriptionPaused = true;\\n    emit SubscriptionPaused(msg.sender);\\n  }\\n\\n  /**\\n   * @notice Function to pause redemptions to RWAHub\\n   */\\n  function pauseRedemption() external onlyRole(PAUSER_ADMIN) {\\n    redemptionPaused = true;\\n    emit RedemptionPaused(msg.sender);\\n  }\\n\\n  /**\\n   * @notice Function to unpause subscriptions to RWAHub\\n   */\\n  function unpauseSubscription() external onlyRole(MANAGER_ADMIN) {\\n    subscriptionPaused = false;\\n    emit SubscriptionUnpaused(msg.sender);\\n  }\\n\\n  /**\\n   * @notice Function to unpause redemptions to RWAHub\\n   */\\n  function unpauseRedemption() external onlyRole(MANAGER_ADMIN) {\\n    redemptionPaused = false;\\n    emit RedemptionUnpaused(msg.sender);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                      Check Restriction Utils\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Modifier to check restrictions status of an account\\n   *\\n   * @param account The account to check\\n   */\\n  /*modifier checkRestrictions(address account) {\\n    _checkRestrictions(account);\\n    _;\\n  }*/\\n\\n  /**\\n   * @notice internal function to check restriction status\\n   *         of an address\\n   *\\n   * @param account The account to check restriction status for\\n   *\\n   * @dev This function is virtual to be overridden by child contract\\n   *      to check restrictions on a more granular level\\n   */\\n  //function _checkRestrictions(address account) internal view virtual;\\n\\n  /*//////////////////////////////////////////////////////////////\\n                           Math Utils\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Given amount of `collateral`, returns how much in fees\\n   *         are owed\\n   *\\n   *\\n   * @param collateralAmount Amount `collateral` to calculate fees\\n   *                         (in decimals of `collateral`)\\n   */\\n  function _getMintFees(\\n    uint256 collateralAmount\\n  ) internal view returns (uint256) {\\n    return (collateralAmount * mintFee) / BPS_DENOMINATOR;\\n  }\\n\\n  /**\\n   * @notice Given amount of `collateral`, returns how much in fees\\n   *         are owed\\n   *\\n   * @param collateralAmount Amount of `collateral` to calculate fees\\n   *                         (in decimals of `collateral`)\\n   */\\n  function _getRedemptionFees(\\n    uint256 collateralAmount\\n  ) internal view returns (uint256) {\\n    return (collateralAmount * redemptionFee) / BPS_DENOMINATOR;\\n  }\\n\\n  /**\\n   * @notice Given a deposit amount and priceId, returns the amount\\n   *         of `rwa` due\\n   *\\n   * @param depositAmt The amount deposited in units of `collateral`\\n   * @param price      The price associated with this deposit\\n   */\\n  function _getMintAmountForPrice(\\n    uint256 depositAmt,\\n    uint256 price\\n  ) internal view returns (uint256 rwaAmountOut) {\\n    uint256 amountE36 = _scaleUp(depositAmt) * 1e18;\\n    // Will revert with div by 0 if price not defined for a priceId\\n    rwaAmountOut = amountE36 / price;\\n  }\\n\\n  /**\\n   * @notice Given a redemption amount and a priceId, returns the amount\\n   *         of `collateral` due\\n   *\\n   * @param rwaTokenAmountBurned The amount of `rwa` burned for a redemption\\n   * @param price                The price associated with this redemption\\n   */\\n  function _getRedemptionAmountForRwa(\\n    uint256 rwaTokenAmountBurned,\\n    uint256 price\\n  ) internal view returns (uint256 collateralOwed) {\\n    uint256 amountE36 = rwaTokenAmountBurned * price;\\n    collateralOwed = _scaleDown(amountE36 / 1e18);\\n  }\\n\\n  /**\\n   * @notice Scale provided amount up by `decimalsMultiplier`\\n   *\\n   * @dev This helper is used for converting the collateral's decimals\\n   *      representation to the RWA amount decimals representation.\\n   */\\n  function _scaleUp(uint256 amount) internal view returns (uint256) {\\n    return amount * decimalsMultiplier;\\n  }\\n\\n  /**\\n   * @notice Scale provided amount down by `decimalsMultiplier`\\n   *\\n   * @dev This helper is used for converting `rwa`'s decimal\\n   *      representation to the `collateral`'s decimal representation\\n   */\\n  function _scaleDown(uint256 amount) internal view returns (uint256) {\\n    return amount / decimalsMultiplier;\\n  }\\n}\\n\",\"keccak256\":\"0x43b10191833d4a124fb6edfaacbfbd19eecaefe80df2c13900d32e600bf6ec1a\",\"license\":\"MIT\"},\"contracts/RWAHubOffChainRedemptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"contracts/RWAHub.sol\\\";\\nimport \\\"contracts/interfaces/IRWAHubOffChainRedemptions.sol\\\";\\n\\nabstract contract RWAHubOffChainRedemptions is\\n  RWAHub,\\n  IRWAHubOffChainRedemptions\\n{\\n  // To enable and disable off chain redemptions\\n  bool public offChainRedemptionPaused;\\n\\n  // Minimum off chain redemption amount\\n  uint256 public minimumOffChainRedemptionAmount;\\n\\n  constructor(\\n    address _collateral,\\n    address _rwa,\\n    address managerAdmin,\\n    address pauser,\\n    address _assetSender,\\n    address _feeRecipient,\\n    uint256 _minimumDepositAmount,\\n    uint256 _minimumRedemptionAmount\\n  )\\n    RWAHub(\\n      _collateral,\\n      _rwa,\\n      managerAdmin,\\n      pauser,\\n      _assetSender,\\n      _feeRecipient,\\n      _minimumDepositAmount,\\n      _minimumRedemptionAmount\\n    )\\n  {\\n    // Default to the same minimum redemption amount as for On-Chain\\n    // redemptions.\\n    minimumOffChainRedemptionAmount = _minimumRedemptionAmount;\\n  }\\n\\n  /**\\n   * @notice Request a redemption to be serviced off chain.\\n   *\\n   * @param amountRWATokenToRedeem The requested redemption amount\\n   * @param offChainDestination    A hash of the destination to which\\n   *                               the request should be serviced to.\\n   */\\n  function requestRedemptionServicedOffchain(\\n    uint256 amountRWATokenToRedeem,\\n    bytes32 offChainDestination\\n  ) external nonReentrant ifNotPaused(offChainRedemptionPaused) {\\n    if (amountRWATokenToRedeem < minimumOffChainRedemptionAmount) {\\n      revert RedemptionTooSmall();\\n    }\\n\\n    bytes32 redemptionId = bytes32(redemptionRequestCounter++);\\n\\n    rwa.burnFrom(msg.sender, amountRWATokenToRedeem);\\n\\n    emit RedemptionRequestedServicedOffChain(\\n      msg.sender,\\n      redemptionId,\\n      amountRWATokenToRedeem,\\n      offChainDestination\\n    );\\n  }\\n\\n  /**\\n   * @notice Function to pause off chain redemptoins\\n   */\\n  function pauseOffChainRedemption() external onlyRole(PAUSER_ADMIN) {\\n    offChainRedemptionPaused = true;\\n    emit OffChainRedemptionPaused(msg.sender);\\n  }\\n\\n  /**\\n   * @notice Function to unpause off chain redemptoins\\n   */\\n  function unpauseOffChainRedemption() external onlyRole(MANAGER_ADMIN) {\\n    offChainRedemptionPaused = false;\\n    emit OffChainRedemptionUnpaused(msg.sender);\\n  }\\n\\n  /**\\n   * @notice Admin Function to set the minimum off chain redemption amount\\n   *\\n   * @param _minimumOffChainRedemptionAmount The new minimum off chain\\n   *                                         redemption amount\\n   */\\n  function setOffChainRedemptionMinimum(\\n    uint256 _minimumOffChainRedemptionAmount\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    uint256 oldMinimum = minimumOffChainRedemptionAmount;\\n    minimumOffChainRedemptionAmount = _minimumOffChainRedemptionAmount;\\n    emit OffChainRedemptionMinimumSet(\\n      oldMinimum,\\n      _minimumOffChainRedemptionAmount\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x1378a14239c2b650215734ddea4c24d9cdd11071d78534b5ab20f5d913a2149d\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/utils/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n  struct RoleData {\\n    mapping(address => bool) members;\\n    bytes32 adminRole;\\n  }\\n\\n  mapping(bytes32 => RoleData) private _roles;\\n\\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n  /**\\n   * @dev Modifier that checks that an account has a specific role. Reverts\\n   * with a standardized message including the required role.\\n   *\\n   * The format of the revert reason is given by the following regular expression:\\n   *\\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n   *\\n   * _Available since v4.1._\\n   */\\n  modifier onlyRole(bytes32 role) {\\n    _checkRole(role, _msgSender());\\n    _;\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IAccessControl).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return _roles[role].members[account];\\n  }\\n\\n  /**\\n   * @dev Revert with a standard message if `account` is missing `role`.\\n   *\\n   * The format of the revert reason is given by the following regular expression:\\n   *\\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n   */\\n  function _checkRole(bytes32 role, address account) internal view virtual {\\n    if (!hasRole(role, account)) {\\n      revert(\\n        string(\\n          abi.encodePacked(\\n            \\\"AccessControl: account \\\",\\n            Strings.toHexString(uint160(account), 20),\\n            \\\" is missing role \\\",\\n            Strings.toHexString(uint256(role), 32)\\n          )\\n        )\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bytes32)\\n  {\\n    return _roles[role].adminRole;\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function grantRole(bytes32 role, address account)\\n    public\\n    virtual\\n    override\\n    onlyRole(getRoleAdmin(role))\\n  {\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function revokeRole(bytes32 role, address account)\\n    public\\n    virtual\\n    override\\n    onlyRole(getRoleAdmin(role))\\n  {\\n    _revokeRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   */\\n  function renounceRole(bytes32 role, address account) public virtual override {\\n    require(\\n      account == _msgSender(),\\n      \\\"AccessControl: can only renounce roles for self\\\"\\n    );\\n\\n    _revokeRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event. Note that unlike {grantRole}, this function doesn't perform any\\n   * checks on the calling account.\\n   *\\n   * [WARNING]\\n   * ====\\n   * This function should only be called from the constructor when setting\\n   * up the initial roles for the system.\\n   *\\n   * Using this function in any other way is effectively circumventing the admin\\n   * system imposed by {AccessControl}.\\n   * ====\\n   *\\n   * NOTE: This function is deprecated in favor of {_grantRole}.\\n   */\\n  function _setupRole(bytes32 role, address account) internal virtual {\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Sets `adminRole` as ``role``'s admin role.\\n   *\\n   * Emits a {RoleAdminChanged} event.\\n   */\\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n    bytes32 previousAdminRole = getRoleAdmin(role);\\n    _roles[role].adminRole = adminRole;\\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * Internal function without access restriction.\\n   */\\n  function _grantRole(bytes32 role, address account) internal virtual {\\n    if (!hasRole(role, account)) {\\n      _roles[role].members[account] = true;\\n      emit RoleGranted(role, account, _msgSender());\\n    }\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * Internal function without access restriction.\\n   */\\n  function _revokeRole(bytes32 role, address account) internal virtual {\\n    if (hasRole(role, account)) {\\n      _roles[role].members[account] = false;\\n      emit RoleRevoked(role, account, _msgSender());\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xe7e809b0d89fa668d9707e3c107974a005f2acd136c425cd78f6d828c219aa40\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/access/IAccessControlEnumerable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is\\n  IAccessControlEnumerable,\\n  AccessControl\\n{\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IAccessControlEnumerable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\n   *\\n   * Role bearers are not sorted in any particular way, and their ordering may\\n   * change at any point.\\n   *\\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n   * you perform all queries on the same block. See the following\\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n   * for more information.\\n   */\\n  function getRoleMember(bytes32 role, uint256 index)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (address)\\n  {\\n    return _roleMembers[role].at(index);\\n  }\\n\\n  /**\\n   * @dev Returns the number of accounts that have `role`. Can be used\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\n   */\\n  function getRoleMemberCount(bytes32 role)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _roleMembers[role].length();\\n  }\\n\\n  /**\\n   * @dev Overload {_grantRole} to track enumerable memberships\\n   */\\n  function _grantRole(bytes32 role, address account) internal virtual override {\\n    super._grantRole(role, account);\\n    _roleMembers[role].add(account);\\n  }\\n\\n  /**\\n   * @dev Overload {_revokeRole} to track enumerable memberships\\n   */\\n  function _revokeRole(bytes32 role, address account)\\n    internal\\n    virtual\\n    override\\n  {\\n    super._revokeRole(role, account);\\n    _roleMembers[role].remove(account);\\n  }\\n}\\n\",\"keccak256\":\"0xf0155eaa75c379807c202eb9a0db8a073e5d93d6f9144b42d194c2ecd49ddb33\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n  /**\\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n   *\\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n   * {RoleAdminChanged} not being emitted signaling this.\\n   *\\n   * _Available since v3.1._\\n   */\\n  event RoleAdminChanged(\\n    bytes32 indexed role,\\n    bytes32 indexed previousAdminRole,\\n    bytes32 indexed newAdminRole\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is granted `role`.\\n   *\\n   * `sender` is the account that originated the contract call, an admin role\\n   * bearer except when using {AccessControl-_setupRole}.\\n   */\\n  event RoleGranted(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is revoked `role`.\\n   *\\n   * `sender` is the account that originated the contract call:\\n   *   - if using `revokeRole`, it is the admin role bearer\\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n   */\\n  event RoleRevoked(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function grantRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function revokeRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   */\\n  function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x02787a6b562763467c448f39369285b1903615e81c787f45c0b163a1ff9e07d5\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n  /**\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\n   *\\n   * Role bearers are not sorted in any particular way, and their ordering may\\n   * change at any point.\\n   *\\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n   * you perform all queries on the same block. See the following\\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n   * for more information.\\n   */\\n  function getRoleMember(bytes32 role, uint256 index)\\n    external\\n    view\\n    returns (address);\\n\\n  /**\\n   * @dev Returns the number of accounts that have `role`. Can be used\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\n   */\\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc29b5788f8deef40aee3f1b1f67fdfd7b84ebcc0f0d2e73db14185de07f3c50b\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n  // Booleans are more expensive than uint256 or any type that takes up a full\\n  // word because each write operation emits an extra SLOAD to first read the\\n  // slot's contents, replace the bits taken up by the boolean, and then write\\n  // back. This is the compiler's defense against contract upgrades and\\n  // pointer aliasing, and it cannot be disabled.\\n\\n  // The values being non-zero value makes deployment a bit more expensive,\\n  // but in exchange the refund on every call to nonReentrant will be lower in\\n  // amount. Since refunds are capped to a percentage of the total\\n  // transaction's gas, it is best to keep them low in cases like this one, to\\n  // increase the likelihood of the full refund coming into effect.\\n  uint256 private constant _NOT_ENTERED = 1;\\n  uint256 private constant _ENTERED = 2;\\n\\n  uint256 private _status;\\n\\n  constructor() {\\n    _status = _NOT_ENTERED;\\n  }\\n\\n  /**\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n   * Calling a `nonReentrant` function from another `nonReentrant`\\n   * function is not supported. It is possible to prevent this from happening\\n   * by making the `nonReentrant` function external, and making it call a\\n   * `private` function that does the actual work.\\n   */\\n  modifier nonReentrant() {\\n    // On the first call to nonReentrant, _notEntered will be true\\n    require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n    // Any calls to nonReentrant after this point will fail\\n    _status = _ENTERED;\\n\\n    _;\\n\\n    // By storing the original value once again, a refund is triggered (see\\n    // https://eips.ethereum.org/EIPS/eip-2200)\\n    _status = _NOT_ENTERED;\\n  }\\n}\\n\",\"keccak256\":\"0x0134fde2cc9450792bc761f05588383e3b1baf78454dba8b6a592dd39895cd08\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x2d0b233e43b64bb4afb057ccc16493c9b3c22d334a4ac6636915c7ef7f06b118\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/token/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/token/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token.\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the decimals places of the token.\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x099220ebd191f57aa291f8c00866eb8c943680d9790d46ec82010b933d68550f\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/token/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/token/IERC20.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transfer.selector, to, value)\\n    );\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n    );\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n   * {IERC20-approve}, and its usage is discouraged.\\n   *\\n   * Whenever possible, use {safeIncreaseAllowance} and\\n   * {safeDecreaseAllowance} instead.\\n   */\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    // safeApprove should only be called when setting an initial allowance,\\n    // or when resetting it to zero. To increase and decrease it, use\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    );\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, value)\\n    );\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function safeDecreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    unchecked {\\n      uint256 oldAllowance = token.allowance(address(this), spender);\\n      require(\\n        oldAllowance >= value,\\n        \\\"SafeERC20: decreased allowance below zero\\\"\\n      );\\n      uint256 newAllowance = oldAllowance - value;\\n      _callOptionalReturn(\\n        token,\\n        abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   * @param token The token targeted by the call.\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\n   */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata =\\n      address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(\\n        abi.decode(returndata, (bool)),\\n        \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n      );\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x7d9d09b80a08d34c67244192d626551d2d4921328ac5aa3f0839e7daa48ac6c0\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(\\n      success,\\n      \\\"Address: unable to send value, recipient may have reverted\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data)\\n    internal\\n    returns (bytes memory)\\n  {\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return\\n      functionCallWithValue(\\n        target,\\n        data,\\n        value,\\n        \\\"Address: low-level call with value failed\\\"\\n      );\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(\\n      address(this).balance >= value,\\n      \\\"Address: insufficient balance for call\\\"\\n    );\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data)\\n    internal\\n    view\\n    returns (bytes memory)\\n  {\\n    return\\n      functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data)\\n    internal\\n    returns (bytes memory)\\n  {\\n    return\\n      functionDelegateCall(\\n        target,\\n        data,\\n        \\\"Address: low-level delegate call failed\\\"\\n      );\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x40bfbd7537f14756fbb70025e858781190d73b9cc60ab85c3f518de6268a40da\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0x197651ff7207345936e19940e36235967fe866449caa294e19642b6c6aaa62f8\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/utils/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return interfaceId == type(IERC165).interfaceId;\\n  }\\n}\\n\",\"keccak256\":\"0x092935b6d168de393154e5b5622bbc5f57c99eb14a5a5af3dc2cda6a19add989\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      if (lastIndex != toDeleteIndex) {\\n        bytes32 lastvalue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastvalue;\\n        // Update the index for the moved value\\n        set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function _contains(Set storage set, bytes32 value)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    return set._values[index];\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\n    return set._values;\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value)\\n    internal\\n    returns (bool)\\n  {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index)\\n    internal\\n    view\\n    returns (bytes32)\\n  {\\n    return _at(set._inner, index);\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(Bytes32Set storage set)\\n    internal\\n    view\\n    returns (bytes32[] memory)\\n  {\\n    return _values(set._inner);\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value)\\n    internal\\n    returns (bool)\\n  {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(AddressSet storage set)\\n    internal\\n    view\\n    returns (address[] memory)\\n  {\\n    bytes32[] memory store = _values(set._inner);\\n    address[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(UintSet storage set, uint256 value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintSet storage set, uint256 index)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return uint256(_at(set._inner, index));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(UintSet storage set)\\n    internal\\n    view\\n    returns (uint256[] memory)\\n  {\\n    bytes32[] memory store = _values(set._inner);\\n    uint256[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x6dfd57320c54054f69d620239b72c0230a3912520dff78f26dec2a709592555c\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x64e1d4f776a4bf02f7ab4187741c2e50c767bfa04f4ef1f920edba78c2918020\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n  bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0x00\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 length = 0;\\n    while (temp != 0) {\\n      length++;\\n      temp >>= 8;\\n    }\\n    return toHexString(value, length);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n   */\\n  function toHexString(uint256 value, uint256 length)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n      value >>= 4;\\n    }\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\n    return string(buffer);\\n  }\\n}\\n\",\"keccak256\":\"0x132805e1b4569cd64ef45bb19ce1f3387263de8d8c9b28926bd8eb1e44bba84a\",\"license\":\"MIT\"},\"contracts/interfaces/IPricerReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IPricerReader {\\n  /**\\n   * @notice Gets the latest price of the asset\\n   *\\n   * @return uint256 The latest price of the asset\\n   */\\n  function getLatestPrice() external view returns (uint256);\\n\\n  /**\\n   * @notice Gets the price of the asset at a specific priceId\\n   *\\n   * @param priceId The priceId at which to get the price\\n   *\\n   * @return uint256 The price of the asset with the given priceId\\n   */\\n  function getPrice(uint256 priceId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf8fc0dbad93e41a2815909ba3187e0e416be4565e1bb3a25413223a41add1b9d\",\"license\":\"MIT\"},\"contracts/interfaces/IRWAHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IRWAHub {\\n  // Struct to contain the deposit information for a given depositId\\n  struct Depositor {\\n    address user;\\n    uint256 amountDepositedMinusFees;\\n    uint256 priceId;\\n  }\\n\\n  // Struc to contain withdrawal infromation for a given redemptionId\\n  struct Redeemer {\\n    address user;\\n    uint256 amountRwaTokenBurned;\\n    uint256 priceId;\\n  }\\n\\n  function requestSubscription(uint256 amount) external;\\n\\n  function claimMint(bytes32[] calldata depositIds) external;\\n\\n  function requestRedemption(uint256 amount) external;\\n\\n  function claimRedemption(bytes32[] calldata redemptionIds) external;\\n\\n  function addProof(\\n    bytes32 txHash,\\n    address user,\\n    uint256 depositAmountAfterFee,\\n    uint256 feeAmount,\\n    uint256 timestamp\\n  ) external;\\n\\n  function setPriceIdForDeposits(\\n    bytes32[] calldata depositIds,\\n    uint256[] calldata priceIds\\n  ) external;\\n\\n  function setPriceIdForRedemptions(\\n    bytes32[] calldata redemptionIds,\\n    uint256[] calldata priceIds\\n  ) external;\\n\\n  function setPricer(address newPricer) external;\\n\\n  function overwriteDepositor(\\n    bytes32 depositIdToOverride,\\n    address user,\\n    uint256 depositAmountAfterFee,\\n    uint256 priceId\\n  ) external;\\n\\n  function overwriteRedeemer(\\n    bytes32 redemptionIdToOverride,\\n    address user,\\n    uint256 rwaTokenAmountBurned,\\n    uint256 priceId\\n  ) external;\\n\\n  /**\\n   * @notice Event emitted when fee recipient is set\\n   *\\n   * @param oldFeeRecipient Old fee recipient\\n   * @param newFeeRecipient New fee recipient\\n   */\\n  event FeeRecipientSet(address oldFeeRecipient, address newFeeRecipient);\\n\\n  /**\\n   * @notice Event emitted when the assetSender is changed\\n   *\\n   * @param oldAssetSender The address of the old assetSender\\n   * @param newAssetSender The address of the new assetSender\\n   */\\n  event AssetSenderSet(address oldAssetSender, address newAssetSender);\\n\\n  /**\\n   * @notice Event emitted when minimum deposit amount is set\\n   *\\n   * @param oldMinimum Old minimum\\n   * @param newMinimum New minimum\\n   *\\n   * @dev See inheriting contract for decimals representation\\n   */\\n  event MinimumDepositAmountSet(uint256 oldMinimum, uint256 newMinimum);\\n\\n  /**\\n   * @notice Event emitted when a new redeem minimum is set.\\n   *         All units are in 1e18\\n   *\\n   * @param oldRedemptionMin The old redeem minimum value\\n   * @param newRedemptionMin The new redeem minimum value\\n   */\\n  event MinimumRedemptionAmountSet(\\n    uint256 oldRedemptionMin,\\n    uint256 newRedemptionMin\\n  );\\n\\n  /**\\n   * @notice Event emitted when mint fee is set\\n   *\\n   * @param oldFee Old fee\\n   * @param newFee New fee\\n   *\\n   * @dev See inheriting contract for decimals representation\\n   */\\n  event MintFeeSet(uint256 oldFee, uint256 newFee);\\n\\n  /**\\n   * @notice Event emitted when redeem fee is set\\n   *\\n   * @param oldFee Old fee\\n   * @param newFee New fee\\n   *\\n   * @dev see inheriting contract for decimal representation\\n   */\\n  event RedemptionFeeSet(uint256 oldFee, uint256 newFee);\\n\\n  /**\\n   * @notice Event emitted when redemption request is submitted\\n   *\\n   * @param user         The user submitting the redemption request\\n   * @param redemptionId The id corresponding to a given redemption\\n   * @param rwaAmountIn  The amount of cash being burned\\n   */\\n  event RedemptionRequested(\\n    address indexed user,\\n    bytes32 indexed redemptionId,\\n    uint256 rwaAmountIn\\n  );\\n\\n  /**\\n   * @notice Event emitted when a mint request is submitted\\n   *\\n   * @param user                      The user requesting to mint\\n   * @param depositId                 The depositId of the request\\n   * @param collateralAmountDeposited The total amount deposited\\n   * @param depositAmountAfterFee     The value deposited - fee\\n   * @param feeAmount                 The fee amount taken\\n   *                                  (units of collateral)\\n   */\\n  event MintRequested(\\n    address indexed user,\\n    bytes32 indexed depositId,\\n    uint256 collateralAmountDeposited,\\n    uint256 depositAmountAfterFee,\\n    uint256 feeAmount\\n  );\\n\\n  /**\\n   * @notice Event emitted when a redemption request is completed\\n   *\\n   * @param user                     The address of the user getting the funds\\n   * @param redemptionId             The id corresponding to a given redemption\\n   *                                 requested\\n   * @param rwaAmountRequested       Amount of RWA originally requested by the user\\n   * @param collateralAmountReturned Amount of collateral received by the user\\n   * @param price                    The price at which the redemption was\\n   *                                 serviced at\\n   */\\n  event RedemptionCompleted(\\n    address indexed user,\\n    bytes32 indexed redemptionId,\\n    uint256 rwaAmountRequested,\\n    uint256 collateralAmountReturned,\\n    uint256 price\\n  );\\n\\n  /**\\n   * @notice Event emitted when a Mint request is completed\\n   *\\n   * @param user                      The address of the user getting the funds\\n   * @param depositId                 The depositId of the mint request\\n   * @param rwaAmountOut              The amount of RWA token minted to the\\n   *                                  user\\n   * @param collateralAmountDeposited The amount of collateral deposited\\n   * @param price                     The price set for the given\\n   *                                  deposit id\\n   * @param priceId                   The priceId used to determine price\\n   */\\n  event MintCompleted(\\n    address indexed user,\\n    bytes32 indexed depositId,\\n    uint256 rwaAmountOut,\\n    uint256 collateralAmountDeposited,\\n    uint256 price,\\n    uint256 priceId\\n  );\\n\\n  /**\\n   * @notice Event emitted when a deposit has its corresponding priceId set\\n   *\\n   * @param depositIdSet The Deposit Id for which the price Id is being set\\n   * @param priceIdSet   The price Id being associate with a deposit Id\\n   */\\n  event PriceIdSetForDeposit(\\n    bytes32 indexed depositIdSet,\\n    uint256 indexed priceIdSet\\n  );\\n\\n  /**\\n   * @notice Event Emitted when a redemption has its corresponding priceId set\\n   *\\n   * @param redemptionIdSet The Redemption Id for which the price Id is being\\n   *                        set\\n   * @param priceIdSet      The Price Id being associated with a redemption Id\\n   */\\n  event PriceIdSetForRedemption(\\n    bytes32 indexed redemptionIdSet,\\n    uint256 indexed priceIdSet\\n  );\\n\\n  /**\\n   * @notice Event emitted when a new Pricer contract is set\\n   *\\n   * @param oldPricer The address of the old pricer contract\\n   * @param newPricer The address of the new pricer contract\\n   */\\n  event NewPricerSet(address oldPricer, address newPricer);\\n\\n  /**\\n   * @notice Event emitted when deposit proof has been added\\n   *\\n   * @param txHash                Tx hash of the deposit\\n   * @param user                  Address of the user who made the deposit\\n   * @param depositAmountAfterFee Amount of the deposit after fees\\n   * @param feeAmount             Amount of fees taken\\n   * @param timestamp             Timestamp of the deposit\\n   */\\n  event DepositProofAdded(\\n    bytes32 indexed txHash,\\n    address indexed user,\\n    uint256 depositAmountAfterFee,\\n    uint256 feeAmount,\\n    uint256 timestamp\\n  );\\n\\n  /**\\n   * @notice Event emitted when subscriptions are paused\\n   *\\n   * @param caller Address which initiated the pause\\n   */\\n  event SubscriptionPaused(address caller);\\n\\n  /**\\n   * @notice Event emitted when redemptions are paused\\n   *\\n   * @param caller Address which initiated the pause\\n   */\\n  event RedemptionPaused(address caller);\\n\\n  /**\\n   * @notice Event emitted when subscriptions are unpaused\\n   *\\n   * @param caller Address which initiated the unpause\\n   */\\n  event SubscriptionUnpaused(address caller);\\n\\n  /**\\n   * @notice Event emitted when redemptions are unpaused\\n   *\\n   * @param caller Address which initiated the unpause\\n   */\\n  event RedemptionUnpaused(address caller);\\n\\n  event DepositorOverwritten(\\n    bytes32 indexed depositId,\\n    address oldDepositor,\\n    address newDepositor,\\n    uint256 oldPriceId,\\n    uint256 newPriceId,\\n    uint256 oldDepositAmount,\\n    uint256 newDepositAmount\\n  );\\n\\n  event RedeemerOverwritten(\\n    bytes32 indexed redemptionId,\\n    address oldRedeemer,\\n    address newRedeemer,\\n    uint256 oldPriceId,\\n    uint256 newPriceId,\\n    uint256 oldRWATokenAmountBurned,\\n    uint256 newRWATokenAmountBurned\\n  );\\n\\n  /// ERRORS ///\\n  error PriceIdNotSet();\\n  error ArraySizeMismatch();\\n  error DepositTooSmall();\\n  error RedemptionTooSmall();\\n  error TxnAlreadyValidated();\\n  error CollateralCannotBeZero();\\n  error RWACannotBeZero();\\n  error AssetSenderCannotBeZero();\\n  error FeeRecipientCannotBeZero();\\n  error FeeTooLarge();\\n  error AmountTooSmall();\\n  error DepositorNull();\\n  error RedeemerNull();\\n  error DepositProofAlreadyExists();\\n  error FeaturePaused();\\n  error PriceIdAlreadySet();\\n}\\n\",\"keccak256\":\"0x4b67d5db4ec8244fe8585660e221b0d5b228373416010e87b00e693ef6de1c1a\",\"license\":\"MIT\"},\"contracts/interfaces/IRWAHubOffChainRedemptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IRWAHubOffChainRedemptions {\\n  function requestRedemptionServicedOffchain(\\n    uint256 amountRWATokenToRedeem,\\n    bytes32 offChainDestination\\n  ) external;\\n\\n  function pauseOffChainRedemption() external;\\n\\n  function unpauseOffChainRedemption() external;\\n\\n  function setOffChainRedemptionMinimum(uint256 minimumAmount) external;\\n\\n  /**\\n   * @notice Event emitted when redemption request is submitted\\n   *\\n   * @param user                The user submitting the offchain redemption request\\n   * @param redemptionId        The id corresponding to a given offchain redemption request\\n   * @param rwaTokenAmountIn    The amount of cash being burned\\n   * @param offChainDestination Hash of destination to which the request\\n   *                            should be serviced to\\n   */\\n  event RedemptionRequestedServicedOffChain(\\n    address indexed user,\\n    bytes32 indexed redemptionId,\\n    uint256 rwaTokenAmountIn,\\n    bytes32 offChainDestination\\n  );\\n\\n  /**\\n   * @notice Event emitted when the off chain redemption feature is\\n   *         paused\\n   *\\n   * @param caller Address which initiated the pause\\n   */\\n  event OffChainRedemptionPaused(address caller);\\n\\n  /**\\n   * @notice Event emitted when the off chain redemption feature is\\n   *         unpaused\\n   *\\n   * @param caller Address which initiated the unpause\\n   */\\n  event OffChainRedemptionUnpaused(address caller);\\n\\n  /**\\n   * @notice Event emitted when the off chain redemption minimum is\\n   *         updated\\n   *\\n   * @param oldMinimum the old minimum redemption amount\\n   * @param newMinimum the new minimum redemption amount\\n   */\\n  event OffChainRedemptionMinimumSet(uint256 oldMinimum, uint256 newMinimum);\\n}\\n\",\"keccak256\":\"0xda800df582ec6f2bb99943deadb14bdcdd9203718d3be5f7cbfaac6b118e2fb0\",\"license\":\"MIT\"},\"contracts/interfaces/IRWALike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n// This interface is not inherited directly by RWA, instead, it is a\\n// subset of functions provided by all RWA tokens that the RWA Hub\\n// Client uses.\\nimport \\\"contracts/external/openzeppelin/contracts/token/IERC20.sol\\\";\\n\\ninterface IRWALike is IERC20 {\\n  function mint(address to, uint256 amount) external;\\n\\n  function burn(uint256 amount) external;\\n\\n  function burnFrom(address from, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x990096ba99f5588e7a377baee18809e8fb0dfd9d14aad08281adb7defcb703ea\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2031,"contract":"contracts/RWAHubOffChainRedemptions.sol:RWAHubOffChainRedemptions","label":"_status","offset":0,"slot":"0","type":"t_uint256"},{"astId":1513,"contract":"contracts/RWAHubOffChainRedemptions.sol:RWAHubOffChainRedemptions","label":"_roles","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_struct(RoleData)1508_storage)"},{"astId":1816,"contract":"contracts/RWAHubOffChainRedemptions.sol:RWAHubOffChainRedemptions","label":"_roleMembers","offset":0,"slot":"2","type":"t_mapping(t_bytes32,t_struct(AddressSet)3040_storage)"},{"astId":25,"contract":"contracts/RWAHubOffChainRedemptions.sol:RWAHubOffChainRedemptions","label":"pricer","offset":0,"slot":"3","type":"t_contract(IPricerReader)3584"},{"astId":30,"contract":"contracts/RWAHubOffChainRedemptions.sol:RWAHubOffChainRedemptions","label":"assetSender","offset":0,"slot":"4","type":"t_address"},{"astId":32,"contract":"contracts/RWAHubOffChainRedemptions.sol:RWAHubOffChainRedemptions","label":"feeRecipient","offset":0,"slot":"5","type":"t_address"},{"astId":37,"contract":"contracts/RWAHubOffChainRedemptions.sol:RWAHubOffChainRedemptions","label":"depositIdToDepositor","offset":0,"slot":"6","type":"t_mapping(t_bytes32,t_struct(Depositor)3593_storage)"},{"astId":42,"contract":"contracts/RWAHubOffChainRedemptions.sol:RWAHubOffChainRedemptions","label":"redemptionIdToRedeemer","offset":0,"slot":"7","type":"t_mapping(t_bytes32,t_struct(Redeemer)3600_storage)"},{"astId":45,"contract":"contracts/RWAHubOffChainRedemptions.sol:RWAHubOffChainRedemptions","label":"minimumDepositAmount","offset":0,"slot":"8","type":"t_uint256"},{"astId":47,"contract":"contracts/RWAHubOffChainRedemptions.sol:RWAHubOffChainRedemptions","label":"minimumRedemptionAmount","offset":0,"slot":"9","type":"t_uint256"},{"astId":50,"contract":"contracts/RWAHubOffChainRedemptions.sol:RWAHubOffChainRedemptions","label":"mintFee","offset":0,"slot":"10","type":"t_uint256"},{"astId":53,"contract":"contracts/RWAHubOffChainRedemptions.sol:RWAHubOffChainRedemptions","label":"redemptionFee","offset":0,"slot":"11","type":"t_uint256"},{"astId":61,"contract":"contracts/RWAHubOffChainRedemptions.sol:RWAHubOffChainRedemptions","label":"subscriptionRequestCounter","offset":0,"slot":"12","type":"t_uint256"},{"astId":64,"contract":"contracts/RWAHubOffChainRedemptions.sol:RWAHubOffChainRedemptions","label":"redemptionRequestCounter","offset":0,"slot":"13","type":"t_uint256"},{"astId":69,"contract":"contracts/RWAHubOffChainRedemptions.sol:RWAHubOffChainRedemptions","label":"redemptionPaused","offset":0,"slot":"14","type":"t_bool"},{"astId":71,"contract":"contracts/RWAHubOffChainRedemptions.sol:RWAHubOffChainRedemptions","label":"subscriptionPaused","offset":1,"slot":"14","type":"t_bool"},{"astId":1205,"contract":"contracts/RWAHubOffChainRedemptions.sol:RWAHubOffChainRedemptions","label":"offChainRedemptionPaused","offset":2,"slot":"14","type":"t_bool"},{"astId":1207,"contract":"contracts/RWAHubOffChainRedemptions.sol:RWAHubOffChainRedemptions","label":"minimumOffChainRedemptionAmount","offset":0,"slot":"15","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"base":"t_bytes32","encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(IPricerReader)3584":{"encoding":"inplace","label":"contract IPricerReader","numberOfBytes":"20"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(AddressSet)3040_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct EnumerableSet.AddressSet)","numberOfBytes":"32","value":"t_struct(AddressSet)3040_storage"},"t_mapping(t_bytes32,t_struct(Depositor)3593_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct IRWAHub.Depositor)","numberOfBytes":"32","value":"t_struct(Depositor)3593_storage"},"t_mapping(t_bytes32,t_struct(Redeemer)3600_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct IRWAHub.Redeemer)","numberOfBytes":"32","value":"t_struct(Redeemer)3600_storage"},"t_mapping(t_bytes32,t_struct(RoleData)1508_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)1508_storage"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(AddressSet)3040_storage":{"encoding":"inplace","label":"struct EnumerableSet.AddressSet","members":[{"astId":3039,"contract":"contracts/RWAHubOffChainRedemptions.sol:RWAHubOffChainRedemptions","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)2739_storage"}],"numberOfBytes":"64"},"t_struct(Depositor)3593_storage":{"encoding":"inplace","label":"struct IRWAHub.Depositor","members":[{"astId":3588,"contract":"contracts/RWAHubOffChainRedemptions.sol:RWAHubOffChainRedemptions","label":"user","offset":0,"slot":"0","type":"t_address"},{"astId":3590,"contract":"contracts/RWAHubOffChainRedemptions.sol:RWAHubOffChainRedemptions","label":"amountDepositedMinusFees","offset":0,"slot":"1","type":"t_uint256"},{"astId":3592,"contract":"contracts/RWAHubOffChainRedemptions.sol:RWAHubOffChainRedemptions","label":"priceId","offset":0,"slot":"2","type":"t_uint256"}],"numberOfBytes":"96"},"t_struct(Redeemer)3600_storage":{"encoding":"inplace","label":"struct IRWAHub.Redeemer","members":[{"astId":3595,"contract":"contracts/RWAHubOffChainRedemptions.sol:RWAHubOffChainRedemptions","label":"user","offset":0,"slot":"0","type":"t_address"},{"astId":3597,"contract":"contracts/RWAHubOffChainRedemptions.sol:RWAHubOffChainRedemptions","label":"amountRwaTokenBurned","offset":0,"slot":"1","type":"t_uint256"},{"astId":3599,"contract":"contracts/RWAHubOffChainRedemptions.sol:RWAHubOffChainRedemptions","label":"priceId","offset":0,"slot":"2","type":"t_uint256"}],"numberOfBytes":"96"},"t_struct(RoleData)1508_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":1505,"contract":"contracts/RWAHubOffChainRedemptions.sol:RWAHubOffChainRedemptions","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":1507,"contract":"contracts/RWAHubOffChainRedemptions.sol:RWAHubOffChainRedemptions","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(Set)2739_storage":{"encoding":"inplace","label":"struct EnumerableSet.Set","members":[{"astId":2734,"contract":"contracts/RWAHubOffChainRedemptions.sol:RWAHubOffChainRedemptions","label":"_values","offset":0,"slot":"0","type":"t_array(t_bytes32)dyn_storage"},{"astId":2738,"contract":"contracts/RWAHubOffChainRedemptions.sol:RWAHubOffChainRedemptions","label":"_indexes","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_uint256)"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"PriceIdNotSet()":[{"notice":"ERRORS ///"}]},"events":{"AssetSenderSet(address,address)":{"notice":"Event emitted when the assetSender is changed"},"DepositProofAdded(bytes32,address,uint256,uint256,uint256)":{"notice":"Event emitted when deposit proof has been added"},"FeeRecipientSet(address,address)":{"notice":"Event emitted when fee recipient is set"},"MinimumDepositAmountSet(uint256,uint256)":{"notice":"Event emitted when minimum deposit amount is set"},"MinimumRedemptionAmountSet(uint256,uint256)":{"notice":"Event emitted when a new redeem minimum is set.         All units are in 1e18"},"MintCompleted(address,bytes32,uint256,uint256,uint256,uint256)":{"notice":"Event emitted when a Mint request is completed"},"MintFeeSet(uint256,uint256)":{"notice":"Event emitted when mint fee is set"},"MintRequested(address,bytes32,uint256,uint256,uint256)":{"notice":"Event emitted when a mint request is submitted"},"NewPricerSet(address,address)":{"notice":"Event emitted when a new Pricer contract is set"},"OffChainRedemptionMinimumSet(uint256,uint256)":{"notice":"Event emitted when the off chain redemption minimum is         updated"},"OffChainRedemptionPaused(address)":{"notice":"Event emitted when the off chain redemption feature is         paused"},"OffChainRedemptionUnpaused(address)":{"notice":"Event emitted when the off chain redemption feature is         unpaused"},"PriceIdSetForDeposit(bytes32,uint256)":{"notice":"Event emitted when a deposit has its corresponding priceId set"},"PriceIdSetForRedemption(bytes32,uint256)":{"notice":"Event Emitted when a redemption has its corresponding priceId set"},"RedemptionCompleted(address,bytes32,uint256,uint256,uint256)":{"notice":"Event emitted when a redemption request is completed"},"RedemptionFeeSet(uint256,uint256)":{"notice":"Event emitted when redeem fee is set"},"RedemptionPaused(address)":{"notice":"Event emitted when redemptions are paused"},"RedemptionRequested(address,bytes32,uint256)":{"notice":"Event emitted when redemption request is submitted"},"RedemptionRequestedServicedOffChain(address,bytes32,uint256,bytes32)":{"notice":"Event emitted when redemption request is submitted"},"RedemptionUnpaused(address)":{"notice":"Event emitted when redemptions are unpaused"},"SubscriptionPaused(address)":{"notice":"Event emitted when subscriptions are paused"},"SubscriptionUnpaused(address)":{"notice":"Event emitted when subscriptions are unpaused"}},"kind":"user","methods":{"addProof(bytes32,address,uint256,uint256,uint256)":{"notice":"Adds a deposit proof to the contract"},"claimMint(bytes32[])":{"notice":"Function used to claim tokens corresponding to a deposit request"},"claimRedemption(bytes32[])":{"notice":"Function to claim collateral corresponding to a redemption request"},"overwriteDepositor(bytes32,address,uint256,uint256)":{"notice":"Admin function to overwrite entries in the depoitIdToDepositor         mapping"},"overwriteRedeemer(bytes32,address,uint256,uint256)":{"notice":"Admin function to overwrite entries in the redemptionIdToRedeemer         mapping"},"pauseOffChainRedemption()":{"notice":"Function to pause off chain redemptoins"},"pauseRedemption()":{"notice":"Function to pause redemptions to RWAHub"},"pauseSubscription()":{"notice":"Function to pause subscription to RWAHub"},"requestRedemption(uint256)":{"notice":"Function used by users to request a redemption from the fund"},"requestRedemptionServicedOffchain(uint256,bytes32)":{"notice":"Request a redemption to be serviced off chain."},"requestSubscription(uint256)":{"notice":"Function used by users to request subscription to the fund"},"setAssetSender(address)":{"notice":"Admin function to set the address of `assetSender`"},"setFeeRecipient(address)":{"notice":"Admin function to set the address of `feeRecipient`"},"setMinimumDepositAmount(uint256)":{"notice":"Admin function to set the minimum amount required for a deposit"},"setMinimumRedemptionAmount(uint256)":{"notice":"Admin function to set the minimum amount to redeem"},"setMintFee(uint256)":{"notice":"Admin function to set the mint fee"},"setOffChainRedemptionMinimum(uint256)":{"notice":"Admin Function to set the minimum off chain redemption amount"},"setPriceIdForDeposits(bytes32[],uint256[])":{"notice":"Admin function to associate a depositId with a given Price Id"},"setPriceIdForRedemptions(bytes32[],uint256[])":{"notice":"Admin function to associate redemptionId with a given priceId"},"setPricer(address)":{"notice":"Admin function to set the address of the Pricer contract"},"setRedemptionFee(uint256)":{"notice":"Admin function to set the redeem fee"},"unpauseOffChainRedemption()":{"notice":"Function to unpause off chain redemptoins"},"unpauseRedemption()":{"notice":"Function to unpause redemptions to RWAHub"},"unpauseSubscription()":{"notice":"Function to unpause subscriptions to RWAHub"}},"version":1}}},"contracts/abby/ABBYManager.sol":{"ABBYManager":{"abi":[{"inputs":[{"internalType":"address","name":"_collateral","type":"address"},{"internalType":"address","name":"_rwa","type":"address"},{"internalType":"address","name":"managerAdmin","type":"address"},{"internalType":"address","name":"pauser","type":"address"},{"internalType":"address","name":"_assetSender","type":"address"},{"internalType":"address","name":"_feeRecipient","type":"address"},{"internalType":"uint256","name":"_minimumDepositAmount","type":"uint256"},{"internalType":"uint256","name":"_minimumRedemptionAmount","type":"uint256"},{"internalType":"address","name":"blocklist","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AmountTooSmall","type":"error"},{"inputs":[],"name":"ArraySizeMismatch","type":"error"},{"inputs":[],"name":"AssetSenderCannotBeZero","type":"error"},{"inputs":[],"name":"ClaimableTimestampInPast","type":"error"},{"inputs":[],"name":"ClaimableTimestampNotSet","type":"error"},{"inputs":[],"name":"CollateralCannotBeZero","type":"error"},{"inputs":[],"name":"DepositProofAlreadyExists","type":"error"},{"inputs":[],"name":"DepositTooSmall","type":"error"},{"inputs":[],"name":"DepositorNull","type":"error"},{"inputs":[],"name":"FeaturePaused","type":"error"},{"inputs":[],"name":"FeeRecipientCannotBeZero","type":"error"},{"inputs":[],"name":"FeeTooLarge","type":"error"},{"inputs":[],"name":"MintNotYetClaimable","type":"error"},{"inputs":[],"name":"PriceIdAlreadySet","type":"error"},{"inputs":[],"name":"PriceIdNotSet","type":"error"},{"inputs":[],"name":"RWACannotBeZero","type":"error"},{"inputs":[],"name":"RedeemerNull","type":"error"},{"inputs":[],"name":"RedemptionTooSmall","type":"error"},{"inputs":[],"name":"TxnAlreadyValidated","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oldAssetSender","type":"address"},{"indexed":false,"internalType":"address","name":"newAssetSender","type":"address"}],"name":"AssetSenderSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"claimTimestamp","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"depositId","type":"bytes32"}],"name":"ClaimableTimestampSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"txHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"depositAmountAfterFee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"feeAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"DepositProofAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"depositId","type":"bytes32"},{"indexed":false,"internalType":"address","name":"oldDepositor","type":"address"},{"indexed":false,"internalType":"address","name":"newDepositor","type":"address"},{"indexed":false,"internalType":"uint256","name":"oldPriceId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newPriceId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"oldDepositAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDepositAmount","type":"uint256"}],"name":"DepositorOverwritten","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oldFeeRecipient","type":"address"},{"indexed":false,"internalType":"address","name":"newFeeRecipient","type":"address"}],"name":"FeeRecipientSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldMinimum","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newMinimum","type":"uint256"}],"name":"MinimumDepositAmountSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldRedemptionMin","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newRedemptionMin","type":"uint256"}],"name":"MinimumRedemptionAmountSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"bytes32","name":"depositId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"rwaAmountOut","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"collateralAmountDeposited","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"priceId","type":"uint256"}],"name":"MintCompleted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldFee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newFee","type":"uint256"}],"name":"MintFeeSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"bytes32","name":"depositId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"collateralAmountDeposited","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"depositAmountAfterFee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"feeAmount","type":"uint256"}],"name":"MintRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oldPricer","type":"address"},{"indexed":false,"internalType":"address","name":"newPricer","type":"address"}],"name":"NewPricerSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldMinimum","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newMinimum","type":"uint256"}],"name":"OffChainRedemptionMinimumSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"OffChainRedemptionPaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"OffChainRedemptionUnpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"depositIdSet","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"priceIdSet","type":"uint256"}],"name":"PriceIdSetForDeposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"redemptionIdSet","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"priceIdSet","type":"uint256"}],"name":"PriceIdSetForRedemption","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"redemptionId","type":"bytes32"},{"indexed":false,"internalType":"address","name":"oldRedeemer","type":"address"},{"indexed":false,"internalType":"address","name":"newRedeemer","type":"address"},{"indexed":false,"internalType":"uint256","name":"oldPriceId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newPriceId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"oldRWATokenAmountBurned","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newRWATokenAmountBurned","type":"uint256"}],"name":"RedeemerOverwritten","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"bytes32","name":"redemptionId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"rwaAmountRequested","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"collateralAmountReturned","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"}],"name":"RedemptionCompleted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldFee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newFee","type":"uint256"}],"name":"RedemptionFeeSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"RedemptionPaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"bytes32","name":"redemptionId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"rwaAmountIn","type":"uint256"}],"name":"RedemptionRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"bytes32","name":"redemptionId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"rwaTokenAmountIn","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"offChainDestination","type":"bytes32"}],"name":"RedemptionRequestedServicedOffChain","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"RedemptionUnpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"SubscriptionPaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"SubscriptionUnpaused","type":"event"},{"inputs":[],"name":"BPS_DENOMINATOR","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MANAGER_ADMIN","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PAUSER_ADMIN","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PRICE_ID_SETTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"RELAYER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TIMESTAMP_SETTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"txHash","type":"bytes32"},{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"depositAmountAfterFee","type":"uint256"},{"internalType":"uint256","name":"feeAmount","type":"uint256"},{"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"addProof","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"assetRecipient","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"assetSender","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"depositIds","type":"bytes32[]"}],"name":"claimMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"redemptionIds","type":"bytes32[]"}],"name":"claimRedemption","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"collateral","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimalsMultiplier","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"depositIdToClaimableTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"depositIdToDepositor","outputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"amountDepositedMinusFees","type":"uint256"},{"internalType":"uint256","name":"priceId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeRecipient","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minimumDepositAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minimumOffChainRedemptionAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minimumRedemptionAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"mintFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"offChainRedemptionPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"depositIdToOverwrite","type":"bytes32"},{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"depositAmountAfterFee","type":"uint256"},{"internalType":"uint256","name":"priceId","type":"uint256"}],"name":"overwriteDepositor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"redemptionIdToOverwrite","type":"bytes32"},{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"rwaTokenAmountBurned","type":"uint256"},{"internalType":"uint256","name":"priceId","type":"uint256"}],"name":"overwriteRedeemer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pauseOffChainRedemption","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pauseRedemption","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pauseSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pricer","outputs":[{"internalType":"contract IPricerReader","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"redemptionFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"redemptionIdToRedeemer","outputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"amountRwaTokenBurned","type":"uint256"},{"internalType":"uint256","name":"priceId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"redemptionPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"redemptionRequestCounter","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"requestRedemption","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountRWATokenToRedeem","type":"uint256"},{"internalType":"bytes32","name":"offChainDestination","type":"bytes32"}],"name":"requestRedemptionServicedOffchain","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"requestSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rwa","outputs":[{"internalType":"contract IRWALike","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newAssetSender","type":"address"}],"name":"setAssetSender","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"claimTimestamp","type":"uint256"},{"internalType":"bytes32[]","name":"depositIds","type":"bytes32[]"}],"name":"setClaimableTimestamp","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newFeeRecipient","type":"address"}],"name":"setFeeRecipient","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"minDepositAmount","type":"uint256"}],"name":"setMinimumDepositAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_minimumRedemptionAmount","type":"uint256"}],"name":"setMinimumRedemptionAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_mintFee","type":"uint256"}],"name":"setMintFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_minimumOffChainRedemptionAmount","type":"uint256"}],"name":"setOffChainRedemptionMinimum","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"depositIds","type":"bytes32[]"},{"internalType":"uint256[]","name":"priceIds","type":"uint256[]"}],"name":"setPriceIdForDeposits","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"redemptionIds","type":"bytes32[]"},{"internalType":"uint256[]","name":"priceIds","type":"uint256[]"}],"name":"setPriceIdForRedemptions","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newPricer","type":"address"}],"name":"setPricer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_redemptionFee","type":"uint256"}],"name":"setRedemptionFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"subscriptionPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"subscriptionRequestCounter","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpauseOffChainRedemption","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpauseRedemption","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpauseSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"addProof(bytes32,address,uint256,uint256,uint256)":{"details":"txHash is used as the depositId in storageAll amounts are in decimals of `collateral`","params":{"depositAmountAfterFee":"The amount of the deposit after fees","feeAmount":"The amount of the fees taken","timestamp":"The timestamp of the deposit","txHash":"The transaction hash of the deposit","user":"The address of the user who made the deposit"}},"claimMint(bytes32[])":{"details":"Implicitly does all transfer checks present in underlying `rwa`The priceId corresponding to a given depositId must be set prior to      claiming a mint","params":{"depositIds":"An array containing the deposit Ids one wishes to claim"}},"claimRedemption(bytes32[])":{"details":"Implicitly does all checks present in underlying `rwa`The price Id corresponding to a redemptionId must be set prior to      claiming a redemption","params":{"redemptionIds":"an Array of redemption Id's which ought to fulfilled"}},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"overwriteDepositor(bytes32,address,uint256,uint256)":{"params":{"depositAmountAfterFee":"The deposit value for the new entry","depositIdToOverwrite":"The depositId of the entry we wish to                              overwrite","priceId":"The priceId to be associated with the new                              entry","user":"The user for the new entry"}},"overwriteRedeemer(bytes32,address,uint256,uint256)":{"params":{"priceId":"The priceID to be associated with the new                                entry","redemptionIdToOverwrite":"The redemptionId of the entry we wish to                                overwrite","rwaTokenAmountBurned":"The burn amount for the new entry","user":"The user for the new entry"}},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"requestRedemption(uint256)":{"params":{"amount":"The amount (in units of `rwa`) that a user wishes to redeem               from the fund"}},"requestRedemptionServicedOffchain(uint256,bytes32)":{"params":{"amountRWATokenToRedeem":"The requested redemption amount","offChainDestination":"A hash of the destination to which                               the request should be serviced to."}},"requestSubscription(uint256)":{"params":{"amount":"The amount of collateral one wished to deposit"}},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."},"setAssetSender(address)":{"params":{"newAssetSender":"The address of the new `assetSender`"}},"setClaimableTimestamp(uint256,bytes32[])":{"params":{"claimTimestamp":"The timestamp at which the deposit can be claimed","depositIds":"The depositIds to set the claimable timestamp for"}},"setFeeRecipient(address)":{"params":{"newFeeRecipient":"The address of the new `feeRecipient`"}},"setMinimumDepositAmount(uint256)":{"params":{"minDepositAmount":"The minimum amount required to submit a deposit                         request"}},"setMinimumRedemptionAmount(uint256)":{"params":{"_minimumRedemptionAmount":"The minimum amount required to submit a                                 redemption request"}},"setMintFee(uint256)":{"details":"The maximum fee that can be set is 10_000 bps, or 100%","params":{"_mintFee":"The new mint fee specified in basis points"}},"setOffChainRedemptionMinimum(uint256)":{"params":{"_minimumOffChainRedemptionAmount":"The new minimum off chain                                         redemption amount"}},"setPriceIdForDeposits(bytes32[],uint256[])":{"details":"Array size must match","params":{"depositIds":"an Array of deposit Ids to be associated","priceIds":"an Array of price Ids to be associated"}},"setPriceIdForRedemptions(bytes32[],uint256[])":{"params":{"priceIds":"an Array of priceIds to associate","redemptionIds":"an Array of redemptionIds to associate"}},"setPricer(address)":{"params":{"newPricer":"The address of the new pricer contract"}},"setRedemptionFee(uint256)":{"details":"The maximum fee that can be set is 10_000 bps, or 100%","params":{"_redemptionFee":"The new redeem fee specified in basis points"}},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1241":{"entryPoint":null,"id":1241,"parameterSlots":8,"returnSlots":0},"@_1394":{"entryPoint":null,"id":1394,"parameterSlots":9,"returnSlots":0},"@_2039":{"entryPoint":null,"id":2039,"parameterSlots":0,"returnSlots":0},"@_244":{"entryPoint":null,"id":244,"parameterSlots":8,"returnSlots":0},"@_add_2781":{"entryPoint":1185,"id":2781,"parameterSlots":2,"returnSlots":1},"@_contains_2884":{"entryPoint":null,"id":2884,"parameterSlots":2,"returnSlots":1},"@_grantRole_1765":{"entryPoint":1016,"id":1765,"parameterSlots":2,"returnSlots":0},"@_grantRole_1897":{"entryPoint":872,"id":1897,"parameterSlots":2,"returnSlots":0},"@_msgSender_2694":{"entryPoint":null,"id":2694,"parameterSlots":0,"returnSlots":1},"@_setRoleAdmin_1733":{"entryPoint":939,"id":1733,"parameterSlots":2,"returnSlots":0},"@add_3067":{"entryPoint":1153,"id":3067,"parameterSlots":2,"returnSlots":1},"@getRoleAdmin_1628":{"entryPoint":null,"id":1628,"parameterSlots":1,"returnSlots":1},"@hasRole_1570":{"entryPoint":null,"id":1570,"parameterSlots":2,"returnSlots":1},"abi_decode_address_fromMemory":{"entryPoint":1267,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_addresst_addresst_addresst_addresst_uint256t_uint256t_address_fromMemory":{"entryPoint":1296,"id":null,"parameterSlots":2,"returnSlots":9},"abi_decode_tuple_t_uint8_fromMemory":{"entryPoint":1465,"id":null,"parameterSlots":2,"returnSlots":1},"checked_exp_helper":{"entryPoint":1559,"id":null,"parameterSlots":2,"returnSlots":2},"checked_exp_t_uint256_t_uint8":{"entryPoint":1812,"id":null,"parameterSlots":2,"returnSlots":1},"checked_exp_unsigned":{"entryPoint":1632,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint8":{"entryPoint":1531,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":1509,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:2993:22","statements":[{"nodeType":"YulBlock","src":"6:3:22","statements":[]},{"body":{"nodeType":"YulBlock","src":"74:117:22","statements":[{"nodeType":"YulAssignment","src":"84:22:22","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"99:6:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"93:5:22"},"nodeType":"YulFunctionCall","src":"93:13:22"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"84:5:22"}]},{"body":{"nodeType":"YulBlock","src":"169:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"178:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"181:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"171:6:22"},"nodeType":"YulFunctionCall","src":"171:12:22"},"nodeType":"YulExpressionStatement","src":"171:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"128:5:22"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"139:5:22"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"154:3:22","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"150:3:22"},"nodeType":"YulFunctionCall","src":"150:11:22"},{"kind":"number","nodeType":"YulLiteral","src":"163:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"146:3:22"},"nodeType":"YulFunctionCall","src":"146:19:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"135:3:22"},"nodeType":"YulFunctionCall","src":"135:31:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"125:2:22"},"nodeType":"YulFunctionCall","src":"125:42:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"118:6:22"},"nodeType":"YulFunctionCall","src":"118:50:22"},"nodeType":"YulIf","src":"115:70:22"}]},"name":"abi_decode_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"53:6:22","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"64:5:22","type":""}],"src":"14:177:22"},{"body":{"nodeType":"YulBlock","src":"413:629:22","statements":[{"body":{"nodeType":"YulBlock","src":"460:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"469:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"472:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"462:6:22"},"nodeType":"YulFunctionCall","src":"462:12:22"},"nodeType":"YulExpressionStatement","src":"462:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"434:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"443:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"430:3:22"},"nodeType":"YulFunctionCall","src":"430:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"455:3:22","type":"","value":"288"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"426:3:22"},"nodeType":"YulFunctionCall","src":"426:33:22"},"nodeType":"YulIf","src":"423:53:22"},{"nodeType":"YulAssignment","src":"485:50:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"525:9:22"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"495:29:22"},"nodeType":"YulFunctionCall","src":"495:40:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"485:6:22"}]},{"nodeType":"YulAssignment","src":"544:59:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"588:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"599:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"584:3:22"},"nodeType":"YulFunctionCall","src":"584:18:22"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"554:29:22"},"nodeType":"YulFunctionCall","src":"554:49:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"544:6:22"}]},{"nodeType":"YulAssignment","src":"612:59:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"656:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"667:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"652:3:22"},"nodeType":"YulFunctionCall","src":"652:18:22"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"622:29:22"},"nodeType":"YulFunctionCall","src":"622:49:22"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"612:6:22"}]},{"nodeType":"YulAssignment","src":"680:59:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"724:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"735:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"720:3:22"},"nodeType":"YulFunctionCall","src":"720:18:22"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"690:29:22"},"nodeType":"YulFunctionCall","src":"690:49:22"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"680:6:22"}]},{"nodeType":"YulAssignment","src":"748:60:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"792:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"803:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"788:3:22"},"nodeType":"YulFunctionCall","src":"788:19:22"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"758:29:22"},"nodeType":"YulFunctionCall","src":"758:50:22"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"748:6:22"}]},{"nodeType":"YulAssignment","src":"817:60:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"861:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"872:3:22","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"857:3:22"},"nodeType":"YulFunctionCall","src":"857:19:22"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"827:29:22"},"nodeType":"YulFunctionCall","src":"827:50:22"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"817:6:22"}]},{"nodeType":"YulAssignment","src":"886:36:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"906:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"917:3:22","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"902:3:22"},"nodeType":"YulFunctionCall","src":"902:19:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"896:5:22"},"nodeType":"YulFunctionCall","src":"896:26:22"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"886:6:22"}]},{"nodeType":"YulAssignment","src":"931:36:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"951:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"962:3:22","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"947:3:22"},"nodeType":"YulFunctionCall","src":"947:19:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"941:5:22"},"nodeType":"YulFunctionCall","src":"941:26:22"},"variableNames":[{"name":"value7","nodeType":"YulIdentifier","src":"931:6:22"}]},{"nodeType":"YulAssignment","src":"976:60:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1020:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"1031:3:22","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1016:3:22"},"nodeType":"YulFunctionCall","src":"1016:19:22"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"986:29:22"},"nodeType":"YulFunctionCall","src":"986:50:22"},"variableNames":[{"name":"value8","nodeType":"YulIdentifier","src":"976:6:22"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_addresst_addresst_addresst_addresst_uint256t_uint256t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"315:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"326:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"338:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"346:6:22","type":""},{"name":"value2","nodeType":"YulTypedName","src":"354:6:22","type":""},{"name":"value3","nodeType":"YulTypedName","src":"362:6:22","type":""},{"name":"value4","nodeType":"YulTypedName","src":"370:6:22","type":""},{"name":"value5","nodeType":"YulTypedName","src":"378:6:22","type":""},{"name":"value6","nodeType":"YulTypedName","src":"386:6:22","type":""},{"name":"value7","nodeType":"YulTypedName","src":"394:6:22","type":""},{"name":"value8","nodeType":"YulTypedName","src":"402:6:22","type":""}],"src":"196:846:22"},{"body":{"nodeType":"YulBlock","src":"1126:194:22","statements":[{"body":{"nodeType":"YulBlock","src":"1172:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1181:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1184:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1174:6:22"},"nodeType":"YulFunctionCall","src":"1174:12:22"},"nodeType":"YulExpressionStatement","src":"1174:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1147:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"1156:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1143:3:22"},"nodeType":"YulFunctionCall","src":"1143:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"1168:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1139:3:22"},"nodeType":"YulFunctionCall","src":"1139:32:22"},"nodeType":"YulIf","src":"1136:52:22"},{"nodeType":"YulVariableDeclaration","src":"1197:29:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1216:9:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1210:5:22"},"nodeType":"YulFunctionCall","src":"1210:16:22"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1201:5:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1274:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1283:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1286:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1276:6:22"},"nodeType":"YulFunctionCall","src":"1276:12:22"},"nodeType":"YulExpressionStatement","src":"1276:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1248:5:22"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1259:5:22"},{"kind":"number","nodeType":"YulLiteral","src":"1266:4:22","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1255:3:22"},"nodeType":"YulFunctionCall","src":"1255:16:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1245:2:22"},"nodeType":"YulFunctionCall","src":"1245:27:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1238:6:22"},"nodeType":"YulFunctionCall","src":"1238:35:22"},"nodeType":"YulIf","src":"1235:55:22"},{"nodeType":"YulAssignment","src":"1299:15:22","value":{"name":"value","nodeType":"YulIdentifier","src":"1309:5:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1299:6:22"}]}]},"name":"abi_decode_tuple_t_uint8_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1092:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1103:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1115:6:22","type":""}],"src":"1047:273:22"},{"body":{"nodeType":"YulBlock","src":"1357:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1374:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1381:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1386:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1377:3:22"},"nodeType":"YulFunctionCall","src":"1377:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1367:6:22"},"nodeType":"YulFunctionCall","src":"1367:31:22"},"nodeType":"YulExpressionStatement","src":"1367:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1414:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1417:4:22","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1407:6:22"},"nodeType":"YulFunctionCall","src":"1407:15:22"},"nodeType":"YulExpressionStatement","src":"1407:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1438:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1441:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1431:6:22"},"nodeType":"YulFunctionCall","src":"1431:15:22"},"nodeType":"YulExpressionStatement","src":"1431:15:22"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"1325:127:22"},{"body":{"nodeType":"YulBlock","src":"1504:104:22","statements":[{"nodeType":"YulAssignment","src":"1514:39:22","value":{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"1530:1:22"},{"kind":"number","nodeType":"YulLiteral","src":"1533:4:22","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1526:3:22"},"nodeType":"YulFunctionCall","src":"1526:12:22"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"1544:1:22"},{"kind":"number","nodeType":"YulLiteral","src":"1547:4:22","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1540:3:22"},"nodeType":"YulFunctionCall","src":"1540:12:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1522:3:22"},"nodeType":"YulFunctionCall","src":"1522:31:22"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"1514:4:22"}]},{"body":{"nodeType":"YulBlock","src":"1580:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"1582:16:22"},"nodeType":"YulFunctionCall","src":"1582:18:22"},"nodeType":"YulExpressionStatement","src":"1582:18:22"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"1568:4:22"},{"kind":"number","nodeType":"YulLiteral","src":"1574:4:22","type":"","value":"0xff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1565:2:22"},"nodeType":"YulFunctionCall","src":"1565:14:22"},"nodeType":"YulIf","src":"1562:40:22"}]},"name":"checked_sub_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"1486:1:22","type":""},{"name":"y","nodeType":"YulTypedName","src":"1489:1:22","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"1495:4:22","type":""}],"src":"1457:151:22"},{"body":{"nodeType":"YulBlock","src":"1677:358:22","statements":[{"nodeType":"YulVariableDeclaration","src":"1687:16:22","value":{"kind":"number","nodeType":"YulLiteral","src":"1702:1:22","type":"","value":"1"},"variables":[{"name":"power_1","nodeType":"YulTypedName","src":"1691:7:22","type":""}]},{"nodeType":"YulAssignment","src":"1712:16:22","value":{"name":"power_1","nodeType":"YulIdentifier","src":"1721:7:22"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"1712:5:22"}]},{"nodeType":"YulAssignment","src":"1737:13:22","value":{"name":"_base","nodeType":"YulIdentifier","src":"1745:5:22"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"1737:4:22"}]},{"body":{"nodeType":"YulBlock","src":"1801:228:22","statements":[{"body":{"nodeType":"YulBlock","src":"1846:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"1848:16:22"},"nodeType":"YulFunctionCall","src":"1848:18:22"},"nodeType":"YulExpressionStatement","src":"1848:18:22"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"1821:4:22"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1835:1:22","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1831:3:22"},"nodeType":"YulFunctionCall","src":"1831:6:22"},{"name":"base","nodeType":"YulIdentifier","src":"1839:4:22"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"1827:3:22"},"nodeType":"YulFunctionCall","src":"1827:17:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1818:2:22"},"nodeType":"YulFunctionCall","src":"1818:27:22"},"nodeType":"YulIf","src":"1815:53:22"},{"body":{"nodeType":"YulBlock","src":"1907:29:22","statements":[{"nodeType":"YulAssignment","src":"1909:25:22","value":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"1922:5:22"},{"name":"base","nodeType":"YulIdentifier","src":"1929:4:22"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"1918:3:22"},"nodeType":"YulFunctionCall","src":"1918:16:22"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"1909:5:22"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"1888:8:22"},{"name":"power_1","nodeType":"YulIdentifier","src":"1898:7:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1884:3:22"},"nodeType":"YulFunctionCall","src":"1884:22:22"},"nodeType":"YulIf","src":"1881:55:22"},{"nodeType":"YulAssignment","src":"1949:23:22","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"1961:4:22"},{"name":"base","nodeType":"YulIdentifier","src":"1967:4:22"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"1957:3:22"},"nodeType":"YulFunctionCall","src":"1957:15:22"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"1949:4:22"}]},{"nodeType":"YulAssignment","src":"1985:34:22","value":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"2001:7:22"},{"name":"exponent","nodeType":"YulIdentifier","src":"2010:8:22"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1997:3:22"},"nodeType":"YulFunctionCall","src":"1997:22:22"},"variableNames":[{"name":"exponent","nodeType":"YulIdentifier","src":"1985:8:22"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"1770:8:22"},{"name":"power_1","nodeType":"YulIdentifier","src":"1780:7:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1767:2:22"},"nodeType":"YulFunctionCall","src":"1767:21:22"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1789:3:22","statements":[]},"pre":{"nodeType":"YulBlock","src":"1763:3:22","statements":[]},"src":"1759:270:22"}]},"name":"checked_exp_helper","nodeType":"YulFunctionDefinition","parameters":[{"name":"_base","nodeType":"YulTypedName","src":"1641:5:22","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"1648:8:22","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"1661:5:22","type":""},{"name":"base","nodeType":"YulTypedName","src":"1668:4:22","type":""}],"src":"1613:422:22"},{"body":{"nodeType":"YulBlock","src":"2099:747:22","statements":[{"body":{"nodeType":"YulBlock","src":"2137:52:22","statements":[{"nodeType":"YulAssignment","src":"2151:10:22","value":{"kind":"number","nodeType":"YulLiteral","src":"2160:1:22","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"2151:5:22"}]},{"nodeType":"YulLeave","src":"2174:5:22"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"2119:8:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2112:6:22"},"nodeType":"YulFunctionCall","src":"2112:16:22"},"nodeType":"YulIf","src":"2109:80:22"},{"body":{"nodeType":"YulBlock","src":"2222:52:22","statements":[{"nodeType":"YulAssignment","src":"2236:10:22","value":{"kind":"number","nodeType":"YulLiteral","src":"2245:1:22","type":"","value":"0"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"2236:5:22"}]},{"nodeType":"YulLeave","src":"2259:5:22"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"2208:4:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2201:6:22"},"nodeType":"YulFunctionCall","src":"2201:12:22"},"nodeType":"YulIf","src":"2198:76:22"},{"cases":[{"body":{"nodeType":"YulBlock","src":"2310:52:22","statements":[{"nodeType":"YulAssignment","src":"2324:10:22","value":{"kind":"number","nodeType":"YulLiteral","src":"2333:1:22","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"2324:5:22"}]},{"nodeType":"YulLeave","src":"2347:5:22"}]},"nodeType":"YulCase","src":"2303:59:22","value":{"kind":"number","nodeType":"YulLiteral","src":"2308:1:22","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"2378:123:22","statements":[{"body":{"nodeType":"YulBlock","src":"2413:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"2415:16:22"},"nodeType":"YulFunctionCall","src":"2415:18:22"},"nodeType":"YulExpressionStatement","src":"2415:18:22"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"2398:8:22"},{"kind":"number","nodeType":"YulLiteral","src":"2408:3:22","type":"","value":"255"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2395:2:22"},"nodeType":"YulFunctionCall","src":"2395:17:22"},"nodeType":"YulIf","src":"2392:43:22"},{"nodeType":"YulAssignment","src":"2448:25:22","value":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"2461:8:22"},{"kind":"number","nodeType":"YulLiteral","src":"2471:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2457:3:22"},"nodeType":"YulFunctionCall","src":"2457:16:22"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"2448:5:22"}]},{"nodeType":"YulLeave","src":"2486:5:22"}]},"nodeType":"YulCase","src":"2371:130:22","value":{"kind":"number","nodeType":"YulLiteral","src":"2376:1:22","type":"","value":"2"}}],"expression":{"name":"base","nodeType":"YulIdentifier","src":"2290:4:22"},"nodeType":"YulSwitch","src":"2283:218:22"},{"body":{"nodeType":"YulBlock","src":"2599:70:22","statements":[{"nodeType":"YulAssignment","src":"2613:28:22","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"2626:4:22"},{"name":"exponent","nodeType":"YulIdentifier","src":"2632:8:22"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"2622:3:22"},"nodeType":"YulFunctionCall","src":"2622:19:22"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"2613:5:22"}]},{"nodeType":"YulLeave","src":"2654:5:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"2523:4:22"},{"kind":"number","nodeType":"YulLiteral","src":"2529:2:22","type":"","value":"11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2520:2:22"},"nodeType":"YulFunctionCall","src":"2520:12:22"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"2537:8:22"},{"kind":"number","nodeType":"YulLiteral","src":"2547:2:22","type":"","value":"78"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2534:2:22"},"nodeType":"YulFunctionCall","src":"2534:16:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2516:3:22"},"nodeType":"YulFunctionCall","src":"2516:35:22"},{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"2560:4:22"},{"kind":"number","nodeType":"YulLiteral","src":"2566:3:22","type":"","value":"307"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2557:2:22"},"nodeType":"YulFunctionCall","src":"2557:13:22"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"2575:8:22"},{"kind":"number","nodeType":"YulLiteral","src":"2585:2:22","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2572:2:22"},"nodeType":"YulFunctionCall","src":"2572:16:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2553:3:22"},"nodeType":"YulFunctionCall","src":"2553:36:22"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2513:2:22"},"nodeType":"YulFunctionCall","src":"2513:77:22"},"nodeType":"YulIf","src":"2510:159:22"},{"nodeType":"YulVariableDeclaration","src":"2678:57:22","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"2720:4:22"},{"name":"exponent","nodeType":"YulIdentifier","src":"2726:8:22"}],"functionName":{"name":"checked_exp_helper","nodeType":"YulIdentifier","src":"2701:18:22"},"nodeType":"YulFunctionCall","src":"2701:34:22"},"variables":[{"name":"power_1","nodeType":"YulTypedName","src":"2682:7:22","type":""},{"name":"base_1","nodeType":"YulTypedName","src":"2691:6:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"2780:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"2782:16:22"},"nodeType":"YulFunctionCall","src":"2782:18:22"},"nodeType":"YulExpressionStatement","src":"2782:18:22"}]},"condition":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"2750:7:22"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2767:1:22","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2763:3:22"},"nodeType":"YulFunctionCall","src":"2763:6:22"},{"name":"base_1","nodeType":"YulIdentifier","src":"2771:6:22"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"2759:3:22"},"nodeType":"YulFunctionCall","src":"2759:19:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2747:2:22"},"nodeType":"YulFunctionCall","src":"2747:32:22"},"nodeType":"YulIf","src":"2744:58:22"},{"nodeType":"YulAssignment","src":"2811:29:22","value":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"2824:7:22"},{"name":"base_1","nodeType":"YulIdentifier","src":"2833:6:22"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2820:3:22"},"nodeType":"YulFunctionCall","src":"2820:20:22"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"2811:5:22"}]}]},"name":"checked_exp_unsigned","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"2070:4:22","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"2076:8:22","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"2089:5:22","type":""}],"src":"2040:806:22"},{"body":{"nodeType":"YulBlock","src":"2919:72:22","statements":[{"nodeType":"YulAssignment","src":"2929:56:22","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"2959:4:22"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"2969:8:22"},{"kind":"number","nodeType":"YulLiteral","src":"2979:4:22","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2965:3:22"},"nodeType":"YulFunctionCall","src":"2965:19:22"}],"functionName":{"name":"checked_exp_unsigned","nodeType":"YulIdentifier","src":"2938:20:22"},"nodeType":"YulFunctionCall","src":"2938:47:22"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"2929:5:22"}]}]},"name":"checked_exp_t_uint256_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"2890:4:22","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"2896:8:22","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"2909:5:22","type":""}],"src":"2851:140:22"}]},"contents":"{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_addresst_addresst_addresst_addresst_uint256t_uint256t_address_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7, value8\n    {\n        if slt(sub(dataEnd, headStart), 288) { revert(0, 0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := abi_decode_address_fromMemory(add(headStart, 32))\n        value2 := abi_decode_address_fromMemory(add(headStart, 64))\n        value3 := abi_decode_address_fromMemory(add(headStart, 96))\n        value4 := abi_decode_address_fromMemory(add(headStart, 128))\n        value5 := abi_decode_address_fromMemory(add(headStart, 160))\n        value6 := mload(add(headStart, 192))\n        value7 := mload(add(headStart, 224))\n        value8 := abi_decode_address_fromMemory(add(headStart, 256))\n    }\n    function abi_decode_tuple_t_uint8_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n        value0 := value\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint8(x, y) -> diff\n    {\n        diff := sub(and(x, 0xff), and(y, 0xff))\n        if gt(diff, 0xff) { panic_error_0x11() }\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := power_1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(not(0), base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, and(exponent, 0xff))\n    }\n}","id":22,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60e06040526000600a556000600b556001600c556001600d553480156200002557600080fd5b506040516200349f3803806200349f833981016040819052620000489162000510565b6001600055888888888888888887878787878787876001600160a01b038816620000855760405163a1aeceb760e01b815260040160405180910390fd5b6001600160a01b038716620000ad5760405163071aeb1d60e01b815260040160405180910390fd5b6001600160a01b038416620000d557604051633b2b1d5560e01b815260040160405180910390fd5b6001600160a01b038316620000fd57604051634fdcfc5560e11b815260040160405180910390fd5b6200010a60008762000368565b620001256000805160206200347f8339815191528762000368565b620001406000805160206200343f8339815191528662000368565b6200015b6000805160206200345f8339815191528762000368565b620001877fced4eb9faeb19ab0e2e05a20ade58d82157e1035a3fbff4bc38dd5e609f22b938762000368565b620001b16000805160206200343f8339815191526000805160206200347f833981519152620003ab565b620001db6000805160206200345f8339815191526000805160206200347f833981519152620003ab565b620002167fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc46000805160206200347f833981519152620003ab565b6001600160a01b0388811660a0819052888216608052600580546001600160a01b03199081168785161790915560048054909116928716929092178255600884905560098390556040805163313ce56760e01b81529051919263313ce5679282820192602092908290030181865afa15801562000297573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002bd9190620005b9565b876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003229190620005b9565b6200032e9190620005fb565b6200033b90600a62000714565b60c08181525050505050505050505080600f81905550505050505050505050505050505050505062000725565b6200037f8282620003f860201b62001c531760201c565b6000828152600260209081526040909120620003a691839062001cbe62000481821b17901c565b505050565b6000828152600160208190526040808320909101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff166200047d5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45b5050565b600062000498836001600160a01b038416620004a1565b90505b92915050565b6000818152600183016020526040812054620004ea575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200049b565b5060006200049b565b80516001600160a01b03811681146200050b57600080fd5b919050565b60008060008060008060008060006101208a8c0312156200053057600080fd5b6200053b8a620004f3565b98506200054b60208b01620004f3565b97506200055b60408b01620004f3565b96506200056b60608b01620004f3565b95506200057b60808b01620004f3565b94506200058b60a08b01620004f3565b935060c08a0151925060e08a01519150620005aa6101008b01620004f3565b90509295985092959850929598565b600060208284031215620005cc57600080fd5b815160ff81168114620005de57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b60ff82811682821603908111156200049b576200049b620005e5565b600181815b80851115620006585781600019048211156200063c576200063c620005e5565b808516156200064a57918102915b93841c93908002906200061c565b509250929050565b60008262000671575060016200049b565b8162000680575060006200049b565b8160018114620006995760028114620006a457620006c4565b60019150506200049b565b60ff841115620006b857620006b8620005e5565b50506001821b6200049b565b5060208310610133831016604e8410600b8410161715620006e9575081810a6200049b565b620006f5838362000617565b80600019048211156200070c576200070c620005e5565b029392505050565b60006200049860ff84168362000660565b60805160a05160c051612cc06200077f6000396000818161069f015261254c0152600081816107390152818161162a015261166201526000818161063701528181611a5601528181611ba201526122410152612cc06000f3fe608060405234801561001057600080fd5b50600436106103245760003560e01c80638a07df1e116101a9578063d0c835ce116100ef578063e1a452181161009d578063e1a452181461078a578063e4107c9714610793578063e74b981b146107a6578063eddd0d9c146107b9578063ee75d7d4146107cc578063eeb3c910146107df578063f4a20307146107f2578063f80a36d61461081957600080fd5b8063d0c835ce146106fb578063d547741f1461070e578063d592d81514610721578063d8dfeb4514610734578063dd45eef61461075b578063de6afa821461076e578063e0f486ef1461078157600080fd5b8063a217fddf11610157578063a217fddf14610659578063a6138ed914610661578063aa85c1df14610674578063aab483d614610687578063bb13245f1461069a578063bcc70283146106c1578063ca15c873146106d6578063cd4d0bcf146106e957600080fd5b80638a07df1e146105b55780638d044c06146105d55780639010d07c146105dd57806391d14854146105f0578063926d7d7f1461060357806392bccb801461062a57806395e4b2511461063257600080fd5b806338fed7081161026e5780634ef1ccd11161021c5780634ef1ccd114610506578063525decd6146105195780635d591d681461052c57806373a95ddd146105655780637dbc1df014610572578063837018fa1461058557806385c4e79e1461058d57806387e2d06e146105a257600080fd5b806338fed708146104415780633bfa67fe1461049f5780634565e9ff146104c7578063458f5815146104da57806346904840146104e357806349cbbf2a146104f65780634dfe7af2146104fe57600080fd5b8063244f5acf116102d6578063244f5acf146103a2578063248a9ca3146103b5578063258492cd146103d957806329390370146103ec5780632b5eceff146103ff5780632f2ff15d14610412578063354181f31461042557806336568abe1461042e57600080fd5b806301ffc9a714610329578063078a6be81461035157806307bda1bb14610374578063080c279a1461037d57806312589fb51461038657806313966db51461038f5780632056aa1214610398575b600080fd5b61033c6103373660046126db565b61082c565b60405190151581526020015b60405180910390f35b610366600080516020612c6b83398151915281565b604051908152602001610348565b610366600c5481565b61036660085481565b610366600f5481565b610366600a5481565b6103a0610857565b005b6103a06103b0366004612751565b6108ba565b6103666103c3366004612793565b6000908152600160208190526040909120015490565b6103a06103e73660046127c8565b610919565b6103a06103fa366004612803565b610a68565b6103a061040d36600461281e565b610ae1565b6103a0610420366004612864565b610be5565b610366600d5481565b6103a061043c366004612864565b610c11565b61047a61044f366004612793565b6007602052600090815260409020805460018201546002909201546001600160a01b03909116919083565b604080516001600160a01b039094168452602084019290925290820152606001610348565b6104ba730686b3a7b9be2751bb51084a6e0e7db7f1746eb181565b6040516103489190612890565b6103a06104d5366004612751565b610c8f565b610366600b5481565b6005546104ba906001600160a01b031681565b6103a0610d29565b6103a0610d83565b6103a0610514366004612793565b610dd8565b6103a0610527366004612803565b610e52565b61047a61053a366004612793565b6006602052600090815260409020805460018201546002909201546001600160a01b03909116919083565b600e5461033c9060ff1681565b6103a0610580366004612793565b610ebe565b6103a0610f38565b610366600080516020612c2b83398151915281565b6103a06105b03660046128a4565b610f8c565b6103666105c3366004612793565b60106020526000908152604090205481565b6103a061113a565b6104ba6105eb366004612910565b61118d565b61033c6105fe366004612864565b6111ac565b6103667fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc481565b6103a06111d7565b6104ba7f000000000000000000000000000000000000000000000000000000000000000081565b610366600081565b6003546104ba906001600160a01b031681565b6103a06106823660046128a4565b61122d565b6103a0610695366004612793565b611379565b6103667f000000000000000000000000000000000000000000000000000000000000000081565b610366600080516020612c4b83398151915281565b6103666106e4366004612793565b6113f3565b600e5461033c90610100900460ff1681565b6103a0610709366004612932565b61140a565b6103a061071c366004612864565b6114f0565b6103a061072f366004612793565b611517565b6104ba7f000000000000000000000000000000000000000000000000000000000000000081565b600e5461033c9062010000900460ff1681565b6103a061077c3660046127c8565b6116ef565b61036660095481565b61036661271081565b6103a06107a1366004612793565b61182e565b6103a06107b4366004612803565b611885565b6103a06107c7366004612793565b6118f0565b6004546104ba906001600160a01b031681565b6103a06107ed366004612793565b61196a565b6103667fced4eb9faeb19ab0e2e05a20ade58d82157e1035a3fbff4bc38dd5e609f22b9381565b6103a0610827366004612910565b611afe565b60006001600160e01b03198216635a05180f60e01b1480610851575061085182611cd3565b92915050565b600080516020612c2b8339815191526108708133611d08565b600e805461ff0019166101001790556040517fcd71257f2998474633e94cfffa045014068f6218ffdca256b6f4aa9d5f15fb89906108af903390612890565b60405180910390a150565b6002600054036108e55760405162461bcd60e51b81526004016108dc9061297e565b60405180910390fd5b6002600055600e5460ff16801561090f5760405163aadfaddd60e01b815260040160405180910390fd5b5050600160005550565b600080516020612c6b8339815191526109328133611d08565b6000600760008781526020019081526020016000206040518060600160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820154815260200160028201548152505090506040518060600160405280866001600160a01b03168152602001858152602001848152506007600088815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020155905050857f5a0c55c421ae3aac2379811eca16aaee32b6e64411322b624118d4219b9350a082600001518784604001518786602001518a604051610a58969594939291906129b5565b60405180910390a2505050505050565b600080516020612c6b833981519152610a818133611d08565b600380546001600160a01b038481166001600160a01b03198316179092556040519116907f801352e72ef9b80b3992ccbedf07ab0e133e7da7aaccf0024abf23f4f32eb99a90610ad490839086906129eb565b60405180910390a1505050565b7fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc4610b0c8133611d08565b6000868152600660205260409020546001600160a01b031615610b4257604051631aeecebf60e21b815260040160405180910390fd5b60408051606080820183526001600160a01b0388811680845260208085018a815260008688018181528e82526006845290889020965187546001600160a01b031916951694909417865551600186015591516002909401939093558351888152908101879052928301859052909188917fc985471d1cb1bb75da0d54fa5ab10f7171e952cefcc0bf4fc7c2546c19d1811f910160405180910390a3505050505050565b60008281526001602081905260409091200154610c028133611d08565b610c0c8383611d6c565b505050565b6001600160a01b0381163314610c815760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016108dc565b610c8b8282611d8e565b5050565b600260005403610cb15760405162461bcd60e51b81526004016108dc9061297e565b6002600055600e54610100900460ff168015610ce05760405163aadfaddd60e01b815260040160405180910390fd5b8160005b81811015610d1d57610d0d858583818110610d0157610d01612a05565b90506020020135611db0565b610d1681612a31565b9050610ce4565b50506001600055505050565b600080516020612c2b833981519152610d428133611d08565b600e805462ff00001916620100001790556040517fdc41a92196ccc1ab8149c01bc68c2f506b10a7bb5cd2693c9516d176f5381ff4906108af903390612890565b600080516020612c6b833981519152610d9c8133611d08565b600e805462ff0000191690556040517f53a8c40fc17c78d38e2c06aa8d2c550c1acbf7b30d087dbda289ab3dd41c235c906108af903390612890565b600080516020612c6b833981519152610df18133611d08565b612710821015610e145760405163617ab12d60e11b815260040160405180910390fd5b600980549083905560408051828152602081018590527ffdaf6ed728cef208e62328a008209556f8281f3062b14dd08aaaa90fa15942119101610ad4565b600080516020612c6b833981519152610e6b8133611d08565b600480546001600160a01b038481166001600160a01b03198316179092556040519116907fb09f298b2812193d5ada18beaadd6cb8f12b3640926d99de46e2a65394df829d90610ad490839086906129eb565b600080516020612c6b833981519152610ed78133611d08565b612710821115610efa57604051637e2df70960e11b815260040160405180910390fd5b600b80549083905560408051828152602081018590527f2956acfe8584fb02384e06c675ee215bf10d55c3de1e6ff9b2f621e8a40c64709101610ad4565b600080516020612c6b833981519152610f518133611d08565b600e805461ff00191690556040517f94482ee2b195c365dbbc2d689fd5a088d2b219abe44360ba8895525c9471d66f906108af903390612890565b600080516020612c4b833981519152610fa58133611d08565b83828114610fc65760405163cc6e40b360e01b815260040160405180910390fd5b60005b81811015611131576000600681898985818110610fe857610fe8612a05565b60209081029290920135835250810191909152604001600020546001600160a01b031603611029576040516305a8a45b60e41b815260040160405180910390fd5b6006600088888481811061103f5761103f612a05565b9050602002013581526020019081526020016000206002015460001461107857604051631139f30960e31b815260040160405180910390fd5b84848281811061108a5761108a612a05565b90506020020135600660008989858181106110a7576110a7612a05565b905060200201358152602001908152602001600020600201819055508484828181106110d5576110d5612a05565b905060200201358787838181106110ee576110ee612a05565b905060200201357fc2055184bbc2d10b90bf7df17a84f8bdda6b52377a976e41e0c1610fffafc0d760405160405180910390a361112a81612a31565b9050610fc9565b50505050505050565b600080516020612c6b8339815191526111538133611d08565b600e805460ff191690556040517fc641b9c4afa539cedcbe2e5f3e47d9f092175b5d0b8ae72dffa634a3eb3e47e4906108af903390612890565b60008281526002602052604081206111a59083611e27565b9392505050565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600080516020612c2b8339815191526111f08133611d08565b600e805460ff191660011790556040517f71e0406677c0570b2a66b1a4feeccf5c1cba2d6729435461e27a312b15410d04906108af903390612890565b600080516020612c4b8339815191526112468133611d08565b838281146112675760405163cc6e40b360e01b815260040160405180910390fd5b60005b81811015611131576007600088888481811061128857611288612a05565b905060200201358152602001908152602001600020600201546000146112c157604051631139f30960e31b815260040160405180910390fd5b8484828181106112d3576112d3612a05565b90506020020135600760008989858181106112f0576112f0612a05565b9050602002013581526020019081526020016000206002018190555084848281811061131e5761131e612a05565b9050602002013587878381811061133757611337612a05565b905060200201357e05e86a70f400d1820ab5a0573a2be911d831ab28fe2e9448b34daab223b09c60405160405180910390a361137281612a31565b905061126a565b600080516020612c6b8339815191526113928133611d08565b6127108210156113b55760405163617ab12d60e11b815260040160405180910390fd5b600880549083905560408051828152602081018590527fe6e25add7363f8f8a40cbea9810d3115a33703b10972ef759104219b006574369101610ad4565b600081815260026020526040812061085190611e33565b7fced4eb9faeb19ab0e2e05a20ade58d82157e1035a3fbff4bc38dd5e609f22b936114358133611d08565b428410156114565760405163209768a360e11b815260040160405180910390fd5b8160005b818110156114e857856010600087878581811061147957611479612a05565b905060200201358152602001908152602001600020819055508484828181106114a4576114a4612a05565b90506020020135867f15d20a98e8d4b1247fc51e2f6817929874a0769087776e52268eb1b4c8bdb2dd60405160405180910390a36114e181612a31565b905061145a565b505050505050565b6000828152600160208190526040909120015461150d8133611d08565b610c0c8383611d8e565b6002600054036115395760405162461bcd60e51b81526004016108dc9061297e565b6002600055600e54610100900460ff1680156115685760405163aadfaddd60e01b815260040160405180910390fd5b60085482101561158b57604051636ba4a1c760e01b815260040160405180910390fd5b600061159683611e3d565b905060006115a48285612a4a565b600c805491925060009190826115b983612a31565b909155506040805160608101825233815260208082018681526000838501818152868252600690935293909320915182546001600160a01b0319166001600160a01b039091161782559151600182015590516002909101559050821561165557600554611655906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169133911686611e5a565b61169e6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633730686b3a7b9be2751bb51084a6e0e7db7f1746eb185611e5a565b6040805186815260208101849052908101849052819033907f7cbce37c7b11d322316420484f40c29ce672ad3fa16752551a3dbe6ccfa04e149060600160405180910390a350506001600055505050565b600080516020612c6b8339815191526117088133611d08565b6000600660008781526020019081526020016000206040518060600160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820154815260200160028201548152505090506040518060600160405280866001600160a01b03168152602001858152602001848152506006600088815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020155905050857f7e506b1f11218d4c947d5a59a97fd996c42afc2b024b6aeaec050930eb2b339982600001518784604001518786602001518a604051610a58969594939291906129b5565b600080516020612c6b8339815191526118478133611d08565b600f80549083905560408051828152602081018590527f1071422bad736c3651d3d3b7a4eda70e84e9c85a08f21c955d79ded03bbf06bb9101610ad4565b600080516020612c6b83398151915261189e8133611d08565b600580546001600160a01b038481166001600160a01b0319831681179093556040519116917f15d80a013f22151bc7246e3bc132e12828cde19de98870475e3fa7084015272191610ad49184916129eb565b600080516020612c6b8339815191526119098133611d08565b61271082111561192c57604051637e2df70960e11b815260040160405180910390fd5b600a80549083905560408051828152602081018590527f387269377ae17304805d5f88cea4252e5ca47346783c279aeb9e8627335a49ac9101610ad4565b60026000540361198c5760405162461bcd60e51b81526004016108dc9061297e565b6002600055600e5460ff1680156119b65760405163aadfaddd60e01b815260040160405180910390fd5b6009548210156119d95760405163595bd39f60e11b815260040160405180910390fd5b600d8054600091826119ea83612a31565b909155506040805160608101825233808252602080830188815260008486018181528782526007909352859020935184546001600160a01b0319166001600160a01b03918216178555905160018501559051600290930192909255915163079cc67960e41b81529293507f000000000000000000000000000000000000000000000000000000000000000016916379cc679091611a8b918790600401612a5d565b600060405180830381600087803b158015611aa557600080fd5b505af1158015611ab9573d6000803e3d6000fd5b50506040518581528392503391507f80ebb30e7c30052bf403a20da869bdd033841684e93930d97c4af74238529b4f9060200160405180910390a35050600160005550565b600260005403611b205760405162461bcd60e51b81526004016108dc9061297e565b6002600055600e5462010000900460ff168015611b505760405163aadfaddd60e01b815260040160405180910390fd5b600f54831015611b735760405163595bd39f60e11b815260040160405180910390fd5b600d805460009182611b8483612a31565b9091555060405163079cc67960e41b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906379cc679090611bd99033908890600401612a5d565b600060405180830381600087803b158015611bf357600080fd5b505af1158015611c07573d6000803e3d6000fd5b505060408051878152602081018790528493503392507fad2102c6abc98f954bd5d61e6c0d19764db331f63019296309309a34f70e66a6910160405180910390a3505060016000555050565b611c5d82826111ac565b610c8b5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b60006111a5836001600160a01b038416611eba565b60006001600160e01b03198216637965db0b60e01b148061085157506301ffc9a760e01b6001600160e01b0319831614610851565b611d1282826111ac565b610c8b57611d2a816001600160a01b03166014611f09565b611d35836020611f09565b604051602001611d46929190612a9a565b60408051601f198184030181529082905262461bcd60e51b82526108dc91600401612b09565b611d768282611c53565b6000828152600260205260409020610c0c9082611cbe565b611d9882826120a5565b6000828152600260205260409020610c0c908261210c565b6000818152601060205260408120549003611dde57604051630ad2496160e31b815260040160405180910390fd5b600081815260106020526040902054421015611e0d5760405163309b0bcf60e21b815260040160405180910390fd5b611e1681612121565b600090815260106020526040812055565b60006111a58383612315565b6000610851825490565b6000612710600a5483611e509190612b3c565b6108519190612b5b565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611eb490859061233f565b50505050565b6000818152600183016020526040812054611f0157508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610851565b506000610851565b60606000611f18836002612b3c565b611f23906002612b7d565b67ffffffffffffffff811115611f3b57611f3b612b90565b6040519080825280601f01601f191660200182016040528015611f65576020820181803683370190505b509050600360fc1b81600081518110611f8057611f80612a05565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611faf57611faf612a05565b60200101906001600160f81b031916908160001a9053506000611fd3846002612b3c565b611fde906001612b7d565b90505b6001811115612056576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061201257612012612a05565b1a60f81b82828151811061202857612028612a05565b60200101906001600160f81b031916908160001a90535060049490941c9361204f81612ba6565b9050611fe1565b5083156111a55760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108dc565b6120af82826111ac565b15610c8b5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006111a5836001600160a01b038416612411565b6000818152600660209081526040808320815160608101835281546001600160a01b031681526001820154938101939093526002015490820181905290910361217d57604051638718c77160e01b815260040160405180910390fd5b6003546040828101519051630e75722360e41b815260048101919091526000916001600160a01b03169063e757223090602401602060405180830381865afa1580156121cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f19190612bbd565b90506000612203836020015183612504565b60008581526006602052604080822080546001600160a01b03191681556001810183905560020191909155845190516340c10f1960e01b81529192507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316916340c10f199161227e918590600401612a5d565b600060405180830381600087803b15801561229857600080fd5b505af11580156122ac573d6000803e3d6000fd5b50508451602080870151604080890151815188815293840192909252820187905260608201528793506001600160a01b0390911691507fdd602cc9cb236502fb74f091872b4025184011dd96eee41099caa260842f20249060800160405180910390a350505050565b600082600001828154811061232c5761232c612a05565b9060005260206000200154905092915050565b6000612394826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125369092919063ffffffff16565b805190915015610c0c57808060200190518101906123b29190612bd6565b610c0c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108dc565b600081815260018301602052604081205480156124fa576000612435600183612a4a565b855490915060009061244990600190612a4a565b90508181146124ae57600086600001828154811061246957612469612a05565b906000526020600020015490508087600001848154811061248c5761248c612a05565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806124bf576124bf612bf8565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610851565b6000915050610851565b60008061251084612545565b61252290670de0b6b3a7640000612b3c565b905061252e8382612b5b565b949350505050565b606061252e8484600085612571565b60006108517f000000000000000000000000000000000000000000000000000000000000000083612b3c565b6060824710156125d25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016108dc565b6001600160a01b0385163b6126295760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108dc565b600080866001600160a01b031685876040516126459190612c0e565b60006040518083038185875af1925050503d8060008114612682576040519150601f19603f3d011682016040523d82523d6000602084013e612687565b606091505b50915091506126978282866126a2565b979650505050505050565b606083156126b15750816111a5565b8251156126c15782518084602001fd5b8160405162461bcd60e51b81526004016108dc9190612b09565b6000602082840312156126ed57600080fd5b81356001600160e01b0319811681146111a557600080fd5b60008083601f84011261271757600080fd5b50813567ffffffffffffffff81111561272f57600080fd5b6020830191508360208260051b850101111561274a57600080fd5b9250929050565b6000806020838503121561276457600080fd5b823567ffffffffffffffff81111561277b57600080fd5b61278785828601612705565b90969095509350505050565b6000602082840312156127a557600080fd5b5035919050565b80356001600160a01b03811681146127c357600080fd5b919050565b600080600080608085870312156127de57600080fd5b843593506127ee602086016127ac565b93969395505050506040820135916060013590565b60006020828403121561281557600080fd5b6111a5826127ac565b600080600080600060a0868803121561283657600080fd5b85359450612846602087016127ac565b94979496505050506040830135926060810135926080909101359150565b6000806040838503121561287757600080fd5b82359150612887602084016127ac565b90509250929050565b6001600160a01b0391909116815260200190565b600080600080604085870312156128ba57600080fd5b843567ffffffffffffffff808211156128d257600080fd5b6128de88838901612705565b909650945060208701359150808211156128f757600080fd5b5061290487828801612705565b95989497509550505050565b6000806040838503121561292357600080fd5b50508035926020909101359150565b60008060006040848603121561294757600080fd5b83359250602084013567ffffffffffffffff81111561296557600080fd5b61297186828701612705565b9497909650939450505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6001600160a01b03968716815294909516602085015260408401929092526060830152608082015260a081019190915260c00190565b6001600160a01b0392831681529116602082015260400190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612a4357612a43612a1b565b5060010190565b8181038181111561085157610851612a1b565b6001600160a01b03929092168252602082015260400190565b60005b83811015612a91578181015183820152602001612a79565b50506000910152565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351612acc816017850160208801612a76565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612afd816028840160208801612a76565b01602801949350505050565b6020815260008251806020840152612b28816040850160208701612a76565b601f01601f19169190910160400192915050565b6000816000190483118215151615612b5657612b56612a1b565b500290565b600082612b7857634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561085157610851612a1b565b634e487b7160e01b600052604160045260246000fd5b600081612bb557612bb5612a1b565b506000190190565b600060208284031215612bcf57600080fd5b5051919050565b600060208284031215612be857600080fd5b815180151581146111a557600080fd5b634e487b7160e01b600052603160045260246000fd5b60008251612c20818460208701612a76565b919091019291505056fe9ac2c43e905fe4f0c030a0b0e4b805a284e79da32a5c9c71be1c68dd79bbb89d830a9081649e91840eb0274e99b47626a896cfa0f4dd591cb31cd5060e566c0d8c6dd8af24db306eb580672d47cf7dd23b8394bf74074f8ac14b948512ecdb03a2646970667358221220a5f01a3b62dfa9f17c04b2f1f1343fbb1dabd04d0fd0e497dfe972ef494d917464736f6c634300081000339ac2c43e905fe4f0c030a0b0e4b805a284e79da32a5c9c71be1c68dd79bbb89d830a9081649e91840eb0274e99b47626a896cfa0f4dd591cb31cd5060e566c0d8c6dd8af24db306eb580672d47cf7dd23b8394bf74074f8ac14b948512ecdb03","opcodes":"PUSH1 0xE0 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0xA SSTORE PUSH1 0x0 PUSH1 0xB SSTORE PUSH1 0x1 PUSH1 0xC SSTORE PUSH1 0x1 PUSH1 0xD SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x349F CODESIZE SUB DUP1 PUSH3 0x349F DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x48 SWAP2 PUSH3 0x510 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SSTORE DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH3 0x85 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA1AECEB7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH3 0xAD JUMPI PUSH1 0x40 MLOAD PUSH4 0x71AEB1D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH3 0xD5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3B2B1D55 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH3 0xFD JUMPI PUSH1 0x40 MLOAD PUSH4 0x4FDCFC55 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x10A PUSH1 0x0 DUP8 PUSH3 0x368 JUMP JUMPDEST PUSH3 0x125 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x347F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP8 PUSH3 0x368 JUMP JUMPDEST PUSH3 0x140 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x343F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP7 PUSH3 0x368 JUMP JUMPDEST PUSH3 0x15B PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x345F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP8 PUSH3 0x368 JUMP JUMPDEST PUSH3 0x187 PUSH32 0xCED4EB9FAEB19AB0E2E05A20ADE58D82157E1035A3FBFF4BC38DD5E609F22B93 DUP8 PUSH3 0x368 JUMP JUMPDEST PUSH3 0x1B1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x343F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x347F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH3 0x3AB JUMP JUMPDEST PUSH3 0x1DB PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x345F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x347F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH3 0x3AB JUMP JUMPDEST PUSH3 0x216 PUSH32 0xE2B7FB3B832174769106DAEBCFD6D1970523240DDA11281102DB9363B83B0DC4 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x347F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH3 0x3AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND PUSH1 0xA0 DUP2 SWAP1 MSTORE DUP9 DUP3 AND PUSH1 0x80 MSTORE PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND DUP8 DUP6 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x4 DUP1 SLOAD SWAP1 SWAP2 AND SWAP3 DUP8 AND SWAP3 SWAP1 SWAP3 OR DUP3 SSTORE PUSH1 0x8 DUP5 SWAP1 SSTORE PUSH1 0x9 DUP4 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP3 PUSH4 0x313CE567 SWAP3 DUP3 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x297 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x2BD SWAP2 SWAP1 PUSH3 0x5B9 JUMP JUMPDEST DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x2FC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x322 SWAP2 SWAP1 PUSH3 0x5B9 JUMP JUMPDEST PUSH3 0x32E SWAP2 SWAP1 PUSH3 0x5FB JUMP JUMPDEST PUSH3 0x33B SWAP1 PUSH1 0xA PUSH3 0x714 JUMP JUMPDEST PUSH1 0xC0 DUP2 DUP2 MSTORE POP POP POP POP POP POP POP POP POP POP DUP1 PUSH1 0xF DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP PUSH3 0x725 JUMP JUMPDEST PUSH3 0x37F DUP3 DUP3 PUSH3 0x3F8 PUSH1 0x20 SHL PUSH3 0x1C53 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH3 0x3A6 SWAP2 DUP4 SWAP1 PUSH3 0x1CBE PUSH3 0x481 DUP3 SHL OR SWAP1 SHR JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD DUP1 SLOAD SWAP1 DUP5 SWAP1 SSTORE SWAP1 MLOAD SWAP1 SWAP2 DUP4 SWAP2 DUP4 SWAP2 DUP7 SWAP2 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF SWAP2 SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH3 0x47D JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP1 DUP7 MSTORE SWAP3 MSTORE DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE SWAP1 MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP2 SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x498 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH3 0x4A1 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH3 0x4EA JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH3 0x49B JUMP JUMPDEST POP PUSH1 0x0 PUSH3 0x49B JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x50B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x120 DUP11 DUP13 SUB SLT ISZERO PUSH3 0x530 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x53B DUP11 PUSH3 0x4F3 JUMP JUMPDEST SWAP9 POP PUSH3 0x54B PUSH1 0x20 DUP12 ADD PUSH3 0x4F3 JUMP JUMPDEST SWAP8 POP PUSH3 0x55B PUSH1 0x40 DUP12 ADD PUSH3 0x4F3 JUMP JUMPDEST SWAP7 POP PUSH3 0x56B PUSH1 0x60 DUP12 ADD PUSH3 0x4F3 JUMP JUMPDEST SWAP6 POP PUSH3 0x57B PUSH1 0x80 DUP12 ADD PUSH3 0x4F3 JUMP JUMPDEST SWAP5 POP PUSH3 0x58B PUSH1 0xA0 DUP12 ADD PUSH3 0x4F3 JUMP JUMPDEST SWAP4 POP PUSH1 0xC0 DUP11 ADD MLOAD SWAP3 POP PUSH1 0xE0 DUP11 ADD MLOAD SWAP2 POP PUSH3 0x5AA PUSH2 0x100 DUP12 ADD PUSH3 0x4F3 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x5CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH3 0x5DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0xFF DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP2 GT ISZERO PUSH3 0x49B JUMPI PUSH3 0x49B PUSH3 0x5E5 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH3 0x658 JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH3 0x63C JUMPI PUSH3 0x63C PUSH3 0x5E5 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH3 0x64A JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH3 0x61C JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH3 0x671 JUMPI POP PUSH1 0x1 PUSH3 0x49B JUMP JUMPDEST DUP2 PUSH3 0x680 JUMPI POP PUSH1 0x0 PUSH3 0x49B JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH3 0x699 JUMPI PUSH1 0x2 DUP2 EQ PUSH3 0x6A4 JUMPI PUSH3 0x6C4 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH3 0x49B JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH3 0x6B8 JUMPI PUSH3 0x6B8 PUSH3 0x5E5 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH3 0x49B JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH3 0x6E9 JUMPI POP DUP2 DUP2 EXP PUSH3 0x49B JUMP JUMPDEST PUSH3 0x6F5 DUP4 DUP4 PUSH3 0x617 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH3 0x70C JUMPI PUSH3 0x70C PUSH3 0x5E5 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x498 PUSH1 0xFF DUP5 AND DUP4 PUSH3 0x660 JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH2 0x2CC0 PUSH3 0x77F PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x69F ADD MSTORE PUSH2 0x254C ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x739 ADD MSTORE DUP2 DUP2 PUSH2 0x162A ADD MSTORE PUSH2 0x1662 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x637 ADD MSTORE DUP2 DUP2 PUSH2 0x1A56 ADD MSTORE DUP2 DUP2 PUSH2 0x1BA2 ADD MSTORE PUSH2 0x2241 ADD MSTORE PUSH2 0x2CC0 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x324 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8A07DF1E GT PUSH2 0x1A9 JUMPI DUP1 PUSH4 0xD0C835CE GT PUSH2 0xEF JUMPI DUP1 PUSH4 0xE1A45218 GT PUSH2 0x9D JUMPI DUP1 PUSH4 0xE1A45218 EQ PUSH2 0x78A JUMPI DUP1 PUSH4 0xE4107C97 EQ PUSH2 0x793 JUMPI DUP1 PUSH4 0xE74B981B EQ PUSH2 0x7A6 JUMPI DUP1 PUSH4 0xEDDD0D9C EQ PUSH2 0x7B9 JUMPI DUP1 PUSH4 0xEE75D7D4 EQ PUSH2 0x7CC JUMPI DUP1 PUSH4 0xEEB3C910 EQ PUSH2 0x7DF JUMPI DUP1 PUSH4 0xF4A20307 EQ PUSH2 0x7F2 JUMPI DUP1 PUSH4 0xF80A36D6 EQ PUSH2 0x819 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xD0C835CE EQ PUSH2 0x6FB JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x70E JUMPI DUP1 PUSH4 0xD592D815 EQ PUSH2 0x721 JUMPI DUP1 PUSH4 0xD8DFEB45 EQ PUSH2 0x734 JUMPI DUP1 PUSH4 0xDD45EEF6 EQ PUSH2 0x75B JUMPI DUP1 PUSH4 0xDE6AFA82 EQ PUSH2 0x76E JUMPI DUP1 PUSH4 0xE0F486EF EQ PUSH2 0x781 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA217FDDF GT PUSH2 0x157 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x659 JUMPI DUP1 PUSH4 0xA6138ED9 EQ PUSH2 0x661 JUMPI DUP1 PUSH4 0xAA85C1DF EQ PUSH2 0x674 JUMPI DUP1 PUSH4 0xAAB483D6 EQ PUSH2 0x687 JUMPI DUP1 PUSH4 0xBB13245F EQ PUSH2 0x69A JUMPI DUP1 PUSH4 0xBCC70283 EQ PUSH2 0x6C1 JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH2 0x6D6 JUMPI DUP1 PUSH4 0xCD4D0BCF EQ PUSH2 0x6E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8A07DF1E EQ PUSH2 0x5B5 JUMPI DUP1 PUSH4 0x8D044C06 EQ PUSH2 0x5D5 JUMPI DUP1 PUSH4 0x9010D07C EQ PUSH2 0x5DD JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x5F0 JUMPI DUP1 PUSH4 0x926D7D7F EQ PUSH2 0x603 JUMPI DUP1 PUSH4 0x92BCCB80 EQ PUSH2 0x62A JUMPI DUP1 PUSH4 0x95E4B251 EQ PUSH2 0x632 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x38FED708 GT PUSH2 0x26E JUMPI DUP1 PUSH4 0x4EF1CCD1 GT PUSH2 0x21C JUMPI DUP1 PUSH4 0x4EF1CCD1 EQ PUSH2 0x506 JUMPI DUP1 PUSH4 0x525DECD6 EQ PUSH2 0x519 JUMPI DUP1 PUSH4 0x5D591D68 EQ PUSH2 0x52C JUMPI DUP1 PUSH4 0x73A95DDD EQ PUSH2 0x565 JUMPI DUP1 PUSH4 0x7DBC1DF0 EQ PUSH2 0x572 JUMPI DUP1 PUSH4 0x837018FA EQ PUSH2 0x585 JUMPI DUP1 PUSH4 0x85C4E79E EQ PUSH2 0x58D JUMPI DUP1 PUSH4 0x87E2D06E EQ PUSH2 0x5A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x38FED708 EQ PUSH2 0x441 JUMPI DUP1 PUSH4 0x3BFA67FE EQ PUSH2 0x49F JUMPI DUP1 PUSH4 0x4565E9FF EQ PUSH2 0x4C7 JUMPI DUP1 PUSH4 0x458F5815 EQ PUSH2 0x4DA JUMPI DUP1 PUSH4 0x46904840 EQ PUSH2 0x4E3 JUMPI DUP1 PUSH4 0x49CBBF2A EQ PUSH2 0x4F6 JUMPI DUP1 PUSH4 0x4DFE7AF2 EQ PUSH2 0x4FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x244F5ACF GT PUSH2 0x2D6 JUMPI DUP1 PUSH4 0x244F5ACF EQ PUSH2 0x3A2 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x3B5 JUMPI DUP1 PUSH4 0x258492CD EQ PUSH2 0x3D9 JUMPI DUP1 PUSH4 0x29390370 EQ PUSH2 0x3EC JUMPI DUP1 PUSH4 0x2B5ECEFF EQ PUSH2 0x3FF JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x412 JUMPI DUP1 PUSH4 0x354181F3 EQ PUSH2 0x425 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x42E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x329 JUMPI DUP1 PUSH4 0x78A6BE8 EQ PUSH2 0x351 JUMPI DUP1 PUSH4 0x7BDA1BB EQ PUSH2 0x374 JUMPI DUP1 PUSH4 0x80C279A EQ PUSH2 0x37D JUMPI DUP1 PUSH4 0x12589FB5 EQ PUSH2 0x386 JUMPI DUP1 PUSH4 0x13966DB5 EQ PUSH2 0x38F JUMPI DUP1 PUSH4 0x2056AA12 EQ PUSH2 0x398 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x33C PUSH2 0x337 CALLDATASIZE PUSH1 0x4 PUSH2 0x26DB JUMP JUMPDEST PUSH2 0x82C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x366 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C6B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x348 JUMP JUMPDEST PUSH2 0x366 PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST PUSH2 0x366 PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x366 PUSH1 0xF SLOAD DUP2 JUMP JUMPDEST PUSH2 0x366 PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x857 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3A0 PUSH2 0x3B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x2751 JUMP JUMPDEST PUSH2 0x8BA JUMP JUMPDEST PUSH2 0x366 PUSH2 0x3C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2793 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x3E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x27C8 JUMP JUMPDEST PUSH2 0x919 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x3FA CALLDATASIZE PUSH1 0x4 PUSH2 0x2803 JUMP JUMPDEST PUSH2 0xA68 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x40D CALLDATASIZE PUSH1 0x4 PUSH2 0x281E JUMP JUMPDEST PUSH2 0xAE1 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x420 CALLDATASIZE PUSH1 0x4 PUSH2 0x2864 JUMP JUMPDEST PUSH2 0xBE5 JUMP JUMPDEST PUSH2 0x366 PUSH1 0xD SLOAD DUP2 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x43C CALLDATASIZE PUSH1 0x4 PUSH2 0x2864 JUMP JUMPDEST PUSH2 0xC11 JUMP JUMPDEST PUSH2 0x47A PUSH2 0x44F CALLDATASIZE PUSH1 0x4 PUSH2 0x2793 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 SWAP1 DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x348 JUMP JUMPDEST PUSH2 0x4BA PUSH20 0x686B3A7B9BE2751BB51084A6E0E7DB7F1746EB1 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x348 SWAP2 SWAP1 PUSH2 0x2890 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x4D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x2751 JUMP JUMPDEST PUSH2 0xC8F JUMP JUMPDEST PUSH2 0x366 PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x4BA SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0xD29 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0xD83 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x514 CALLDATASIZE PUSH1 0x4 PUSH2 0x2793 JUMP JUMPDEST PUSH2 0xDD8 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x527 CALLDATASIZE PUSH1 0x4 PUSH2 0x2803 JUMP JUMPDEST PUSH2 0xE52 JUMP JUMPDEST PUSH2 0x47A PUSH2 0x53A CALLDATASIZE PUSH1 0x4 PUSH2 0x2793 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 SWAP1 DUP4 JUMP JUMPDEST PUSH1 0xE SLOAD PUSH2 0x33C SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x580 CALLDATASIZE PUSH1 0x4 PUSH2 0x2793 JUMP JUMPDEST PUSH2 0xEBE JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0xF38 JUMP JUMPDEST PUSH2 0x366 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C2B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x5B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x28A4 JUMP JUMPDEST PUSH2 0xF8C JUMP JUMPDEST PUSH2 0x366 PUSH2 0x5C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2793 JUMP JUMPDEST PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x113A JUMP JUMPDEST PUSH2 0x4BA PUSH2 0x5EB CALLDATASIZE PUSH1 0x4 PUSH2 0x2910 JUMP JUMPDEST PUSH2 0x118D JUMP JUMPDEST PUSH2 0x33C PUSH2 0x5FE CALLDATASIZE PUSH1 0x4 PUSH2 0x2864 JUMP JUMPDEST PUSH2 0x11AC JUMP JUMPDEST PUSH2 0x366 PUSH32 0xE2B7FB3B832174769106DAEBCFD6D1970523240DDA11281102DB9363B83B0DC4 DUP2 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x11D7 JUMP JUMPDEST PUSH2 0x4BA PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x366 PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0x4BA SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x682 CALLDATASIZE PUSH1 0x4 PUSH2 0x28A4 JUMP JUMPDEST PUSH2 0x122D JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x695 CALLDATASIZE PUSH1 0x4 PUSH2 0x2793 JUMP JUMPDEST PUSH2 0x1379 JUMP JUMPDEST PUSH2 0x366 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x366 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C4B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x366 PUSH2 0x6E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2793 JUMP JUMPDEST PUSH2 0x13F3 JUMP JUMPDEST PUSH1 0xE SLOAD PUSH2 0x33C SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x709 CALLDATASIZE PUSH1 0x4 PUSH2 0x2932 JUMP JUMPDEST PUSH2 0x140A JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x71C CALLDATASIZE PUSH1 0x4 PUSH2 0x2864 JUMP JUMPDEST PUSH2 0x14F0 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x72F CALLDATASIZE PUSH1 0x4 PUSH2 0x2793 JUMP JUMPDEST PUSH2 0x1517 JUMP JUMPDEST PUSH2 0x4BA PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0xE SLOAD PUSH2 0x33C SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x77C CALLDATASIZE PUSH1 0x4 PUSH2 0x27C8 JUMP JUMPDEST PUSH2 0x16EF JUMP JUMPDEST PUSH2 0x366 PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x366 PUSH2 0x2710 DUP2 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x7A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x2793 JUMP JUMPDEST PUSH2 0x182E JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x7B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2803 JUMP JUMPDEST PUSH2 0x1885 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x7C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2793 JUMP JUMPDEST PUSH2 0x18F0 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x4BA SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x7ED CALLDATASIZE PUSH1 0x4 PUSH2 0x2793 JUMP JUMPDEST PUSH2 0x196A JUMP JUMPDEST PUSH2 0x366 PUSH32 0xCED4EB9FAEB19AB0E2E05A20ADE58D82157E1035A3FBFF4BC38DD5E609F22B93 DUP2 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x827 CALLDATASIZE PUSH1 0x4 PUSH2 0x2910 JUMP JUMPDEST PUSH2 0x1AFE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5A05180F PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x851 JUMPI POP PUSH2 0x851 DUP3 PUSH2 0x1CD3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C2B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x870 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0xE DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xCD71257F2998474633E94CFFFA045014068F6218FFDCA256B6F4AA9D5F15FB89 SWAP1 PUSH2 0x8AF SWAP1 CALLER SWAP1 PUSH2 0x2890 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD SUB PUSH2 0x8E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8DC SWAP1 PUSH2 0x297E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH1 0xE SLOAD PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x90F JUMPI PUSH1 0x40 MLOAD PUSH4 0xAADFADDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C6B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x932 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE POP PUSH1 0x7 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE SWAP1 POP POP DUP6 PUSH32 0x5A0C55C421AE3AAC2379811ECA16AAEE32B6E64411322B624118D4219B9350A0 DUP3 PUSH1 0x0 ADD MLOAD DUP8 DUP5 PUSH1 0x40 ADD MLOAD DUP8 DUP7 PUSH1 0x20 ADD MLOAD DUP11 PUSH1 0x40 MLOAD PUSH2 0xA58 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x29B5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C6B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xA81 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP1 PUSH32 0x801352E72EF9B80B3992CCBEDF07AB0E133E7DA7AACCF0024ABF23F4F32EB99A SWAP1 PUSH2 0xAD4 SWAP1 DUP4 SWAP1 DUP7 SWAP1 PUSH2 0x29EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH32 0xE2B7FB3B832174769106DAEBCFD6D1970523240DDA11281102DB9363B83B0DC4 PUSH2 0xB0C DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0xB42 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AEECEBF PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD DUP11 DUP2 MSTORE PUSH1 0x0 DUP7 DUP9 ADD DUP2 DUP2 MSTORE DUP15 DUP3 MSTORE PUSH1 0x6 DUP5 MSTORE SWAP1 DUP9 SWAP1 KECCAK256 SWAP7 MLOAD DUP8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP6 AND SWAP5 SWAP1 SWAP5 OR DUP7 SSTORE MLOAD PUSH1 0x1 DUP7 ADD SSTORE SWAP2 MLOAD PUSH1 0x2 SWAP1 SWAP5 ADD SWAP4 SWAP1 SWAP4 SSTORE DUP4 MLOAD DUP9 DUP2 MSTORE SWAP1 DUP2 ADD DUP8 SWAP1 MSTORE SWAP3 DUP4 ADD DUP6 SWAP1 MSTORE SWAP1 SWAP2 DUP9 SWAP2 PUSH32 0xC985471D1CB1BB75DA0D54FA5AB10F7171E952CEFCC0BF4FC7C2546C19D1811F SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH2 0xC02 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH2 0xC0C DUP4 DUP4 PUSH2 0x1D6C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0xC81 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x8DC JUMP JUMPDEST PUSH2 0xC8B DUP3 DUP3 PUSH2 0x1D8E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD SUB PUSH2 0xCB1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8DC SWAP1 PUSH2 0x297E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH1 0xE SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 ISZERO PUSH2 0xCE0 JUMPI PUSH1 0x40 MLOAD PUSH4 0xAADFADDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xD1D JUMPI PUSH2 0xD0D DUP6 DUP6 DUP4 DUP2 DUP2 LT PUSH2 0xD01 JUMPI PUSH2 0xD01 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x1DB0 JUMP JUMPDEST PUSH2 0xD16 DUP2 PUSH2 0x2A31 JUMP JUMPDEST SWAP1 POP PUSH2 0xCE4 JUMP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C2B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xD42 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0xE DUP1 SLOAD PUSH3 0xFF0000 NOT AND PUSH3 0x10000 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xDC41A92196CCC1AB8149C01BC68C2F506B10A7BB5CD2693C9516D176F5381FF4 SWAP1 PUSH2 0x8AF SWAP1 CALLER SWAP1 PUSH2 0x2890 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C6B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xD9C DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0xE DUP1 SLOAD PUSH3 0xFF0000 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x53A8C40FC17C78D38E2C06AA8D2C550C1ACBF7B30D087DBDA289AB3DD41C235C SWAP1 PUSH2 0x8AF SWAP1 CALLER SWAP1 PUSH2 0x2890 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C6B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xDF1 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH2 0x2710 DUP3 LT ISZERO PUSH2 0xE14 JUMPI PUSH1 0x40 MLOAD PUSH4 0x617AB12D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9 DUP1 SLOAD SWAP1 DUP4 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE PUSH32 0xFDAF6ED728CEF208E62328A008209556F8281F3062B14DD08AAAA90FA1594211 SWAP2 ADD PUSH2 0xAD4 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C6B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xE6B DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP1 PUSH32 0xB09F298B2812193D5ADA18BEAADD6CB8F12B3640926D99DE46E2A65394DF829D SWAP1 PUSH2 0xAD4 SWAP1 DUP4 SWAP1 DUP7 SWAP1 PUSH2 0x29EB JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C6B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xED7 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH2 0x2710 DUP3 GT ISZERO PUSH2 0xEFA JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E2DF709 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xB DUP1 SLOAD SWAP1 DUP4 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE PUSH32 0x2956ACFE8584FB02384E06C675EE215BF10D55C3DE1E6FF9B2F621E8A40C6470 SWAP2 ADD PUSH2 0xAD4 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C6B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xF51 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0xE DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x94482EE2B195C365DBBC2D689FD5A088D2B219ABE44360BA8895525C9471D66F SWAP1 PUSH2 0x8AF SWAP1 CALLER SWAP1 PUSH2 0x2890 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C4B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xFA5 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST DUP4 DUP3 DUP2 EQ PUSH2 0xFC6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xCC6E40B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1131 JUMPI PUSH1 0x0 PUSH1 0x6 DUP2 DUP10 DUP10 DUP6 DUP2 DUP2 LT PUSH2 0xFE8 JUMPI PUSH2 0xFE8 PUSH2 0x2A05 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP3 SWAP1 SWAP3 ADD CALLDATALOAD DUP4 MSTORE POP DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x1029 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5A8A45B PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 PUSH1 0x0 DUP9 DUP9 DUP5 DUP2 DUP2 LT PUSH2 0x103F JUMPI PUSH2 0x103F PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x0 EQ PUSH2 0x1078 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1139F309 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 DUP5 DUP3 DUP2 DUP2 LT PUSH2 0x108A JUMPI PUSH2 0x108A PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x6 PUSH1 0x0 DUP10 DUP10 DUP6 DUP2 DUP2 LT PUSH2 0x10A7 JUMPI PUSH2 0x10A7 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP DUP5 DUP5 DUP3 DUP2 DUP2 LT PUSH2 0x10D5 JUMPI PUSH2 0x10D5 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP4 DUP2 DUP2 LT PUSH2 0x10EE JUMPI PUSH2 0x10EE PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH32 0xC2055184BBC2D10B90BF7DF17A84F8BDDA6B52377A976E41E0C1610FFFAFC0D7 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x112A DUP2 PUSH2 0x2A31 JUMP JUMPDEST SWAP1 POP PUSH2 0xFC9 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C6B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x1153 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0xE DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xC641B9C4AFA539CEDCBE2E5F3E47D9F092175B5D0B8AE72DFFA634A3EB3E47E4 SWAP1 PUSH2 0x8AF SWAP1 CALLER SWAP1 PUSH2 0x2890 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x11A5 SWAP1 DUP4 PUSH2 0x1E27 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C2B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x11F0 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0xE DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x71E0406677C0570B2A66B1A4FEECCF5C1CBA2D6729435461E27A312B15410D04 SWAP1 PUSH2 0x8AF SWAP1 CALLER SWAP1 PUSH2 0x2890 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C4B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x1246 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST DUP4 DUP3 DUP2 EQ PUSH2 0x1267 JUMPI PUSH1 0x40 MLOAD PUSH4 0xCC6E40B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1131 JUMPI PUSH1 0x7 PUSH1 0x0 DUP9 DUP9 DUP5 DUP2 DUP2 LT PUSH2 0x1288 JUMPI PUSH2 0x1288 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x0 EQ PUSH2 0x12C1 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1139F309 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 DUP5 DUP3 DUP2 DUP2 LT PUSH2 0x12D3 JUMPI PUSH2 0x12D3 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x7 PUSH1 0x0 DUP10 DUP10 DUP6 DUP2 DUP2 LT PUSH2 0x12F0 JUMPI PUSH2 0x12F0 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP DUP5 DUP5 DUP3 DUP2 DUP2 LT PUSH2 0x131E JUMPI PUSH2 0x131E PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP4 DUP2 DUP2 LT PUSH2 0x1337 JUMPI PUSH2 0x1337 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH31 0x5E86A70F400D1820AB5A0573A2BE911D831AB28FE2E9448B34DAAB223B09C PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x1372 DUP2 PUSH2 0x2A31 JUMP JUMPDEST SWAP1 POP PUSH2 0x126A JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C6B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x1392 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH2 0x2710 DUP3 LT ISZERO PUSH2 0x13B5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x617AB12D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x8 DUP1 SLOAD SWAP1 DUP4 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE PUSH32 0xE6E25ADD7363F8F8A40CBEA9810D3115A33703B10972EF759104219B00657436 SWAP2 ADD PUSH2 0xAD4 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x851 SWAP1 PUSH2 0x1E33 JUMP JUMPDEST PUSH32 0xCED4EB9FAEB19AB0E2E05A20ADE58D82157E1035A3FBFF4BC38DD5E609F22B93 PUSH2 0x1435 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST TIMESTAMP DUP5 LT ISZERO PUSH2 0x1456 JUMPI PUSH1 0x40 MLOAD PUSH4 0x209768A3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x14E8 JUMPI DUP6 PUSH1 0x10 PUSH1 0x0 DUP8 DUP8 DUP6 DUP2 DUP2 LT PUSH2 0x1479 JUMPI PUSH2 0x1479 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP5 DUP5 DUP3 DUP2 DUP2 LT PUSH2 0x14A4 JUMPI PUSH2 0x14A4 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP7 PUSH32 0x15D20A98E8D4B1247FC51E2F6817929874A0769087776E52268EB1B4C8BDB2DD PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x14E1 DUP2 PUSH2 0x2A31 JUMP JUMPDEST SWAP1 POP PUSH2 0x145A JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH2 0x150D DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH2 0xC0C DUP4 DUP4 PUSH2 0x1D8E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD SUB PUSH2 0x1539 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8DC SWAP1 PUSH2 0x297E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH1 0xE SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x1568 JUMPI PUSH1 0x40 MLOAD PUSH4 0xAADFADDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x8 SLOAD DUP3 LT ISZERO PUSH2 0x158B JUMPI PUSH1 0x40 MLOAD PUSH4 0x6BA4A1C7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1596 DUP4 PUSH2 0x1E3D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x15A4 DUP3 DUP6 PUSH2 0x2A4A JUMP JUMPDEST PUSH1 0xC DUP1 SLOAD SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 SWAP1 DUP3 PUSH2 0x15B9 DUP4 PUSH2 0x2A31 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE CALLER DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP7 DUP2 MSTORE PUSH1 0x0 DUP4 DUP6 ADD DUP2 DUP2 MSTORE DUP7 DUP3 MSTORE PUSH1 0x6 SWAP1 SWAP4 MSTORE SWAP4 SWAP1 SWAP4 KECCAK256 SWAP2 MLOAD DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND OR DUP3 SSTORE SWAP2 MLOAD PUSH1 0x1 DUP3 ADD SSTORE SWAP1 MLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SSTORE SWAP1 POP DUP3 ISZERO PUSH2 0x1655 JUMPI PUSH1 0x5 SLOAD PUSH2 0x1655 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND SWAP2 CALLER SWAP2 AND DUP7 PUSH2 0x1E5A JUMP JUMPDEST PUSH2 0x169E PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND CALLER PUSH20 0x686B3A7B9BE2751BB51084A6E0E7DB7F1746EB1 DUP6 PUSH2 0x1E5A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE DUP2 SWAP1 CALLER SWAP1 PUSH32 0x7CBCE37C7B11D322316420484F40C29CE672AD3FA16752551A3DBE6CCFA04E14 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C6B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x1708 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE POP PUSH1 0x6 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE SWAP1 POP POP DUP6 PUSH32 0x7E506B1F11218D4C947D5A59A97FD996C42AFC2B024B6AEAEC050930EB2B3399 DUP3 PUSH1 0x0 ADD MLOAD DUP8 DUP5 PUSH1 0x40 ADD MLOAD DUP8 DUP7 PUSH1 0x20 ADD MLOAD DUP11 PUSH1 0x40 MLOAD PUSH2 0xA58 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x29B5 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C6B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x1847 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0xF DUP1 SLOAD SWAP1 DUP4 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE PUSH32 0x1071422BAD736C3651D3D3B7A4EDA70E84E9C85A08F21C955D79DED03BBF06BB SWAP2 ADD PUSH2 0xAD4 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C6B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x189E DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 PUSH32 0x15D80A013F22151BC7246E3BC132E12828CDE19DE98870475E3FA70840152721 SWAP2 PUSH2 0xAD4 SWAP2 DUP5 SWAP2 PUSH2 0x29EB JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C6B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x1909 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH2 0x2710 DUP3 GT ISZERO PUSH2 0x192C JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E2DF709 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xA DUP1 SLOAD SWAP1 DUP4 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE PUSH32 0x387269377AE17304805D5F88CEA4252E5CA47346783C279AEB9E8627335A49AC SWAP2 ADD PUSH2 0xAD4 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD SUB PUSH2 0x198C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8DC SWAP1 PUSH2 0x297E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH1 0xE SLOAD PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x19B6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xAADFADDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9 SLOAD DUP3 LT ISZERO PUSH2 0x19D9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x595BD39F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xD DUP1 SLOAD PUSH1 0x0 SWAP2 DUP3 PUSH2 0x19EA DUP4 PUSH2 0x2A31 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE CALLER DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP9 DUP2 MSTORE PUSH1 0x0 DUP5 DUP7 ADD DUP2 DUP2 MSTORE DUP8 DUP3 MSTORE PUSH1 0x7 SWAP1 SWAP4 MSTORE DUP6 SWAP1 KECCAK256 SWAP4 MLOAD DUP5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND OR DUP6 SSTORE SWAP1 MLOAD PUSH1 0x1 DUP6 ADD SSTORE SWAP1 MLOAD PUSH1 0x2 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP2 MLOAD PUSH4 0x79CC679 PUSH1 0xE4 SHL DUP2 MSTORE SWAP3 SWAP4 POP PUSH32 0x0 AND SWAP2 PUSH4 0x79CC6790 SWAP2 PUSH2 0x1A8B SWAP2 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x2A5D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1AA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1AB9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD DUP6 DUP2 MSTORE DUP4 SWAP3 POP CALLER SWAP2 POP PUSH32 0x80EBB30E7C30052BF403A20DA869BDD033841684E93930D97C4AF74238529B4F SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD SUB PUSH2 0x1B20 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8DC SWAP1 PUSH2 0x297E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH1 0xE SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x1B50 JUMPI PUSH1 0x40 MLOAD PUSH4 0xAADFADDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xF SLOAD DUP4 LT ISZERO PUSH2 0x1B73 JUMPI PUSH1 0x40 MLOAD PUSH4 0x595BD39F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xD DUP1 SLOAD PUSH1 0x0 SWAP2 DUP3 PUSH2 0x1B84 DUP4 PUSH2 0x2A31 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH1 0x40 MLOAD PUSH4 0x79CC679 PUSH1 0xE4 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x79CC6790 SWAP1 PUSH2 0x1BD9 SWAP1 CALLER SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x2A5D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1BF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1C07 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE DUP5 SWAP4 POP CALLER SWAP3 POP PUSH32 0xAD2102C6ABC98F954BD5D61E6C0D19764DB331F63019296309309A34F70E66A6 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP POP JUMP JUMPDEST PUSH2 0x1C5D DUP3 DUP3 PUSH2 0x11AC JUMP JUMPDEST PUSH2 0xC8B JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP1 DUP7 MSTORE SWAP3 MSTORE DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE SWAP1 MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11A5 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1EBA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x851 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x851 JUMP JUMPDEST PUSH2 0x1D12 DUP3 DUP3 PUSH2 0x11AC JUMP JUMPDEST PUSH2 0xC8B JUMPI PUSH2 0x1D2A DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x14 PUSH2 0x1F09 JUMP JUMPDEST PUSH2 0x1D35 DUP4 PUSH1 0x20 PUSH2 0x1F09 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1D46 SWAP3 SWAP2 SWAP1 PUSH2 0x2A9A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x8DC SWAP2 PUSH1 0x4 ADD PUSH2 0x2B09 JUMP JUMPDEST PUSH2 0x1D76 DUP3 DUP3 PUSH2 0x1C53 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xC0C SWAP1 DUP3 PUSH2 0x1CBE JUMP JUMPDEST PUSH2 0x1D98 DUP3 DUP3 PUSH2 0x20A5 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xC0C SWAP1 DUP3 PUSH2 0x210C JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SUB PUSH2 0x1DDE JUMPI PUSH1 0x40 MLOAD PUSH4 0xAD24961 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD TIMESTAMP LT ISZERO PUSH2 0x1E0D JUMPI PUSH1 0x40 MLOAD PUSH4 0x309B0BCF PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1E16 DUP2 PUSH2 0x2121 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11A5 DUP4 DUP4 PUSH2 0x2315 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x851 DUP3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2710 PUSH1 0xA SLOAD DUP4 PUSH2 0x1E50 SWAP2 SWAP1 PUSH2 0x2B3C JUMP JUMPDEST PUSH2 0x851 SWAP2 SWAP1 PUSH2 0x2B5B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x84 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x23B872DD PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x1EB4 SWAP1 DUP6 SWAP1 PUSH2 0x233F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x1F01 JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x851 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x851 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1F18 DUP4 PUSH1 0x2 PUSH2 0x2B3C JUMP JUMPDEST PUSH2 0x1F23 SWAP1 PUSH1 0x2 PUSH2 0x2B7D JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1F3B JUMPI PUSH2 0x1F3B PUSH2 0x2B90 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1F65 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1F80 JUMPI PUSH2 0x1F80 PUSH2 0x2A05 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1FAF JUMPI PUSH2 0x1FAF PUSH2 0x2A05 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x1FD3 DUP5 PUSH1 0x2 PUSH2 0x2B3C JUMP JUMPDEST PUSH2 0x1FDE SWAP1 PUSH1 0x1 PUSH2 0x2B7D JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x2056 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x2012 JUMPI PUSH2 0x2012 PUSH2 0x2A05 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2028 JUMPI PUSH2 0x2028 PUSH2 0x2A05 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x204F DUP2 PUSH2 0x2BA6 JUMP JUMPDEST SWAP1 POP PUSH2 0x1FE1 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x11A5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8DC JUMP JUMPDEST PUSH2 0x20AF DUP3 DUP3 PUSH2 0x11AC JUMP JUMPDEST ISZERO PUSH2 0xC8B JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11A5 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x2411 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0x60 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 ADD SLOAD SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP2 SUB PUSH2 0x217D JUMPI PUSH1 0x40 MLOAD PUSH4 0x8718C771 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 DUP3 DUP2 ADD MLOAD SWAP1 MLOAD PUSH4 0xE757223 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xE7572230 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x21CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x21F1 SWAP2 SWAP1 PUSH2 0x2BBD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2203 DUP4 PUSH1 0x20 ADD MLOAD DUP4 PUSH2 0x2504 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP4 SWAP1 SSTORE PUSH1 0x2 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP5 MLOAD SWAP1 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x40C10F19 SWAP2 PUSH2 0x227E SWAP2 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2A5D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2298 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x22AC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP DUP5 MLOAD PUSH1 0x20 DUP1 DUP8 ADD MLOAD PUSH1 0x40 DUP1 DUP10 ADD MLOAD DUP2 MLOAD DUP9 DUP2 MSTORE SWAP4 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 ADD DUP8 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD MSTORE DUP8 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 POP PUSH32 0xDD602CC9CB236502FB74F091872B4025184011DD96EEE41099CAA260842F2024 SWAP1 PUSH1 0x80 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x232C JUMPI PUSH2 0x232C PUSH2 0x2A05 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2394 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2536 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xC0C JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x23B2 SWAP2 SWAP1 PUSH2 0x2BD6 JUMP JUMPDEST PUSH2 0xC0C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x8DC JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x24FA JUMPI PUSH1 0x0 PUSH2 0x2435 PUSH1 0x1 DUP4 PUSH2 0x2A4A JUMP JUMPDEST DUP6 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x2449 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x2A4A JUMP JUMPDEST SWAP1 POP DUP2 DUP2 EQ PUSH2 0x24AE JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2469 JUMPI PUSH2 0x2469 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x248C JUMPI PUSH2 0x248C PUSH2 0x2A05 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP2 DUP3 MSTORE PUSH1 0x1 DUP9 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE JUMPDEST DUP6 SLOAD DUP7 SWAP1 DUP1 PUSH2 0x24BF JUMPI PUSH2 0x24BF PUSH2 0x2BF8 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x851 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x851 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2510 DUP5 PUSH2 0x2545 JUMP JUMPDEST PUSH2 0x2522 SWAP1 PUSH8 0xDE0B6B3A7640000 PUSH2 0x2B3C JUMP JUMPDEST SWAP1 POP PUSH2 0x252E DUP4 DUP3 PUSH2 0x2B5B JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x252E DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x2571 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x851 PUSH32 0x0 DUP4 PUSH2 0x2B3C JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x25D2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x8DC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x2629 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8DC JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x2645 SWAP2 SWAP1 PUSH2 0x2C0E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2682 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2687 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x2697 DUP3 DUP3 DUP7 PUSH2 0x26A2 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x26B1 JUMPI POP DUP2 PUSH2 0x11A5 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x26C1 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8DC SWAP2 SWAP1 PUSH2 0x2B09 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x26ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x11A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2717 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x272F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x274A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2764 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x277B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2787 DUP6 DUP3 DUP7 ADD PUSH2 0x2705 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x27A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x27C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x27DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH2 0x27EE PUSH1 0x20 DUP7 ADD PUSH2 0x27AC JUMP JUMPDEST SWAP4 SWAP7 SWAP4 SWAP6 POP POP POP POP PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x60 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2815 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11A5 DUP3 PUSH2 0x27AC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2836 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH2 0x2846 PUSH1 0x20 DUP8 ADD PUSH2 0x27AC JUMP JUMPDEST SWAP5 SWAP8 SWAP5 SWAP7 POP POP POP POP PUSH1 0x40 DUP4 ADD CALLDATALOAD SWAP3 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP3 PUSH1 0x80 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2877 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x2887 PUSH1 0x20 DUP5 ADD PUSH2 0x27AC JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x28BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x28D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x28DE DUP9 DUP4 DUP10 ADD PUSH2 0x2705 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x28F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2904 DUP8 DUP3 DUP9 ADD PUSH2 0x2705 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2923 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2947 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2965 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2971 DUP7 DUP3 DUP8 ADD PUSH2 0x2705 JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1F SWAP1 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 AND DUP2 MSTORE SWAP5 SWAP1 SWAP6 AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2A43 JUMPI PUSH2 0x2A43 PUSH2 0x2A1B JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x851 JUMPI PUSH2 0x851 PUSH2 0x2A1B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2A91 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2A79 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x2ACC DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2A76 JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x2AFD DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2A76 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2B28 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2A76 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x2B56 JUMPI PUSH2 0x2B56 PUSH2 0x2A1B JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2B78 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x851 JUMPI PUSH2 0x851 PUSH2 0x2A1B JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x2BB5 JUMPI PUSH2 0x2BB5 PUSH2 0x2A1B JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2BCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2BE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x11A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2C20 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2A76 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID SWAP11 0xC2 0xC4 RETURNDATACOPY SWAP1 0x5F 0xE4 CREATE 0xC0 ADDRESS LOG0 0xB0 0xE4 0xB8 SDIV LOG2 DUP5 0xE7 SWAP14 LOG3 0x2A 0x5C SWAP13 PUSH18 0xBE1C68DD79BBB89D830A9081649E91840EB0 0x27 0x4E SWAP10 0xB4 PUSH23 0x26A896CFA0F4DD591CB31CD5060E566C0D8C6DD8AF24DB ADDRESS PUSH15 0xB580672D47CF7DD23B8394BF74074F DUP11 0xC1 0x4B SWAP5 DUP6 SLT 0xEC 0xDB SUB LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA5 CREATE BYTE EXTCODESIZE PUSH3 0xDFA9F1 PUSH29 0x4B2F1F1343FBB1DABD04D0FD0E497DFE972EF494D917464736F6C6343 STOP ADDMOD LT STOP CALLER SWAP11 0xC2 0xC4 RETURNDATACOPY SWAP1 0x5F 0xE4 CREATE 0xC0 ADDRESS LOG0 0xB0 0xE4 0xB8 SDIV LOG2 DUP5 0xE7 SWAP14 LOG3 0x2A 0x5C SWAP13 PUSH18 0xBE1C68DD79BBB89D830A9081649E91840EB0 0x27 0x4E SWAP10 0xB4 PUSH23 0x26A896CFA0F4DD591CB31CD5060E566C0D8C6DD8AF24DB ADDRESS PUSH15 0xB580672D47CF7DD23B8394BF74074F DUP11 0xC1 0x4B SWAP5 DUP6 SLT 0xEC 0xDB SUB ","sourceMap":"269:3143:2:-:0;;;1670:1:0;1645:26;;1753:1;1722:32;;2092:1;2048:45;;2171:1;2129:43;;501:461:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1679:1:7;1774:7;:22;792:11:2;811:4;823:12;843:6;857:12;877:13;898:21;927:24;792:11;811:4;823:12;843:6;857:12;877:13;898:21;927:24;-1:-1:-1;;;;;2999:25:0;;2995:77;;3041:24;;-1:-1:-1;;;3041:24:0;;;;;;;;;;;2995:77;-1:-1:-1;;;;;3081:18:0;;3077:63;;3116:17;;-1:-1:-1;;;3116:17:0;;;;;;;;;;;3077:63;-1:-1:-1;;;;;3149:26:0;;3145:79;;3192:25;;-1:-1:-1;;;3192:25:0;;;;;;;;;;;3145:79;-1:-1:-1;;;;;3233:27:0;;3229:81;;3277:26;;-1:-1:-1;;;3277:26:0;;;;;;;;;;;3229:81;3316:44;2206:4:3;3347:12:0;3316:10;:44::i;:::-;3366:39;-1:-1:-1;;;;;;;;;;;3392:12:0;3366:10;:39::i;:::-;3411:32;-1:-1:-1;;;;;;;;;;;3436:6:0;3411:10;:32::i;:::-;3449:46;-1:-1:-1;;;;;;;;;;;3482:12:0;3449:10;:46::i;:::-;3501:60;3512:34;3548:12;3501:10;:60::i;:::-;3572:42;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;3572:13:0;:42::i;:::-;3620:50;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;3620:13:0;:50::i;:::-;3676:42;2702:25;-1:-1:-1;;;;;;;;;;;3676:13:0;:42::i;:::-;-1:-1:-1;;;;;3725:32:0;;;;;;;3763:20;;;;;3789:12;:28;;-1:-1:-1;;;;;;3789:28:0;;;;;;;;;;3823:11;:26;;;;;;;;;;;;;;3855:20;:44;;;3905:23;:50;;;4048:38;;;-1:-1:-1;;;4048:38:0;;;;3725:32;;4048:36;;:38;;;;-1:-1:-1;;4048:38:0;;;;;;3725:32;4048:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4019:4;-1:-1:-1;;;;;4004:29:0;;:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:82;;;;:::i;:::-;3989:98;;:2;:98;:::i;:::-;3962:125;;;;;;2758:1334;;;;;;;;969:24:1::1;935:31;:58;;;;423:575:::0;;;;;;;;501:461:2;;;;;;;;;269:3143;;2111:156:4;2194:31;2211:4;2217:7;2194:16;;;;;:31;;:::i;:::-;2231:18;;;;:12;:18;;;;;;;;:31;;2254:7;;2231:22;;;;;:31;;:::i;:::-;;2111:156;;:::o;6406:233:3:-;6485:25;4120:12;;;:6;:12;;;;;;;;:22;;;;;6537:34;;;;6582:52;;4120:22;;6537:34;;4120:22;;:12;;6582:52;;6485:25;6582:52;6479:160;6406:233;;:::o;6749:211::-;3129:4;3150:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;3150:29:3;;;;;;;;;;;;6823:133;;6860:12;;;;6892:4;6860:12;;;;;;;;-1:-1:-1;;;;;6860:29:3;;;;;;;;;;:36;;-1:-1:-1;;6860:36:3;;;;;;;6909:40;;713:10:12;;6860:12:3;;6909:40;;6860:12;6909:40;6823:133;6749:211;;:::o;7180:144:14:-;7250:4;7269:50;7274:3;-1:-1:-1;;;;;7294:23:14;;7269:4;:50::i;:::-;7262:57;;7180:144;;;;;:::o;1643:354::-;1706:4;3572:19;;;:12;;;:19;;;;;;1718:275;;-1:-1:-1;1754:23:14;;;;;;;;:11;:23;;;;;;;;;;;;;1916:18;;1894:19;;;:12;;;:19;;;;;;:40;;;;1942:11;;1718:275;-1:-1:-1;1981:5:14;1974:12;;14:177:22;93:13;;-1:-1:-1;;;;;135:31:22;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:846::-;338:6;346;354;362;370;378;386;394;402;455:3;443:9;434:7;430:23;426:33;423:53;;;472:1;469;462:12;423:53;495:40;525:9;495:40;:::i;:::-;485:50;;554:49;599:2;588:9;584:18;554:49;:::i;:::-;544:59;;622:49;667:2;656:9;652:18;622:49;:::i;:::-;612:59;;690:49;735:2;724:9;720:18;690:49;:::i;:::-;680:59;;758:50;803:3;792:9;788:19;758:50;:::i;:::-;748:60;;827:50;872:3;861:9;857:19;827:50;:::i;:::-;817:60;;917:3;906:9;902:19;896:26;886:36;;962:3;951:9;947:19;941:26;931:36;;986:50;1031:3;1020:9;1016:19;986:50;:::i;:::-;976:60;;196:846;;;;;;;;;;;:::o;1047:273::-;1115:6;1168:2;1156:9;1147:7;1143:23;1139:32;1136:52;;;1184:1;1181;1174:12;1136:52;1216:9;1210:16;1266:4;1259:5;1255:16;1248:5;1245:27;1235:55;;1286:1;1283;1276:12;1235:55;1309:5;1047:273;-1:-1:-1;;;1047:273:22:o;1325:127::-;1386:10;1381:3;1377:20;1374:1;1367:31;1417:4;1414:1;1407:15;1441:4;1438:1;1431:15;1457:151;1547:4;1540:12;;;1526;;;1522:31;;1565:14;;1562:40;;;1582:18;;:::i;1613:422::-;1702:1;1745:5;1702:1;1759:270;1780:7;1770:8;1767:21;1759:270;;;1839:4;1835:1;1831:6;1827:17;1821:4;1818:27;1815:53;;;1848:18;;:::i;:::-;1898:7;1888:8;1884:22;1881:55;;;1918:16;;;;1881:55;1997:22;;;;1957:15;;;;1759:270;;;1763:3;1613:422;;;;;:::o;2040:806::-;2089:5;2119:8;2109:80;;-1:-1:-1;2160:1:22;2174:5;;2109:80;2208:4;2198:76;;-1:-1:-1;2245:1:22;2259:5;;2198:76;2290:4;2308:1;2303:59;;;;2376:1;2371:130;;;;2283:218;;2303:59;2333:1;2324:10;;2347:5;;;2371:130;2408:3;2398:8;2395:17;2392:43;;;2415:18;;:::i;:::-;-1:-1:-1;;2471:1:22;2457:16;;2486:5;;2283:218;;2585:2;2575:8;2572:16;2566:3;2560:4;2557:13;2553:36;2547:2;2537:8;2534:16;2529:2;2523:4;2520:12;2516:35;2513:77;2510:159;;;-1:-1:-1;2622:19:22;;;2654:5;;2510:159;2701:34;2726:8;2720:4;2701:34;:::i;:::-;2771:6;2767:1;2763:6;2759:19;2750:7;2747:32;2744:58;;;2782:18;;:::i;:::-;2820:20;;2040:806;-1:-1:-1;;;2040:806:22:o;2851:140::-;2909:5;2938:47;2979:4;2969:8;2965:19;2959:4;2938:47;:::i;2851:140::-;269:3143:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@BPS_DENOMINATOR_67":{"entryPoint":null,"id":67,"parameterSlots":0,"returnSlots":0},"@DEFAULT_ADMIN_ROLE_1516":{"entryPoint":null,"id":1516,"parameterSlots":0,"returnSlots":0},"@MANAGER_ADMIN_77":{"entryPoint":null,"id":77,"parameterSlots":0,"returnSlots":0},"@PAUSER_ADMIN_82":{"entryPoint":null,"id":82,"parameterSlots":0,"returnSlots":0},"@PRICE_ID_SETTER_ROLE_87":{"entryPoint":null,"id":87,"parameterSlots":0,"returnSlots":0},"@RELAYER_ROLE_92":{"entryPoint":null,"id":92,"parameterSlots":0,"returnSlots":0},"@TIMESTAMP_SETTER_ROLE_1358":{"entryPoint":null,"id":1358,"parameterSlots":0,"returnSlots":0},"@_add_2781":{"entryPoint":7866,"id":2781,"parameterSlots":2,"returnSlots":1},"@_at_2915":{"entryPoint":8981,"id":2915,"parameterSlots":2,"returnSlots":1},"@_callOptionalReturn_2386":{"entryPoint":9023,"id":2386,"parameterSlots":2,"returnSlots":0},"@_checkRole_1613":{"entryPoint":7432,"id":1613,"parameterSlots":2,"returnSlots":0},"@_claimMint_1434":{"entryPoint":7600,"id":1434,"parameterSlots":1,"returnSlots":0},"@_claimMint_427":{"entryPoint":8481,"id":427,"parameterSlots":1,"returnSlots":0},"@_contains_2884":{"entryPoint":null,"id":2884,"parameterSlots":2,"returnSlots":1},"@_getMintAmountForPrice_1143":{"entryPoint":9476,"id":1143,"parameterSlots":2,"returnSlots":1},"@_getMintFees_1102":{"entryPoint":7741,"id":1102,"parameterSlots":1,"returnSlots":1},"@_grantRole_1765":{"entryPoint":7251,"id":1765,"parameterSlots":2,"returnSlots":0},"@_grantRole_1897":{"entryPoint":7532,"id":1897,"parameterSlots":2,"returnSlots":0},"@_length_2898":{"entryPoint":null,"id":2898,"parameterSlots":1,"returnSlots":1},"@_msgSender_2694":{"entryPoint":null,"id":2694,"parameterSlots":0,"returnSlots":1},"@_remove_2865":{"entryPoint":9233,"id":2865,"parameterSlots":2,"returnSlots":1},"@_revokeRole_1796":{"entryPoint":8357,"id":1796,"parameterSlots":2,"returnSlots":0},"@_revokeRole_1921":{"entryPoint":7566,"id":1921,"parameterSlots":2,"returnSlots":0},"@_scaleUp_1181":{"entryPoint":9541,"id":1181,"parameterSlots":1,"returnSlots":1},"@addProof_553":{"entryPoint":2785,"id":553,"parameterSlots":5,"returnSlots":0},"@add_3067":{"entryPoint":7358,"id":3067,"parameterSlots":2,"returnSlots":1},"@assetRecipient_28":{"entryPoint":null,"id":28,"parameterSlots":0,"returnSlots":0},"@assetSender_30":{"entryPoint":null,"id":30,"parameterSlots":0,"returnSlots":0},"@at_3163":{"entryPoint":7719,"id":3163,"parameterSlots":2,"returnSlots":1},"@claimMint_363":{"entryPoint":3215,"id":363,"parameterSlots":2,"returnSlots":0},"@claimRedemption_502":{"entryPoint":2234,"id":502,"parameterSlots":2,"returnSlots":0},"@collateral_56":{"entryPoint":null,"id":56,"parameterSlots":0,"returnSlots":0},"@decimalsMultiplier_58":{"entryPoint":null,"id":58,"parameterSlots":0,"returnSlots":0},"@depositIdToClaimableTimestamp_1362":{"entryPoint":null,"id":1362,"parameterSlots":0,"returnSlots":0},"@depositIdToDepositor_37":{"entryPoint":null,"id":37,"parameterSlots":0,"returnSlots":0},"@feeRecipient_32":{"entryPoint":null,"id":32,"parameterSlots":0,"returnSlots":0},"@functionCallWithValue_2546":{"entryPoint":9585,"id":2546,"parameterSlots":4,"returnSlots":1},"@functionCall_2476":{"entryPoint":9526,"id":2476,"parameterSlots":3,"returnSlots":1},"@getRoleAdmin_1628":{"entryPoint":null,"id":1628,"parameterSlots":1,"returnSlots":1},"@getRoleMemberCount_1873":{"entryPoint":5107,"id":1873,"parameterSlots":1,"returnSlots":1},"@getRoleMember_1857":{"entryPoint":4493,"id":1857,"parameterSlots":2,"returnSlots":1},"@grantRole_1648":{"entryPoint":3045,"id":1648,"parameterSlots":2,"returnSlots":0},"@hasRole_1570":{"entryPoint":4524,"id":1570,"parameterSlots":2,"returnSlots":1},"@isContract_2405":{"entryPoint":null,"id":2405,"parameterSlots":1,"returnSlots":1},"@length_3136":{"entryPoint":7731,"id":3136,"parameterSlots":1,"returnSlots":1},"@minimumDepositAmount_45":{"entryPoint":null,"id":45,"parameterSlots":0,"returnSlots":0},"@minimumOffChainRedemptionAmount_1207":{"entryPoint":null,"id":1207,"parameterSlots":0,"returnSlots":0},"@minimumRedemptionAmount_47":{"entryPoint":null,"id":47,"parameterSlots":0,"returnSlots":0},"@mintFee_50":{"entryPoint":null,"id":50,"parameterSlots":0,"returnSlots":0},"@offChainRedemptionPaused_1205":{"entryPoint":null,"id":1205,"parameterSlots":0,"returnSlots":0},"@overwriteDepositor_761":{"entryPoint":5871,"id":761,"parameterSlots":4,"returnSlots":0},"@overwriteRedeemer_807":{"entryPoint":2329,"id":807,"parameterSlots":4,"returnSlots":0},"@pauseOffChainRedemption_1304":{"entryPoint":3369,"id":1304,"parameterSlots":0,"returnSlots":0},"@pauseRedemption_1052":{"entryPoint":4567,"id":1052,"parameterSlots":0,"returnSlots":0},"@pauseSubscription_1035":{"entryPoint":2135,"id":1035,"parameterSlots":0,"returnSlots":0},"@pricer_25":{"entryPoint":null,"id":25,"parameterSlots":0,"returnSlots":0},"@redemptionFee_53":{"entryPoint":null,"id":53,"parameterSlots":0,"returnSlots":0},"@redemptionIdToRedeemer_42":{"entryPoint":null,"id":42,"parameterSlots":0,"returnSlots":0},"@redemptionPaused_69":{"entryPoint":null,"id":69,"parameterSlots":0,"returnSlots":0},"@redemptionRequestCounter_64":{"entryPoint":null,"id":64,"parameterSlots":0,"returnSlots":0},"@remove_3094":{"entryPoint":8460,"id":3094,"parameterSlots":2,"returnSlots":1},"@renounceRole_1691":{"entryPoint":3089,"id":1691,"parameterSlots":2,"returnSlots":0},"@requestRedemptionServicedOffchain_1287":{"entryPoint":6910,"id":1287,"parameterSlots":2,"returnSlots":0},"@requestRedemption_481":{"entryPoint":6506,"id":481,"parameterSlots":1,"returnSlots":0},"@requestSubscription_327":{"entryPoint":5399,"id":327,"parameterSlots":1,"returnSlots":0},"@revokeRole_1668":{"entryPoint":5360,"id":1668,"parameterSlots":2,"returnSlots":0},"@rwa_22":{"entryPoint":null,"id":22,"parameterSlots":0,"returnSlots":0},"@safeTransferFrom_2220":{"entryPoint":7770,"id":2220,"parameterSlots":4,"returnSlots":0},"@setAssetSender_1005":{"entryPoint":3666,"id":1005,"parameterSlots":1,"returnSlots":0},"@setClaimableTimestamp_1487":{"entryPoint":5130,"id":1487,"parameterSlots":3,"returnSlots":0},"@setFeeRecipient_982":{"entryPoint":6277,"id":982,"parameterSlots":1,"returnSlots":0},"@setMinimumDepositAmount_869":{"entryPoint":4985,"id":869,"parameterSlots":1,"returnSlots":0},"@setMinimumRedemptionAmount_838":{"entryPoint":3544,"id":838,"parameterSlots":1,"returnSlots":0},"@setMintFee_900":{"entryPoint":6384,"id":900,"parameterSlots":1,"returnSlots":0},"@setOffChainRedemptionMinimum_1344":{"entryPoint":6190,"id":1344,"parameterSlots":1,"returnSlots":0},"@setPriceIdForDeposits_642":{"entryPoint":3980,"id":642,"parameterSlots":4,"returnSlots":0},"@setPriceIdForRedemptions_715":{"entryPoint":4653,"id":715,"parameterSlots":4,"returnSlots":0},"@setPricer_959":{"entryPoint":2664,"id":959,"parameterSlots":1,"returnSlots":0},"@setRedemptionFee_931":{"entryPoint":3774,"id":931,"parameterSlots":1,"returnSlots":0},"@subscriptionPaused_71":{"entryPoint":null,"id":71,"parameterSlots":0,"returnSlots":0},"@subscriptionRequestCounter_61":{"entryPoint":null,"id":61,"parameterSlots":0,"returnSlots":0},"@supportsInterface_1551":{"entryPoint":7379,"id":1551,"parameterSlots":1,"returnSlots":1},"@supportsInterface_1838":{"entryPoint":2092,"id":1838,"parameterSlots":1,"returnSlots":1},"@supportsInterface_2727":{"entryPoint":null,"id":2727,"parameterSlots":1,"returnSlots":1},"@toHexString_3541":{"entryPoint":7945,"id":3541,"parameterSlots":2,"returnSlots":1},"@unpauseOffChainRedemption_1321":{"entryPoint":3459,"id":1321,"parameterSlots":0,"returnSlots":0},"@unpauseRedemption_1086":{"entryPoint":4410,"id":1086,"parameterSlots":0,"returnSlots":0},"@unpauseSubscription_1069":{"entryPoint":3896,"id":1069,"parameterSlots":0,"returnSlots":0},"@verifyCallResult_2681":{"entryPoint":9890,"id":2681,"parameterSlots":3,"returnSlots":1},"abi_decode_address":{"entryPoint":10156,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_bytes32_dyn_calldata":{"entryPoint":9989,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":10243,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr":{"entryPoint":10065,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":10404,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":11222,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":10131,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":10340,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_addresst_uint256t_uint256":{"entryPoint":10184,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes32t_addresst_uint256t_uint256t_uint256":{"entryPoint":10270,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_bytes32t_uint256":{"entryPoint":10512,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":9947,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":11197,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_array$_t_bytes32_$dyn_calldata_ptr":{"entryPoint":10546,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint256t_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":11278,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":10906,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":10384,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":10731,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint256_t_uint256__to_t_address_t_address_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":10677,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":10845,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC20_$2138__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IPricerReader_$3584__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IRWALike_$3966__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11017,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10622,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_bytes32__to_t_uint256_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":11133,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":11099,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":11068,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":10826,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":10870,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint256":{"entryPoint":11174,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":10801,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":10779,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x31":{"entryPoint":11256,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":10757,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":11152,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:15367:22","statements":[{"nodeType":"YulBlock","src":"6:3:22","statements":[]},{"body":{"nodeType":"YulBlock","src":"83:217:22","statements":[{"body":{"nodeType":"YulBlock","src":"129:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"138:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"141:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"131:6:22"},"nodeType":"YulFunctionCall","src":"131:12:22"},"nodeType":"YulExpressionStatement","src":"131:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"104:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"113:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:22"},"nodeType":"YulFunctionCall","src":"100:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"125:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"96:3:22"},"nodeType":"YulFunctionCall","src":"96:32:22"},"nodeType":"YulIf","src":"93:52:22"},{"nodeType":"YulVariableDeclaration","src":"154:36:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"180:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"167:12:22"},"nodeType":"YulFunctionCall","src":"167:23:22"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"158:5:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"254:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"263:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"266:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"256:6:22"},"nodeType":"YulFunctionCall","src":"256:12:22"},"nodeType":"YulExpressionStatement","src":"256:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"212:5:22"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"234:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"239:10:22","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"230:3:22"},"nodeType":"YulFunctionCall","src":"230:20:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"219:3:22"},"nodeType":"YulFunctionCall","src":"219:32:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"209:2:22"},"nodeType":"YulFunctionCall","src":"209:43:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"202:6:22"},"nodeType":"YulFunctionCall","src":"202:51:22"},"nodeType":"YulIf","src":"199:71:22"},{"nodeType":"YulAssignment","src":"279:15:22","value":{"name":"value","nodeType":"YulIdentifier","src":"289:5:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"279:6:22"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"60:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"72:6:22","type":""}],"src":"14:286:22"},{"body":{"nodeType":"YulBlock","src":"400:92:22","statements":[{"nodeType":"YulAssignment","src":"410:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"422:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"433:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"418:3:22"},"nodeType":"YulFunctionCall","src":"418:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"410:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"452:9:22"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"477:6:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"470:6:22"},"nodeType":"YulFunctionCall","src":"470:14:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"463:6:22"},"nodeType":"YulFunctionCall","src":"463:22:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"445:6:22"},"nodeType":"YulFunctionCall","src":"445:41:22"},"nodeType":"YulExpressionStatement","src":"445:41:22"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"369:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"380:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"391:4:22","type":""}],"src":"305:187:22"},{"body":{"nodeType":"YulBlock","src":"598:76:22","statements":[{"nodeType":"YulAssignment","src":"608:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"620:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"631:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"616:3:22"},"nodeType":"YulFunctionCall","src":"616:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"608:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"650:9:22"},{"name":"value0","nodeType":"YulIdentifier","src":"661:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"643:6:22"},"nodeType":"YulFunctionCall","src":"643:25:22"},"nodeType":"YulExpressionStatement","src":"643:25:22"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"567:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"578:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"589:4:22","type":""}],"src":"497:177:22"},{"body":{"nodeType":"YulBlock","src":"780:76:22","statements":[{"nodeType":"YulAssignment","src":"790:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"802:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"813:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"798:3:22"},"nodeType":"YulFunctionCall","src":"798:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"790:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"832:9:22"},{"name":"value0","nodeType":"YulIdentifier","src":"843:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"825:6:22"},"nodeType":"YulFunctionCall","src":"825:25:22"},"nodeType":"YulExpressionStatement","src":"825:25:22"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"749:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"760:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"771:4:22","type":""}],"src":"679:177:22"},{"body":{"nodeType":"YulBlock","src":"945:283:22","statements":[{"body":{"nodeType":"YulBlock","src":"994:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1003:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1006:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"996:6:22"},"nodeType":"YulFunctionCall","src":"996:12:22"},"nodeType":"YulExpressionStatement","src":"996:12:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"973:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"981:4:22","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"969:3:22"},"nodeType":"YulFunctionCall","src":"969:17:22"},{"name":"end","nodeType":"YulIdentifier","src":"988:3:22"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"965:3:22"},"nodeType":"YulFunctionCall","src":"965:27:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"958:6:22"},"nodeType":"YulFunctionCall","src":"958:35:22"},"nodeType":"YulIf","src":"955:55:22"},{"nodeType":"YulAssignment","src":"1019:30:22","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1042:6:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1029:12:22"},"nodeType":"YulFunctionCall","src":"1029:20:22"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1019:6:22"}]},{"body":{"nodeType":"YulBlock","src":"1092:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1101:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1104:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1094:6:22"},"nodeType":"YulFunctionCall","src":"1094:12:22"},"nodeType":"YulExpressionStatement","src":"1094:12:22"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1064:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"1072:18:22","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1061:2:22"},"nodeType":"YulFunctionCall","src":"1061:30:22"},"nodeType":"YulIf","src":"1058:50:22"},{"nodeType":"YulAssignment","src":"1117:29:22","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1133:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"1141:4:22","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1129:3:22"},"nodeType":"YulFunctionCall","src":"1129:17:22"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"1117:8:22"}]},{"body":{"nodeType":"YulBlock","src":"1206:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1215:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1218:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1208:6:22"},"nodeType":"YulFunctionCall","src":"1208:12:22"},"nodeType":"YulExpressionStatement","src":"1208:12:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1169:6:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1181:1:22","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"1184:6:22"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1177:3:22"},"nodeType":"YulFunctionCall","src":"1177:14:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1165:3:22"},"nodeType":"YulFunctionCall","src":"1165:27:22"},{"kind":"number","nodeType":"YulLiteral","src":"1194:4:22","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1161:3:22"},"nodeType":"YulFunctionCall","src":"1161:38:22"},{"name":"end","nodeType":"YulIdentifier","src":"1201:3:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1158:2:22"},"nodeType":"YulFunctionCall","src":"1158:47:22"},"nodeType":"YulIf","src":"1155:67:22"}]},"name":"abi_decode_array_bytes32_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"908:6:22","type":""},{"name":"end","nodeType":"YulTypedName","src":"916:3:22","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"924:8:22","type":""},{"name":"length","nodeType":"YulTypedName","src":"934:6:22","type":""}],"src":"861:367:22"},{"body":{"nodeType":"YulBlock","src":"1338:332:22","statements":[{"body":{"nodeType":"YulBlock","src":"1384:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1393:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1396:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1386:6:22"},"nodeType":"YulFunctionCall","src":"1386:12:22"},"nodeType":"YulExpressionStatement","src":"1386:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1359:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"1368:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1355:3:22"},"nodeType":"YulFunctionCall","src":"1355:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"1380:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1351:3:22"},"nodeType":"YulFunctionCall","src":"1351:32:22"},"nodeType":"YulIf","src":"1348:52:22"},{"nodeType":"YulVariableDeclaration","src":"1409:37:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1436:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1423:12:22"},"nodeType":"YulFunctionCall","src":"1423:23:22"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1413:6:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"1489:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1498:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1501:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1491:6:22"},"nodeType":"YulFunctionCall","src":"1491:12:22"},"nodeType":"YulExpressionStatement","src":"1491:12:22"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1461:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"1469:18:22","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1458:2:22"},"nodeType":"YulFunctionCall","src":"1458:30:22"},"nodeType":"YulIf","src":"1455:50:22"},{"nodeType":"YulVariableDeclaration","src":"1514:96:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1582:9:22"},{"name":"offset","nodeType":"YulIdentifier","src":"1593:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1578:3:22"},"nodeType":"YulFunctionCall","src":"1578:22:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1602:7:22"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nodeType":"YulIdentifier","src":"1540:37:22"},"nodeType":"YulFunctionCall","src":"1540:70:22"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"1518:8:22","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"1528:8:22","type":""}]},{"nodeType":"YulAssignment","src":"1619:18:22","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"1629:8:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1619:6:22"}]},{"nodeType":"YulAssignment","src":"1646:18:22","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"1656:8:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1646:6:22"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1296:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1307:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1319:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1327:6:22","type":""}],"src":"1233:437:22"},{"body":{"nodeType":"YulBlock","src":"1745:110:22","statements":[{"body":{"nodeType":"YulBlock","src":"1791:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1800:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1803:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1793:6:22"},"nodeType":"YulFunctionCall","src":"1793:12:22"},"nodeType":"YulExpressionStatement","src":"1793:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1766:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"1775:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1762:3:22"},"nodeType":"YulFunctionCall","src":"1762:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"1787:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1758:3:22"},"nodeType":"YulFunctionCall","src":"1758:32:22"},"nodeType":"YulIf","src":"1755:52:22"},{"nodeType":"YulAssignment","src":"1816:33:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1839:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1826:12:22"},"nodeType":"YulFunctionCall","src":"1826:23:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1816:6:22"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1711:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1722:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1734:6:22","type":""}],"src":"1675:180:22"},{"body":{"nodeType":"YulBlock","src":"1909:124:22","statements":[{"nodeType":"YulAssignment","src":"1919:29:22","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1941:6:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1928:12:22"},"nodeType":"YulFunctionCall","src":"1928:20:22"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1919:5:22"}]},{"body":{"nodeType":"YulBlock","src":"2011:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2020:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2023:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2013:6:22"},"nodeType":"YulFunctionCall","src":"2013:12:22"},"nodeType":"YulExpressionStatement","src":"2013:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1970:5:22"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1981:5:22"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1996:3:22","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2001:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1992:3:22"},"nodeType":"YulFunctionCall","src":"1992:11:22"},{"kind":"number","nodeType":"YulLiteral","src":"2005:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1988:3:22"},"nodeType":"YulFunctionCall","src":"1988:19:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1977:3:22"},"nodeType":"YulFunctionCall","src":"1977:31:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1967:2:22"},"nodeType":"YulFunctionCall","src":"1967:42:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1960:6:22"},"nodeType":"YulFunctionCall","src":"1960:50:22"},"nodeType":"YulIf","src":"1957:70:22"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1888:6:22","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1899:5:22","type":""}],"src":"1860:173:22"},{"body":{"nodeType":"YulBlock","src":"2159:270:22","statements":[{"body":{"nodeType":"YulBlock","src":"2206:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2215:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2218:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2208:6:22"},"nodeType":"YulFunctionCall","src":"2208:12:22"},"nodeType":"YulExpressionStatement","src":"2208:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2180:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"2189:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2176:3:22"},"nodeType":"YulFunctionCall","src":"2176:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"2201:3:22","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2172:3:22"},"nodeType":"YulFunctionCall","src":"2172:33:22"},"nodeType":"YulIf","src":"2169:53:22"},{"nodeType":"YulAssignment","src":"2231:33:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2254:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2241:12:22"},"nodeType":"YulFunctionCall","src":"2241:23:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2231:6:22"}]},{"nodeType":"YulAssignment","src":"2273:48:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2306:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2317:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2302:3:22"},"nodeType":"YulFunctionCall","src":"2302:18:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2283:18:22"},"nodeType":"YulFunctionCall","src":"2283:38:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2273:6:22"}]},{"nodeType":"YulAssignment","src":"2330:42:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2357:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2368:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2353:3:22"},"nodeType":"YulFunctionCall","src":"2353:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2340:12:22"},"nodeType":"YulFunctionCall","src":"2340:32:22"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2330:6:22"}]},{"nodeType":"YulAssignment","src":"2381:42:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2408:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2419:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2404:3:22"},"nodeType":"YulFunctionCall","src":"2404:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2391:12:22"},"nodeType":"YulFunctionCall","src":"2391:32:22"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"2381:6:22"}]}]},"name":"abi_decode_tuple_t_bytes32t_addresst_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2101:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2112:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2124:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2132:6:22","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2140:6:22","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2148:6:22","type":""}],"src":"2038:391:22"},{"body":{"nodeType":"YulBlock","src":"2504:116:22","statements":[{"body":{"nodeType":"YulBlock","src":"2550:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2559:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2562:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2552:6:22"},"nodeType":"YulFunctionCall","src":"2552:12:22"},"nodeType":"YulExpressionStatement","src":"2552:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2525:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"2534:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2521:3:22"},"nodeType":"YulFunctionCall","src":"2521:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"2546:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2517:3:22"},"nodeType":"YulFunctionCall","src":"2517:32:22"},"nodeType":"YulIf","src":"2514:52:22"},{"nodeType":"YulAssignment","src":"2575:39:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2604:9:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2585:18:22"},"nodeType":"YulFunctionCall","src":"2585:29:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2575:6:22"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2470:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2481:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2493:6:22","type":""}],"src":"2434:186:22"},{"body":{"nodeType":"YulBlock","src":"2763:322:22","statements":[{"body":{"nodeType":"YulBlock","src":"2810:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2819:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2822:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2812:6:22"},"nodeType":"YulFunctionCall","src":"2812:12:22"},"nodeType":"YulExpressionStatement","src":"2812:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2784:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"2793:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2780:3:22"},"nodeType":"YulFunctionCall","src":"2780:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"2805:3:22","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2776:3:22"},"nodeType":"YulFunctionCall","src":"2776:33:22"},"nodeType":"YulIf","src":"2773:53:22"},{"nodeType":"YulAssignment","src":"2835:33:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2858:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2845:12:22"},"nodeType":"YulFunctionCall","src":"2845:23:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2835:6:22"}]},{"nodeType":"YulAssignment","src":"2877:48:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2910:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2921:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2906:3:22"},"nodeType":"YulFunctionCall","src":"2906:18:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2887:18:22"},"nodeType":"YulFunctionCall","src":"2887:38:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2877:6:22"}]},{"nodeType":"YulAssignment","src":"2934:42:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2961:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"2972:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2957:3:22"},"nodeType":"YulFunctionCall","src":"2957:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2944:12:22"},"nodeType":"YulFunctionCall","src":"2944:32:22"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2934:6:22"}]},{"nodeType":"YulAssignment","src":"2985:42:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3012:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3023:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3008:3:22"},"nodeType":"YulFunctionCall","src":"3008:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2995:12:22"},"nodeType":"YulFunctionCall","src":"2995:32:22"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"2985:6:22"}]},{"nodeType":"YulAssignment","src":"3036:43:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3063:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3074:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3059:3:22"},"nodeType":"YulFunctionCall","src":"3059:19:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3046:12:22"},"nodeType":"YulFunctionCall","src":"3046:33:22"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"3036:6:22"}]}]},"name":"abi_decode_tuple_t_bytes32t_addresst_uint256t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2697:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2708:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2720:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2728:6:22","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2736:6:22","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2744:6:22","type":""},{"name":"value4","nodeType":"YulTypedName","src":"2752:6:22","type":""}],"src":"2625:460:22"},{"body":{"nodeType":"YulBlock","src":"3177:167:22","statements":[{"body":{"nodeType":"YulBlock","src":"3223:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3232:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3235:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3225:6:22"},"nodeType":"YulFunctionCall","src":"3225:12:22"},"nodeType":"YulExpressionStatement","src":"3225:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3198:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"3207:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3194:3:22"},"nodeType":"YulFunctionCall","src":"3194:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"3219:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3190:3:22"},"nodeType":"YulFunctionCall","src":"3190:32:22"},"nodeType":"YulIf","src":"3187:52:22"},{"nodeType":"YulAssignment","src":"3248:33:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3271:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3258:12:22"},"nodeType":"YulFunctionCall","src":"3258:23:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3248:6:22"}]},{"nodeType":"YulAssignment","src":"3290:48:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3323:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3334:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3319:3:22"},"nodeType":"YulFunctionCall","src":"3319:18:22"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3300:18:22"},"nodeType":"YulFunctionCall","src":"3300:38:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3290:6:22"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3135:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3146:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3158:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3166:6:22","type":""}],"src":"3090:254:22"},{"body":{"nodeType":"YulBlock","src":"3506:188:22","statements":[{"nodeType":"YulAssignment","src":"3516:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3528:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3539:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3524:3:22"},"nodeType":"YulFunctionCall","src":"3524:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3516:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3558:9:22"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3573:6:22"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3589:3:22","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"3594:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3585:3:22"},"nodeType":"YulFunctionCall","src":"3585:11:22"},{"kind":"number","nodeType":"YulLiteral","src":"3598:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3581:3:22"},"nodeType":"YulFunctionCall","src":"3581:19:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3569:3:22"},"nodeType":"YulFunctionCall","src":"3569:32:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3551:6:22"},"nodeType":"YulFunctionCall","src":"3551:51:22"},"nodeType":"YulExpressionStatement","src":"3551:51:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3622:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3633:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3618:3:22"},"nodeType":"YulFunctionCall","src":"3618:18:22"},{"name":"value1","nodeType":"YulIdentifier","src":"3638:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3611:6:22"},"nodeType":"YulFunctionCall","src":"3611:34:22"},"nodeType":"YulExpressionStatement","src":"3611:34:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3665:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3676:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3661:3:22"},"nodeType":"YulFunctionCall","src":"3661:18:22"},{"name":"value2","nodeType":"YulIdentifier","src":"3681:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3654:6:22"},"nodeType":"YulFunctionCall","src":"3654:34:22"},"nodeType":"YulExpressionStatement","src":"3654:34:22"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3459:9:22","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3470:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3478:6:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3486:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3497:4:22","type":""}],"src":"3349:345:22"},{"body":{"nodeType":"YulBlock","src":"3800:102:22","statements":[{"nodeType":"YulAssignment","src":"3810:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3822:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"3833:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3818:3:22"},"nodeType":"YulFunctionCall","src":"3818:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3810:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3852:9:22"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3867:6:22"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3883:3:22","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"3888:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3879:3:22"},"nodeType":"YulFunctionCall","src":"3879:11:22"},{"kind":"number","nodeType":"YulLiteral","src":"3892:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3875:3:22"},"nodeType":"YulFunctionCall","src":"3875:19:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3863:3:22"},"nodeType":"YulFunctionCall","src":"3863:32:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3845:6:22"},"nodeType":"YulFunctionCall","src":"3845:51:22"},"nodeType":"YulExpressionStatement","src":"3845:51:22"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3769:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3780:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3791:4:22","type":""}],"src":"3699:203:22"},{"body":{"nodeType":"YulBlock","src":"3977:110:22","statements":[{"body":{"nodeType":"YulBlock","src":"4023:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4032:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4035:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4025:6:22"},"nodeType":"YulFunctionCall","src":"4025:12:22"},"nodeType":"YulExpressionStatement","src":"4025:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3998:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"4007:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3994:3:22"},"nodeType":"YulFunctionCall","src":"3994:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"4019:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3990:3:22"},"nodeType":"YulFunctionCall","src":"3990:32:22"},"nodeType":"YulIf","src":"3987:52:22"},{"nodeType":"YulAssignment","src":"4048:33:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4071:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4058:12:22"},"nodeType":"YulFunctionCall","src":"4058:23:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4048:6:22"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3943:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3954:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3966:6:22","type":""}],"src":"3907:180:22"},{"body":{"nodeType":"YulBlock","src":"4249:616:22","statements":[{"body":{"nodeType":"YulBlock","src":"4295:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4304:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4307:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4297:6:22"},"nodeType":"YulFunctionCall","src":"4297:12:22"},"nodeType":"YulExpressionStatement","src":"4297:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4270:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"4279:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4266:3:22"},"nodeType":"YulFunctionCall","src":"4266:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"4291:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4262:3:22"},"nodeType":"YulFunctionCall","src":"4262:32:22"},"nodeType":"YulIf","src":"4259:52:22"},{"nodeType":"YulVariableDeclaration","src":"4320:37:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4347:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4334:12:22"},"nodeType":"YulFunctionCall","src":"4334:23:22"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4324:6:22","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4366:28:22","value":{"kind":"number","nodeType":"YulLiteral","src":"4376:18:22","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4370:2:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"4421:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4430:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4433:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4423:6:22"},"nodeType":"YulFunctionCall","src":"4423:12:22"},"nodeType":"YulExpressionStatement","src":"4423:12:22"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4409:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"4417:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4406:2:22"},"nodeType":"YulFunctionCall","src":"4406:14:22"},"nodeType":"YulIf","src":"4403:34:22"},{"nodeType":"YulVariableDeclaration","src":"4446:96:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4514:9:22"},{"name":"offset","nodeType":"YulIdentifier","src":"4525:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4510:3:22"},"nodeType":"YulFunctionCall","src":"4510:22:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4534:7:22"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nodeType":"YulIdentifier","src":"4472:37:22"},"nodeType":"YulFunctionCall","src":"4472:70:22"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"4450:8:22","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"4460:8:22","type":""}]},{"nodeType":"YulAssignment","src":"4551:18:22","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"4561:8:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4551:6:22"}]},{"nodeType":"YulAssignment","src":"4578:18:22","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"4588:8:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4578:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"4605:48:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4638:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"4649:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4634:3:22"},"nodeType":"YulFunctionCall","src":"4634:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4621:12:22"},"nodeType":"YulFunctionCall","src":"4621:32:22"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"4609:8:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"4682:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4691:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4694:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4684:6:22"},"nodeType":"YulFunctionCall","src":"4684:12:22"},"nodeType":"YulExpressionStatement","src":"4684:12:22"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"4668:8:22"},{"name":"_1","nodeType":"YulIdentifier","src":"4678:2:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4665:2:22"},"nodeType":"YulFunctionCall","src":"4665:16:22"},"nodeType":"YulIf","src":"4662:36:22"},{"nodeType":"YulVariableDeclaration","src":"4707:98:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4775:9:22"},{"name":"offset_1","nodeType":"YulIdentifier","src":"4786:8:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4771:3:22"},"nodeType":"YulFunctionCall","src":"4771:24:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4797:7:22"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nodeType":"YulIdentifier","src":"4733:37:22"},"nodeType":"YulFunctionCall","src":"4733:72:22"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"4711:8:22","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"4721:8:22","type":""}]},{"nodeType":"YulAssignment","src":"4814:18:22","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"4824:8:22"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4814:6:22"}]},{"nodeType":"YulAssignment","src":"4841:18:22","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"4851:8:22"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4841:6:22"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4191:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4202:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4214:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4222:6:22","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4230:6:22","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4238:6:22","type":""}],"src":"4092:773:22"},{"body":{"nodeType":"YulBlock","src":"4957:161:22","statements":[{"body":{"nodeType":"YulBlock","src":"5003:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5012:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5015:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5005:6:22"},"nodeType":"YulFunctionCall","src":"5005:12:22"},"nodeType":"YulExpressionStatement","src":"5005:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4978:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"4987:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4974:3:22"},"nodeType":"YulFunctionCall","src":"4974:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"4999:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4970:3:22"},"nodeType":"YulFunctionCall","src":"4970:32:22"},"nodeType":"YulIf","src":"4967:52:22"},{"nodeType":"YulAssignment","src":"5028:33:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5051:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5038:12:22"},"nodeType":"YulFunctionCall","src":"5038:23:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5028:6:22"}]},{"nodeType":"YulAssignment","src":"5070:42:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5097:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5108:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5093:3:22"},"nodeType":"YulFunctionCall","src":"5093:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5080:12:22"},"nodeType":"YulFunctionCall","src":"5080:32:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5070:6:22"}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4915:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4926:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4938:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4946:6:22","type":""}],"src":"4870:248:22"},{"body":{"nodeType":"YulBlock","src":"5241:102:22","statements":[{"nodeType":"YulAssignment","src":"5251:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5263:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5274:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5259:3:22"},"nodeType":"YulFunctionCall","src":"5259:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5251:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5293:9:22"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5308:6:22"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5324:3:22","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"5329:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5320:3:22"},"nodeType":"YulFunctionCall","src":"5320:11:22"},{"kind":"number","nodeType":"YulLiteral","src":"5333:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5316:3:22"},"nodeType":"YulFunctionCall","src":"5316:19:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5304:3:22"},"nodeType":"YulFunctionCall","src":"5304:32:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5286:6:22"},"nodeType":"YulFunctionCall","src":"5286:51:22"},"nodeType":"YulExpressionStatement","src":"5286:51:22"}]},"name":"abi_encode_tuple_t_contract$_IRWALike_$3966__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5210:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5221:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5232:4:22","type":""}],"src":"5123:220:22"},{"body":{"nodeType":"YulBlock","src":"5471:102:22","statements":[{"nodeType":"YulAssignment","src":"5481:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5493:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5504:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5489:3:22"},"nodeType":"YulFunctionCall","src":"5489:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5481:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5523:9:22"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5538:6:22"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5554:3:22","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"5559:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5550:3:22"},"nodeType":"YulFunctionCall","src":"5550:11:22"},{"kind":"number","nodeType":"YulLiteral","src":"5563:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5546:3:22"},"nodeType":"YulFunctionCall","src":"5546:19:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5534:3:22"},"nodeType":"YulFunctionCall","src":"5534:32:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5516:6:22"},"nodeType":"YulFunctionCall","src":"5516:51:22"},"nodeType":"YulExpressionStatement","src":"5516:51:22"}]},"name":"abi_encode_tuple_t_contract$_IPricerReader_$3584__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5440:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5451:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5462:4:22","type":""}],"src":"5348:225:22"},{"body":{"nodeType":"YulBlock","src":"5700:383:22","statements":[{"body":{"nodeType":"YulBlock","src":"5746:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5755:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5758:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5748:6:22"},"nodeType":"YulFunctionCall","src":"5748:12:22"},"nodeType":"YulExpressionStatement","src":"5748:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5721:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"5730:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5717:3:22"},"nodeType":"YulFunctionCall","src":"5717:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"5742:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5713:3:22"},"nodeType":"YulFunctionCall","src":"5713:32:22"},"nodeType":"YulIf","src":"5710:52:22"},{"nodeType":"YulAssignment","src":"5771:33:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5794:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5781:12:22"},"nodeType":"YulFunctionCall","src":"5781:23:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5771:6:22"}]},{"nodeType":"YulVariableDeclaration","src":"5813:46:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5844:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"5855:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5840:3:22"},"nodeType":"YulFunctionCall","src":"5840:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5827:12:22"},"nodeType":"YulFunctionCall","src":"5827:32:22"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5817:6:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"5902:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5911:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5914:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5904:6:22"},"nodeType":"YulFunctionCall","src":"5904:12:22"},"nodeType":"YulExpressionStatement","src":"5904:12:22"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5874:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"5882:18:22","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5871:2:22"},"nodeType":"YulFunctionCall","src":"5871:30:22"},"nodeType":"YulIf","src":"5868:50:22"},{"nodeType":"YulVariableDeclaration","src":"5927:96:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5995:9:22"},{"name":"offset","nodeType":"YulIdentifier","src":"6006:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5991:3:22"},"nodeType":"YulFunctionCall","src":"5991:22:22"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6015:7:22"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nodeType":"YulIdentifier","src":"5953:37:22"},"nodeType":"YulFunctionCall","src":"5953:70:22"},"variables":[{"name":"value1_1","nodeType":"YulTypedName","src":"5931:8:22","type":""},{"name":"value2_1","nodeType":"YulTypedName","src":"5941:8:22","type":""}]},{"nodeType":"YulAssignment","src":"6032:18:22","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"6042:8:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6032:6:22"}]},{"nodeType":"YulAssignment","src":"6059:18:22","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"6069:8:22"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"6059:6:22"}]}]},"name":"abi_decode_tuple_t_uint256t_array$_t_bytes32_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5650:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5661:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5673:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5681:6:22","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5689:6:22","type":""}],"src":"5578:505:22"},{"body":{"nodeType":"YulBlock","src":"6204:102:22","statements":[{"nodeType":"YulAssignment","src":"6214:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6226:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6237:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6222:3:22"},"nodeType":"YulFunctionCall","src":"6222:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6214:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6256:9:22"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6271:6:22"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6287:3:22","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"6292:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6283:3:22"},"nodeType":"YulFunctionCall","src":"6283:11:22"},{"kind":"number","nodeType":"YulLiteral","src":"6296:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6279:3:22"},"nodeType":"YulFunctionCall","src":"6279:19:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6267:3:22"},"nodeType":"YulFunctionCall","src":"6267:32:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6249:6:22"},"nodeType":"YulFunctionCall","src":"6249:51:22"},"nodeType":"YulExpressionStatement","src":"6249:51:22"}]},"name":"abi_encode_tuple_t_contract$_IERC20_$2138__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6173:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6184:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6195:4:22","type":""}],"src":"6088:218:22"},{"body":{"nodeType":"YulBlock","src":"6398:161:22","statements":[{"body":{"nodeType":"YulBlock","src":"6444:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6453:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6456:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6446:6:22"},"nodeType":"YulFunctionCall","src":"6446:12:22"},"nodeType":"YulExpressionStatement","src":"6446:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6419:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"6428:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6415:3:22"},"nodeType":"YulFunctionCall","src":"6415:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"6440:2:22","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6411:3:22"},"nodeType":"YulFunctionCall","src":"6411:32:22"},"nodeType":"YulIf","src":"6408:52:22"},{"nodeType":"YulAssignment","src":"6469:33:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6492:9:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6479:12:22"},"nodeType":"YulFunctionCall","src":"6479:23:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6469:6:22"}]},{"nodeType":"YulAssignment","src":"6511:42:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6538:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6549:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6534:3:22"},"nodeType":"YulFunctionCall","src":"6534:18:22"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6521:12:22"},"nodeType":"YulFunctionCall","src":"6521:32:22"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6511:6:22"}]}]},"name":"abi_decode_tuple_t_uint256t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6356:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6367:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6379:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6387:6:22","type":""}],"src":"6311:248:22"},{"body":{"nodeType":"YulBlock","src":"6738:181:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6755:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6766:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6748:6:22"},"nodeType":"YulFunctionCall","src":"6748:21:22"},"nodeType":"YulExpressionStatement","src":"6748:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6789:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6800:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6785:3:22"},"nodeType":"YulFunctionCall","src":"6785:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"6805:2:22","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6778:6:22"},"nodeType":"YulFunctionCall","src":"6778:30:22"},"nodeType":"YulExpressionStatement","src":"6778:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6828:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6839:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6824:3:22"},"nodeType":"YulFunctionCall","src":"6824:18:22"},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","kind":"string","nodeType":"YulLiteral","src":"6844:33:22","type":"","value":"ReentrancyGuard: reentrant call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6817:6:22"},"nodeType":"YulFunctionCall","src":"6817:61:22"},"nodeType":"YulExpressionStatement","src":"6817:61:22"},{"nodeType":"YulAssignment","src":"6887:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6899:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"6910:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6895:3:22"},"nodeType":"YulFunctionCall","src":"6895:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6887:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6715:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6729:4:22","type":""}],"src":"6564:355:22"},{"body":{"nodeType":"YulBlock","src":"7165:350:22","statements":[{"nodeType":"YulAssignment","src":"7175:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7187:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7198:3:22","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7183:3:22"},"nodeType":"YulFunctionCall","src":"7183:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7175:4:22"}]},{"nodeType":"YulVariableDeclaration","src":"7211:29:22","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7229:3:22","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"7234:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7225:3:22"},"nodeType":"YulFunctionCall","src":"7225:11:22"},{"kind":"number","nodeType":"YulLiteral","src":"7238:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7221:3:22"},"nodeType":"YulFunctionCall","src":"7221:19:22"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7215:2:22","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7256:9:22"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7271:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"7279:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7267:3:22"},"nodeType":"YulFunctionCall","src":"7267:15:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7249:6:22"},"nodeType":"YulFunctionCall","src":"7249:34:22"},"nodeType":"YulExpressionStatement","src":"7249:34:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7303:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7314:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7299:3:22"},"nodeType":"YulFunctionCall","src":"7299:18:22"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7323:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"7331:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7319:3:22"},"nodeType":"YulFunctionCall","src":"7319:15:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7292:6:22"},"nodeType":"YulFunctionCall","src":"7292:43:22"},"nodeType":"YulExpressionStatement","src":"7292:43:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7355:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7366:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7351:3:22"},"nodeType":"YulFunctionCall","src":"7351:18:22"},{"name":"value2","nodeType":"YulIdentifier","src":"7371:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7344:6:22"},"nodeType":"YulFunctionCall","src":"7344:34:22"},"nodeType":"YulExpressionStatement","src":"7344:34:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7398:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7409:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7394:3:22"},"nodeType":"YulFunctionCall","src":"7394:18:22"},{"name":"value3","nodeType":"YulIdentifier","src":"7414:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7387:6:22"},"nodeType":"YulFunctionCall","src":"7387:34:22"},"nodeType":"YulExpressionStatement","src":"7387:34:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7441:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7452:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7437:3:22"},"nodeType":"YulFunctionCall","src":"7437:19:22"},{"name":"value4","nodeType":"YulIdentifier","src":"7458:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7430:6:22"},"nodeType":"YulFunctionCall","src":"7430:35:22"},"nodeType":"YulExpressionStatement","src":"7430:35:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7485:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7496:3:22","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7481:3:22"},"nodeType":"YulFunctionCall","src":"7481:19:22"},{"name":"value5","nodeType":"YulIdentifier","src":"7502:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7474:6:22"},"nodeType":"YulFunctionCall","src":"7474:35:22"},"nodeType":"YulExpressionStatement","src":"7474:35:22"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint256_t_uint256__to_t_address_t_address_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7094:9:22","type":""},{"name":"value5","nodeType":"YulTypedName","src":"7105:6:22","type":""},{"name":"value4","nodeType":"YulTypedName","src":"7113:6:22","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7121:6:22","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7129:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7137:6:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7145:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7156:4:22","type":""}],"src":"6924:591:22"},{"body":{"nodeType":"YulBlock","src":"7649:175:22","statements":[{"nodeType":"YulAssignment","src":"7659:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7671:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7682:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7667:3:22"},"nodeType":"YulFunctionCall","src":"7667:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7659:4:22"}]},{"nodeType":"YulVariableDeclaration","src":"7694:29:22","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7712:3:22","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"7717:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7708:3:22"},"nodeType":"YulFunctionCall","src":"7708:11:22"},{"kind":"number","nodeType":"YulLiteral","src":"7721:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7704:3:22"},"nodeType":"YulFunctionCall","src":"7704:19:22"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7698:2:22","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7739:9:22"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7754:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"7762:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7750:3:22"},"nodeType":"YulFunctionCall","src":"7750:15:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7732:6:22"},"nodeType":"YulFunctionCall","src":"7732:34:22"},"nodeType":"YulExpressionStatement","src":"7732:34:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7786:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"7797:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7782:3:22"},"nodeType":"YulFunctionCall","src":"7782:18:22"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7806:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"7814:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7802:3:22"},"nodeType":"YulFunctionCall","src":"7802:15:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7775:6:22"},"nodeType":"YulFunctionCall","src":"7775:43:22"},"nodeType":"YulExpressionStatement","src":"7775:43:22"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7610:9:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7621:6:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7629:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7640:4:22","type":""}],"src":"7520:304:22"},{"body":{"nodeType":"YulBlock","src":"7986:162:22","statements":[{"nodeType":"YulAssignment","src":"7996:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8008:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8019:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8004:3:22"},"nodeType":"YulFunctionCall","src":"8004:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7996:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8038:9:22"},{"name":"value0","nodeType":"YulIdentifier","src":"8049:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8031:6:22"},"nodeType":"YulFunctionCall","src":"8031:25:22"},"nodeType":"YulExpressionStatement","src":"8031:25:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8076:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8087:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8072:3:22"},"nodeType":"YulFunctionCall","src":"8072:18:22"},{"name":"value1","nodeType":"YulIdentifier","src":"8092:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8065:6:22"},"nodeType":"YulFunctionCall","src":"8065:34:22"},"nodeType":"YulExpressionStatement","src":"8065:34:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8119:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8130:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8115:3:22"},"nodeType":"YulFunctionCall","src":"8115:18:22"},{"name":"value2","nodeType":"YulIdentifier","src":"8135:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8108:6:22"},"nodeType":"YulFunctionCall","src":"8108:34:22"},"nodeType":"YulExpressionStatement","src":"8108:34:22"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7939:9:22","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7950:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7958:6:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7966:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7977:4:22","type":""}],"src":"7829:319:22"},{"body":{"nodeType":"YulBlock","src":"8327:237:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8344:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8355:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8337:6:22"},"nodeType":"YulFunctionCall","src":"8337:21:22"},"nodeType":"YulExpressionStatement","src":"8337:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8378:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8389:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8374:3:22"},"nodeType":"YulFunctionCall","src":"8374:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"8394:2:22","type":"","value":"47"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8367:6:22"},"nodeType":"YulFunctionCall","src":"8367:30:22"},"nodeType":"YulExpressionStatement","src":"8367:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8417:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8428:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8413:3:22"},"nodeType":"YulFunctionCall","src":"8413:18:22"},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365","kind":"string","nodeType":"YulLiteral","src":"8433:34:22","type":"","value":"AccessControl: can only renounce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8406:6:22"},"nodeType":"YulFunctionCall","src":"8406:62:22"},"nodeType":"YulExpressionStatement","src":"8406:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8488:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8499:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8484:3:22"},"nodeType":"YulFunctionCall","src":"8484:18:22"},{"hexValue":"20726f6c657320666f722073656c66","kind":"string","nodeType":"YulLiteral","src":"8504:17:22","type":"","value":" roles for self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8477:6:22"},"nodeType":"YulFunctionCall","src":"8477:45:22"},"nodeType":"YulExpressionStatement","src":"8477:45:22"},{"nodeType":"YulAssignment","src":"8531:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8543:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"8554:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8539:3:22"},"nodeType":"YulFunctionCall","src":"8539:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8531:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8304:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8318:4:22","type":""}],"src":"8153:411:22"},{"body":{"nodeType":"YulBlock","src":"8601:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8618:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8625:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"8630:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8621:3:22"},"nodeType":"YulFunctionCall","src":"8621:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8611:6:22"},"nodeType":"YulFunctionCall","src":"8611:31:22"},"nodeType":"YulExpressionStatement","src":"8611:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8658:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8661:4:22","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8651:6:22"},"nodeType":"YulFunctionCall","src":"8651:15:22"},"nodeType":"YulExpressionStatement","src":"8651:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8682:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8685:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8675:6:22"},"nodeType":"YulFunctionCall","src":"8675:15:22"},"nodeType":"YulExpressionStatement","src":"8675:15:22"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"8569:127:22"},{"body":{"nodeType":"YulBlock","src":"8733:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8750:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8757:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"8762:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8753:3:22"},"nodeType":"YulFunctionCall","src":"8753:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8743:6:22"},"nodeType":"YulFunctionCall","src":"8743:31:22"},"nodeType":"YulExpressionStatement","src":"8743:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8790:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8793:4:22","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8783:6:22"},"nodeType":"YulFunctionCall","src":"8783:15:22"},"nodeType":"YulExpressionStatement","src":"8783:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8814:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8817:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8807:6:22"},"nodeType":"YulFunctionCall","src":"8807:15:22"},"nodeType":"YulExpressionStatement","src":"8807:15:22"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"8701:127:22"},{"body":{"nodeType":"YulBlock","src":"8880:88:22","statements":[{"body":{"nodeType":"YulBlock","src":"8911:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"8913:16:22"},"nodeType":"YulFunctionCall","src":"8913:18:22"},"nodeType":"YulExpressionStatement","src":"8913:18:22"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8896:5:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8907:1:22","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8903:3:22"},"nodeType":"YulFunctionCall","src":"8903:6:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8893:2:22"},"nodeType":"YulFunctionCall","src":"8893:17:22"},"nodeType":"YulIf","src":"8890:43:22"},{"nodeType":"YulAssignment","src":"8942:20:22","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8953:5:22"},{"kind":"number","nodeType":"YulLiteral","src":"8960:1:22","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8949:3:22"},"nodeType":"YulFunctionCall","src":"8949:13:22"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"8942:3:22"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8862:5:22","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"8872:3:22","type":""}],"src":"8833:135:22"},{"body":{"nodeType":"YulBlock","src":"9102:119:22","statements":[{"nodeType":"YulAssignment","src":"9112:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9124:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9135:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9120:3:22"},"nodeType":"YulFunctionCall","src":"9120:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9112:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9154:9:22"},{"name":"value0","nodeType":"YulIdentifier","src":"9165:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9147:6:22"},"nodeType":"YulFunctionCall","src":"9147:25:22"},"nodeType":"YulExpressionStatement","src":"9147:25:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9192:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9203:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9188:3:22"},"nodeType":"YulFunctionCall","src":"9188:18:22"},{"name":"value1","nodeType":"YulIdentifier","src":"9208:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9181:6:22"},"nodeType":"YulFunctionCall","src":"9181:34:22"},"nodeType":"YulExpressionStatement","src":"9181:34:22"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9063:9:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9074:6:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9082:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9093:4:22","type":""}],"src":"8973:248:22"},{"body":{"nodeType":"YulBlock","src":"9275:79:22","statements":[{"nodeType":"YulAssignment","src":"9285:17:22","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9297:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"9300:1:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9293:3:22"},"nodeType":"YulFunctionCall","src":"9293:9:22"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"9285:4:22"}]},{"body":{"nodeType":"YulBlock","src":"9326:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"9328:16:22"},"nodeType":"YulFunctionCall","src":"9328:18:22"},"nodeType":"YulExpressionStatement","src":"9328:18:22"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"9317:4:22"},{"name":"x","nodeType":"YulIdentifier","src":"9323:1:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9314:2:22"},"nodeType":"YulFunctionCall","src":"9314:11:22"},"nodeType":"YulIf","src":"9311:37:22"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"9257:1:22","type":""},{"name":"y","nodeType":"YulTypedName","src":"9260:1:22","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"9266:4:22","type":""}],"src":"9226:128:22"},{"body":{"nodeType":"YulBlock","src":"9488:145:22","statements":[{"nodeType":"YulAssignment","src":"9498:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9510:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9521:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9506:3:22"},"nodeType":"YulFunctionCall","src":"9506:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9498:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9540:9:22"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9555:6:22"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9571:3:22","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"9576:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9567:3:22"},"nodeType":"YulFunctionCall","src":"9567:11:22"},{"kind":"number","nodeType":"YulLiteral","src":"9580:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9563:3:22"},"nodeType":"YulFunctionCall","src":"9563:19:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9551:3:22"},"nodeType":"YulFunctionCall","src":"9551:32:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9533:6:22"},"nodeType":"YulFunctionCall","src":"9533:51:22"},"nodeType":"YulExpressionStatement","src":"9533:51:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9604:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9615:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9600:3:22"},"nodeType":"YulFunctionCall","src":"9600:18:22"},{"name":"value1","nodeType":"YulIdentifier","src":"9620:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9593:6:22"},"nodeType":"YulFunctionCall","src":"9593:34:22"},"nodeType":"YulExpressionStatement","src":"9593:34:22"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9449:9:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9460:6:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9468:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9479:4:22","type":""}],"src":"9359:274:22"},{"body":{"nodeType":"YulBlock","src":"9767:119:22","statements":[{"nodeType":"YulAssignment","src":"9777:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9789:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9800:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9785:3:22"},"nodeType":"YulFunctionCall","src":"9785:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9777:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9819:9:22"},{"name":"value0","nodeType":"YulIdentifier","src":"9830:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9812:6:22"},"nodeType":"YulFunctionCall","src":"9812:25:22"},"nodeType":"YulExpressionStatement","src":"9812:25:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9857:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"9868:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9853:3:22"},"nodeType":"YulFunctionCall","src":"9853:18:22"},{"name":"value1","nodeType":"YulIdentifier","src":"9873:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9846:6:22"},"nodeType":"YulFunctionCall","src":"9846:34:22"},"nodeType":"YulExpressionStatement","src":"9846:34:22"}]},"name":"abi_encode_tuple_t_uint256_t_bytes32__to_t_uint256_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9728:9:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9739:6:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9747:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9758:4:22","type":""}],"src":"9638:248:22"},{"body":{"nodeType":"YulBlock","src":"9957:184:22","statements":[{"nodeType":"YulVariableDeclaration","src":"9967:10:22","value":{"kind":"number","nodeType":"YulLiteral","src":"9976:1:22","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"9971:1:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"10036:63:22","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"10061:3:22"},{"name":"i","nodeType":"YulIdentifier","src":"10066:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10057:3:22"},"nodeType":"YulFunctionCall","src":"10057:11:22"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"10080:3:22"},{"name":"i","nodeType":"YulIdentifier","src":"10085:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10076:3:22"},"nodeType":"YulFunctionCall","src":"10076:11:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10070:5:22"},"nodeType":"YulFunctionCall","src":"10070:18:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10050:6:22"},"nodeType":"YulFunctionCall","src":"10050:39:22"},"nodeType":"YulExpressionStatement","src":"10050:39:22"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"9997:1:22"},{"name":"length","nodeType":"YulIdentifier","src":"10000:6:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9994:2:22"},"nodeType":"YulFunctionCall","src":"9994:13:22"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"10008:19:22","statements":[{"nodeType":"YulAssignment","src":"10010:15:22","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"10019:1:22"},{"kind":"number","nodeType":"YulLiteral","src":"10022:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10015:3:22"},"nodeType":"YulFunctionCall","src":"10015:10:22"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"10010:1:22"}]}]},"pre":{"nodeType":"YulBlock","src":"9990:3:22","statements":[]},"src":"9986:113:22"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"10119:3:22"},{"name":"length","nodeType":"YulIdentifier","src":"10124:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10115:3:22"},"nodeType":"YulFunctionCall","src":"10115:16:22"},{"kind":"number","nodeType":"YulLiteral","src":"10133:1:22","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10108:6:22"},"nodeType":"YulFunctionCall","src":"10108:27:22"},"nodeType":"YulExpressionStatement","src":"10108:27:22"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"9935:3:22","type":""},{"name":"dst","nodeType":"YulTypedName","src":"9940:3:22","type":""},{"name":"length","nodeType":"YulTypedName","src":"9945:6:22","type":""}],"src":"9891:250:22"},{"body":{"nodeType":"YulBlock","src":"10535:423:22","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10552:3:22"},{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","kind":"string","nodeType":"YulLiteral","src":"10557:25:22","type":"","value":"AccessControl: account "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10545:6:22"},"nodeType":"YulFunctionCall","src":"10545:38:22"},"nodeType":"YulExpressionStatement","src":"10545:38:22"},{"nodeType":"YulVariableDeclaration","src":"10592:27:22","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10612:6:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10606:5:22"},"nodeType":"YulFunctionCall","src":"10606:13:22"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"10596:6:22","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10667:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"10675:4:22","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10663:3:22"},"nodeType":"YulFunctionCall","src":"10663:17:22"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10686:3:22"},{"kind":"number","nodeType":"YulLiteral","src":"10691:2:22","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10682:3:22"},"nodeType":"YulFunctionCall","src":"10682:12:22"},{"name":"length","nodeType":"YulIdentifier","src":"10696:6:22"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"10628:34:22"},"nodeType":"YulFunctionCall","src":"10628:75:22"},"nodeType":"YulExpressionStatement","src":"10628:75:22"},{"nodeType":"YulVariableDeclaration","src":"10712:26:22","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10726:3:22"},{"name":"length","nodeType":"YulIdentifier","src":"10731:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10722:3:22"},"nodeType":"YulFunctionCall","src":"10722:16:22"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"10716:2:22","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"10758:2:22"},{"kind":"number","nodeType":"YulLiteral","src":"10762:2:22","type":"","value":"23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10754:3:22"},"nodeType":"YulFunctionCall","src":"10754:11:22"},{"hexValue":"206973206d697373696e6720726f6c6520","kind":"string","nodeType":"YulLiteral","src":"10767:19:22","type":"","value":" is missing role "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10747:6:22"},"nodeType":"YulFunctionCall","src":"10747:40:22"},"nodeType":"YulExpressionStatement","src":"10747:40:22"},{"nodeType":"YulVariableDeclaration","src":"10796:29:22","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10818:6:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10812:5:22"},"nodeType":"YulFunctionCall","src":"10812:13:22"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"10800:8:22","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10873:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"10881:4:22","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10869:3:22"},"nodeType":"YulFunctionCall","src":"10869:17:22"},{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"10892:2:22"},{"kind":"number","nodeType":"YulLiteral","src":"10896:2:22","type":"","value":"40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10888:3:22"},"nodeType":"YulFunctionCall","src":"10888:11:22"},{"name":"length_1","nodeType":"YulIdentifier","src":"10901:8:22"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"10834:34:22"},"nodeType":"YulFunctionCall","src":"10834:76:22"},"nodeType":"YulExpressionStatement","src":"10834:76:22"},{"nodeType":"YulAssignment","src":"10919:33:22","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"10934:2:22"},{"name":"length_1","nodeType":"YulIdentifier","src":"10938:8:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10930:3:22"},"nodeType":"YulFunctionCall","src":"10930:17:22"},{"kind":"number","nodeType":"YulLiteral","src":"10949:2:22","type":"","value":"40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10926:3:22"},"nodeType":"YulFunctionCall","src":"10926:26:22"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10919:3:22"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10503:3:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10508:6:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10516:6:22","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10527:3:22","type":""}],"src":"10146:812:22"},{"body":{"nodeType":"YulBlock","src":"11084:275:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11101:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"11112:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11094:6:22"},"nodeType":"YulFunctionCall","src":"11094:21:22"},"nodeType":"YulExpressionStatement","src":"11094:21:22"},{"nodeType":"YulVariableDeclaration","src":"11124:27:22","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11144:6:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11138:5:22"},"nodeType":"YulFunctionCall","src":"11138:13:22"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"11128:6:22","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11171:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"11182:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11167:3:22"},"nodeType":"YulFunctionCall","src":"11167:18:22"},{"name":"length","nodeType":"YulIdentifier","src":"11187:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11160:6:22"},"nodeType":"YulFunctionCall","src":"11160:34:22"},"nodeType":"YulExpressionStatement","src":"11160:34:22"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11242:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"11250:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11238:3:22"},"nodeType":"YulFunctionCall","src":"11238:15:22"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11259:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"11270:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11255:3:22"},"nodeType":"YulFunctionCall","src":"11255:18:22"},{"name":"length","nodeType":"YulIdentifier","src":"11275:6:22"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"11203:34:22"},"nodeType":"YulFunctionCall","src":"11203:79:22"},"nodeType":"YulExpressionStatement","src":"11203:79:22"},{"nodeType":"YulAssignment","src":"11291:62:22","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11307:9:22"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"11326:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"11334:2:22","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11322:3:22"},"nodeType":"YulFunctionCall","src":"11322:15:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11343:2:22","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11339:3:22"},"nodeType":"YulFunctionCall","src":"11339:7:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11318:3:22"},"nodeType":"YulFunctionCall","src":"11318:29:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11303:3:22"},"nodeType":"YulFunctionCall","src":"11303:45:22"},{"kind":"number","nodeType":"YulLiteral","src":"11350:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11299:3:22"},"nodeType":"YulFunctionCall","src":"11299:54:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11291:4:22"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11053:9:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11064:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11075:4:22","type":""}],"src":"10963:396:22"},{"body":{"nodeType":"YulBlock","src":"11416:116:22","statements":[{"body":{"nodeType":"YulBlock","src":"11475:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11477:16:22"},"nodeType":"YulFunctionCall","src":"11477:18:22"},"nodeType":"YulExpressionStatement","src":"11477:18:22"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11447:1:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11440:6:22"},"nodeType":"YulFunctionCall","src":"11440:9:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11433:6:22"},"nodeType":"YulFunctionCall","src":"11433:17:22"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"11455:1:22"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11466:1:22","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11462:3:22"},"nodeType":"YulFunctionCall","src":"11462:6:22"},{"name":"x","nodeType":"YulIdentifier","src":"11470:1:22"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"11458:3:22"},"nodeType":"YulFunctionCall","src":"11458:14:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11452:2:22"},"nodeType":"YulFunctionCall","src":"11452:21:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11429:3:22"},"nodeType":"YulFunctionCall","src":"11429:45:22"},"nodeType":"YulIf","src":"11426:71:22"},{"nodeType":"YulAssignment","src":"11506:20:22","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11521:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"11524:1:22"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"11517:3:22"},"nodeType":"YulFunctionCall","src":"11517:9:22"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"11506:7:22"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11395:1:22","type":""},{"name":"y","nodeType":"YulTypedName","src":"11398:1:22","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"11404:7:22","type":""}],"src":"11364:168:22"},{"body":{"nodeType":"YulBlock","src":"11583:171:22","statements":[{"body":{"nodeType":"YulBlock","src":"11614:111:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11635:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11642:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"11647:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11638:3:22"},"nodeType":"YulFunctionCall","src":"11638:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11628:6:22"},"nodeType":"YulFunctionCall","src":"11628:31:22"},"nodeType":"YulExpressionStatement","src":"11628:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11679:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"11682:4:22","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11672:6:22"},"nodeType":"YulFunctionCall","src":"11672:15:22"},"nodeType":"YulExpressionStatement","src":"11672:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11707:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11710:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11700:6:22"},"nodeType":"YulFunctionCall","src":"11700:15:22"},"nodeType":"YulExpressionStatement","src":"11700:15:22"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"11603:1:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11596:6:22"},"nodeType":"YulFunctionCall","src":"11596:9:22"},"nodeType":"YulIf","src":"11593:132:22"},{"nodeType":"YulAssignment","src":"11734:14:22","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11743:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"11746:1:22"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"11739:3:22"},"nodeType":"YulFunctionCall","src":"11739:9:22"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"11734:1:22"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11568:1:22","type":""},{"name":"y","nodeType":"YulTypedName","src":"11571:1:22","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"11577:1:22","type":""}],"src":"11537:217:22"},{"body":{"nodeType":"YulBlock","src":"11916:218:22","statements":[{"nodeType":"YulAssignment","src":"11926:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11938:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"11949:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11934:3:22"},"nodeType":"YulFunctionCall","src":"11934:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11926:4:22"}]},{"nodeType":"YulVariableDeclaration","src":"11961:29:22","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11979:3:22","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"11984:1:22","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11975:3:22"},"nodeType":"YulFunctionCall","src":"11975:11:22"},{"kind":"number","nodeType":"YulLiteral","src":"11988:1:22","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11971:3:22"},"nodeType":"YulFunctionCall","src":"11971:19:22"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"11965:2:22","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12006:9:22"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12021:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"12029:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12017:3:22"},"nodeType":"YulFunctionCall","src":"12017:15:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11999:6:22"},"nodeType":"YulFunctionCall","src":"11999:34:22"},"nodeType":"YulExpressionStatement","src":"11999:34:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12053:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"12064:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12049:3:22"},"nodeType":"YulFunctionCall","src":"12049:18:22"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12073:6:22"},{"name":"_1","nodeType":"YulIdentifier","src":"12081:2:22"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12069:3:22"},"nodeType":"YulFunctionCall","src":"12069:15:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12042:6:22"},"nodeType":"YulFunctionCall","src":"12042:43:22"},"nodeType":"YulExpressionStatement","src":"12042:43:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12105:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"12116:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12101:3:22"},"nodeType":"YulFunctionCall","src":"12101:18:22"},{"name":"value2","nodeType":"YulIdentifier","src":"12121:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12094:6:22"},"nodeType":"YulFunctionCall","src":"12094:34:22"},"nodeType":"YulExpressionStatement","src":"12094:34:22"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11869:9:22","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11880:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11888:6:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11896:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11907:4:22","type":""}],"src":"11759:375:22"},{"body":{"nodeType":"YulBlock","src":"12187:77:22","statements":[{"nodeType":"YulAssignment","src":"12197:16:22","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12208:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"12211:1:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12204:3:22"},"nodeType":"YulFunctionCall","src":"12204:9:22"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"12197:3:22"}]},{"body":{"nodeType":"YulBlock","src":"12236:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"12238:16:22"},"nodeType":"YulFunctionCall","src":"12238:18:22"},"nodeType":"YulExpressionStatement","src":"12238:18:22"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12228:1:22"},{"name":"sum","nodeType":"YulIdentifier","src":"12231:3:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12225:2:22"},"nodeType":"YulFunctionCall","src":"12225:10:22"},"nodeType":"YulIf","src":"12222:36:22"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"12170:1:22","type":""},{"name":"y","nodeType":"YulTypedName","src":"12173:1:22","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"12179:3:22","type":""}],"src":"12139:125:22"},{"body":{"nodeType":"YulBlock","src":"12301:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12318:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12325:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"12330:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12321:3:22"},"nodeType":"YulFunctionCall","src":"12321:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12311:6:22"},"nodeType":"YulFunctionCall","src":"12311:31:22"},"nodeType":"YulExpressionStatement","src":"12311:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12358:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12361:4:22","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12351:6:22"},"nodeType":"YulFunctionCall","src":"12351:15:22"},"nodeType":"YulExpressionStatement","src":"12351:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12382:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12385:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12375:6:22"},"nodeType":"YulFunctionCall","src":"12375:15:22"},"nodeType":"YulExpressionStatement","src":"12375:15:22"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"12269:127:22"},{"body":{"nodeType":"YulBlock","src":"12448:89:22","statements":[{"body":{"nodeType":"YulBlock","src":"12475:22:22","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"12477:16:22"},"nodeType":"YulFunctionCall","src":"12477:18:22"},"nodeType":"YulExpressionStatement","src":"12477:18:22"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12468:5:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12461:6:22"},"nodeType":"YulFunctionCall","src":"12461:13:22"},"nodeType":"YulIf","src":"12458:39:22"},{"nodeType":"YulAssignment","src":"12506:25:22","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12517:5:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12528:1:22","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"12524:3:22"},"nodeType":"YulFunctionCall","src":"12524:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12513:3:22"},"nodeType":"YulFunctionCall","src":"12513:18:22"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"12506:3:22"}]}]},"name":"decrement_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12430:5:22","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"12440:3:22","type":""}],"src":"12401:136:22"},{"body":{"nodeType":"YulBlock","src":"12716:182:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12733:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"12744:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12726:6:22"},"nodeType":"YulFunctionCall","src":"12726:21:22"},"nodeType":"YulExpressionStatement","src":"12726:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12767:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"12778:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12763:3:22"},"nodeType":"YulFunctionCall","src":"12763:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"12783:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12756:6:22"},"nodeType":"YulFunctionCall","src":"12756:30:22"},"nodeType":"YulExpressionStatement","src":"12756:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12806:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"12817:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12802:3:22"},"nodeType":"YulFunctionCall","src":"12802:18:22"},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","kind":"string","nodeType":"YulLiteral","src":"12822:34:22","type":"","value":"Strings: hex length insufficient"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12795:6:22"},"nodeType":"YulFunctionCall","src":"12795:62:22"},"nodeType":"YulExpressionStatement","src":"12795:62:22"},{"nodeType":"YulAssignment","src":"12866:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12878:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"12889:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12874:3:22"},"nodeType":"YulFunctionCall","src":"12874:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12866:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12693:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12707:4:22","type":""}],"src":"12542:356:22"},{"body":{"nodeType":"YulBlock","src":"12984:103:22","statements":[{"body":{"nodeType":"YulBlock","src":"13030:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13039:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13042:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13032:6:22"},"nodeType":"YulFunctionCall","src":"13032:12:22"},"nodeType":"YulExpressionStatement","src":"13032:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13005:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"13014:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13001:3:22"},"nodeType":"YulFunctionCall","src":"13001:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"13026:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12997:3:22"},"nodeType":"YulFunctionCall","src":"12997:32:22"},"nodeType":"YulIf","src":"12994:52:22"},{"nodeType":"YulAssignment","src":"13055:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13071:9:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13065:5:22"},"nodeType":"YulFunctionCall","src":"13065:16:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13055:6:22"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12950:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12961:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12973:6:22","type":""}],"src":"12903:184:22"},{"body":{"nodeType":"YulBlock","src":"13277:206:22","statements":[{"nodeType":"YulAssignment","src":"13287:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13299:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"13310:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13295:3:22"},"nodeType":"YulFunctionCall","src":"13295:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13287:4:22"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13330:9:22"},{"name":"value0","nodeType":"YulIdentifier","src":"13341:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13323:6:22"},"nodeType":"YulFunctionCall","src":"13323:25:22"},"nodeType":"YulExpressionStatement","src":"13323:25:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13368:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"13379:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13364:3:22"},"nodeType":"YulFunctionCall","src":"13364:18:22"},{"name":"value1","nodeType":"YulIdentifier","src":"13384:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13357:6:22"},"nodeType":"YulFunctionCall","src":"13357:34:22"},"nodeType":"YulExpressionStatement","src":"13357:34:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13411:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"13422:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13407:3:22"},"nodeType":"YulFunctionCall","src":"13407:18:22"},{"name":"value2","nodeType":"YulIdentifier","src":"13427:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13400:6:22"},"nodeType":"YulFunctionCall","src":"13400:34:22"},"nodeType":"YulExpressionStatement","src":"13400:34:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13454:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"13465:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13450:3:22"},"nodeType":"YulFunctionCall","src":"13450:18:22"},{"name":"value3","nodeType":"YulIdentifier","src":"13470:6:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13443:6:22"},"nodeType":"YulFunctionCall","src":"13443:34:22"},"nodeType":"YulExpressionStatement","src":"13443:34:22"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13222:9:22","type":""},{"name":"value3","nodeType":"YulTypedName","src":"13233:6:22","type":""},{"name":"value2","nodeType":"YulTypedName","src":"13241:6:22","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13249:6:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13257:6:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13268:4:22","type":""}],"src":"13092:391:22"},{"body":{"nodeType":"YulBlock","src":"13566:199:22","statements":[{"body":{"nodeType":"YulBlock","src":"13612:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13621:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13624:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13614:6:22"},"nodeType":"YulFunctionCall","src":"13614:12:22"},"nodeType":"YulExpressionStatement","src":"13614:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13587:7:22"},{"name":"headStart","nodeType":"YulIdentifier","src":"13596:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13583:3:22"},"nodeType":"YulFunctionCall","src":"13583:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"13608:2:22","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13579:3:22"},"nodeType":"YulFunctionCall","src":"13579:32:22"},"nodeType":"YulIf","src":"13576:52:22"},{"nodeType":"YulVariableDeclaration","src":"13637:29:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13656:9:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13650:5:22"},"nodeType":"YulFunctionCall","src":"13650:16:22"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"13641:5:22","type":""}]},{"body":{"nodeType":"YulBlock","src":"13719:16:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13728:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13731:1:22","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13721:6:22"},"nodeType":"YulFunctionCall","src":"13721:12:22"},"nodeType":"YulExpressionStatement","src":"13721:12:22"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13688:5:22"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13709:5:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13702:6:22"},"nodeType":"YulFunctionCall","src":"13702:13:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13695:6:22"},"nodeType":"YulFunctionCall","src":"13695:21:22"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"13685:2:22"},"nodeType":"YulFunctionCall","src":"13685:32:22"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13678:6:22"},"nodeType":"YulFunctionCall","src":"13678:40:22"},"nodeType":"YulIf","src":"13675:60:22"},{"nodeType":"YulAssignment","src":"13744:15:22","value":{"name":"value","nodeType":"YulIdentifier","src":"13754:5:22"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13744:6:22"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13532:9:22","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13543:7:22","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13555:6:22","type":""}],"src":"13488:277:22"},{"body":{"nodeType":"YulBlock","src":"13944:232:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13961:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"13972:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13954:6:22"},"nodeType":"YulFunctionCall","src":"13954:21:22"},"nodeType":"YulExpressionStatement","src":"13954:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13995:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"14006:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13991:3:22"},"nodeType":"YulFunctionCall","src":"13991:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"14011:2:22","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13984:6:22"},"nodeType":"YulFunctionCall","src":"13984:30:22"},"nodeType":"YulExpressionStatement","src":"13984:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14034:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"14045:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14030:3:22"},"nodeType":"YulFunctionCall","src":"14030:18:22"},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e","kind":"string","nodeType":"YulLiteral","src":"14050:34:22","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14023:6:22"},"nodeType":"YulFunctionCall","src":"14023:62:22"},"nodeType":"YulExpressionStatement","src":"14023:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14105:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"14116:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14101:3:22"},"nodeType":"YulFunctionCall","src":"14101:18:22"},{"hexValue":"6f742073756363656564","kind":"string","nodeType":"YulLiteral","src":"14121:12:22","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14094:6:22"},"nodeType":"YulFunctionCall","src":"14094:40:22"},"nodeType":"YulExpressionStatement","src":"14094:40:22"},{"nodeType":"YulAssignment","src":"14143:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14155:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"14166:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14151:3:22"},"nodeType":"YulFunctionCall","src":"14151:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14143:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13921:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13935:4:22","type":""}],"src":"13770:406:22"},{"body":{"nodeType":"YulBlock","src":"14213:95:22","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14230:1:22","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14237:3:22","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"14242:10:22","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"14233:3:22"},"nodeType":"YulFunctionCall","src":"14233:20:22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14223:6:22"},"nodeType":"YulFunctionCall","src":"14223:31:22"},"nodeType":"YulExpressionStatement","src":"14223:31:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14270:1:22","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"14273:4:22","type":"","value":"0x31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14263:6:22"},"nodeType":"YulFunctionCall","src":"14263:15:22"},"nodeType":"YulExpressionStatement","src":"14263:15:22"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14294:1:22","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14297:4:22","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14287:6:22"},"nodeType":"YulFunctionCall","src":"14287:15:22"},"nodeType":"YulExpressionStatement","src":"14287:15:22"}]},"name":"panic_error_0x31","nodeType":"YulFunctionDefinition","src":"14181:127:22"},{"body":{"nodeType":"YulBlock","src":"14487:228:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14504:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"14515:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14497:6:22"},"nodeType":"YulFunctionCall","src":"14497:21:22"},"nodeType":"YulExpressionStatement","src":"14497:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14538:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"14549:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14534:3:22"},"nodeType":"YulFunctionCall","src":"14534:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"14554:2:22","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14527:6:22"},"nodeType":"YulFunctionCall","src":"14527:30:22"},"nodeType":"YulExpressionStatement","src":"14527:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14577:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"14588:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14573:3:22"},"nodeType":"YulFunctionCall","src":"14573:18:22"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"14593:34:22","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14566:6:22"},"nodeType":"YulFunctionCall","src":"14566:62:22"},"nodeType":"YulExpressionStatement","src":"14566:62:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14648:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"14659:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14644:3:22"},"nodeType":"YulFunctionCall","src":"14644:18:22"},{"hexValue":"722063616c6c","kind":"string","nodeType":"YulLiteral","src":"14664:8:22","type":"","value":"r call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14637:6:22"},"nodeType":"YulFunctionCall","src":"14637:36:22"},"nodeType":"YulExpressionStatement","src":"14637:36:22"},{"nodeType":"YulAssignment","src":"14682:27:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14694:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"14705:3:22","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14690:3:22"},"nodeType":"YulFunctionCall","src":"14690:19:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14682:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14464:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14478:4:22","type":""}],"src":"14313:402:22"},{"body":{"nodeType":"YulBlock","src":"14894:179:22","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14911:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"14922:2:22","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14904:6:22"},"nodeType":"YulFunctionCall","src":"14904:21:22"},"nodeType":"YulExpressionStatement","src":"14904:21:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14945:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"14956:2:22","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14941:3:22"},"nodeType":"YulFunctionCall","src":"14941:18:22"},{"kind":"number","nodeType":"YulLiteral","src":"14961:2:22","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14934:6:22"},"nodeType":"YulFunctionCall","src":"14934:30:22"},"nodeType":"YulExpressionStatement","src":"14934:30:22"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14984:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"14995:2:22","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14980:3:22"},"nodeType":"YulFunctionCall","src":"14980:18:22"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"15000:31:22","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14973:6:22"},"nodeType":"YulFunctionCall","src":"14973:59:22"},"nodeType":"YulExpressionStatement","src":"14973:59:22"},{"nodeType":"YulAssignment","src":"15041:26:22","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15053:9:22"},{"kind":"number","nodeType":"YulLiteral","src":"15064:2:22","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15049:3:22"},"nodeType":"YulFunctionCall","src":"15049:18:22"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15041:4:22"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14871:9:22","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14885:4:22","type":""}],"src":"14720:353:22"},{"body":{"nodeType":"YulBlock","src":"15215:150:22","statements":[{"nodeType":"YulVariableDeclaration","src":"15225:27:22","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15245:6:22"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15239:5:22"},"nodeType":"YulFunctionCall","src":"15239:13:22"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"15229:6:22","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15300:6:22"},{"kind":"number","nodeType":"YulLiteral","src":"15308:4:22","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15296:3:22"},"nodeType":"YulFunctionCall","src":"15296:17:22"},{"name":"pos","nodeType":"YulIdentifier","src":"15315:3:22"},{"name":"length","nodeType":"YulIdentifier","src":"15320:6:22"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"15261:34:22"},"nodeType":"YulFunctionCall","src":"15261:66:22"},"nodeType":"YulExpressionStatement","src":"15261:66:22"},{"nodeType":"YulAssignment","src":"15336:23:22","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15347:3:22"},{"name":"length","nodeType":"YulIdentifier","src":"15352:6:22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15343:3:22"},"nodeType":"YulFunctionCall","src":"15343:16:22"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15336:3:22"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15191:3:22","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15196:6:22","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15207:3:22","type":""}],"src":"15078:287:22"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_array_bytes32_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_addresst_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_bytes32t_addresst_uint256t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_decode_tuple_t_bytes32t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_contract$_IRWALike_$3966__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_contract$_IPricerReader_$3584__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_uint256t_array$_t_bytes32_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n    }\n    function abi_encode_tuple_t_contract$_IERC20_$2138__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_uint256t_bytes32(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ReentrancyGuard: reentrant call\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint256_t_uint256__to_t_address_t_address_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"AccessControl: can only renounce\")\n        mstore(add(headStart, 96), \" roles for self\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_uint256_t_bytes32__to_t_uint256_t_bytes32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"AccessControl: account \")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(pos, 23), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 23), \" is missing role \")\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), add(_1, 40), length_1)\n        end := add(add(_1, length_1), 40)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function decrement_t_uint256(value) -> ret\n    {\n        if iszero(value) { panic_error_0x11() }\n        ret := add(value, not(0))\n    }\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Strings: hex length insufficient\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x31()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n}","id":22,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"22":[{"length":32,"start":1591},{"length":32,"start":6742},{"length":32,"start":7074},{"length":32,"start":8769}],"56":[{"length":32,"start":1849},{"length":32,"start":5674},{"length":32,"start":5730}],"58":[{"length":32,"start":1695},{"length":32,"start":9548}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106103245760003560e01c80638a07df1e116101a9578063d0c835ce116100ef578063e1a452181161009d578063e1a452181461078a578063e4107c9714610793578063e74b981b146107a6578063eddd0d9c146107b9578063ee75d7d4146107cc578063eeb3c910146107df578063f4a20307146107f2578063f80a36d61461081957600080fd5b8063d0c835ce146106fb578063d547741f1461070e578063d592d81514610721578063d8dfeb4514610734578063dd45eef61461075b578063de6afa821461076e578063e0f486ef1461078157600080fd5b8063a217fddf11610157578063a217fddf14610659578063a6138ed914610661578063aa85c1df14610674578063aab483d614610687578063bb13245f1461069a578063bcc70283146106c1578063ca15c873146106d6578063cd4d0bcf146106e957600080fd5b80638a07df1e146105b55780638d044c06146105d55780639010d07c146105dd57806391d14854146105f0578063926d7d7f1461060357806392bccb801461062a57806395e4b2511461063257600080fd5b806338fed7081161026e5780634ef1ccd11161021c5780634ef1ccd114610506578063525decd6146105195780635d591d681461052c57806373a95ddd146105655780637dbc1df014610572578063837018fa1461058557806385c4e79e1461058d57806387e2d06e146105a257600080fd5b806338fed708146104415780633bfa67fe1461049f5780634565e9ff146104c7578063458f5815146104da57806346904840146104e357806349cbbf2a146104f65780634dfe7af2146104fe57600080fd5b8063244f5acf116102d6578063244f5acf146103a2578063248a9ca3146103b5578063258492cd146103d957806329390370146103ec5780632b5eceff146103ff5780632f2ff15d14610412578063354181f31461042557806336568abe1461042e57600080fd5b806301ffc9a714610329578063078a6be81461035157806307bda1bb14610374578063080c279a1461037d57806312589fb51461038657806313966db51461038f5780632056aa1214610398575b600080fd5b61033c6103373660046126db565b61082c565b60405190151581526020015b60405180910390f35b610366600080516020612c6b83398151915281565b604051908152602001610348565b610366600c5481565b61036660085481565b610366600f5481565b610366600a5481565b6103a0610857565b005b6103a06103b0366004612751565b6108ba565b6103666103c3366004612793565b6000908152600160208190526040909120015490565b6103a06103e73660046127c8565b610919565b6103a06103fa366004612803565b610a68565b6103a061040d36600461281e565b610ae1565b6103a0610420366004612864565b610be5565b610366600d5481565b6103a061043c366004612864565b610c11565b61047a61044f366004612793565b6007602052600090815260409020805460018201546002909201546001600160a01b03909116919083565b604080516001600160a01b039094168452602084019290925290820152606001610348565b6104ba730686b3a7b9be2751bb51084a6e0e7db7f1746eb181565b6040516103489190612890565b6103a06104d5366004612751565b610c8f565b610366600b5481565b6005546104ba906001600160a01b031681565b6103a0610d29565b6103a0610d83565b6103a0610514366004612793565b610dd8565b6103a0610527366004612803565b610e52565b61047a61053a366004612793565b6006602052600090815260409020805460018201546002909201546001600160a01b03909116919083565b600e5461033c9060ff1681565b6103a0610580366004612793565b610ebe565b6103a0610f38565b610366600080516020612c2b83398151915281565b6103a06105b03660046128a4565b610f8c565b6103666105c3366004612793565b60106020526000908152604090205481565b6103a061113a565b6104ba6105eb366004612910565b61118d565b61033c6105fe366004612864565b6111ac565b6103667fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc481565b6103a06111d7565b6104ba7f000000000000000000000000000000000000000000000000000000000000000081565b610366600081565b6003546104ba906001600160a01b031681565b6103a06106823660046128a4565b61122d565b6103a0610695366004612793565b611379565b6103667f000000000000000000000000000000000000000000000000000000000000000081565b610366600080516020612c4b83398151915281565b6103666106e4366004612793565b6113f3565b600e5461033c90610100900460ff1681565b6103a0610709366004612932565b61140a565b6103a061071c366004612864565b6114f0565b6103a061072f366004612793565b611517565b6104ba7f000000000000000000000000000000000000000000000000000000000000000081565b600e5461033c9062010000900460ff1681565b6103a061077c3660046127c8565b6116ef565b61036660095481565b61036661271081565b6103a06107a1366004612793565b61182e565b6103a06107b4366004612803565b611885565b6103a06107c7366004612793565b6118f0565b6004546104ba906001600160a01b031681565b6103a06107ed366004612793565b61196a565b6103667fced4eb9faeb19ab0e2e05a20ade58d82157e1035a3fbff4bc38dd5e609f22b9381565b6103a0610827366004612910565b611afe565b60006001600160e01b03198216635a05180f60e01b1480610851575061085182611cd3565b92915050565b600080516020612c2b8339815191526108708133611d08565b600e805461ff0019166101001790556040517fcd71257f2998474633e94cfffa045014068f6218ffdca256b6f4aa9d5f15fb89906108af903390612890565b60405180910390a150565b6002600054036108e55760405162461bcd60e51b81526004016108dc9061297e565b60405180910390fd5b6002600055600e5460ff16801561090f5760405163aadfaddd60e01b815260040160405180910390fd5b5050600160005550565b600080516020612c6b8339815191526109328133611d08565b6000600760008781526020019081526020016000206040518060600160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820154815260200160028201548152505090506040518060600160405280866001600160a01b03168152602001858152602001848152506007600088815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020155905050857f5a0c55c421ae3aac2379811eca16aaee32b6e64411322b624118d4219b9350a082600001518784604001518786602001518a604051610a58969594939291906129b5565b60405180910390a2505050505050565b600080516020612c6b833981519152610a818133611d08565b600380546001600160a01b038481166001600160a01b03198316179092556040519116907f801352e72ef9b80b3992ccbedf07ab0e133e7da7aaccf0024abf23f4f32eb99a90610ad490839086906129eb565b60405180910390a1505050565b7fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc4610b0c8133611d08565b6000868152600660205260409020546001600160a01b031615610b4257604051631aeecebf60e21b815260040160405180910390fd5b60408051606080820183526001600160a01b0388811680845260208085018a815260008688018181528e82526006845290889020965187546001600160a01b031916951694909417865551600186015591516002909401939093558351888152908101879052928301859052909188917fc985471d1cb1bb75da0d54fa5ab10f7171e952cefcc0bf4fc7c2546c19d1811f910160405180910390a3505050505050565b60008281526001602081905260409091200154610c028133611d08565b610c0c8383611d6c565b505050565b6001600160a01b0381163314610c815760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016108dc565b610c8b8282611d8e565b5050565b600260005403610cb15760405162461bcd60e51b81526004016108dc9061297e565b6002600055600e54610100900460ff168015610ce05760405163aadfaddd60e01b815260040160405180910390fd5b8160005b81811015610d1d57610d0d858583818110610d0157610d01612a05565b90506020020135611db0565b610d1681612a31565b9050610ce4565b50506001600055505050565b600080516020612c2b833981519152610d428133611d08565b600e805462ff00001916620100001790556040517fdc41a92196ccc1ab8149c01bc68c2f506b10a7bb5cd2693c9516d176f5381ff4906108af903390612890565b600080516020612c6b833981519152610d9c8133611d08565b600e805462ff0000191690556040517f53a8c40fc17c78d38e2c06aa8d2c550c1acbf7b30d087dbda289ab3dd41c235c906108af903390612890565b600080516020612c6b833981519152610df18133611d08565b612710821015610e145760405163617ab12d60e11b815260040160405180910390fd5b600980549083905560408051828152602081018590527ffdaf6ed728cef208e62328a008209556f8281f3062b14dd08aaaa90fa15942119101610ad4565b600080516020612c6b833981519152610e6b8133611d08565b600480546001600160a01b038481166001600160a01b03198316179092556040519116907fb09f298b2812193d5ada18beaadd6cb8f12b3640926d99de46e2a65394df829d90610ad490839086906129eb565b600080516020612c6b833981519152610ed78133611d08565b612710821115610efa57604051637e2df70960e11b815260040160405180910390fd5b600b80549083905560408051828152602081018590527f2956acfe8584fb02384e06c675ee215bf10d55c3de1e6ff9b2f621e8a40c64709101610ad4565b600080516020612c6b833981519152610f518133611d08565b600e805461ff00191690556040517f94482ee2b195c365dbbc2d689fd5a088d2b219abe44360ba8895525c9471d66f906108af903390612890565b600080516020612c4b833981519152610fa58133611d08565b83828114610fc65760405163cc6e40b360e01b815260040160405180910390fd5b60005b81811015611131576000600681898985818110610fe857610fe8612a05565b60209081029290920135835250810191909152604001600020546001600160a01b031603611029576040516305a8a45b60e41b815260040160405180910390fd5b6006600088888481811061103f5761103f612a05565b9050602002013581526020019081526020016000206002015460001461107857604051631139f30960e31b815260040160405180910390fd5b84848281811061108a5761108a612a05565b90506020020135600660008989858181106110a7576110a7612a05565b905060200201358152602001908152602001600020600201819055508484828181106110d5576110d5612a05565b905060200201358787838181106110ee576110ee612a05565b905060200201357fc2055184bbc2d10b90bf7df17a84f8bdda6b52377a976e41e0c1610fffafc0d760405160405180910390a361112a81612a31565b9050610fc9565b50505050505050565b600080516020612c6b8339815191526111538133611d08565b600e805460ff191690556040517fc641b9c4afa539cedcbe2e5f3e47d9f092175b5d0b8ae72dffa634a3eb3e47e4906108af903390612890565b60008281526002602052604081206111a59083611e27565b9392505050565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600080516020612c2b8339815191526111f08133611d08565b600e805460ff191660011790556040517f71e0406677c0570b2a66b1a4feeccf5c1cba2d6729435461e27a312b15410d04906108af903390612890565b600080516020612c4b8339815191526112468133611d08565b838281146112675760405163cc6e40b360e01b815260040160405180910390fd5b60005b81811015611131576007600088888481811061128857611288612a05565b905060200201358152602001908152602001600020600201546000146112c157604051631139f30960e31b815260040160405180910390fd5b8484828181106112d3576112d3612a05565b90506020020135600760008989858181106112f0576112f0612a05565b9050602002013581526020019081526020016000206002018190555084848281811061131e5761131e612a05565b9050602002013587878381811061133757611337612a05565b905060200201357e05e86a70f400d1820ab5a0573a2be911d831ab28fe2e9448b34daab223b09c60405160405180910390a361137281612a31565b905061126a565b600080516020612c6b8339815191526113928133611d08565b6127108210156113b55760405163617ab12d60e11b815260040160405180910390fd5b600880549083905560408051828152602081018590527fe6e25add7363f8f8a40cbea9810d3115a33703b10972ef759104219b006574369101610ad4565b600081815260026020526040812061085190611e33565b7fced4eb9faeb19ab0e2e05a20ade58d82157e1035a3fbff4bc38dd5e609f22b936114358133611d08565b428410156114565760405163209768a360e11b815260040160405180910390fd5b8160005b818110156114e857856010600087878581811061147957611479612a05565b905060200201358152602001908152602001600020819055508484828181106114a4576114a4612a05565b90506020020135867f15d20a98e8d4b1247fc51e2f6817929874a0769087776e52268eb1b4c8bdb2dd60405160405180910390a36114e181612a31565b905061145a565b505050505050565b6000828152600160208190526040909120015461150d8133611d08565b610c0c8383611d8e565b6002600054036115395760405162461bcd60e51b81526004016108dc9061297e565b6002600055600e54610100900460ff1680156115685760405163aadfaddd60e01b815260040160405180910390fd5b60085482101561158b57604051636ba4a1c760e01b815260040160405180910390fd5b600061159683611e3d565b905060006115a48285612a4a565b600c805491925060009190826115b983612a31565b909155506040805160608101825233815260208082018681526000838501818152868252600690935293909320915182546001600160a01b0319166001600160a01b039091161782559151600182015590516002909101559050821561165557600554611655906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169133911686611e5a565b61169e6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633730686b3a7b9be2751bb51084a6e0e7db7f1746eb185611e5a565b6040805186815260208101849052908101849052819033907f7cbce37c7b11d322316420484f40c29ce672ad3fa16752551a3dbe6ccfa04e149060600160405180910390a350506001600055505050565b600080516020612c6b8339815191526117088133611d08565b6000600660008781526020019081526020016000206040518060600160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820154815260200160028201548152505090506040518060600160405280866001600160a01b03168152602001858152602001848152506006600088815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020155905050857f7e506b1f11218d4c947d5a59a97fd996c42afc2b024b6aeaec050930eb2b339982600001518784604001518786602001518a604051610a58969594939291906129b5565b600080516020612c6b8339815191526118478133611d08565b600f80549083905560408051828152602081018590527f1071422bad736c3651d3d3b7a4eda70e84e9c85a08f21c955d79ded03bbf06bb9101610ad4565b600080516020612c6b83398151915261189e8133611d08565b600580546001600160a01b038481166001600160a01b0319831681179093556040519116917f15d80a013f22151bc7246e3bc132e12828cde19de98870475e3fa7084015272191610ad49184916129eb565b600080516020612c6b8339815191526119098133611d08565b61271082111561192c57604051637e2df70960e11b815260040160405180910390fd5b600a80549083905560408051828152602081018590527f387269377ae17304805d5f88cea4252e5ca47346783c279aeb9e8627335a49ac9101610ad4565b60026000540361198c5760405162461bcd60e51b81526004016108dc9061297e565b6002600055600e5460ff1680156119b65760405163aadfaddd60e01b815260040160405180910390fd5b6009548210156119d95760405163595bd39f60e11b815260040160405180910390fd5b600d8054600091826119ea83612a31565b909155506040805160608101825233808252602080830188815260008486018181528782526007909352859020935184546001600160a01b0319166001600160a01b03918216178555905160018501559051600290930192909255915163079cc67960e41b81529293507f000000000000000000000000000000000000000000000000000000000000000016916379cc679091611a8b918790600401612a5d565b600060405180830381600087803b158015611aa557600080fd5b505af1158015611ab9573d6000803e3d6000fd5b50506040518581528392503391507f80ebb30e7c30052bf403a20da869bdd033841684e93930d97c4af74238529b4f9060200160405180910390a35050600160005550565b600260005403611b205760405162461bcd60e51b81526004016108dc9061297e565b6002600055600e5462010000900460ff168015611b505760405163aadfaddd60e01b815260040160405180910390fd5b600f54831015611b735760405163595bd39f60e11b815260040160405180910390fd5b600d805460009182611b8483612a31565b9091555060405163079cc67960e41b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906379cc679090611bd99033908890600401612a5d565b600060405180830381600087803b158015611bf357600080fd5b505af1158015611c07573d6000803e3d6000fd5b505060408051878152602081018790528493503392507fad2102c6abc98f954bd5d61e6c0d19764db331f63019296309309a34f70e66a6910160405180910390a3505060016000555050565b611c5d82826111ac565b610c8b5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b60006111a5836001600160a01b038416611eba565b60006001600160e01b03198216637965db0b60e01b148061085157506301ffc9a760e01b6001600160e01b0319831614610851565b611d1282826111ac565b610c8b57611d2a816001600160a01b03166014611f09565b611d35836020611f09565b604051602001611d46929190612a9a565b60408051601f198184030181529082905262461bcd60e51b82526108dc91600401612b09565b611d768282611c53565b6000828152600260205260409020610c0c9082611cbe565b611d9882826120a5565b6000828152600260205260409020610c0c908261210c565b6000818152601060205260408120549003611dde57604051630ad2496160e31b815260040160405180910390fd5b600081815260106020526040902054421015611e0d5760405163309b0bcf60e21b815260040160405180910390fd5b611e1681612121565b600090815260106020526040812055565b60006111a58383612315565b6000610851825490565b6000612710600a5483611e509190612b3c565b6108519190612b5b565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611eb490859061233f565b50505050565b6000818152600183016020526040812054611f0157508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610851565b506000610851565b60606000611f18836002612b3c565b611f23906002612b7d565b67ffffffffffffffff811115611f3b57611f3b612b90565b6040519080825280601f01601f191660200182016040528015611f65576020820181803683370190505b509050600360fc1b81600081518110611f8057611f80612a05565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611faf57611faf612a05565b60200101906001600160f81b031916908160001a9053506000611fd3846002612b3c565b611fde906001612b7d565b90505b6001811115612056576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061201257612012612a05565b1a60f81b82828151811061202857612028612a05565b60200101906001600160f81b031916908160001a90535060049490941c9361204f81612ba6565b9050611fe1565b5083156111a55760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108dc565b6120af82826111ac565b15610c8b5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006111a5836001600160a01b038416612411565b6000818152600660209081526040808320815160608101835281546001600160a01b031681526001820154938101939093526002015490820181905290910361217d57604051638718c77160e01b815260040160405180910390fd5b6003546040828101519051630e75722360e41b815260048101919091526000916001600160a01b03169063e757223090602401602060405180830381865afa1580156121cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f19190612bbd565b90506000612203836020015183612504565b60008581526006602052604080822080546001600160a01b03191681556001810183905560020191909155845190516340c10f1960e01b81529192507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316916340c10f199161227e918590600401612a5d565b600060405180830381600087803b15801561229857600080fd5b505af11580156122ac573d6000803e3d6000fd5b50508451602080870151604080890151815188815293840192909252820187905260608201528793506001600160a01b0390911691507fdd602cc9cb236502fb74f091872b4025184011dd96eee41099caa260842f20249060800160405180910390a350505050565b600082600001828154811061232c5761232c612a05565b9060005260206000200154905092915050565b6000612394826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125369092919063ffffffff16565b805190915015610c0c57808060200190518101906123b29190612bd6565b610c0c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108dc565b600081815260018301602052604081205480156124fa576000612435600183612a4a565b855490915060009061244990600190612a4a565b90508181146124ae57600086600001828154811061246957612469612a05565b906000526020600020015490508087600001848154811061248c5761248c612a05565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806124bf576124bf612bf8565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610851565b6000915050610851565b60008061251084612545565b61252290670de0b6b3a7640000612b3c565b905061252e8382612b5b565b949350505050565b606061252e8484600085612571565b60006108517f000000000000000000000000000000000000000000000000000000000000000083612b3c565b6060824710156125d25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016108dc565b6001600160a01b0385163b6126295760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108dc565b600080866001600160a01b031685876040516126459190612c0e565b60006040518083038185875af1925050503d8060008114612682576040519150601f19603f3d011682016040523d82523d6000602084013e612687565b606091505b50915091506126978282866126a2565b979650505050505050565b606083156126b15750816111a5565b8251156126c15782518084602001fd5b8160405162461bcd60e51b81526004016108dc9190612b09565b6000602082840312156126ed57600080fd5b81356001600160e01b0319811681146111a557600080fd5b60008083601f84011261271757600080fd5b50813567ffffffffffffffff81111561272f57600080fd5b6020830191508360208260051b850101111561274a57600080fd5b9250929050565b6000806020838503121561276457600080fd5b823567ffffffffffffffff81111561277b57600080fd5b61278785828601612705565b90969095509350505050565b6000602082840312156127a557600080fd5b5035919050565b80356001600160a01b03811681146127c357600080fd5b919050565b600080600080608085870312156127de57600080fd5b843593506127ee602086016127ac565b93969395505050506040820135916060013590565b60006020828403121561281557600080fd5b6111a5826127ac565b600080600080600060a0868803121561283657600080fd5b85359450612846602087016127ac565b94979496505050506040830135926060810135926080909101359150565b6000806040838503121561287757600080fd5b82359150612887602084016127ac565b90509250929050565b6001600160a01b0391909116815260200190565b600080600080604085870312156128ba57600080fd5b843567ffffffffffffffff808211156128d257600080fd5b6128de88838901612705565b909650945060208701359150808211156128f757600080fd5b5061290487828801612705565b95989497509550505050565b6000806040838503121561292357600080fd5b50508035926020909101359150565b60008060006040848603121561294757600080fd5b83359250602084013567ffffffffffffffff81111561296557600080fd5b61297186828701612705565b9497909650939450505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6001600160a01b03968716815294909516602085015260408401929092526060830152608082015260a081019190915260c00190565b6001600160a01b0392831681529116602082015260400190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612a4357612a43612a1b565b5060010190565b8181038181111561085157610851612a1b565b6001600160a01b03929092168252602082015260400190565b60005b83811015612a91578181015183820152602001612a79565b50506000910152565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351612acc816017850160208801612a76565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612afd816028840160208801612a76565b01602801949350505050565b6020815260008251806020840152612b28816040850160208701612a76565b601f01601f19169190910160400192915050565b6000816000190483118215151615612b5657612b56612a1b565b500290565b600082612b7857634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561085157610851612a1b565b634e487b7160e01b600052604160045260246000fd5b600081612bb557612bb5612a1b565b506000190190565b600060208284031215612bcf57600080fd5b5051919050565b600060208284031215612be857600080fd5b815180151581146111a557600080fd5b634e487b7160e01b600052603160045260246000fd5b60008251612c20818460208701612a76565b919091019291505056fe9ac2c43e905fe4f0c030a0b0e4b805a284e79da32a5c9c71be1c68dd79bbb89d830a9081649e91840eb0274e99b47626a896cfa0f4dd591cb31cd5060e566c0d8c6dd8af24db306eb580672d47cf7dd23b8394bf74074f8ac14b948512ecdb03a2646970667358221220a5f01a3b62dfa9f17c04b2f1f1343fbb1dabd04d0fd0e497dfe972ef494d917464736f6c63430008100033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x324 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8A07DF1E GT PUSH2 0x1A9 JUMPI DUP1 PUSH4 0xD0C835CE GT PUSH2 0xEF JUMPI DUP1 PUSH4 0xE1A45218 GT PUSH2 0x9D JUMPI DUP1 PUSH4 0xE1A45218 EQ PUSH2 0x78A JUMPI DUP1 PUSH4 0xE4107C97 EQ PUSH2 0x793 JUMPI DUP1 PUSH4 0xE74B981B EQ PUSH2 0x7A6 JUMPI DUP1 PUSH4 0xEDDD0D9C EQ PUSH2 0x7B9 JUMPI DUP1 PUSH4 0xEE75D7D4 EQ PUSH2 0x7CC JUMPI DUP1 PUSH4 0xEEB3C910 EQ PUSH2 0x7DF JUMPI DUP1 PUSH4 0xF4A20307 EQ PUSH2 0x7F2 JUMPI DUP1 PUSH4 0xF80A36D6 EQ PUSH2 0x819 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xD0C835CE EQ PUSH2 0x6FB JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x70E JUMPI DUP1 PUSH4 0xD592D815 EQ PUSH2 0x721 JUMPI DUP1 PUSH4 0xD8DFEB45 EQ PUSH2 0x734 JUMPI DUP1 PUSH4 0xDD45EEF6 EQ PUSH2 0x75B JUMPI DUP1 PUSH4 0xDE6AFA82 EQ PUSH2 0x76E JUMPI DUP1 PUSH4 0xE0F486EF EQ PUSH2 0x781 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA217FDDF GT PUSH2 0x157 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x659 JUMPI DUP1 PUSH4 0xA6138ED9 EQ PUSH2 0x661 JUMPI DUP1 PUSH4 0xAA85C1DF EQ PUSH2 0x674 JUMPI DUP1 PUSH4 0xAAB483D6 EQ PUSH2 0x687 JUMPI DUP1 PUSH4 0xBB13245F EQ PUSH2 0x69A JUMPI DUP1 PUSH4 0xBCC70283 EQ PUSH2 0x6C1 JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH2 0x6D6 JUMPI DUP1 PUSH4 0xCD4D0BCF EQ PUSH2 0x6E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8A07DF1E EQ PUSH2 0x5B5 JUMPI DUP1 PUSH4 0x8D044C06 EQ PUSH2 0x5D5 JUMPI DUP1 PUSH4 0x9010D07C EQ PUSH2 0x5DD JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x5F0 JUMPI DUP1 PUSH4 0x926D7D7F EQ PUSH2 0x603 JUMPI DUP1 PUSH4 0x92BCCB80 EQ PUSH2 0x62A JUMPI DUP1 PUSH4 0x95E4B251 EQ PUSH2 0x632 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x38FED708 GT PUSH2 0x26E JUMPI DUP1 PUSH4 0x4EF1CCD1 GT PUSH2 0x21C JUMPI DUP1 PUSH4 0x4EF1CCD1 EQ PUSH2 0x506 JUMPI DUP1 PUSH4 0x525DECD6 EQ PUSH2 0x519 JUMPI DUP1 PUSH4 0x5D591D68 EQ PUSH2 0x52C JUMPI DUP1 PUSH4 0x73A95DDD EQ PUSH2 0x565 JUMPI DUP1 PUSH4 0x7DBC1DF0 EQ PUSH2 0x572 JUMPI DUP1 PUSH4 0x837018FA EQ PUSH2 0x585 JUMPI DUP1 PUSH4 0x85C4E79E EQ PUSH2 0x58D JUMPI DUP1 PUSH4 0x87E2D06E EQ PUSH2 0x5A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x38FED708 EQ PUSH2 0x441 JUMPI DUP1 PUSH4 0x3BFA67FE EQ PUSH2 0x49F JUMPI DUP1 PUSH4 0x4565E9FF EQ PUSH2 0x4C7 JUMPI DUP1 PUSH4 0x458F5815 EQ PUSH2 0x4DA JUMPI DUP1 PUSH4 0x46904840 EQ PUSH2 0x4E3 JUMPI DUP1 PUSH4 0x49CBBF2A EQ PUSH2 0x4F6 JUMPI DUP1 PUSH4 0x4DFE7AF2 EQ PUSH2 0x4FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x244F5ACF GT PUSH2 0x2D6 JUMPI DUP1 PUSH4 0x244F5ACF EQ PUSH2 0x3A2 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x3B5 JUMPI DUP1 PUSH4 0x258492CD EQ PUSH2 0x3D9 JUMPI DUP1 PUSH4 0x29390370 EQ PUSH2 0x3EC JUMPI DUP1 PUSH4 0x2B5ECEFF EQ PUSH2 0x3FF JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x412 JUMPI DUP1 PUSH4 0x354181F3 EQ PUSH2 0x425 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x42E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x329 JUMPI DUP1 PUSH4 0x78A6BE8 EQ PUSH2 0x351 JUMPI DUP1 PUSH4 0x7BDA1BB EQ PUSH2 0x374 JUMPI DUP1 PUSH4 0x80C279A EQ PUSH2 0x37D JUMPI DUP1 PUSH4 0x12589FB5 EQ PUSH2 0x386 JUMPI DUP1 PUSH4 0x13966DB5 EQ PUSH2 0x38F JUMPI DUP1 PUSH4 0x2056AA12 EQ PUSH2 0x398 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x33C PUSH2 0x337 CALLDATASIZE PUSH1 0x4 PUSH2 0x26DB JUMP JUMPDEST PUSH2 0x82C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x366 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C6B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x348 JUMP JUMPDEST PUSH2 0x366 PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST PUSH2 0x366 PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x366 PUSH1 0xF SLOAD DUP2 JUMP JUMPDEST PUSH2 0x366 PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x857 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3A0 PUSH2 0x3B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x2751 JUMP JUMPDEST PUSH2 0x8BA JUMP JUMPDEST PUSH2 0x366 PUSH2 0x3C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2793 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x3E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x27C8 JUMP JUMPDEST PUSH2 0x919 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x3FA CALLDATASIZE PUSH1 0x4 PUSH2 0x2803 JUMP JUMPDEST PUSH2 0xA68 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x40D CALLDATASIZE PUSH1 0x4 PUSH2 0x281E JUMP JUMPDEST PUSH2 0xAE1 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x420 CALLDATASIZE PUSH1 0x4 PUSH2 0x2864 JUMP JUMPDEST PUSH2 0xBE5 JUMP JUMPDEST PUSH2 0x366 PUSH1 0xD SLOAD DUP2 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x43C CALLDATASIZE PUSH1 0x4 PUSH2 0x2864 JUMP JUMPDEST PUSH2 0xC11 JUMP JUMPDEST PUSH2 0x47A PUSH2 0x44F CALLDATASIZE PUSH1 0x4 PUSH2 0x2793 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 SWAP1 DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x348 JUMP JUMPDEST PUSH2 0x4BA PUSH20 0x686B3A7B9BE2751BB51084A6E0E7DB7F1746EB1 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x348 SWAP2 SWAP1 PUSH2 0x2890 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x4D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x2751 JUMP JUMPDEST PUSH2 0xC8F JUMP JUMPDEST PUSH2 0x366 PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x4BA SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0xD29 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0xD83 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x514 CALLDATASIZE PUSH1 0x4 PUSH2 0x2793 JUMP JUMPDEST PUSH2 0xDD8 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x527 CALLDATASIZE PUSH1 0x4 PUSH2 0x2803 JUMP JUMPDEST PUSH2 0xE52 JUMP JUMPDEST PUSH2 0x47A PUSH2 0x53A CALLDATASIZE PUSH1 0x4 PUSH2 0x2793 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 SWAP1 DUP4 JUMP JUMPDEST PUSH1 0xE SLOAD PUSH2 0x33C SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x580 CALLDATASIZE PUSH1 0x4 PUSH2 0x2793 JUMP JUMPDEST PUSH2 0xEBE JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0xF38 JUMP JUMPDEST PUSH2 0x366 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C2B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x5B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x28A4 JUMP JUMPDEST PUSH2 0xF8C JUMP JUMPDEST PUSH2 0x366 PUSH2 0x5C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2793 JUMP JUMPDEST PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x113A JUMP JUMPDEST PUSH2 0x4BA PUSH2 0x5EB CALLDATASIZE PUSH1 0x4 PUSH2 0x2910 JUMP JUMPDEST PUSH2 0x118D JUMP JUMPDEST PUSH2 0x33C PUSH2 0x5FE CALLDATASIZE PUSH1 0x4 PUSH2 0x2864 JUMP JUMPDEST PUSH2 0x11AC JUMP JUMPDEST PUSH2 0x366 PUSH32 0xE2B7FB3B832174769106DAEBCFD6D1970523240DDA11281102DB9363B83B0DC4 DUP2 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x11D7 JUMP JUMPDEST PUSH2 0x4BA PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x366 PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0x4BA SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x682 CALLDATASIZE PUSH1 0x4 PUSH2 0x28A4 JUMP JUMPDEST PUSH2 0x122D JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x695 CALLDATASIZE PUSH1 0x4 PUSH2 0x2793 JUMP JUMPDEST PUSH2 0x1379 JUMP JUMPDEST PUSH2 0x366 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x366 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C4B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x366 PUSH2 0x6E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2793 JUMP JUMPDEST PUSH2 0x13F3 JUMP JUMPDEST PUSH1 0xE SLOAD PUSH2 0x33C SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x709 CALLDATASIZE PUSH1 0x4 PUSH2 0x2932 JUMP JUMPDEST PUSH2 0x140A JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x71C CALLDATASIZE PUSH1 0x4 PUSH2 0x2864 JUMP JUMPDEST PUSH2 0x14F0 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x72F CALLDATASIZE PUSH1 0x4 PUSH2 0x2793 JUMP JUMPDEST PUSH2 0x1517 JUMP JUMPDEST PUSH2 0x4BA PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0xE SLOAD PUSH2 0x33C SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x77C CALLDATASIZE PUSH1 0x4 PUSH2 0x27C8 JUMP JUMPDEST PUSH2 0x16EF JUMP JUMPDEST PUSH2 0x366 PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x366 PUSH2 0x2710 DUP2 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x7A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x2793 JUMP JUMPDEST PUSH2 0x182E JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x7B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2803 JUMP JUMPDEST PUSH2 0x1885 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x7C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2793 JUMP JUMPDEST PUSH2 0x18F0 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x4BA SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x7ED CALLDATASIZE PUSH1 0x4 PUSH2 0x2793 JUMP JUMPDEST PUSH2 0x196A JUMP JUMPDEST PUSH2 0x366 PUSH32 0xCED4EB9FAEB19AB0E2E05A20ADE58D82157E1035A3FBFF4BC38DD5E609F22B93 DUP2 JUMP JUMPDEST PUSH2 0x3A0 PUSH2 0x827 CALLDATASIZE PUSH1 0x4 PUSH2 0x2910 JUMP JUMPDEST PUSH2 0x1AFE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5A05180F PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x851 JUMPI POP PUSH2 0x851 DUP3 PUSH2 0x1CD3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C2B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x870 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0xE DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xCD71257F2998474633E94CFFFA045014068F6218FFDCA256B6F4AA9D5F15FB89 SWAP1 PUSH2 0x8AF SWAP1 CALLER SWAP1 PUSH2 0x2890 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD SUB PUSH2 0x8E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8DC SWAP1 PUSH2 0x297E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH1 0xE SLOAD PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x90F JUMPI PUSH1 0x40 MLOAD PUSH4 0xAADFADDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C6B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x932 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE POP PUSH1 0x7 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE SWAP1 POP POP DUP6 PUSH32 0x5A0C55C421AE3AAC2379811ECA16AAEE32B6E64411322B624118D4219B9350A0 DUP3 PUSH1 0x0 ADD MLOAD DUP8 DUP5 PUSH1 0x40 ADD MLOAD DUP8 DUP7 PUSH1 0x20 ADD MLOAD DUP11 PUSH1 0x40 MLOAD PUSH2 0xA58 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x29B5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C6B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xA81 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP1 PUSH32 0x801352E72EF9B80B3992CCBEDF07AB0E133E7DA7AACCF0024ABF23F4F32EB99A SWAP1 PUSH2 0xAD4 SWAP1 DUP4 SWAP1 DUP7 SWAP1 PUSH2 0x29EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH32 0xE2B7FB3B832174769106DAEBCFD6D1970523240DDA11281102DB9363B83B0DC4 PUSH2 0xB0C DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0xB42 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AEECEBF PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD DUP11 DUP2 MSTORE PUSH1 0x0 DUP7 DUP9 ADD DUP2 DUP2 MSTORE DUP15 DUP3 MSTORE PUSH1 0x6 DUP5 MSTORE SWAP1 DUP9 SWAP1 KECCAK256 SWAP7 MLOAD DUP8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP6 AND SWAP5 SWAP1 SWAP5 OR DUP7 SSTORE MLOAD PUSH1 0x1 DUP7 ADD SSTORE SWAP2 MLOAD PUSH1 0x2 SWAP1 SWAP5 ADD SWAP4 SWAP1 SWAP4 SSTORE DUP4 MLOAD DUP9 DUP2 MSTORE SWAP1 DUP2 ADD DUP8 SWAP1 MSTORE SWAP3 DUP4 ADD DUP6 SWAP1 MSTORE SWAP1 SWAP2 DUP9 SWAP2 PUSH32 0xC985471D1CB1BB75DA0D54FA5AB10F7171E952CEFCC0BF4FC7C2546C19D1811F SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH2 0xC02 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH2 0xC0C DUP4 DUP4 PUSH2 0x1D6C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0xC81 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x8DC JUMP JUMPDEST PUSH2 0xC8B DUP3 DUP3 PUSH2 0x1D8E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD SUB PUSH2 0xCB1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8DC SWAP1 PUSH2 0x297E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH1 0xE SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 ISZERO PUSH2 0xCE0 JUMPI PUSH1 0x40 MLOAD PUSH4 0xAADFADDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xD1D JUMPI PUSH2 0xD0D DUP6 DUP6 DUP4 DUP2 DUP2 LT PUSH2 0xD01 JUMPI PUSH2 0xD01 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x1DB0 JUMP JUMPDEST PUSH2 0xD16 DUP2 PUSH2 0x2A31 JUMP JUMPDEST SWAP1 POP PUSH2 0xCE4 JUMP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C2B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xD42 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0xE DUP1 SLOAD PUSH3 0xFF0000 NOT AND PUSH3 0x10000 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xDC41A92196CCC1AB8149C01BC68C2F506B10A7BB5CD2693C9516D176F5381FF4 SWAP1 PUSH2 0x8AF SWAP1 CALLER SWAP1 PUSH2 0x2890 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C6B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xD9C DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0xE DUP1 SLOAD PUSH3 0xFF0000 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x53A8C40FC17C78D38E2C06AA8D2C550C1ACBF7B30D087DBDA289AB3DD41C235C SWAP1 PUSH2 0x8AF SWAP1 CALLER SWAP1 PUSH2 0x2890 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C6B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xDF1 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH2 0x2710 DUP3 LT ISZERO PUSH2 0xE14 JUMPI PUSH1 0x40 MLOAD PUSH4 0x617AB12D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9 DUP1 SLOAD SWAP1 DUP4 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE PUSH32 0xFDAF6ED728CEF208E62328A008209556F8281F3062B14DD08AAAA90FA1594211 SWAP2 ADD PUSH2 0xAD4 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C6B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xE6B DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP1 PUSH32 0xB09F298B2812193D5ADA18BEAADD6CB8F12B3640926D99DE46E2A65394DF829D SWAP1 PUSH2 0xAD4 SWAP1 DUP4 SWAP1 DUP7 SWAP1 PUSH2 0x29EB JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C6B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xED7 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH2 0x2710 DUP3 GT ISZERO PUSH2 0xEFA JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E2DF709 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xB DUP1 SLOAD SWAP1 DUP4 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE PUSH32 0x2956ACFE8584FB02384E06C675EE215BF10D55C3DE1E6FF9B2F621E8A40C6470 SWAP2 ADD PUSH2 0xAD4 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C6B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xF51 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0xE DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x94482EE2B195C365DBBC2D689FD5A088D2B219ABE44360BA8895525C9471D66F SWAP1 PUSH2 0x8AF SWAP1 CALLER SWAP1 PUSH2 0x2890 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C4B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xFA5 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST DUP4 DUP3 DUP2 EQ PUSH2 0xFC6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xCC6E40B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1131 JUMPI PUSH1 0x0 PUSH1 0x6 DUP2 DUP10 DUP10 DUP6 DUP2 DUP2 LT PUSH2 0xFE8 JUMPI PUSH2 0xFE8 PUSH2 0x2A05 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP3 SWAP1 SWAP3 ADD CALLDATALOAD DUP4 MSTORE POP DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x1029 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5A8A45B PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 PUSH1 0x0 DUP9 DUP9 DUP5 DUP2 DUP2 LT PUSH2 0x103F JUMPI PUSH2 0x103F PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x0 EQ PUSH2 0x1078 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1139F309 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 DUP5 DUP3 DUP2 DUP2 LT PUSH2 0x108A JUMPI PUSH2 0x108A PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x6 PUSH1 0x0 DUP10 DUP10 DUP6 DUP2 DUP2 LT PUSH2 0x10A7 JUMPI PUSH2 0x10A7 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP DUP5 DUP5 DUP3 DUP2 DUP2 LT PUSH2 0x10D5 JUMPI PUSH2 0x10D5 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP4 DUP2 DUP2 LT PUSH2 0x10EE JUMPI PUSH2 0x10EE PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH32 0xC2055184BBC2D10B90BF7DF17A84F8BDDA6B52377A976E41E0C1610FFFAFC0D7 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x112A DUP2 PUSH2 0x2A31 JUMP JUMPDEST SWAP1 POP PUSH2 0xFC9 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C6B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x1153 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0xE DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xC641B9C4AFA539CEDCBE2E5F3E47D9F092175B5D0B8AE72DFFA634A3EB3E47E4 SWAP1 PUSH2 0x8AF SWAP1 CALLER SWAP1 PUSH2 0x2890 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x11A5 SWAP1 DUP4 PUSH2 0x1E27 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C2B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x11F0 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0xE DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x71E0406677C0570B2A66B1A4FEECCF5C1CBA2D6729435461E27A312B15410D04 SWAP1 PUSH2 0x8AF SWAP1 CALLER SWAP1 PUSH2 0x2890 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C4B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x1246 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST DUP4 DUP3 DUP2 EQ PUSH2 0x1267 JUMPI PUSH1 0x40 MLOAD PUSH4 0xCC6E40B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1131 JUMPI PUSH1 0x7 PUSH1 0x0 DUP9 DUP9 DUP5 DUP2 DUP2 LT PUSH2 0x1288 JUMPI PUSH2 0x1288 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x0 EQ PUSH2 0x12C1 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1139F309 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 DUP5 DUP3 DUP2 DUP2 LT PUSH2 0x12D3 JUMPI PUSH2 0x12D3 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x7 PUSH1 0x0 DUP10 DUP10 DUP6 DUP2 DUP2 LT PUSH2 0x12F0 JUMPI PUSH2 0x12F0 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP DUP5 DUP5 DUP3 DUP2 DUP2 LT PUSH2 0x131E JUMPI PUSH2 0x131E PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP4 DUP2 DUP2 LT PUSH2 0x1337 JUMPI PUSH2 0x1337 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH31 0x5E86A70F400D1820AB5A0573A2BE911D831AB28FE2E9448B34DAAB223B09C PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x1372 DUP2 PUSH2 0x2A31 JUMP JUMPDEST SWAP1 POP PUSH2 0x126A JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C6B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x1392 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH2 0x2710 DUP3 LT ISZERO PUSH2 0x13B5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x617AB12D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x8 DUP1 SLOAD SWAP1 DUP4 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE PUSH32 0xE6E25ADD7363F8F8A40CBEA9810D3115A33703B10972EF759104219B00657436 SWAP2 ADD PUSH2 0xAD4 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x851 SWAP1 PUSH2 0x1E33 JUMP JUMPDEST PUSH32 0xCED4EB9FAEB19AB0E2E05A20ADE58D82157E1035A3FBFF4BC38DD5E609F22B93 PUSH2 0x1435 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST TIMESTAMP DUP5 LT ISZERO PUSH2 0x1456 JUMPI PUSH1 0x40 MLOAD PUSH4 0x209768A3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x14E8 JUMPI DUP6 PUSH1 0x10 PUSH1 0x0 DUP8 DUP8 DUP6 DUP2 DUP2 LT PUSH2 0x1479 JUMPI PUSH2 0x1479 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP5 DUP5 DUP3 DUP2 DUP2 LT PUSH2 0x14A4 JUMPI PUSH2 0x14A4 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP7 PUSH32 0x15D20A98E8D4B1247FC51E2F6817929874A0769087776E52268EB1B4C8BDB2DD PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x14E1 DUP2 PUSH2 0x2A31 JUMP JUMPDEST SWAP1 POP PUSH2 0x145A JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH2 0x150D DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH2 0xC0C DUP4 DUP4 PUSH2 0x1D8E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD SUB PUSH2 0x1539 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8DC SWAP1 PUSH2 0x297E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH1 0xE SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x1568 JUMPI PUSH1 0x40 MLOAD PUSH4 0xAADFADDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x8 SLOAD DUP3 LT ISZERO PUSH2 0x158B JUMPI PUSH1 0x40 MLOAD PUSH4 0x6BA4A1C7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1596 DUP4 PUSH2 0x1E3D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x15A4 DUP3 DUP6 PUSH2 0x2A4A JUMP JUMPDEST PUSH1 0xC DUP1 SLOAD SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 SWAP1 DUP3 PUSH2 0x15B9 DUP4 PUSH2 0x2A31 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE CALLER DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP7 DUP2 MSTORE PUSH1 0x0 DUP4 DUP6 ADD DUP2 DUP2 MSTORE DUP7 DUP3 MSTORE PUSH1 0x6 SWAP1 SWAP4 MSTORE SWAP4 SWAP1 SWAP4 KECCAK256 SWAP2 MLOAD DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND OR DUP3 SSTORE SWAP2 MLOAD PUSH1 0x1 DUP3 ADD SSTORE SWAP1 MLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SSTORE SWAP1 POP DUP3 ISZERO PUSH2 0x1655 JUMPI PUSH1 0x5 SLOAD PUSH2 0x1655 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND SWAP2 CALLER SWAP2 AND DUP7 PUSH2 0x1E5A JUMP JUMPDEST PUSH2 0x169E PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND CALLER PUSH20 0x686B3A7B9BE2751BB51084A6E0E7DB7F1746EB1 DUP6 PUSH2 0x1E5A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE DUP2 SWAP1 CALLER SWAP1 PUSH32 0x7CBCE37C7B11D322316420484F40C29CE672AD3FA16752551A3DBE6CCFA04E14 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C6B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x1708 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE POP PUSH1 0x6 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE SWAP1 POP POP DUP6 PUSH32 0x7E506B1F11218D4C947D5A59A97FD996C42AFC2B024B6AEAEC050930EB2B3399 DUP3 PUSH1 0x0 ADD MLOAD DUP8 DUP5 PUSH1 0x40 ADD MLOAD DUP8 DUP7 PUSH1 0x20 ADD MLOAD DUP11 PUSH1 0x40 MLOAD PUSH2 0xA58 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x29B5 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C6B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x1847 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0xF DUP1 SLOAD SWAP1 DUP4 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE PUSH32 0x1071422BAD736C3651D3D3B7A4EDA70E84E9C85A08F21C955D79DED03BBF06BB SWAP2 ADD PUSH2 0xAD4 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C6B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x189E DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 PUSH32 0x15D80A013F22151BC7246E3BC132E12828CDE19DE98870475E3FA70840152721 SWAP2 PUSH2 0xAD4 SWAP2 DUP5 SWAP2 PUSH2 0x29EB JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2C6B DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x1909 DUP2 CALLER PUSH2 0x1D08 JUMP JUMPDEST PUSH2 0x2710 DUP3 GT ISZERO PUSH2 0x192C JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E2DF709 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xA DUP1 SLOAD SWAP1 DUP4 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE PUSH32 0x387269377AE17304805D5F88CEA4252E5CA47346783C279AEB9E8627335A49AC SWAP2 ADD PUSH2 0xAD4 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD SUB PUSH2 0x198C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8DC SWAP1 PUSH2 0x297E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH1 0xE SLOAD PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x19B6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xAADFADDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9 SLOAD DUP3 LT ISZERO PUSH2 0x19D9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x595BD39F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xD DUP1 SLOAD PUSH1 0x0 SWAP2 DUP3 PUSH2 0x19EA DUP4 PUSH2 0x2A31 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE CALLER DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP9 DUP2 MSTORE PUSH1 0x0 DUP5 DUP7 ADD DUP2 DUP2 MSTORE DUP8 DUP3 MSTORE PUSH1 0x7 SWAP1 SWAP4 MSTORE DUP6 SWAP1 KECCAK256 SWAP4 MLOAD DUP5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND OR DUP6 SSTORE SWAP1 MLOAD PUSH1 0x1 DUP6 ADD SSTORE SWAP1 MLOAD PUSH1 0x2 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP2 MLOAD PUSH4 0x79CC679 PUSH1 0xE4 SHL DUP2 MSTORE SWAP3 SWAP4 POP PUSH32 0x0 AND SWAP2 PUSH4 0x79CC6790 SWAP2 PUSH2 0x1A8B SWAP2 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x2A5D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1AA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1AB9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD DUP6 DUP2 MSTORE DUP4 SWAP3 POP CALLER SWAP2 POP PUSH32 0x80EBB30E7C30052BF403A20DA869BDD033841684E93930D97C4AF74238529B4F SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD SUB PUSH2 0x1B20 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8DC SWAP1 PUSH2 0x297E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH1 0xE SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x1B50 JUMPI PUSH1 0x40 MLOAD PUSH4 0xAADFADDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xF SLOAD DUP4 LT ISZERO PUSH2 0x1B73 JUMPI PUSH1 0x40 MLOAD PUSH4 0x595BD39F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xD DUP1 SLOAD PUSH1 0x0 SWAP2 DUP3 PUSH2 0x1B84 DUP4 PUSH2 0x2A31 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH1 0x40 MLOAD PUSH4 0x79CC679 PUSH1 0xE4 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x79CC6790 SWAP1 PUSH2 0x1BD9 SWAP1 CALLER SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x2A5D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1BF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1C07 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE DUP5 SWAP4 POP CALLER SWAP3 POP PUSH32 0xAD2102C6ABC98F954BD5D61E6C0D19764DB331F63019296309309A34F70E66A6 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP POP JUMP JUMPDEST PUSH2 0x1C5D DUP3 DUP3 PUSH2 0x11AC JUMP JUMPDEST PUSH2 0xC8B JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP1 DUP7 MSTORE SWAP3 MSTORE DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE SWAP1 MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11A5 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1EBA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x851 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x851 JUMP JUMPDEST PUSH2 0x1D12 DUP3 DUP3 PUSH2 0x11AC JUMP JUMPDEST PUSH2 0xC8B JUMPI PUSH2 0x1D2A DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x14 PUSH2 0x1F09 JUMP JUMPDEST PUSH2 0x1D35 DUP4 PUSH1 0x20 PUSH2 0x1F09 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1D46 SWAP3 SWAP2 SWAP1 PUSH2 0x2A9A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x8DC SWAP2 PUSH1 0x4 ADD PUSH2 0x2B09 JUMP JUMPDEST PUSH2 0x1D76 DUP3 DUP3 PUSH2 0x1C53 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xC0C SWAP1 DUP3 PUSH2 0x1CBE JUMP JUMPDEST PUSH2 0x1D98 DUP3 DUP3 PUSH2 0x20A5 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xC0C SWAP1 DUP3 PUSH2 0x210C JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SUB PUSH2 0x1DDE JUMPI PUSH1 0x40 MLOAD PUSH4 0xAD24961 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD TIMESTAMP LT ISZERO PUSH2 0x1E0D JUMPI PUSH1 0x40 MLOAD PUSH4 0x309B0BCF PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1E16 DUP2 PUSH2 0x2121 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11A5 DUP4 DUP4 PUSH2 0x2315 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x851 DUP3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2710 PUSH1 0xA SLOAD DUP4 PUSH2 0x1E50 SWAP2 SWAP1 PUSH2 0x2B3C JUMP JUMPDEST PUSH2 0x851 SWAP2 SWAP1 PUSH2 0x2B5B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x84 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x23B872DD PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x1EB4 SWAP1 DUP6 SWAP1 PUSH2 0x233F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x1F01 JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x851 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x851 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1F18 DUP4 PUSH1 0x2 PUSH2 0x2B3C JUMP JUMPDEST PUSH2 0x1F23 SWAP1 PUSH1 0x2 PUSH2 0x2B7D JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1F3B JUMPI PUSH2 0x1F3B PUSH2 0x2B90 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1F65 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1F80 JUMPI PUSH2 0x1F80 PUSH2 0x2A05 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1FAF JUMPI PUSH2 0x1FAF PUSH2 0x2A05 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x1FD3 DUP5 PUSH1 0x2 PUSH2 0x2B3C JUMP JUMPDEST PUSH2 0x1FDE SWAP1 PUSH1 0x1 PUSH2 0x2B7D JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x2056 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x2012 JUMPI PUSH2 0x2012 PUSH2 0x2A05 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2028 JUMPI PUSH2 0x2028 PUSH2 0x2A05 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x204F DUP2 PUSH2 0x2BA6 JUMP JUMPDEST SWAP1 POP PUSH2 0x1FE1 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x11A5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8DC JUMP JUMPDEST PUSH2 0x20AF DUP3 DUP3 PUSH2 0x11AC JUMP JUMPDEST ISZERO PUSH2 0xC8B JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11A5 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x2411 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0x60 DUP2 ADD DUP4 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 ADD SLOAD SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP2 SUB PUSH2 0x217D JUMPI PUSH1 0x40 MLOAD PUSH4 0x8718C771 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 DUP3 DUP2 ADD MLOAD SWAP1 MLOAD PUSH4 0xE757223 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xE7572230 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x21CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x21F1 SWAP2 SWAP1 PUSH2 0x2BBD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2203 DUP4 PUSH1 0x20 ADD MLOAD DUP4 PUSH2 0x2504 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP4 SWAP1 SSTORE PUSH1 0x2 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP5 MLOAD SWAP1 MLOAD PUSH4 0x40C10F19 PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x40C10F19 SWAP2 PUSH2 0x227E SWAP2 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2A5D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2298 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x22AC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP DUP5 MLOAD PUSH1 0x20 DUP1 DUP8 ADD MLOAD PUSH1 0x40 DUP1 DUP10 ADD MLOAD DUP2 MLOAD DUP9 DUP2 MSTORE SWAP4 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 ADD DUP8 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD MSTORE DUP8 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 POP PUSH32 0xDD602CC9CB236502FB74F091872B4025184011DD96EEE41099CAA260842F2024 SWAP1 PUSH1 0x80 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x232C JUMPI PUSH2 0x232C PUSH2 0x2A05 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2394 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2536 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xC0C JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x23B2 SWAP2 SWAP1 PUSH2 0x2BD6 JUMP JUMPDEST PUSH2 0xC0C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x8DC JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x24FA JUMPI PUSH1 0x0 PUSH2 0x2435 PUSH1 0x1 DUP4 PUSH2 0x2A4A JUMP JUMPDEST DUP6 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x2449 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x2A4A JUMP JUMPDEST SWAP1 POP DUP2 DUP2 EQ PUSH2 0x24AE JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2469 JUMPI PUSH2 0x2469 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x248C JUMPI PUSH2 0x248C PUSH2 0x2A05 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP2 DUP3 MSTORE PUSH1 0x1 DUP9 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE JUMPDEST DUP6 SLOAD DUP7 SWAP1 DUP1 PUSH2 0x24BF JUMPI PUSH2 0x24BF PUSH2 0x2BF8 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x851 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x851 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2510 DUP5 PUSH2 0x2545 JUMP JUMPDEST PUSH2 0x2522 SWAP1 PUSH8 0xDE0B6B3A7640000 PUSH2 0x2B3C JUMP JUMPDEST SWAP1 POP PUSH2 0x252E DUP4 DUP3 PUSH2 0x2B5B JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x252E DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x2571 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x851 PUSH32 0x0 DUP4 PUSH2 0x2B3C JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x25D2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x8DC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x2629 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8DC JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x2645 SWAP2 SWAP1 PUSH2 0x2C0E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2682 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2687 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x2697 DUP3 DUP3 DUP7 PUSH2 0x26A2 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x26B1 JUMPI POP DUP2 PUSH2 0x11A5 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x26C1 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8DC SWAP2 SWAP1 PUSH2 0x2B09 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x26ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x11A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2717 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x272F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x274A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2764 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x277B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2787 DUP6 DUP3 DUP7 ADD PUSH2 0x2705 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x27A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x27C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x27DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH2 0x27EE PUSH1 0x20 DUP7 ADD PUSH2 0x27AC JUMP JUMPDEST SWAP4 SWAP7 SWAP4 SWAP6 POP POP POP POP PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x60 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2815 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11A5 DUP3 PUSH2 0x27AC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2836 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH2 0x2846 PUSH1 0x20 DUP8 ADD PUSH2 0x27AC JUMP JUMPDEST SWAP5 SWAP8 SWAP5 SWAP7 POP POP POP POP PUSH1 0x40 DUP4 ADD CALLDATALOAD SWAP3 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP3 PUSH1 0x80 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2877 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x2887 PUSH1 0x20 DUP5 ADD PUSH2 0x27AC JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x28BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x28D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x28DE DUP9 DUP4 DUP10 ADD PUSH2 0x2705 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x28F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2904 DUP8 DUP3 DUP9 ADD PUSH2 0x2705 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2923 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2947 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2965 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2971 DUP7 DUP3 DUP8 ADD PUSH2 0x2705 JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1F SWAP1 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 AND DUP2 MSTORE SWAP5 SWAP1 SWAP6 AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2A43 JUMPI PUSH2 0x2A43 PUSH2 0x2A1B JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x851 JUMPI PUSH2 0x851 PUSH2 0x2A1B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2A91 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2A79 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x2ACC DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2A76 JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x2AFD DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2A76 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2B28 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2A76 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x2B56 JUMPI PUSH2 0x2B56 PUSH2 0x2A1B JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2B78 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x851 JUMPI PUSH2 0x851 PUSH2 0x2A1B JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x2BB5 JUMPI PUSH2 0x2BB5 PUSH2 0x2A1B JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2BCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2BE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x11A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2C20 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2A76 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID SWAP11 0xC2 0xC4 RETURNDATACOPY SWAP1 0x5F 0xE4 CREATE 0xC0 ADDRESS LOG0 0xB0 0xE4 0xB8 SDIV LOG2 DUP5 0xE7 SWAP14 LOG3 0x2A 0x5C SWAP13 PUSH18 0xBE1C68DD79BBB89D830A9081649E91840EB0 0x27 0x4E SWAP10 0xB4 PUSH23 0x26A896CFA0F4DD591CB31CD5060E566C0D8C6DD8AF24DB ADDRESS PUSH15 0xB580672D47CF7DD23B8394BF74074F DUP11 0xC1 0x4B SWAP5 DUP6 SLT 0xEC 0xDB SUB LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA5 CREATE BYTE EXTCODESIZE PUSH3 0xDFA9F1 PUSH29 0x4B2F1F1343FBB1DABD04D0FD0E497DFE972EF494D917464736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"269:3143:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;751:240:4;;;;;;:::i;:::-;;:::i;:::-;;;470:14:22;;463:22;445:41;;433:2;418:18;751:240:4;;;;;;;;2437:66:0;;-1:-1:-1;;;;;;;;;;;2437:66:0;;;;;643:25:22;;;631:2;616:18;2437:66:0;497:177:22;2048:45:0;;;;;;1454:35;;;;;;372:46:1;;;;;;1645:26:0;;;;;;18433:138;;;:::i;:::-;;7766:1397;;;;;;:::i;:::-;;:::i;4002:145:3:-;;;;;;:::i;:::-;4096:7;4120:12;;;:6;:12;;;;;;;;:22;;;4002:145;14060:612:0;;;;;;:::i;:::-;;:::i;16998:201::-;;;;;;:::i;:::-;;:::i;9870:495::-;;;;;;:::i;:::-;;:::i;4375:157:3:-;;;;;;:::i;:::-;;:::i;2129:43:0:-;;;;;;5366:222:3;;;;;;:::i;:::-;;:::i;1251:58:0:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1251:58:0;;;;;;;;;;;-1:-1:-1;;;;;3569:32:22;;;3551:51;;3633:2;3618:18;;3611:34;;;;3661:18;;;3654:34;3539:2;3524:18;1251:58:0;3349:345:22;864:87:0;;909:42;864:87;;;;;;;;;:::i;5714:259::-;;;;;;:::i;:::-;;:::i;1722:32::-;;;;;;1074:27;;;;;-1:-1:-1;;;;;1074:27:0;;;1913:156:1;;;:::i;2140:162::-;;;:::i;14890:400:0:-;;;;;;:::i;:::-;;:::i;17733:227::-;;;;;;:::i;:::-;;:::i;1147:57::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1147:57:0;;;;;;;2327:28;;;;;;;;;16537:309;;;;;;:::i;:::-;;:::i;18845:144::-;;;:::i;2507:64::-;;-1:-1:-1;;;;;;;;;;;2507:64:0;;10802:680;;;;;;:::i;:::-;;:::i;432:64:2:-;;;;;;:::i;:::-;;;;;;;;;;;;;;19060:138:0;;;:::i;1550:167:4:-;;;;;;:::i;:::-;;:::i;3023:161:3:-;;;;;;:::i;:::-;;:::i;2663:64:0:-;;2702:25;2663:64;;18640:132;;;:::i;744:29::-;;;;;2161:49:3;;2206:4;2161:49;;800:27:0;;;;;-1:-1:-1;;;;;800:27:0;;;11699:606;;;;;;:::i;:::-;;:::i;15502:370::-;;;;;;:::i;:::-;;:::i;1947:43::-;;;;;2575:84;;-1:-1:-1;;;;;;;;;;;2575:84:0;;1875:156:4;;;;;;:::i;:::-;;:::i;2359:30:0:-;;;;;;;;;;;;2943:467:2;;;;;;:::i;:::-;;:::i;4746:159:3:-;;;;;;:::i;:::-;;:::i;4438:915:0:-;;;;;;:::i;:::-;;:::i;1797:34::-;;;;;290:36:1;;;;;;;;;;;;12962:601:0;;;;;;:::i;:::-;;:::i;1559:38::-;;;;;;2253:48;;2295:6;2253:48;;2532:359:1;;;;;;:::i;:::-;;:::i;17351:233:0:-;;;;;;:::i;:::-;;:::i;16075:249::-;;;;;;:::i;:::-;;:::i;1017:26::-;;;;;-1:-1:-1;;;;;1017:26:0;;;6963:445;;;;;;:::i;:::-;;:::i;341:86:2:-;;393:34;341:86;;1286:558:1;;;;;;:::i;:::-;;:::i;751:240:4:-;856:4;-1:-1:-1;;;;;;883:57:4;;-1:-1:-1;;;883:57:4;;:103;;;950:36;974:11;950:23;:36::i;:::-;870:116;751:240;-1:-1:-1;;751:240:4:o;18433:138:0:-;-1:-1:-1;;;;;;;;;;;2613:30:3;2546:25:0;713:10:12;2613::3;:30::i;:::-;18500:18:0::1;:25:::0;;-1:-1:-1;;18500:25:0::1;;;::::0;;18536:30:::1;::::0;::::1;::::0;::::1;::::0;18555:10:::1;::::0;18536:30:::1;:::i;:::-;;;;;;;;18433:138:::0;:::o;7766:1397::-;1720:1:7;2267:7;;:19;2259:63;;;;-1:-1:-1;;;2259:63:7;;;;;;;:::i;:::-;;;;;;;;;1720:1;2389:7;:18;7875:16:0::1;::::0;::::1;;18302:50:::0;::::1;;;18330:15;;-1:-1:-1::0;;;18330:15:0::1;;;;;;;;;;;18302:50;-1:-1:-1::0;;1679:1:7;7899:12:0::2;2546:22:7::0;-1:-1:-1;7766:1397:0:o;14060:612::-;-1:-1:-1;;;;;;;;;;;2613:30:3;2477:26:0;713:10:12;2613::3;:30::i;:::-;14240:27:0::1;14270:22;:59;14300:23;14270:59;;;;;;;;;;;14240:89;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;;;;;14240:89:0::1;-1:-1:-1::0;;;;;14240:89:0::1;-1:-1:-1::0;;;;;14240:89:0::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;;14385:69;;;;;;;;14401:4;-1:-1:-1::0;;;;;14385:69:0::1;;;;;14413:20;14385:69;;;;14441:7;14385:69;;::::0;14335:22:::1;:47;14358:23;14335:47;;;;;;;;;;;:119;;;;;;;;;;;;;-1:-1:-1::0;;;;;14335:119:0::1;;;;;-1:-1:-1::0;;;;;14335:119:0::1;;;;;;;;;;;;;;;;;;;;;;;;;14492:23;14465:202;14523:11;:16;;;14547:4;14559:11;:19;;;14586:7;14601:11;:32;;;14641:20;14465:202;;;;;;;;;;;:::i;:::-;;;;;;;;14234:438;14060:612:::0;;;;;:::o;16998:201::-;-1:-1:-1;;;;;;;;;;;2613:30:3;2477:26:0;713:10:12;2613::3;:30::i;:::-;17103:6:0::1;::::0;;-1:-1:-1;;;;;17116:33:0;;::::1;-1:-1:-1::0;;;;;;17116:33:0;::::1;;::::0;;;17160:34:::1;::::0;17103:6;::::1;::::0;17160:34:::1;::::0;::::1;::::0;17103:6;;17139:9;;17160:34:::1;:::i;:::-;;;;;;;;17069:130;16998:201:::0;;:::o;9870:495::-;2702:25;2613:30:3;2702:25:0;713:10:12;2613::3;:30::i;:::-;10107:1:0::1;10062:28:::0;;;:20:::1;:28;::::0;;;;:33;-1:-1:-1;;;;;10062:33:0::1;:47:::0;10058:102:::1;;10126:27;;-1:-1:-1::0;;;10126:27:0::1;;;;;;;;;;;10058:102;10196:41;::::0;;::::1;::::0;;::::1;::::0;;-1:-1:-1;;;;;10196:41:0;;::::1;::::0;;;::::1;::::0;;::::1;::::0;;;-1:-1:-1;10196:41:0;;;;;;10165:28;;;:20:::1;:28:::0;;;;;;:72;;;;-1:-1:-1;;;;;;10165:72:0::1;::::0;::::1;::::0;;;::::1;::::0;;;-1:-1:-1;10165:72:0;::::1;::::0;;;::::1;::::0;;::::1;::::0;;;;10248:112;;8031:25:22;;;8072:18;;;8065:34;;;8115:18;;;8108:34;;;10196:41:0;;10165:28;;10248:112:::1;::::0;8004:18:22;10248:112:0::1;;;;;;;9870:495:::0;;;;;;:::o;4375:157:3:-;4096:7;4120:12;;;:6;:12;;;;;;;;:22;;2613:30;2624:4;713:10:12;2613::3;:30::i;:::-;4502:25:::1;4513:4;4519:7;4502:10;:25::i;:::-;4375:157:::0;;;:::o;5366:222::-;-1:-1:-1;;;;;5464:23:3;;713:10:12;5464:23:3;5449:101;;;;-1:-1:-1;;;5449:101:3;;8355:2:22;5449:101:3;;;8337:21:22;8394:2;8374:18;;;8367:30;8433:34;8413:18;;;8406:62;-1:-1:-1;;;8484:18:22;;;8477:45;8539:19;;5449:101:3;8153:411:22;5449:101:3;5557:26;5569:4;5575:7;5557:11;:26::i;:::-;5366:222;;:::o;5714:259:0:-;1720:1:7;2267:7;;:19;2259:63;;;;-1:-1:-1;;;2259:63:7;;;;;;;:::i;:::-;1720:1;2389:7;:18;5814::0::1;::::0;::::1;::::0;::::1;;;18302:50:::0;::::1;;;18330:15;;-1:-1:-1::0;;;18330:15:0::1;;;;;;;;;;;18302:50;5863:10:::0;5840:20:::2;5886:83;5910:12;5906:1;:16;5886:83;;;5937:25;5948:10;;5959:1;5948:13;;;;;;;:::i;:::-;;;;;;;5937:10;:25::i;:::-;5924:3;::::0;::::2;:::i;:::-;;;5886:83;;;-1:-1:-1::0;;1679:1:7;2546:7;:22;-1:-1:-1;;;5714:259:0:o;1913:156:1:-;-1:-1:-1;;;;;;;;;;;2613:30:3;2546:25:0;713:10:12;2613::3;:30::i;:::-;1986:24:1::1;:31:::0;;-1:-1:-1;;1986:31:1::1;::::0;::::1;::::0;;2028:36:::1;::::0;::::1;::::0;::::1;::::0;2053:10:::1;::::0;2028:36:::1;:::i;2140:162::-:0;-1:-1:-1;;;;;;;;;;;2613:30:3;2477:26:0;713:10:12;2613::3;:30::i;:::-;2216:24:1::1;:32:::0;;-1:-1:-1;;2216:32:1::1;::::0;;2259:38:::1;::::0;::::1;::::0;::::1;::::0;2286:10:::1;::::0;2259:38:::1;:::i;14890:400:0:-:0;-1:-1:-1;;;;;;;;;;;2613:30:3;2477:26:0;713:10:12;2613::3;:30::i;:::-;2295:6:0::1;15011:24;:42;15007:86;;;15070:16;;-1:-1:-1::0;;;15070:16:0::1;;;;;;;;;;;15007:86;15125:23;::::0;;15154:50;;;;15215:70:::1;::::0;;9147:25:22;;;9203:2;9188:18;;9181:34;;;15215:70:0::1;::::0;9120:18:22;15215:70:0::1;8973:248:22::0;17733:227:0;-1:-1:-1;;;;;;;;;;;2613:30:3;2477:26:0;713:10:12;2613::3;:30::i;:::-;17853:11:0::1;::::0;;-1:-1:-1;;;;;17870:28:0;;::::1;-1:-1:-1::0;;;;;;17870:28:0;::::1;;::::0;;;17909:46:::1;::::0;17853:11;::::1;::::0;17909:46:::1;::::0;::::1;::::0;17853:11;;17884:14;;17909:46:::1;:::i;16537:309::-:0;-1:-1:-1;;;;;;;;;;;2613:30:3;2477:26:0;713:10:12;2613::3;:30::i;:::-;2295:6:0::1;16638:14;:32;16634:73;;;16687:13;;-1:-1:-1::0;;;16687:13:0::1;;;;;;;;;;;16634:73;16735:13;::::0;;16754:30;;;;16795:46:::1;::::0;;9147:25:22;;;9203:2;9188:18;;9181:34;;;16795:46:0::1;::::0;9120:18:22;16795:46:0::1;8973:248:22::0;18845:144:0;-1:-1:-1;;;;;;;;;;;2613:30:3;2477:26:0;713:10:12;2613::3;:30::i;:::-;18915:18:0::1;:26:::0;;-1:-1:-1;;18915:26:0::1;::::0;;18952:32:::1;::::0;::::1;::::0;::::1;::::0;18973:10:::1;::::0;18952:32:::1;:::i;10802:680::-:0;-1:-1:-1;;;;;;;;;;;2613:30:3;2626:33:0;713:10:12;2613::3;:30::i;:::-;10982:10:0;11009:31;;::::1;11005:78;;11057:19;;-1:-1:-1::0;;;11057:19:0::1;;;;;;;;;;;11005:78;11093:9;11088:390;11112:12;11108:1;:16;11088:390;;;11195:1;11143:20;11195:1:::0;11164:10;;11175:1;11164:13;;::::1;;;;;:::i;:::-;;::::0;;::::1;::::0;;;::::1;;11143:35:::0;;-1:-1:-1;11143:35:0;::::1;::::0;;;;;;-1:-1:-1;11143:35:0;:40;-1:-1:-1;;;;;11143:40:0::1;:54:::0;11139:101:::1;;11216:15;;-1:-1:-1::0;;;11216:15:0::1;;;;;;;;;;;11139:101;11251:20;:35;11272:10;;11283:1;11272:13;;;;;;;:::i;:::-;;;;;;;11251:35;;;;;;;;;;;:43;;;11298:1;11251:48;11247:99;;11318:19;;-1:-1:-1::0;;;11318:19:0::1;;;;;;;;;;;11247:99;11399:8;;11408:1;11399:11;;;;;;;:::i;:::-;;;;;;;11353:20;:35;11374:10;;11385:1;11374:13;;;;;;;:::i;:::-;;;;;;;11353:35;;;;;;;;;;;:43;;:57;;;;11459:8;;11468:1;11459:11;;;;;;;:::i;:::-;;;;;;;11444:10;;11455:1;11444:13;;;;;;;:::i;:::-;;;;;;;11423:48;;;;;;;;;;11126:3;::::0;::::1;:::i;:::-;;;11088:390;;;;10953:529;10802:680:::0;;;;;:::o;19060:138::-;-1:-1:-1;;;;;;;;;;;2613:30:3;2477:26:0;713:10:12;2613::3;:30::i;:::-;19128:16:0::1;:24:::0;;-1:-1:-1;;19128:24:0::1;::::0;;19163:30:::1;::::0;::::1;::::0;::::1;::::0;19182:10:::1;::::0;19163:30:::1;:::i;1550:167:4:-:0;1660:7;1684:18;;;:12;:18;;;;;:28;;1706:5;1684:21;:28::i;:::-;1677:35;1550:167;-1:-1:-1;;;1550:167:4:o;3023:161:3:-;3129:4;3150:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;3150:29:3;;;;;;;;;;;;;;;3023:161::o;18640:132:0:-;-1:-1:-1;;;;;;;;;;;2613:30:3;2546:25:0;713:10:12;2613::3;:30::i;:::-;18705:16:0::1;:23:::0;;-1:-1:-1;;18705:23:0::1;18724:4;18705:23;::::0;;18739:28:::1;::::0;::::1;::::0;::::1;::::0;18756:10:::1;::::0;18739:28:::1;:::i;11699:606::-:0;-1:-1:-1;;;;;;;;;;;2613:30:3;2626:33:0;713:10:12;2613::3;:30::i;:::-;11888:13:0;11918:34;;::::1;11914:81;;11969:19;;-1:-1:-1::0;;;11969:19:0::1;;;;;;;;;;;11914:81;12005:9;12000:301;12024:15;12020:1;:19;12000:301;;;12058:22;:40;12081:13;;12095:1;12081:16;;;;;;;:::i;:::-;;;;;;;12058:40;;;;;;;;;;;:48;;;12110:1;12058:53;12054:104;;12130:19;;-1:-1:-1::0;;;12130:19:0::1;;;;;;;;;;;12054:104;12216:8;;12225:1;12216:11;;;;;;;:::i;:::-;;;;;;;12165:22;:40;12188:13;;12202:1;12188:16;;;;;;;:::i;:::-;;;;;;;12165:40;;;;;;;;;;;:48;;:62;;;;12282:8;;12291:1;12282:11;;;;;;;:::i;:::-;;;;;;;12264:13;;12278:1;12264:16;;;;;;;:::i;:::-;;;;;;;12240:54;;;;;;;;;;12041:3;::::0;::::1;:::i;:::-;;;12000:301;;15502:370:::0;-1:-1:-1;;;;;;;;;;;2613:30:3;2477:26:0;713:10:12;2613::3;:30::i;:::-;2295:6:0::1;15612:16;:34;15608:78;;;15663:16;;-1:-1:-1::0;;;15663:16:0::1;;;;;;;;;;;15608:78;15725:20;::::0;;15751:39;;;;15801:66:::1;::::0;;9147:25:22;;;9203:2;9188:18;;9181:34;;;15801:66:0::1;::::0;9120:18:22;15801:66:0::1;8973:248:22::0;1875:156:4;1975:7;1999:18;;;:12;:18;;;;;:27;;:25;:27::i;2943:467:2:-;393:34;2613:30:3;393:34:2;713:10:12;2613::3;:30::i;:::-;3109:15:2::1;3092:14;:32;3088:86;;;3141:26;;-1:-1:-1::0;;;3141:26:2::1;;;;;;;;;;;3088:86;3203:10:::0;3180:20:::1;3226:180;3246:12;3242:1;:16;3226:180;;;3320:14;3273:29;:44;3303:10;;3314:1;3303:13;;;;;;;:::i;:::-;;;;;;;3273:44;;;;;;;;;;;:61;;;;3385:10;;3396:1;3385:13;;;;;;;:::i;:::-;;;;;;;3369:14;3347:52;;;;;;;;;;3260:3;::::0;::::1;:::i;:::-;;;3226:180;;;;3082:328;2943:467:::0;;;;:::o;4746:159:3:-;4096:7;4120:12;;;:6;:12;;;;;;;;:22;;2613:30;2624:4;713:10:12;2613::3;:30::i;:::-;4874:26:::1;4886:4;4892:7;4874:11;:26::i;4438:915:0:-:0;1720:1:7;2267:7;;:19;2259:63;;;;-1:-1:-1;;;2259:63:7;;;;;;;:::i;:::-;1720:1;2389:7;:18;4549::0::1;::::0;::::1;::::0;::::1;;;18302:50:::0;::::1;;;18330:15;;-1:-1:-1::0;;;18330:15:0::1;;;;;;;;;;;18302:50;4590:20:::2;;4581:6;:29;4577:74;;;4627:17;;-1:-1:-1::0;;;4627:17:0::2;;;;;;;;;;;4577:74;4657:24;4684:20;4697:6;4684:12;:20::i;:::-;4657:47:::0;-1:-1:-1;4710:29:0::2;4742:25;4657:47:::0;4742:6;:25:::2;:::i;:::-;4848:26;:28:::0;;4710:57;;-1:-1:-1;4820:17:0::2;::::0;4848:28;4820:17;4848:28:::2;::::0;::::2;:::i;:::-;::::0;;;-1:-1:-1;4917:71:0::2;::::0;;::::2;::::0;::::2;::::0;;4934:10:::2;4917:71:::0;;::::2;::::0;;::::2;::::0;;;-1:-1:-1;4917:71:0;;;;;;4883:31;;;:20:::2;:31:::0;;;;;;;:105;;;;-1:-1:-1;;;;;;4883:105:0::2;-1:-1:-1::0;;;;;4883:105:0;;::::2;;::::0;;;;-1:-1:-1;4883:105:0;::::2;::::0;;;::::2;::::0;;::::2;::::0;:31;-1:-1:-1;4999:20:0;;4995:112:::2;;5069:12;::::0;5029:71:::2;::::0;-1:-1:-1;;;;;5029:10:0::2;:27:::0;::::2;::::0;5057:10:::2;::::0;5069:12:::2;5083:16:::0;5029:27:::2;:71::i;:::-;5113:102;-1:-1:-1::0;;;;;5113:10:0::2;:27;5148:10;909:42;5188:21:::0;5113:27:::2;:102::i;:::-;5227:121;::::0;;8031:25:22;;;8087:2;8072:18;;8065:34;;;8115:18;;;8108:34;;;5266:9:0;;5248:10:::2;::::0;5227:121:::2;::::0;8019:2:22;8004:18;5227:121:0::2;;;;;;;-1:-1:-1::0;;1679:1:7;2546:7;:22;-1:-1:-1;;;4438:915:0:o;12962:601::-;-1:-1:-1;;;;;;;;;;;2613:30:3;2477:26:0;713:10:12;2613::3;:30::i;:::-;13141:29:0::1;13173:20;:42;13194:20;13173:42;;;;;;;;;;;13141:74;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;;;;;13141:74:0::1;-1:-1:-1::0;;;;;13141:74:0::1;-1:-1:-1::0;;;;;13141:74:0::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;;13267:71;;;;;;;;13284:4;-1:-1:-1::0;;;;;13267:71:0::1;;;;;13296:21;13267:71;;;;13325:7;13267:71;;::::0;13222:20:::1;:42;13243:20;13222:42;;;;;;;;;;;:116;;;;;;;;;;;;;-1:-1:-1::0;;;;;13222:116:0::1;;;;;-1:-1:-1::0;;;;;13222:116:0::1;;;;;;;;;;;;;;;;;;;;;;;;;13378:20;13350:208;13406:12;:17;;;13431:4;13443:12;:20;;;13471:7;13486:12;:37;;;13531:21;13350:208;;;;;;;;;;;:::i;2532:359:1:-:0;-1:-1:-1;;;;;;;;;;;2613:30:3;2477:26:0;713:10:12;2613::3;:30::i;:::-;2680:31:1::1;::::0;;2717:66;;;;2794:92:::1;::::0;;9147:25:22;;;9203:2;9188:18;;9181:34;;;2794:92:1::1;::::0;9120:18:22;2794:92:1::1;8973:248:22::0;17351:233:0;-1:-1:-1;;;;;;;;;;;2613:30:3;2477:26:0;713:10:12;2613::3;:30::i;:::-;17474:12:0::1;::::0;;-1:-1:-1;;;;;17492:30:0;;::::1;-1:-1:-1::0;;;;;;17492:30:0;::::1;::::0;::::1;::::0;;;17533:46:::1;::::0;17474:12;::::1;::::0;17533:46:::1;::::0;::::1;::::0;17474:12;;17533:46:::1;:::i;16075:249::-:0;-1:-1:-1;;;;;;;;;;;2613:30:3;2477:26:0;713:10:12;2613::3;:30::i;:::-;2295:6:0::1;16156:8;:26;16152:67;;;16199:13;;-1:-1:-1::0;;;16199:13:0::1;;;;;;;;;;;16152:67;16245:7;::::0;;16258:18;;;;16287:32:::1;::::0;;9147:25:22;;;9203:2;9188:18;;9181:34;;;16287:32:0::1;::::0;9120:18:22;16287:32:0::1;8973:248:22::0;6963:445:0;1720:1:7;2267:7;;:19;2259:63;;;;-1:-1:-1;;;2259:63:7;;;;;;;:::i;:::-;1720:1;2389:7;:18;7056:16:0::1;::::0;::::1;;18302:50:::0;::::1;;;18330:15;;-1:-1:-1::0;;;18330:15:0::1;;;;;;;;;;;18302:50;7093:23:::2;;7084:6;:32;7080:80;;;7133:20;;-1:-1:-1::0;;;7133:20:0::2;;;;;;;;;;;7080:80;7196:24;:26:::0;;7165:20:::2;::::0;;7196:26:::2;::::0;::::2;:::i;:::-;::::0;;;-1:-1:-1;7268:31:0::2;::::0;;::::2;::::0;::::2;::::0;;7277:10:::2;7268:31:::0;;;::::2;::::0;;::::2;::::0;;;-1:-1:-1;7268:31:0;;;;;;7229:36;;;:22:::2;:36:::0;;;;;;:70;;;;-1:-1:-1;;;;;;7229:70:0::2;-1:-1:-1::0;;;;;7229:70:0;;::::2;;::::0;;;;-1:-1:-1;7229:70:0;::::2;::::0;;;::::2;::::0;;::::2;::::0;;;;7306:32;;-1:-1:-1;;;7306:32:0;;7229:36;;-1:-1:-1;7306:3:0::2;:12;::::0;::::2;::::0;:32:::2;::::0;7268:31;;7306:32:::2;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;-1:-1:-1::0;;7350:53:0::2;::::0;643:25:22;;;7382:12:0;;-1:-1:-1;7370:10:0::2;::::0;-1:-1:-1;7350:53:0::2;::::0;631:2:22;616:18;7350:53:0::2;;;;;;;-1:-1:-1::0;;1679:1:7;2546:7;:22;-1:-1:-1;6963:445:0:o;1286:558:1:-;1720:1:7;2267:7;;:19;2259:63;;;;-1:-1:-1;;;2259:63:7;;;;;;;:::i;:::-;1720:1;2389:7;:18;1436:24:1::1;::::0;;;::::1;;;18302:50:0::0;::::1;;;18330:15;;-1:-1:-1::0;;;18330:15:0::1;;;;;;;;;;;18302:50;1497:31:1::2;;1472:22;:56;1468:104;;;1545:20;;-1:-1:-1::0;;;1545:20:1::2;;;;;;;;;;;1468:104;1609:24;:26:::0;;1578:20:::2;::::0;;1609:26:::2;::::0;::::2;:::i;:::-;::::0;;;-1:-1:-1;1643:48:1::2;::::0;-1:-1:-1;;;1643:48:1;;1601:35;;-1:-1:-1;;;;;;1643:3:1::2;:12;::::0;::::2;::::0;:48:::2;::::0;1656:10:::2;::::0;1668:22;;1643:48:::2;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;-1:-1:-1::0;;1703:136:1::2;::::0;;9147:25:22;;;9203:2;9188:18;;9181:34;;;1764:12:1;;-1:-1:-1;1746:10:1::2;::::0;-1:-1:-1;1703:136:1::2;::::0;9120:18:22;1703:136:1::2;;;;;;;-1:-1:-1::0;;1679:1:7;2546:7;:22;-1:-1:-1;;1286:558:1:o;6749:211:3:-;6828:22;6836:4;6842:7;6828;:22::i;:::-;6823:133;;6860:12;;;;6892:4;6860:12;;;;;;;;-1:-1:-1;;;;;6860:29:3;;;;;;;;;;:36;;-1:-1:-1;;6860:36:3;;;;;;;6909:40;;713:10:12;;6860:12:3;;6909:40;;6860:12;6909:40;6749:211;;:::o;7180:144:14:-;7250:4;7269:50;7274:3;-1:-1:-1;;;;;7294:23:14;;7269:4;:50::i;2714:230:3:-;2819:4;-1:-1:-1;;;;;;2846:47:3;;-1:-1:-1;;;2846:47:3;;:93;;-1:-1:-1;;;;;;;;;;993:40:13;;;2903:36:3;867:171:13;3449:386:3;3533:22;3541:4;3547:7;3533;:22::i;:::-;3528:303;;3668:41;3696:7;-1:-1:-1;;;;;3668:41:3;3706:2;3668:19;:41::i;:::-;3756:38;3784:4;3791:2;3756:19;:38::i;:::-;3599:207;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3599:207:3;;;;;;;;;;-1:-1:-1;;;3565:259:3;;;;;;;:::i;2111:156:4:-;2194:31;2211:4;2217:7;2194:16;:31::i;:::-;2231:18;;;;:12;:18;;;;;:31;;2254:7;2231:22;:31::i;2348:175::-;2446:32;2464:4;2470:7;2446:17;:32::i;:::-;2484:18;;;;:12;:18;;;;;:34;;2510:7;2484:25;:34::i;1828:374:2:-;1903:40;;;;:29;:40;;;;;;:45;;1899:99;;1965:26;;-1:-1:-1;;;1965:26:2;;;;;;;;;;;1899:99;2008:40;;;;:29;:40;;;;;;2051:15;-1:-1:-1;2004:107:2;;;2083:21;;-1:-1:-1;;;2083:21:2;;;;;;;;;;;2004:107;2117:27;2134:9;2117:16;:27::i;:::-;2157:40;;;;:29;:40;;;;;2150:47;1828:374::o;8386:164:14:-;8472:7;8520:22;8524:3;8536:5;8520:3;:22::i;7957:109::-;8020:7;8042:19;8050:3;3752:18;;3674:101;20386:152:0;20465:7;2295:6;20507:7;;20488:16;:26;;;;:::i;:::-;20487:46;;;;:::i;982:235:10:-;1138:68;;;-1:-1:-1;;;;;12017:15:22;;;1138:68:10;;;11999:34:22;12069:15;;12049:18;;;12042:43;12101:18;;;;12094:34;;;1138:68:10;;;;;;;;;;11934:18:22;;;;1138:68:10;;;;;;;;-1:-1:-1;;;;;1138:68:10;-1:-1:-1;;;1138:68:10;;;1098:114;;1125:5;;1098:19;:114::i;:::-;982:235;;;;:::o;1643:354:14:-;1706:4;3572:19;;;:12;;;:19;;;;;;1718:275;;-1:-1:-1;1754:23:14;;;;;;;;:11;:23;;;;;;;;;;;;;1916:18;;1894:19;;;:12;;;:19;;;;;;:40;;;;1942:11;;1718:275;-1:-1:-1;1981:5:14;1974:12;;1428:413:16;1515:13;1538:19;1570:10;1574:6;1570:1;:10;:::i;:::-;:14;;1583:1;1570:14;:::i;:::-;1560:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1560:25:16;;1538:47;;-1:-1:-1;;;1591:6:16;1598:1;1591:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1591:15:16;;;;;;;;;-1:-1:-1;;;1612:6:16;1619:1;1612:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1612:15:16;;;;;;;;-1:-1:-1;1638:9:16;1650:10;1654:6;1650:1;:10;:::i;:::-;:14;;1663:1;1650:14;:::i;:::-;1638:26;;1633:116;1670:1;1666;:5;1633:116;;;-1:-1:-1;;;1711:5:16;1719:3;1711:11;1698:25;;;;;;;:::i;:::-;;;;1686:6;1693:1;1686:9;;;;;;;;:::i;:::-;;;;:37;-1:-1:-1;;;;;1686:37:16;;;;;;;;-1:-1:-1;1741:1:16;1731:11;;;;;1673:3;;;:::i;:::-;;;1633:116;;;-1:-1:-1;1762:10:16;;1754:55;;;;-1:-1:-1;;;1754:55:16;;12744:2:22;1754:55:16;;;12726:21:22;;;12763:18;;;12756:30;12822:34;12802:18;;;12795:62;12874:18;;1754:55:16;12542:356:22;7073:212:3;7152:22;7160:4;7166:7;7152;:22::i;:::-;7148:133;;;7216:5;7184:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;7184:29:3;;;;;;;;;;:37;;-1:-1:-1;;7184:37:3;;;7234:40;713:10:12;;7184:12:3;;7234:40;;7216:5;7234:40;7073:212;;:::o;7478:160:14:-;7559:4;7580:53;7588:3;-1:-1:-1;;;;;7608:23:14;;7580:7;:53::i;6110:646:0:-;6172:26;6201:31;;;:20;:31;;;;;;;;6172:60;;;;;;;;;-1:-1:-1;;;;;6172:60:0;;;;;;;;;;;;;;;;;;;;;;;;;6278:22;6274:65;;6317:15;;-1:-1:-1;;;6317:15:0;;;;;;;;;;;6274:65;6361:6;;6377:17;;;;;6361:34;;-1:-1:-1;;;6361:34:0;;;;;643:25:22;;;;6345:13:0;;-1:-1:-1;;;;;6361:6:0;;:15;;616:18:22;;6361:34:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6345:50;;6401:15;6419:83;6449:9;:34;;;6491:5;6419:22;:83::i;:::-;6516:31;;;;:20;:31;;;;;;6509:38;;-1:-1:-1;;;;;;6509:38:0;;;;;;;;;;;;;;;6562:14;;6553:33;;-1:-1:-1;;;6553:33:0;;6401:101;;-1:-1:-1;6553:3:0;-1:-1:-1;;;;;6553:8:0;;;;:33;;6401:101;;6553:33;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6619:14:0;;6673:34;;;;;6728:17;;;;;6598:153;;13323:25:22;;;13364:18;;;13357:34;;;;13407:18;;13400:34;;;13465:2;13450:18;;13443:34;6641:9:0;;-1:-1:-1;;;;;;6598:153:0;;;;-1:-1:-1;6598:153:0;;13310:3:22;13295:19;6598:153:0;;;;;;;6166:590;;;6110:646;:::o;4095:112:14:-;4162:7;4184:3;:11;;4196:5;4184:18;;;;;;;;:::i;:::-;;;;;;;;;4177:25;;4095:112;;;;:::o;3197:698:10:-;3600:23;3632:69;3660:4;3632:69;;;;;;;;;;;;;;;;;3640:5;-1:-1:-1;;;;;3632:27:10;;;:69;;;;;:::i;:::-;3711:17;;3600:101;;-1:-1:-1;3711:21:10;3707:184;;3803:10;3792:30;;;;;;;;;;;;:::i;:::-;3775:109;;;;-1:-1:-1;;;3775:109:10;;13972:2:22;3775:109:10;;;13954:21:22;14011:2;13991:18;;;13984:30;14050:34;14030:18;;;14023:62;-1:-1:-1;;;14101:18:22;;;14094:40;14151:19;;3775:109:10;13770:406:22;2151:1242:14;2217:4;2346:19;;;:12;;;:19;;;;;;2376:15;;2372:1017;;2715:21;2739:14;2752:1;2739:10;:14;:::i;:::-;2781:18;;2715:38;;-1:-1:-1;2761:17:14;;2781:22;;2802:1;;2781:22;:::i;:::-;2761:42;;2829:13;2816:9;:26;2812:352;;2854:17;2874:3;:11;;2886:9;2874:22;;;;;;;;:::i;:::-;;;;;;;;;2854:42;;3009:9;2980:3;:11;;2992:13;2980:26;;;;;;;;:::i;:::-;;;;;;;;;;;;:38;;;;3076:23;;;:12;;;:23;;;;;:36;;;2812:352;3230:17;;:3;;:17;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;3310:3;:12;;:19;3323:5;3310:19;;;;;;;;;;;3303:26;;;3345:4;3338:11;;;;;;;2372:1017;3377:5;3370:12;;;;;21188:288:0;21290:20;21318:17;21338:20;21347:10;21338:8;:20::i;:::-;:27;;21361:4;21338:27;:::i;:::-;21318:47;-1:-1:-1;21454:17:0;21466:5;21318:47;21454:17;:::i;:::-;21439:32;21188:288;-1:-1:-1;;;;21188:288:0:o;3711:203:11:-;3830:12;3857:52;3879:6;3887:4;3893:1;3896:12;3857:21;:52::i;22227:111:0:-;22284:7;22306:27;22315:18;22306:6;:27;:::i;4766:481:11:-;4913:12;4973:5;4948:21;:30;;4933:99;;;;-1:-1:-1;;;4933:99:11;;14515:2:22;4933:99:11;;;14497:21:22;14554:2;14534:18;;;14527:30;14593:34;14573:18;;;14566:62;-1:-1:-1;;;14644:18:22;;;14637:36;14690:19;;4933:99:11;14313:402:22;4933:99:11;-1:-1:-1;;;;;1395:19:11;;;5038:60;;;;-1:-1:-1;;;5038:60:11;;14922:2:22;5038:60:11;;;14904:21:22;14961:2;14941:18;;;14934:30;15000:31;14980:18;;;14973:59;15049:18;;5038:60:11;14720:353:22;5038:60:11;5106:12;5120:23;5147:6;-1:-1:-1;;;;;5147:11:11;5166:5;5173:4;5147:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5105:73;;;;5191:51;5208:7;5217:10;5229:12;5191:16;:51::i;:::-;5184:58;4766:481;-1:-1:-1;;;;;;;4766:481:11:o;7291:582::-;7423:12;7447:7;7443:426;;;-1:-1:-1;7471:10:11;7464:17;;7443:426;7566:17;;:21;7562:301;;7734:10;7728:17;7784:15;7771:10;7767:2;7763:19;7756:44;7562:301;7841:12;7834:20;;-1:-1:-1;;;7834:20:11;;;;;;;;:::i;14:286:22:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:22;;209:43;;199:71;;266:1;263;256:12;861:367;924:8;934:6;988:3;981:4;973:6;969:17;965:27;955:55;;1006:1;1003;996:12;955:55;-1:-1:-1;1029:20:22;;1072:18;1061:30;;1058:50;;;1104:1;1101;1094:12;1058:50;1141:4;1133:6;1129:17;1117:29;;1201:3;1194:4;1184:6;1181:1;1177:14;1169:6;1165:27;1161:38;1158:47;1155:67;;;1218:1;1215;1208:12;1155:67;861:367;;;;;:::o;1233:437::-;1319:6;1327;1380:2;1368:9;1359:7;1355:23;1351:32;1348:52;;;1396:1;1393;1386:12;1348:52;1436:9;1423:23;1469:18;1461:6;1458:30;1455:50;;;1501:1;1498;1491:12;1455:50;1540:70;1602:7;1593:6;1582:9;1578:22;1540:70;:::i;:::-;1629:8;;1514:96;;-1:-1:-1;1233:437:22;-1:-1:-1;;;;1233:437:22:o;1675:180::-;1734:6;1787:2;1775:9;1766:7;1762:23;1758:32;1755:52;;;1803:1;1800;1793:12;1755:52;-1:-1:-1;1826:23:22;;1675:180;-1:-1:-1;1675:180:22:o;1860:173::-;1928:20;;-1:-1:-1;;;;;1977:31:22;;1967:42;;1957:70;;2023:1;2020;2013:12;1957:70;1860:173;;;:::o;2038:391::-;2124:6;2132;2140;2148;2201:3;2189:9;2180:7;2176:23;2172:33;2169:53;;;2218:1;2215;2208:12;2169:53;2254:9;2241:23;2231:33;;2283:38;2317:2;2306:9;2302:18;2283:38;:::i;:::-;2038:391;;2273:48;;-1:-1:-1;;;;2368:2:22;2353:18;;2340:32;;2419:2;2404:18;2391:32;;2038:391::o;2434:186::-;2493:6;2546:2;2534:9;2525:7;2521:23;2517:32;2514:52;;;2562:1;2559;2552:12;2514:52;2585:29;2604:9;2585:29;:::i;2625:460::-;2720:6;2728;2736;2744;2752;2805:3;2793:9;2784:7;2780:23;2776:33;2773:53;;;2822:1;2819;2812:12;2773:53;2858:9;2845:23;2835:33;;2887:38;2921:2;2910:9;2906:18;2887:38;:::i;:::-;2625:460;;2877:48;;-1:-1:-1;;;;2972:2:22;2957:18;;2944:32;;3023:2;3008:18;;2995:32;;3074:3;3059:19;;;3046:33;;-1:-1:-1;2625:460:22:o;3090:254::-;3158:6;3166;3219:2;3207:9;3198:7;3194:23;3190:32;3187:52;;;3235:1;3232;3225:12;3187:52;3271:9;3258:23;3248:33;;3300:38;3334:2;3323:9;3319:18;3300:38;:::i;:::-;3290:48;;3090:254;;;;;:::o;3699:203::-;-1:-1:-1;;;;;3863:32:22;;;;3845:51;;3833:2;3818:18;;3699:203::o;4092:773::-;4214:6;4222;4230;4238;4291:2;4279:9;4270:7;4266:23;4262:32;4259:52;;;4307:1;4304;4297:12;4259:52;4347:9;4334:23;4376:18;4417:2;4409:6;4406:14;4403:34;;;4433:1;4430;4423:12;4403:34;4472:70;4534:7;4525:6;4514:9;4510:22;4472:70;:::i;:::-;4561:8;;-1:-1:-1;4446:96:22;-1:-1:-1;4649:2:22;4634:18;;4621:32;;-1:-1:-1;4665:16:22;;;4662:36;;;4694:1;4691;4684:12;4662:36;;4733:72;4797:7;4786:8;4775:9;4771:24;4733:72;:::i;:::-;4092:773;;;;-1:-1:-1;4824:8:22;-1:-1:-1;;;;4092:773:22:o;4870:248::-;4938:6;4946;4999:2;4987:9;4978:7;4974:23;4970:32;4967:52;;;5015:1;5012;5005:12;4967:52;-1:-1:-1;;5038:23:22;;;5108:2;5093:18;;;5080:32;;-1:-1:-1;4870:248:22:o;5578:505::-;5673:6;5681;5689;5742:2;5730:9;5721:7;5717:23;5713:32;5710:52;;;5758:1;5755;5748:12;5710:52;5794:9;5781:23;5771:33;;5855:2;5844:9;5840:18;5827:32;5882:18;5874:6;5871:30;5868:50;;;5914:1;5911;5904:12;5868:50;5953:70;6015:7;6006:6;5995:9;5991:22;5953:70;:::i;:::-;5578:505;;6042:8;;-1:-1:-1;5927:96:22;;-1:-1:-1;;;;5578:505:22:o;6564:355::-;6766:2;6748:21;;;6805:2;6785:18;;;6778:30;6844:33;6839:2;6824:18;;6817:61;6910:2;6895:18;;6564:355::o;6924:591::-;-1:-1:-1;;;;;7267:15:22;;;7249:34;;7319:15;;;;7314:2;7299:18;;7292:43;7366:2;7351:18;;7344:34;;;;7409:2;7394:18;;7387:34;7452:3;7437:19;;7430:35;7229:3;7481:19;;7474:35;;;;7198:3;7183:19;;6924:591::o;7520:304::-;-1:-1:-1;;;;;7750:15:22;;;7732:34;;7802:15;;7797:2;7782:18;;7775:43;7682:2;7667:18;;7520:304::o;8569:127::-;8630:10;8625:3;8621:20;8618:1;8611:31;8661:4;8658:1;8651:15;8685:4;8682:1;8675:15;8701:127;8762:10;8757:3;8753:20;8750:1;8743:31;8793:4;8790:1;8783:15;8817:4;8814:1;8807:15;8833:135;8872:3;8893:17;;;8890:43;;8913:18;;:::i;:::-;-1:-1:-1;8960:1:22;8949:13;;8833:135::o;9226:128::-;9293:9;;;9314:11;;;9311:37;;;9328:18;;:::i;9359:274::-;-1:-1:-1;;;;;9551:32:22;;;;9533:51;;9615:2;9600:18;;9593:34;9521:2;9506:18;;9359:274::o;9891:250::-;9976:1;9986:113;10000:6;9997:1;9994:13;9986:113;;;10076:11;;;10070:18;10057:11;;;10050:39;10022:2;10015:10;9986:113;;;-1:-1:-1;;10133:1:22;10115:16;;10108:27;9891:250::o;10146:812::-;-1:-1:-1;;;10552:3:22;10545:38;10527:3;10612:6;10606:13;10628:75;10696:6;10691:2;10686:3;10682:12;10675:4;10667:6;10663:17;10628:75;:::i;:::-;-1:-1:-1;;;10762:2:22;10722:16;;;10754:11;;;10747:40;10812:13;;10834:76;10812:13;10896:2;10888:11;;10881:4;10869:17;;10834:76;:::i;:::-;10930:17;10949:2;10926:26;;10146:812;-1:-1:-1;;;;10146:812:22:o;10963:396::-;11112:2;11101:9;11094:21;11075:4;11144:6;11138:13;11187:6;11182:2;11171:9;11167:18;11160:34;11203:79;11275:6;11270:2;11259:9;11255:18;11250:2;11242:6;11238:15;11203:79;:::i;:::-;11343:2;11322:15;-1:-1:-1;;11318:29:22;11303:45;;;;11350:2;11299:54;;10963:396;-1:-1:-1;;10963:396:22:o;11364:168::-;11404:7;11470:1;11466;11462:6;11458:14;11455:1;11452:21;11447:1;11440:9;11433:17;11429:45;11426:71;;;11477:18;;:::i;:::-;-1:-1:-1;11517:9:22;;11364:168::o;11537:217::-;11577:1;11603;11593:132;;11647:10;11642:3;11638:20;11635:1;11628:31;11682:4;11679:1;11672:15;11710:4;11707:1;11700:15;11593:132;-1:-1:-1;11739:9:22;;11537:217::o;12139:125::-;12204:9;;;12225:10;;;12222:36;;;12238:18;;:::i;12269:127::-;12330:10;12325:3;12321:20;12318:1;12311:31;12361:4;12358:1;12351:15;12385:4;12382:1;12375:15;12401:136;12440:3;12468:5;12458:39;;12477:18;;:::i;:::-;-1:-1:-1;;;12513:18:22;;12401:136::o;12903:184::-;12973:6;13026:2;13014:9;13005:7;13001:23;12997:32;12994:52;;;13042:1;13039;13032:12;12994:52;-1:-1:-1;13065:16:22;;12903:184;-1:-1:-1;12903:184:22:o;13488:277::-;13555:6;13608:2;13596:9;13587:7;13583:23;13579:32;13576:52;;;13624:1;13621;13614:12;13576:52;13656:9;13650:16;13709:5;13702:13;13695:21;13688:5;13685:32;13675:60;;13731:1;13728;13721:12;14181:127;14242:10;14237:3;14233:20;14230:1;14223:31;14273:4;14270:1;14263:15;14297:4;14294:1;14287:15;15078:287;15207:3;15245:6;15239:13;15261:66;15320:6;15315:3;15308:4;15300:6;15296:17;15261:66;:::i;:::-;15343:16;;;;;15078:287;-1:-1:-1;;15078:287:22:o"},"gasEstimates":{"creation":{"codeDepositCost":"2291200","executionCost":"infinite","totalCost":"infinite"},"external":{"BPS_DENOMINATOR()":"239","DEFAULT_ADMIN_ROLE()":"240","MANAGER_ADMIN()":"infinite","PAUSER_ADMIN()":"infinite","PRICE_ID_SETTER_ROLE()":"infinite","RELAYER_ROLE()":"329","TIMESTAMP_SETTER_ROLE()":"371","addProof(bytes32,address,uint256,uint256,uint256)":"infinite","assetRecipient()":"308","assetSender()":"2493","claimMint(bytes32[])":"infinite","claimRedemption(bytes32[])":"31860","collateral()":"infinite","decimalsMultiplier()":"infinite","depositIdToClaimableTimestamp(bytes32)":"2484","depositIdToDepositor(bytes32)":"6844","feeRecipient()":"2495","getRoleAdmin(bytes32)":"2518","getRoleMember(bytes32,uint256)":"infinite","getRoleMemberCount(bytes32)":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"2766","minimumDepositAmount()":"2408","minimumOffChainRedemptionAmount()":"2430","minimumRedemptionAmount()":"2472","mintFee()":"2452","offChainRedemptionPaused()":"2443","overwriteDepositor(bytes32,address,uint256,uint256)":"infinite","overwriteRedeemer(bytes32,address,uint256,uint256)":"infinite","pauseOffChainRedemption()":"infinite","pauseRedemption()":"infinite","pauseSubscription()":"infinite","pricer()":"2428","redemptionFee()":"2407","redemptionIdToRedeemer(bytes32)":"6801","redemptionPaused()":"2410","redemptionRequestCounter()":"2473","renounceRole(bytes32,address)":"infinite","requestRedemption(uint256)":"infinite","requestRedemptionServicedOffchain(uint256,bytes32)":"infinite","requestSubscription(uint256)":"infinite","revokeRole(bytes32,address)":"infinite","rwa()":"infinite","setAssetSender(address)":"infinite","setClaimableTimestamp(uint256,bytes32[])":"infinite","setFeeRecipient(address)":"infinite","setMinimumDepositAmount(uint256)":"infinite","setMinimumRedemptionAmount(uint256)":"infinite","setMintFee(uint256)":"infinite","setOffChainRedemptionMinimum(uint256)":"infinite","setPriceIdForDeposits(bytes32[],uint256[])":"infinite","setPriceIdForRedemptions(bytes32[],uint256[])":"infinite","setPricer(address)":"infinite","setRedemptionFee(uint256)":"infinite","subscriptionPaused()":"2509","subscriptionRequestCounter()":"2386","supportsInterface(bytes4)":"infinite","unpauseOffChainRedemption()":"infinite","unpauseRedemption()":"infinite","unpauseSubscription()":"infinite"},"internal":{"_claimMint(bytes32)":"infinite"}},"methodIdentifiers":{"BPS_DENOMINATOR()":"e1a45218","DEFAULT_ADMIN_ROLE()":"a217fddf","MANAGER_ADMIN()":"078a6be8","PAUSER_ADMIN()":"85c4e79e","PRICE_ID_SETTER_ROLE()":"bcc70283","RELAYER_ROLE()":"926d7d7f","TIMESTAMP_SETTER_ROLE()":"f4a20307","addProof(bytes32,address,uint256,uint256,uint256)":"2b5eceff","assetRecipient()":"3bfa67fe","assetSender()":"ee75d7d4","claimMint(bytes32[])":"4565e9ff","claimRedemption(bytes32[])":"244f5acf","collateral()":"d8dfeb45","decimalsMultiplier()":"bb13245f","depositIdToClaimableTimestamp(bytes32)":"8a07df1e","depositIdToDepositor(bytes32)":"5d591d68","feeRecipient()":"46904840","getRoleAdmin(bytes32)":"248a9ca3","getRoleMember(bytes32,uint256)":"9010d07c","getRoleMemberCount(bytes32)":"ca15c873","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","minimumDepositAmount()":"080c279a","minimumOffChainRedemptionAmount()":"12589fb5","minimumRedemptionAmount()":"e0f486ef","mintFee()":"13966db5","offChainRedemptionPaused()":"dd45eef6","overwriteDepositor(bytes32,address,uint256,uint256)":"de6afa82","overwriteRedeemer(bytes32,address,uint256,uint256)":"258492cd","pauseOffChainRedemption()":"49cbbf2a","pauseRedemption()":"92bccb80","pauseSubscription()":"2056aa12","pricer()":"a6138ed9","redemptionFee()":"458f5815","redemptionIdToRedeemer(bytes32)":"38fed708","redemptionPaused()":"73a95ddd","redemptionRequestCounter()":"354181f3","renounceRole(bytes32,address)":"36568abe","requestRedemption(uint256)":"eeb3c910","requestRedemptionServicedOffchain(uint256,bytes32)":"f80a36d6","requestSubscription(uint256)":"d592d815","revokeRole(bytes32,address)":"d547741f","rwa()":"95e4b251","setAssetSender(address)":"525decd6","setClaimableTimestamp(uint256,bytes32[])":"d0c835ce","setFeeRecipient(address)":"e74b981b","setMinimumDepositAmount(uint256)":"aab483d6","setMinimumRedemptionAmount(uint256)":"4ef1ccd1","setMintFee(uint256)":"eddd0d9c","setOffChainRedemptionMinimum(uint256)":"e4107c97","setPriceIdForDeposits(bytes32[],uint256[])":"87e2d06e","setPriceIdForRedemptions(bytes32[],uint256[])":"aa85c1df","setPricer(address)":"29390370","setRedemptionFee(uint256)":"7dbc1df0","subscriptionPaused()":"cd4d0bcf","subscriptionRequestCounter()":"07bda1bb","supportsInterface(bytes4)":"01ffc9a7","unpauseOffChainRedemption()":"4dfe7af2","unpauseRedemption()":"8d044c06","unpauseSubscription()":"837018fa"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rwa\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"managerAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimumDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumRedemptionAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"blocklist\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AmountTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArraySizeMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AssetSenderCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimableTimestampInPast\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimableTimestampNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollateralCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositProofAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositorNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeaturePaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeRecipientCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintNotYetClaimable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceIdAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceIdNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RWACannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemerNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedemptionTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TxnAlreadyValidated\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAssetSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAssetSender\",\"type\":\"address\"}],\"name\":\"AssetSenderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimTimestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"depositId\",\"type\":\"bytes32\"}],\"name\":\"ClaimableTimestampSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmountAfterFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DepositProofAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"depositId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDepositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDepositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPriceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPriceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDepositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDepositAmount\",\"type\":\"uint256\"}],\"name\":\"DepositorOverwritten\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldFeeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinimum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimum\",\"type\":\"uint256\"}],\"name\":\"MinimumDepositAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRedemptionMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRedemptionMin\",\"type\":\"uint256\"}],\"name\":\"MinimumRedemptionAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"depositId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rwaAmountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmountDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"}],\"name\":\"MintCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"MintFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"depositId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmountDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmountAfterFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"MintRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPricer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPricer\",\"type\":\"address\"}],\"name\":\"NewPricerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinimum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimum\",\"type\":\"uint256\"}],\"name\":\"OffChainRedemptionMinimumSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"OffChainRedemptionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"OffChainRedemptionUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"depositIdSet\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceIdSet\",\"type\":\"uint256\"}],\"name\":\"PriceIdSetForDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"redemptionIdSet\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceIdSet\",\"type\":\"uint256\"}],\"name\":\"PriceIdSetForRedemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"redemptionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRedeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRedeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPriceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPriceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRWATokenAmountBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRWATokenAmountBurned\",\"type\":\"uint256\"}],\"name\":\"RedeemerOverwritten\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"redemptionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rwaAmountRequested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmountReturned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"RedemptionCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"RedemptionFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RedemptionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"redemptionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rwaAmountIn\",\"type\":\"uint256\"}],\"name\":\"RedemptionRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"redemptionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rwaTokenAmountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"offChainDestination\",\"type\":\"bytes32\"}],\"name\":\"RedemptionRequestedServicedOffChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RedemptionUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SubscriptionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SubscriptionUnpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BPS_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_ID_SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIMESTAMP_SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmountAfterFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"addProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"depositIds\",\"type\":\"bytes32[]\"}],\"name\":\"claimMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"redemptionIds\",\"type\":\"bytes32[]\"}],\"name\":\"claimRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalsMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"depositIdToClaimableTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"depositIdToDepositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountDepositedMinusFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumOffChainRedemptionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumRedemptionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offChainRedemptionPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"depositIdToOverwrite\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmountAfterFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"}],\"name\":\"overwriteDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"redemptionIdToOverwrite\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rwaTokenAmountBurned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"}],\"name\":\"overwriteRedeemer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseOffChainRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricer\",\"outputs\":[{\"internalType\":\"contract IPricerReader\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"redemptionIdToRedeemer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountRwaTokenBurned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionRequestCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountRWATokenToRedeem\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"offChainDestination\",\"type\":\"bytes32\"}],\"name\":\"requestRedemptionServicedOffchain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rwa\",\"outputs\":[{\"internalType\":\"contract IRWALike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAssetSender\",\"type\":\"address\"}],\"name\":\"setAssetSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"depositIds\",\"type\":\"bytes32[]\"}],\"name\":\"setClaimableTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minDepositAmount\",\"type\":\"uint256\"}],\"name\":\"setMinimumDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumRedemptionAmount\",\"type\":\"uint256\"}],\"name\":\"setMinimumRedemptionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintFee\",\"type\":\"uint256\"}],\"name\":\"setMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumOffChainRedemptionAmount\",\"type\":\"uint256\"}],\"name\":\"setOffChainRedemptionMinimum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"depositIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"priceIds\",\"type\":\"uint256[]\"}],\"name\":\"setPriceIdForDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"redemptionIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"priceIds\",\"type\":\"uint256[]\"}],\"name\":\"setPriceIdForRedemptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPricer\",\"type\":\"address\"}],\"name\":\"setPricer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redemptionFee\",\"type\":\"uint256\"}],\"name\":\"setRedemptionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionRequestCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseOffChainRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addProof(bytes32,address,uint256,uint256,uint256)\":{\"details\":\"txHash is used as the depositId in storageAll amounts are in decimals of `collateral`\",\"params\":{\"depositAmountAfterFee\":\"The amount of the deposit after fees\",\"feeAmount\":\"The amount of the fees taken\",\"timestamp\":\"The timestamp of the deposit\",\"txHash\":\"The transaction hash of the deposit\",\"user\":\"The address of the user who made the deposit\"}},\"claimMint(bytes32[])\":{\"details\":\"Implicitly does all transfer checks present in underlying `rwa`The priceId corresponding to a given depositId must be set prior to      claiming a mint\",\"params\":{\"depositIds\":\"An array containing the deposit Ids one wishes to claim\"}},\"claimRedemption(bytes32[])\":{\"details\":\"Implicitly does all checks present in underlying `rwa`The price Id corresponding to a redemptionId must be set prior to      claiming a redemption\",\"params\":{\"redemptionIds\":\"an Array of redemption Id's which ought to fulfilled\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"overwriteDepositor(bytes32,address,uint256,uint256)\":{\"params\":{\"depositAmountAfterFee\":\"The deposit value for the new entry\",\"depositIdToOverwrite\":\"The depositId of the entry we wish to                              overwrite\",\"priceId\":\"The priceId to be associated with the new                              entry\",\"user\":\"The user for the new entry\"}},\"overwriteRedeemer(bytes32,address,uint256,uint256)\":{\"params\":{\"priceId\":\"The priceID to be associated with the new                                entry\",\"redemptionIdToOverwrite\":\"The redemptionId of the entry we wish to                                overwrite\",\"rwaTokenAmountBurned\":\"The burn amount for the new entry\",\"user\":\"The user for the new entry\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"requestRedemption(uint256)\":{\"params\":{\"amount\":\"The amount (in units of `rwa`) that a user wishes to redeem               from the fund\"}},\"requestRedemptionServicedOffchain(uint256,bytes32)\":{\"params\":{\"amountRWATokenToRedeem\":\"The requested redemption amount\",\"offChainDestination\":\"A hash of the destination to which                               the request should be serviced to.\"}},\"requestSubscription(uint256)\":{\"params\":{\"amount\":\"The amount of collateral one wished to deposit\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setAssetSender(address)\":{\"params\":{\"newAssetSender\":\"The address of the new `assetSender`\"}},\"setClaimableTimestamp(uint256,bytes32[])\":{\"params\":{\"claimTimestamp\":\"The timestamp at which the deposit can be claimed\",\"depositIds\":\"The depositIds to set the claimable timestamp for\"}},\"setFeeRecipient(address)\":{\"params\":{\"newFeeRecipient\":\"The address of the new `feeRecipient`\"}},\"setMinimumDepositAmount(uint256)\":{\"params\":{\"minDepositAmount\":\"The minimum amount required to submit a deposit                         request\"}},\"setMinimumRedemptionAmount(uint256)\":{\"params\":{\"_minimumRedemptionAmount\":\"The minimum amount required to submit a                                 redemption request\"}},\"setMintFee(uint256)\":{\"details\":\"The maximum fee that can be set is 10_000 bps, or 100%\",\"params\":{\"_mintFee\":\"The new mint fee specified in basis points\"}},\"setOffChainRedemptionMinimum(uint256)\":{\"params\":{\"_minimumOffChainRedemptionAmount\":\"The new minimum off chain                                         redemption amount\"}},\"setPriceIdForDeposits(bytes32[],uint256[])\":{\"details\":\"Array size must match\",\"params\":{\"depositIds\":\"an Array of deposit Ids to be associated\",\"priceIds\":\"an Array of price Ids to be associated\"}},\"setPriceIdForRedemptions(bytes32[],uint256[])\":{\"params\":{\"priceIds\":\"an Array of priceIds to associate\",\"redemptionIds\":\"an Array of redemptionIds to associate\"}},\"setPricer(address)\":{\"params\":{\"newPricer\":\"The address of the new pricer contract\"}},\"setRedemptionFee(uint256)\":{\"details\":\"The maximum fee that can be set is 10_000 bps, or 100%\",\"params\":{\"_redemptionFee\":\"The new redeem fee specified in basis points\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"MintNotYetClaimable()\":[{\"notice\":\"ERRORS ///\"}],\"PriceIdNotSet()\":[{\"notice\":\"ERRORS ///\"}]},\"events\":{\"AssetSenderSet(address,address)\":{\"notice\":\"Event emitted when the assetSender is changed\"},\"ClaimableTimestampSet(uint256,bytes32)\":{\"notice\":\"Event emitted when claimable timestamp is set\"},\"DepositProofAdded(bytes32,address,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when deposit proof has been added\"},\"FeeRecipientSet(address,address)\":{\"notice\":\"Event emitted when fee recipient is set\"},\"MinimumDepositAmountSet(uint256,uint256)\":{\"notice\":\"Event emitted when minimum deposit amount is set\"},\"MinimumRedemptionAmountSet(uint256,uint256)\":{\"notice\":\"Event emitted when a new redeem minimum is set.         All units are in 1e18\"},\"MintCompleted(address,bytes32,uint256,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a Mint request is completed\"},\"MintFeeSet(uint256,uint256)\":{\"notice\":\"Event emitted when mint fee is set\"},\"MintRequested(address,bytes32,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a mint request is submitted\"},\"NewPricerSet(address,address)\":{\"notice\":\"Event emitted when a new Pricer contract is set\"},\"OffChainRedemptionMinimumSet(uint256,uint256)\":{\"notice\":\"Event emitted when the off chain redemption minimum is         updated\"},\"OffChainRedemptionPaused(address)\":{\"notice\":\"Event emitted when the off chain redemption feature is         paused\"},\"OffChainRedemptionUnpaused(address)\":{\"notice\":\"Event emitted when the off chain redemption feature is         unpaused\"},\"PriceIdSetForDeposit(bytes32,uint256)\":{\"notice\":\"Event emitted when a deposit has its corresponding priceId set\"},\"PriceIdSetForRedemption(bytes32,uint256)\":{\"notice\":\"Event Emitted when a redemption has its corresponding priceId set\"},\"RedemptionCompleted(address,bytes32,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a redemption request is completed\"},\"RedemptionFeeSet(uint256,uint256)\":{\"notice\":\"Event emitted when redeem fee is set\"},\"RedemptionPaused(address)\":{\"notice\":\"Event emitted when redemptions are paused\"},\"RedemptionRequested(address,bytes32,uint256)\":{\"notice\":\"Event emitted when redemption request is submitted\"},\"RedemptionRequestedServicedOffChain(address,bytes32,uint256,bytes32)\":{\"notice\":\"Event emitted when redemption request is submitted\"},\"RedemptionUnpaused(address)\":{\"notice\":\"Event emitted when redemptions are unpaused\"},\"SubscriptionPaused(address)\":{\"notice\":\"Event emitted when subscriptions are paused\"},\"SubscriptionUnpaused(address)\":{\"notice\":\"Event emitted when subscriptions are unpaused\"}},\"kind\":\"user\",\"methods\":{\"addProof(bytes32,address,uint256,uint256,uint256)\":{\"notice\":\"Adds a deposit proof to the contract\"},\"claimMint(bytes32[])\":{\"notice\":\"Function used to claim tokens corresponding to a deposit request\"},\"claimRedemption(bytes32[])\":{\"notice\":\"Function to claim collateral corresponding to a redemption request\"},\"overwriteDepositor(bytes32,address,uint256,uint256)\":{\"notice\":\"Admin function to overwrite entries in the depoitIdToDepositor         mapping\"},\"overwriteRedeemer(bytes32,address,uint256,uint256)\":{\"notice\":\"Admin function to overwrite entries in the redemptionIdToRedeemer         mapping\"},\"pauseOffChainRedemption()\":{\"notice\":\"Function to pause off chain redemptoins\"},\"pauseRedemption()\":{\"notice\":\"Function to pause redemptions to RWAHub\"},\"pauseSubscription()\":{\"notice\":\"Function to pause subscription to RWAHub\"},\"requestRedemption(uint256)\":{\"notice\":\"Function used by users to request a redemption from the fund\"},\"requestRedemptionServicedOffchain(uint256,bytes32)\":{\"notice\":\"Request a redemption to be serviced off chain.\"},\"requestSubscription(uint256)\":{\"notice\":\"Function used by users to request subscription to the fund\"},\"setAssetSender(address)\":{\"notice\":\"Admin function to set the address of `assetSender`\"},\"setClaimableTimestamp(uint256,bytes32[])\":{\"notice\":\"Set the claimable timestamp for a list of depositIds\"},\"setFeeRecipient(address)\":{\"notice\":\"Admin function to set the address of `feeRecipient`\"},\"setMinimumDepositAmount(uint256)\":{\"notice\":\"Admin function to set the minimum amount required for a deposit\"},\"setMinimumRedemptionAmount(uint256)\":{\"notice\":\"Admin function to set the minimum amount to redeem\"},\"setMintFee(uint256)\":{\"notice\":\"Admin function to set the mint fee\"},\"setOffChainRedemptionMinimum(uint256)\":{\"notice\":\"Admin Function to set the minimum off chain redemption amount\"},\"setPriceIdForDeposits(bytes32[],uint256[])\":{\"notice\":\"Admin function to associate a depositId with a given Price Id\"},\"setPriceIdForRedemptions(bytes32[],uint256[])\":{\"notice\":\"Admin function to associate redemptionId with a given priceId\"},\"setPricer(address)\":{\"notice\":\"Admin function to set the address of the Pricer contract\"},\"setRedemptionFee(uint256)\":{\"notice\":\"Admin function to set the redeem fee\"},\"unpauseOffChainRedemption()\":{\"notice\":\"Function to unpause off chain redemptoins\"},\"unpauseRedemption()\":{\"notice\":\"Function to unpause redemptions to RWAHub\"},\"unpauseSubscription()\":{\"notice\":\"Function to unpause subscriptions to RWAHub\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/abby/ABBYManager.sol\":\"ABBYManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/RWAHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"contracts/interfaces/IPricerReader.sol\\\";\\nimport \\\"contracts/interfaces/IRWALike.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/token/IERC20.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/token/SafeERC20.sol\\\";\\nimport \\\"contracts/interfaces/IRWAHub.sol\\\";\\n\\n// Additional Dependencies\\nimport \\\"contracts/external/openzeppelin/contracts/token/IERC20Metadata.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nabstract contract RWAHub is IRWAHub, ReentrancyGuard, AccessControlEnumerable {\\n  using SafeERC20 for IERC20;\\n  // RWA Token contract\\n  IRWALike public immutable rwa;\\n  // Pointer to Pricer\\n  IPricerReader public pricer;\\n  // Address to receive deposits\\n  address public constant assetRecipient =\\n    0x0686b3a7B9bE2751bB51084a6E0E7DB7f1746eb1; // ABBY - CB Deposit Address\\n  // Address to send redemptions\\n  address public assetSender;\\n  // Address fee recipient\\n  address public feeRecipient;\\n  // Mapping from deposit Id -> Depositor\\n  mapping(bytes32 => Depositor) public depositIdToDepositor;\\n  // Mapping from redemptionId -> Redeemer\\n  mapping(bytes32 => Redeemer) public redemptionIdToRedeemer;\\n\\n  /// @dev Mint/Redeem Parameters\\n  // Minimum amount that must be deposited to mint the RWA token\\n  // Denoted in decimals of `collateral`\\n  uint256 public minimumDepositAmount;\\n\\n  // Minimum amount that must be redeemed for a withdraw request\\n  uint256 public minimumRedemptionAmount;\\n\\n  // Minting fee specified in basis points\\n  uint256 public mintFee = 0;\\n\\n  // Redemption fee specified in basis points\\n  uint256 public redemptionFee = 0;\\n\\n  // The asset accepted by the RWAHub\\n  IERC20 public immutable collateral;\\n\\n  // Decimal multiplier representing the difference between `rwa` decimals\\n  // In `collateral` token decimals\\n  uint256 public immutable decimalsMultiplier;\\n\\n  // Deposit counter to map subscription requests to\\n  uint256 public subscriptionRequestCounter = 1;\\n\\n  // Redemption Id to map from\\n  uint256 public redemptionRequestCounter = 1;\\n\\n  // Helper constant that allows us to specify basis points in calculations\\n  uint256 public constant BPS_DENOMINATOR = 10_000;\\n\\n  // Pause variables\\n  bool public redemptionPaused;\\n  bool public subscriptionPaused;\\n\\n  /// @dev Role based access control roles\\n  bytes32 public constant MANAGER_ADMIN = keccak256(\\\"MANAGER_ADMIN\\\");\\n  bytes32 public constant PAUSER_ADMIN = keccak256(\\\"PAUSER_ADMIN\\\");\\n  bytes32 public constant PRICE_ID_SETTER_ROLE =\\n    keccak256(\\\"PRICE_ID_SETTER_ROLE\\\");\\n  bytes32 public constant RELAYER_ROLE = keccak256(\\\"RELAYER_ROLE\\\");\\n\\n  /// @notice constructor\\n  constructor(\\n    address _collateral,\\n    address _rwa,\\n    address managerAdmin,\\n    address pauser,\\n    address _assetSender,\\n    address _feeRecipient,\\n    uint256 _minimumDepositAmount,\\n    uint256 _minimumRedemptionAmount\\n  ) {\\n    if (_collateral == address(0)) {\\n      revert CollateralCannotBeZero();\\n    }\\n    if (_rwa == address(0)) {\\n      revert RWACannotBeZero();\\n    }\\n    if (_assetSender == address(0)) {\\n      revert AssetSenderCannotBeZero();\\n    }\\n    if (_feeRecipient == address(0)) {\\n      revert FeeRecipientCannotBeZero();\\n    }\\n\\n    _grantRole(DEFAULT_ADMIN_ROLE, managerAdmin);\\n    _grantRole(MANAGER_ADMIN, managerAdmin);\\n    _grantRole(PAUSER_ADMIN, pauser);\\n    _grantRole(PRICE_ID_SETTER_ROLE, managerAdmin);\\n    _grantRole(keccak256(\\\"TIMESTAMP_SETTER_ROLE\\\"), managerAdmin);\\n    \\n    _setRoleAdmin(PAUSER_ADMIN, MANAGER_ADMIN);\\n    _setRoleAdmin(PRICE_ID_SETTER_ROLE, MANAGER_ADMIN);\\n    _setRoleAdmin(RELAYER_ROLE, MANAGER_ADMIN);\\n\\n    collateral = IERC20(_collateral);\\n    rwa = IRWALike(_rwa);\\n    feeRecipient = _feeRecipient;\\n    assetSender = _assetSender;\\n    minimumDepositAmount = _minimumDepositAmount;\\n    minimumRedemptionAmount = _minimumRedemptionAmount;\\n\\n    decimalsMultiplier =\\n      10 **\\n        (IERC20Metadata(_rwa).decimals() -\\n          IERC20Metadata(_collateral).decimals());\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                  Subscription/Redemption Functions\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Function used by users to request subscription to the fund\\n   *\\n   * @param amount The amount of collateral one wished to deposit\\n   */\\n  function requestSubscription(\\n    uint256 amount\\n  )\\n    external\\n    virtual\\n    nonReentrant\\n    ifNotPaused(subscriptionPaused)\\n  {\\n    if (amount < minimumDepositAmount) {\\n      revert DepositTooSmall();\\n    }\\n\\n    uint256 feesInCollateral = _getMintFees(amount);\\n    uint256 depositAmountAfterFee = amount - feesInCollateral;\\n\\n    // Link the depositor to their deposit ID\\n    bytes32 depositId = bytes32(subscriptionRequestCounter++);\\n    depositIdToDepositor[depositId] = Depositor(\\n      msg.sender,\\n      depositAmountAfterFee,\\n      0\\n    );\\n\\n    if (feesInCollateral > 0) {\\n      collateral.safeTransferFrom(msg.sender, feeRecipient, feesInCollateral);\\n    }\\n\\n    collateral.safeTransferFrom(\\n      msg.sender,\\n      assetRecipient,\\n      depositAmountAfterFee\\n    );\\n\\n    emit MintRequested(\\n      msg.sender,\\n      depositId,\\n      amount,\\n      depositAmountAfterFee,\\n      feesInCollateral\\n    );\\n  }\\n\\n  /**\\n   * @notice Function used to claim tokens corresponding to a deposit request\\n   *\\n   * @param depositIds An array containing the deposit Ids one wishes to claim\\n   *\\n   * @dev Implicitly does all transfer checks present in underlying `rwa`\\n   * @dev The priceId corresponding to a given depositId must be set prior to\\n   *      claiming a mint\\n   */\\n  function claimMint(\\n    bytes32[] calldata depositIds\\n  ) external virtual nonReentrant ifNotPaused(subscriptionPaused) {\\n    uint256 depositsSize = depositIds.length;\\n    for (uint256 i = 0; i < depositsSize; ++i) {\\n      _claimMint(depositIds[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Internal claim mint helper\\n   *\\n   * @dev This function can be overriden to implement custom claiming logic\\n   */\\n  function _claimMint(bytes32 depositId) internal virtual {\\n    Depositor memory depositor = depositIdToDepositor[depositId];\\n    // Revert if priceId is not set\\n    if (depositor.priceId == 0) {\\n      revert PriceIdNotSet();\\n    }\\n\\n    uint256 price = pricer.getPrice(depositor.priceId);\\n    uint256 rwaOwed = _getMintAmountForPrice(\\n      depositor.amountDepositedMinusFees,\\n      price\\n    );\\n\\n    delete depositIdToDepositor[depositId];\\n    rwa.mint(depositor.user, rwaOwed);\\n\\n    emit MintCompleted(\\n      depositor.user,\\n      depositId,\\n      rwaOwed,\\n      depositor.amountDepositedMinusFees,\\n      price,\\n      depositor.priceId\\n    );\\n  }\\n\\n  /**\\n   * @notice Function used by users to request a redemption from the fund\\n   *\\n   * @param amount The amount (in units of `rwa`) that a user wishes to redeem\\n   *               from the fund\\n   */\\n  function requestRedemption(\\n    uint256 amount\\n  ) external virtual nonReentrant ifNotPaused(redemptionPaused) {\\n    if (amount < minimumRedemptionAmount) {\\n      revert RedemptionTooSmall();\\n    }\\n    bytes32 redemptionId = bytes32(redemptionRequestCounter++);\\n    redemptionIdToRedeemer[redemptionId] = Redeemer(msg.sender, amount, 0);\\n\\n    rwa.burnFrom(msg.sender, amount);\\n\\n    emit RedemptionRequested(msg.sender, redemptionId, amount);\\n  }\\n\\n  /**\\n   * @notice Function to claim collateral corresponding to a redemption request\\n   *\\n   * @param redemptionIds an Array of redemption Id's which ought to fulfilled\\n   *\\n   * @dev Implicitly does all checks present in underlying `rwa`\\n   * @dev The price Id corresponding to a redemptionId must be set prior to\\n   *      claiming a redemption\\n   */\\n  function claimRedemption(\\n    bytes32[] calldata redemptionIds\\n  ) external virtual nonReentrant ifNotPaused(redemptionPaused) {\\n    uint256 fees;\\n    uint256 redemptionsSize = redemptionIds.length;\\n    // for (uint256 i = 0; i < redemptionsSize; ++i) {\\n    //   Redeemer memory member = redemptionIdToRedeemer[redemptionIds[i]];\\n    //   //_checkRestrictions(member.user);\\n    //   if (member.priceId == 0) {\\n    //     // Then the price for this redemption has not been set\\n    //     revert PriceIdNotSet();\\n    //   }\\n\\n    //   // Calculate collateral due and fees\\n    //   uint256 price = pricer.getPrice(member.priceId);\\n    //   uint256 collateralDue = _getRedemptionAmountForRwa(\\n    //     member.amountRwaTokenBurned,\\n    //     price\\n    //   );\\n    //   uint256 fee = _getRedemptionFees(collateralDue);\\n    //   uint256 collateralDuePostFees = collateralDue - fee;\\n    //   fees += fee;\\n\\n    //   delete redemptionIdToRedeemer[redemptionIds[i]];\\n\\n    //   collateral.safeTransferFrom(\\n    //     assetSender,\\n    //     member.user,\\n    //     collateralDuePostFees\\n    //   );\\n\\n    //   emit RedemptionCompleted(\\n    //     member.user,\\n    //     redemptionIds[i],\\n    //     member.amountRwaTokenBurned,\\n    //     collateralDuePostFees,\\n    //     price\\n    //   );\\n    // }\\n    // if (fees > 0) {\\n    //   collateral.safeTransferFrom(assetSender, feeRecipient, fees);\\n    // }\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                         Relayer Functions\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Adds a deposit proof to the contract\\n   *\\n   * @param txHash                The transaction hash of the deposit\\n   * @param user                  The address of the user who made the deposit\\n   * @param depositAmountAfterFee The amount of the deposit after fees\\n   * @param feeAmount             The amount of the fees taken\\n   * @param timestamp             The timestamp of the deposit\\n   *\\n   * @dev txHash is used as the depositId in storage\\n   * @dev All amounts are in decimals of `collateral`\\n   */\\n  function addProof(\\n    bytes32 txHash,\\n    address user,\\n    uint256 depositAmountAfterFee,\\n    uint256 feeAmount,\\n    uint256 timestamp\\n  ) external override onlyRole(RELAYER_ROLE) {\\n    if (depositIdToDepositor[txHash].user != address(0)) {\\n      revert DepositProofAlreadyExists();\\n    }\\n    depositIdToDepositor[txHash] = Depositor(user, depositAmountAfterFee, 0);\\n    emit DepositProofAdded(\\n      txHash,\\n      user,\\n      depositAmountAfterFee,\\n      feeAmount,\\n      timestamp\\n    );\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                           PriceId Setters\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Admin function to associate a depositId with a given Price Id\\n   *\\n   * @param depositIds an Array of deposit Ids to be associated\\n   * @param priceIds   an Array of price Ids to be associated\\n   *\\n   * @dev Array size must match\\n   */\\n  function setPriceIdForDeposits(\\n    bytes32[] calldata depositIds,\\n    uint256[] calldata priceIds\\n  ) external virtual onlyRole(PRICE_ID_SETTER_ROLE) {\\n    uint256 depositsSize = depositIds.length;\\n    if (depositsSize != priceIds.length) {\\n      revert ArraySizeMismatch();\\n    }\\n    for (uint256 i = 0; i < depositsSize; ++i) {\\n      if (depositIdToDepositor[depositIds[i]].user == address(0)) {\\n        revert DepositorNull();\\n      }\\n      if (depositIdToDepositor[depositIds[i]].priceId != 0) {\\n        revert PriceIdAlreadySet();\\n      }\\n      depositIdToDepositor[depositIds[i]].priceId = priceIds[i];\\n      emit PriceIdSetForDeposit(depositIds[i], priceIds[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Admin function to associate redemptionId with a given priceId\\n   *\\n   * @param redemptionIds an Array of redemptionIds to associate\\n   * @param priceIds  an Array of priceIds to associate\\n   */\\n  function setPriceIdForRedemptions(\\n    bytes32[] calldata redemptionIds,\\n    uint256[] calldata priceIds\\n  ) external virtual onlyRole(PRICE_ID_SETTER_ROLE) {\\n    uint256 redemptionsSize = redemptionIds.length;\\n    if (redemptionsSize != priceIds.length) {\\n      revert ArraySizeMismatch();\\n    }\\n    for (uint256 i = 0; i < redemptionsSize; ++i) {\\n      if (redemptionIdToRedeemer[redemptionIds[i]].priceId != 0) {\\n        revert PriceIdAlreadySet();\\n      }\\n      redemptionIdToRedeemer[redemptionIds[i]].priceId = priceIds[i];\\n      emit PriceIdSetForRedemption(redemptionIds[i], priceIds[i]);\\n    }\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                           Admin Setters\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Admin function to overwrite entries in the depoitIdToDepositor\\n   *         mapping\\n   *\\n   * @param depositIdToOverwrite  The depositId of the entry we wish to\\n   *                              overwrite\\n   * @param user                  The user for the new entry\\n   * @param depositAmountAfterFee The deposit value for the new entry\\n   * @param priceId               The priceId to be associated with the new\\n   *                              entry\\n   */\\n  function overwriteDepositor(\\n    bytes32 depositIdToOverwrite,\\n    address user,\\n    uint256 depositAmountAfterFee,\\n    uint256 priceId\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    Depositor memory oldDepositor = depositIdToDepositor[depositIdToOverwrite];\\n\\n    depositIdToDepositor[depositIdToOverwrite] = Depositor(\\n      user,\\n      depositAmountAfterFee,\\n      priceId\\n    );\\n\\n    emit DepositorOverwritten(\\n      depositIdToOverwrite,\\n      oldDepositor.user,\\n      user,\\n      oldDepositor.priceId,\\n      priceId,\\n      oldDepositor.amountDepositedMinusFees,\\n      depositAmountAfterFee\\n    );\\n  }\\n\\n  /**\\n   * @notice Admin function to overwrite entries in the redemptionIdToRedeemer\\n   *         mapping\\n   *\\n   * @param redemptionIdToOverwrite The redemptionId of the entry we wish to\\n   *                                overwrite\\n   * @param user                    The user for the new entry\\n   * @param rwaTokenAmountBurned    The burn amount for the new entry\\n   * @param priceId                 The priceID to be associated with the new\\n   *                                entry\\n   */\\n  function overwriteRedeemer(\\n    bytes32 redemptionIdToOverwrite,\\n    address user,\\n    uint256 rwaTokenAmountBurned,\\n    uint256 priceId\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    Redeemer memory oldRedeemer = redemptionIdToRedeemer[\\n      redemptionIdToOverwrite\\n    ];\\n    redemptionIdToRedeemer[redemptionIdToOverwrite] = Redeemer(\\n      user,\\n      rwaTokenAmountBurned,\\n      priceId\\n    );\\n    emit RedeemerOverwritten(\\n      redemptionIdToOverwrite,\\n      oldRedeemer.user,\\n      user,\\n      oldRedeemer.priceId,\\n      priceId,\\n      oldRedeemer.amountRwaTokenBurned,\\n      rwaTokenAmountBurned\\n    );\\n  }\\n\\n  /**\\n   * @notice Admin function to set the minimum amount to redeem\\n   *\\n   * @param _minimumRedemptionAmount The minimum amount required to submit a\\n   *                                 redemption request\\n   */\\n  function setMinimumRedemptionAmount(\\n    uint256 _minimumRedemptionAmount\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    if (_minimumRedemptionAmount < BPS_DENOMINATOR) {\\n      revert AmountTooSmall();\\n    }\\n    uint256 oldRedeemMinimum = minimumRedemptionAmount;\\n    minimumRedemptionAmount = _minimumRedemptionAmount;\\n    emit MinimumRedemptionAmountSet(oldRedeemMinimum, _minimumRedemptionAmount);\\n  }\\n\\n  /**\\n   * @notice Admin function to set the minimum amount required for a deposit\\n   *\\n   * @param minDepositAmount The minimum amount required to submit a deposit\\n   *                         request\\n   */\\n  function setMinimumDepositAmount(\\n    uint256 minDepositAmount\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    if (minDepositAmount < BPS_DENOMINATOR) {\\n      revert AmountTooSmall();\\n    }\\n    uint256 oldMinimumDepositAmount = minimumDepositAmount;\\n    minimumDepositAmount = minDepositAmount;\\n    emit MinimumDepositAmountSet(oldMinimumDepositAmount, minDepositAmount);\\n  }\\n\\n  /**\\n   * @notice Admin function to set the mint fee\\n   *\\n   * @param _mintFee The new mint fee specified in basis points\\n   *\\n   * @dev The maximum fee that can be set is 10_000 bps, or 100%\\n   */\\n  function setMintFee(uint256 _mintFee) external onlyRole(MANAGER_ADMIN) {\\n    if (_mintFee > BPS_DENOMINATOR) {\\n      revert FeeTooLarge();\\n    }\\n    uint256 oldMintFee = mintFee;\\n    mintFee = _mintFee;\\n    emit MintFeeSet(oldMintFee, _mintFee);\\n  }\\n\\n  /**\\n   * @notice Admin function to set the redeem fee\\n   *\\n   * @param _redemptionFee The new redeem fee specified in basis points\\n   *\\n   * @dev The maximum fee that can be set is 10_000 bps, or 100%\\n   */\\n  function setRedemptionFee(\\n    uint256 _redemptionFee\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    if (_redemptionFee > BPS_DENOMINATOR) {\\n      revert FeeTooLarge();\\n    }\\n    uint256 oldRedeemFee = redemptionFee;\\n    redemptionFee = _redemptionFee;\\n    emit RedemptionFeeSet(oldRedeemFee, _redemptionFee);\\n  }\\n\\n  /**\\n   * @notice Admin function to set the address of the Pricer contract\\n   *\\n   * @param newPricer The address of the new pricer contract\\n   */\\n  function setPricer(address newPricer) external onlyRole(MANAGER_ADMIN) {\\n    address oldPricer = address(pricer);\\n    pricer = IPricerReader(newPricer);\\n    emit NewPricerSet(oldPricer, newPricer);\\n  }\\n\\n  /**\\n   * @notice Admin function to set the address of `feeRecipient`\\n   *\\n   * @param newFeeRecipient The address of the new `feeRecipient`\\n   */\\n  function setFeeRecipient(\\n    address newFeeRecipient\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    address oldFeeRecipient = feeRecipient;\\n    feeRecipient = newFeeRecipient;\\n    emit FeeRecipientSet(oldFeeRecipient, feeRecipient);\\n  }\\n\\n  /**\\n   * @notice Admin function to set the address of `assetSender`\\n   *\\n   * @param newAssetSender The address of the new `assetSender`\\n   */\\n  function setAssetSender(\\n    address newAssetSender\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    address oldAssetSender = assetSender;\\n    assetSender = newAssetSender;\\n    emit AssetSenderSet(oldAssetSender, newAssetSender);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                            Pause Utils\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Modifier to check if a feature is paused\\n   *\\n   * @param feature The feature to check if paused\\n   */\\n  modifier ifNotPaused(bool feature) {\\n    if (feature) {\\n      revert FeaturePaused();\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Function to pause subscription to RWAHub\\n   */\\n  function pauseSubscription() external onlyRole(PAUSER_ADMIN) {\\n    subscriptionPaused = true;\\n    emit SubscriptionPaused(msg.sender);\\n  }\\n\\n  /**\\n   * @notice Function to pause redemptions to RWAHub\\n   */\\n  function pauseRedemption() external onlyRole(PAUSER_ADMIN) {\\n    redemptionPaused = true;\\n    emit RedemptionPaused(msg.sender);\\n  }\\n\\n  /**\\n   * @notice Function to unpause subscriptions to RWAHub\\n   */\\n  function unpauseSubscription() external onlyRole(MANAGER_ADMIN) {\\n    subscriptionPaused = false;\\n    emit SubscriptionUnpaused(msg.sender);\\n  }\\n\\n  /**\\n   * @notice Function to unpause redemptions to RWAHub\\n   */\\n  function unpauseRedemption() external onlyRole(MANAGER_ADMIN) {\\n    redemptionPaused = false;\\n    emit RedemptionUnpaused(msg.sender);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                      Check Restriction Utils\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Modifier to check restrictions status of an account\\n   *\\n   * @param account The account to check\\n   */\\n  /*modifier checkRestrictions(address account) {\\n    _checkRestrictions(account);\\n    _;\\n  }*/\\n\\n  /**\\n   * @notice internal function to check restriction status\\n   *         of an address\\n   *\\n   * @param account The account to check restriction status for\\n   *\\n   * @dev This function is virtual to be overridden by child contract\\n   *      to check restrictions on a more granular level\\n   */\\n  //function _checkRestrictions(address account) internal view virtual;\\n\\n  /*//////////////////////////////////////////////////////////////\\n                           Math Utils\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Given amount of `collateral`, returns how much in fees\\n   *         are owed\\n   *\\n   *\\n   * @param collateralAmount Amount `collateral` to calculate fees\\n   *                         (in decimals of `collateral`)\\n   */\\n  function _getMintFees(\\n    uint256 collateralAmount\\n  ) internal view returns (uint256) {\\n    return (collateralAmount * mintFee) / BPS_DENOMINATOR;\\n  }\\n\\n  /**\\n   * @notice Given amount of `collateral`, returns how much in fees\\n   *         are owed\\n   *\\n   * @param collateralAmount Amount of `collateral` to calculate fees\\n   *                         (in decimals of `collateral`)\\n   */\\n  function _getRedemptionFees(\\n    uint256 collateralAmount\\n  ) internal view returns (uint256) {\\n    return (collateralAmount * redemptionFee) / BPS_DENOMINATOR;\\n  }\\n\\n  /**\\n   * @notice Given a deposit amount and priceId, returns the amount\\n   *         of `rwa` due\\n   *\\n   * @param depositAmt The amount deposited in units of `collateral`\\n   * @param price      The price associated with this deposit\\n   */\\n  function _getMintAmountForPrice(\\n    uint256 depositAmt,\\n    uint256 price\\n  ) internal view returns (uint256 rwaAmountOut) {\\n    uint256 amountE36 = _scaleUp(depositAmt) * 1e18;\\n    // Will revert with div by 0 if price not defined for a priceId\\n    rwaAmountOut = amountE36 / price;\\n  }\\n\\n  /**\\n   * @notice Given a redemption amount and a priceId, returns the amount\\n   *         of `collateral` due\\n   *\\n   * @param rwaTokenAmountBurned The amount of `rwa` burned for a redemption\\n   * @param price                The price associated with this redemption\\n   */\\n  function _getRedemptionAmountForRwa(\\n    uint256 rwaTokenAmountBurned,\\n    uint256 price\\n  ) internal view returns (uint256 collateralOwed) {\\n    uint256 amountE36 = rwaTokenAmountBurned * price;\\n    collateralOwed = _scaleDown(amountE36 / 1e18);\\n  }\\n\\n  /**\\n   * @notice Scale provided amount up by `decimalsMultiplier`\\n   *\\n   * @dev This helper is used for converting the collateral's decimals\\n   *      representation to the RWA amount decimals representation.\\n   */\\n  function _scaleUp(uint256 amount) internal view returns (uint256) {\\n    return amount * decimalsMultiplier;\\n  }\\n\\n  /**\\n   * @notice Scale provided amount down by `decimalsMultiplier`\\n   *\\n   * @dev This helper is used for converting `rwa`'s decimal\\n   *      representation to the `collateral`'s decimal representation\\n   */\\n  function _scaleDown(uint256 amount) internal view returns (uint256) {\\n    return amount / decimalsMultiplier;\\n  }\\n}\\n\",\"keccak256\":\"0x43b10191833d4a124fb6edfaacbfbd19eecaefe80df2c13900d32e600bf6ec1a\",\"license\":\"MIT\"},\"contracts/RWAHubOffChainRedemptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"contracts/RWAHub.sol\\\";\\nimport \\\"contracts/interfaces/IRWAHubOffChainRedemptions.sol\\\";\\n\\nabstract contract RWAHubOffChainRedemptions is\\n  RWAHub,\\n  IRWAHubOffChainRedemptions\\n{\\n  // To enable and disable off chain redemptions\\n  bool public offChainRedemptionPaused;\\n\\n  // Minimum off chain redemption amount\\n  uint256 public minimumOffChainRedemptionAmount;\\n\\n  constructor(\\n    address _collateral,\\n    address _rwa,\\n    address managerAdmin,\\n    address pauser,\\n    address _assetSender,\\n    address _feeRecipient,\\n    uint256 _minimumDepositAmount,\\n    uint256 _minimumRedemptionAmount\\n  )\\n    RWAHub(\\n      _collateral,\\n      _rwa,\\n      managerAdmin,\\n      pauser,\\n      _assetSender,\\n      _feeRecipient,\\n      _minimumDepositAmount,\\n      _minimumRedemptionAmount\\n    )\\n  {\\n    // Default to the same minimum redemption amount as for On-Chain\\n    // redemptions.\\n    minimumOffChainRedemptionAmount = _minimumRedemptionAmount;\\n  }\\n\\n  /**\\n   * @notice Request a redemption to be serviced off chain.\\n   *\\n   * @param amountRWATokenToRedeem The requested redemption amount\\n   * @param offChainDestination    A hash of the destination to which\\n   *                               the request should be serviced to.\\n   */\\n  function requestRedemptionServicedOffchain(\\n    uint256 amountRWATokenToRedeem,\\n    bytes32 offChainDestination\\n  ) external nonReentrant ifNotPaused(offChainRedemptionPaused) {\\n    if (amountRWATokenToRedeem < minimumOffChainRedemptionAmount) {\\n      revert RedemptionTooSmall();\\n    }\\n\\n    bytes32 redemptionId = bytes32(redemptionRequestCounter++);\\n\\n    rwa.burnFrom(msg.sender, amountRWATokenToRedeem);\\n\\n    emit RedemptionRequestedServicedOffChain(\\n      msg.sender,\\n      redemptionId,\\n      amountRWATokenToRedeem,\\n      offChainDestination\\n    );\\n  }\\n\\n  /**\\n   * @notice Function to pause off chain redemptoins\\n   */\\n  function pauseOffChainRedemption() external onlyRole(PAUSER_ADMIN) {\\n    offChainRedemptionPaused = true;\\n    emit OffChainRedemptionPaused(msg.sender);\\n  }\\n\\n  /**\\n   * @notice Function to unpause off chain redemptoins\\n   */\\n  function unpauseOffChainRedemption() external onlyRole(MANAGER_ADMIN) {\\n    offChainRedemptionPaused = false;\\n    emit OffChainRedemptionUnpaused(msg.sender);\\n  }\\n\\n  /**\\n   * @notice Admin Function to set the minimum off chain redemption amount\\n   *\\n   * @param _minimumOffChainRedemptionAmount The new minimum off chain\\n   *                                         redemption amount\\n   */\\n  function setOffChainRedemptionMinimum(\\n    uint256 _minimumOffChainRedemptionAmount\\n  ) external onlyRole(MANAGER_ADMIN) {\\n    uint256 oldMinimum = minimumOffChainRedemptionAmount;\\n    minimumOffChainRedemptionAmount = _minimumOffChainRedemptionAmount;\\n    emit OffChainRedemptionMinimumSet(\\n      oldMinimum,\\n      _minimumOffChainRedemptionAmount\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x1378a14239c2b650215734ddea4c24d9cdd11071d78534b5ab20f5d913a2149d\",\"license\":\"MIT\"},\"contracts/abby/ABBYManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"contracts/RWAHubOffChainRedemptions.sol\\\";\\n//import \\\"contracts/abby/blocklist/BlocklistClient.sol\\\";\\n//import \\\"contracts/sanctions/SanctionsListClient.sol\\\";\\nimport \\\"contracts/interfaces/IABBYManager.sol\\\";\\n\\ncontract ABBYManager is\\n  RWAHubOffChainRedemptions,\\n  IABBYManager\\n{\\n  bytes32 public constant TIMESTAMP_SETTER_ROLE =\\n    keccak256(\\\"TIMESTAMP_SETTER_ROLE\\\");\\n\\n  mapping(bytes32 => uint256) public depositIdToClaimableTimestamp;\\n\\n  constructor(\\n    address _collateral,\\n    address _rwa,\\n    address managerAdmin,\\n    address pauser,\\n    address _assetSender,\\n    address _feeRecipient,\\n    uint256 _minimumDepositAmount,\\n    uint256 _minimumRedemptionAmount,\\n    address blocklist\\n  )\\n    RWAHubOffChainRedemptions(\\n      _collateral,\\n      _rwa,\\n      managerAdmin,\\n      pauser,\\n      _assetSender,\\n      _feeRecipient,\\n      _minimumDepositAmount,\\n      _minimumRedemptionAmount\\n    )\\n  {}\\n\\n  /**\\n   * @notice Function to enforce blocklist and sanctionslist restrictions to be\\n   *         implemented on calls to `requestSubscription` and\\n   *         `claimRedemption`\\n   *\\n   * @param account The account to check blocklist and sanctions list status\\n   *                for\\n   */\\n  /*function _checkRestrictions(address account) internal view override {\\n    if (_isBlocked(account)) {\\n      revert BlockedAccount();\\n    }\\n    if (_isSanctioned(account)) {\\n      revert SanctionedAccount();\\n    }\\n  }*/\\n\\n  /**\\n   * @notice Internal hook that is called by `claimMint` to enforce the time\\n   *         at which a user can claim their ABBY\\n   *\\n   * @param depositId The depositId to check the claimable timestamp for\\n   *\\n   * @dev This function will call the `_claimMint` function in the parent\\n   *      once ABBY-specific checks have been made\\n   */\\n  function _claimMint(bytes32 depositId) internal virtual override {\\n    if (depositIdToClaimableTimestamp[depositId] == 0) {\\n      revert ClaimableTimestampNotSet();\\n    }\\n\\n    if (depositIdToClaimableTimestamp[depositId] > block.timestamp) {\\n      revert MintNotYetClaimable();\\n    }\\n\\n    super._claimMint(depositId);\\n    delete depositIdToClaimableTimestamp[depositId];\\n  }\\n\\n  /**\\n   * @notice Update blocklist address\\n   *\\n   * @param blocklist The new blocklist address\\n   */\\n  /*function setBlocklist(\\n    address blocklist\\n  ) external override onlyRole(MANAGER_ADMIN) {\\n    _setBlocklist(blocklist);\\n  }*/\\n\\n  /**\\n   * @notice Update sanctions list address\\n   *\\n   * @param sanctionsList The new sanctions list address\\n   */\\n  /*function setSanctionsList(\\n    address sanctionsList\\n  ) external override onlyRole(MANAGER_ADMIN) {\\n    _setSanctionsList(sanctionsList);\\n  }*/\\n\\n  /**\\n   * @notice Set the claimable timestamp for a list of depositIds\\n   *\\n   * @param claimTimestamp The timestamp at which the deposit can be claimed\\n   * @param depositIds The depositIds to set the claimable timestamp for\\n   */\\n  function setClaimableTimestamp(\\n    uint256 claimTimestamp,\\n    bytes32[] calldata depositIds\\n  ) external onlyRole(TIMESTAMP_SETTER_ROLE) {\\n    if (claimTimestamp < block.timestamp) {\\n      revert ClaimableTimestampInPast();\\n    }\\n\\n    uint256 depositsSize = depositIds.length;\\n    for (uint256 i; i < depositsSize; ++i) {\\n      depositIdToClaimableTimestamp[depositIds[i]] = claimTimestamp;\\n      emit ClaimableTimestampSet(claimTimestamp, depositIds[i]);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x357c250323d919a44d15ead4ea48f22763b6b173ab2f90ac4d5f97bb0d2addfe\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/utils/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n  struct RoleData {\\n    mapping(address => bool) members;\\n    bytes32 adminRole;\\n  }\\n\\n  mapping(bytes32 => RoleData) private _roles;\\n\\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n  /**\\n   * @dev Modifier that checks that an account has a specific role. Reverts\\n   * with a standardized message including the required role.\\n   *\\n   * The format of the revert reason is given by the following regular expression:\\n   *\\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n   *\\n   * _Available since v4.1._\\n   */\\n  modifier onlyRole(bytes32 role) {\\n    _checkRole(role, _msgSender());\\n    _;\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IAccessControl).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return _roles[role].members[account];\\n  }\\n\\n  /**\\n   * @dev Revert with a standard message if `account` is missing `role`.\\n   *\\n   * The format of the revert reason is given by the following regular expression:\\n   *\\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n   */\\n  function _checkRole(bytes32 role, address account) internal view virtual {\\n    if (!hasRole(role, account)) {\\n      revert(\\n        string(\\n          abi.encodePacked(\\n            \\\"AccessControl: account \\\",\\n            Strings.toHexString(uint160(account), 20),\\n            \\\" is missing role \\\",\\n            Strings.toHexString(uint256(role), 32)\\n          )\\n        )\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bytes32)\\n  {\\n    return _roles[role].adminRole;\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function grantRole(bytes32 role, address account)\\n    public\\n    virtual\\n    override\\n    onlyRole(getRoleAdmin(role))\\n  {\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function revokeRole(bytes32 role, address account)\\n    public\\n    virtual\\n    override\\n    onlyRole(getRoleAdmin(role))\\n  {\\n    _revokeRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   */\\n  function renounceRole(bytes32 role, address account) public virtual override {\\n    require(\\n      account == _msgSender(),\\n      \\\"AccessControl: can only renounce roles for self\\\"\\n    );\\n\\n    _revokeRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event. Note that unlike {grantRole}, this function doesn't perform any\\n   * checks on the calling account.\\n   *\\n   * [WARNING]\\n   * ====\\n   * This function should only be called from the constructor when setting\\n   * up the initial roles for the system.\\n   *\\n   * Using this function in any other way is effectively circumventing the admin\\n   * system imposed by {AccessControl}.\\n   * ====\\n   *\\n   * NOTE: This function is deprecated in favor of {_grantRole}.\\n   */\\n  function _setupRole(bytes32 role, address account) internal virtual {\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Sets `adminRole` as ``role``'s admin role.\\n   *\\n   * Emits a {RoleAdminChanged} event.\\n   */\\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n    bytes32 previousAdminRole = getRoleAdmin(role);\\n    _roles[role].adminRole = adminRole;\\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * Internal function without access restriction.\\n   */\\n  function _grantRole(bytes32 role, address account) internal virtual {\\n    if (!hasRole(role, account)) {\\n      _roles[role].members[account] = true;\\n      emit RoleGranted(role, account, _msgSender());\\n    }\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * Internal function without access restriction.\\n   */\\n  function _revokeRole(bytes32 role, address account) internal virtual {\\n    if (hasRole(role, account)) {\\n      _roles[role].members[account] = false;\\n      emit RoleRevoked(role, account, _msgSender());\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xe7e809b0d89fa668d9707e3c107974a005f2acd136c425cd78f6d828c219aa40\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/access/IAccessControlEnumerable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is\\n  IAccessControlEnumerable,\\n  AccessControl\\n{\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IAccessControlEnumerable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\n   *\\n   * Role bearers are not sorted in any particular way, and their ordering may\\n   * change at any point.\\n   *\\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n   * you perform all queries on the same block. See the following\\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n   * for more information.\\n   */\\n  function getRoleMember(bytes32 role, uint256 index)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (address)\\n  {\\n    return _roleMembers[role].at(index);\\n  }\\n\\n  /**\\n   * @dev Returns the number of accounts that have `role`. Can be used\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\n   */\\n  function getRoleMemberCount(bytes32 role)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _roleMembers[role].length();\\n  }\\n\\n  /**\\n   * @dev Overload {_grantRole} to track enumerable memberships\\n   */\\n  function _grantRole(bytes32 role, address account) internal virtual override {\\n    super._grantRole(role, account);\\n    _roleMembers[role].add(account);\\n  }\\n\\n  /**\\n   * @dev Overload {_revokeRole} to track enumerable memberships\\n   */\\n  function _revokeRole(bytes32 role, address account)\\n    internal\\n    virtual\\n    override\\n  {\\n    super._revokeRole(role, account);\\n    _roleMembers[role].remove(account);\\n  }\\n}\\n\",\"keccak256\":\"0xf0155eaa75c379807c202eb9a0db8a073e5d93d6f9144b42d194c2ecd49ddb33\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n  /**\\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n   *\\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n   * {RoleAdminChanged} not being emitted signaling this.\\n   *\\n   * _Available since v3.1._\\n   */\\n  event RoleAdminChanged(\\n    bytes32 indexed role,\\n    bytes32 indexed previousAdminRole,\\n    bytes32 indexed newAdminRole\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is granted `role`.\\n   *\\n   * `sender` is the account that originated the contract call, an admin role\\n   * bearer except when using {AccessControl-_setupRole}.\\n   */\\n  event RoleGranted(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is revoked `role`.\\n   *\\n   * `sender` is the account that originated the contract call:\\n   *   - if using `revokeRole`, it is the admin role bearer\\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n   */\\n  event RoleRevoked(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function grantRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function revokeRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   */\\n  function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x02787a6b562763467c448f39369285b1903615e81c787f45c0b163a1ff9e07d5\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n  /**\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\n   *\\n   * Role bearers are not sorted in any particular way, and their ordering may\\n   * change at any point.\\n   *\\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n   * you perform all queries on the same block. See the following\\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n   * for more information.\\n   */\\n  function getRoleMember(bytes32 role, uint256 index)\\n    external\\n    view\\n    returns (address);\\n\\n  /**\\n   * @dev Returns the number of accounts that have `role`. Can be used\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\n   */\\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc29b5788f8deef40aee3f1b1f67fdfd7b84ebcc0f0d2e73db14185de07f3c50b\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n  // Booleans are more expensive than uint256 or any type that takes up a full\\n  // word because each write operation emits an extra SLOAD to first read the\\n  // slot's contents, replace the bits taken up by the boolean, and then write\\n  // back. This is the compiler's defense against contract upgrades and\\n  // pointer aliasing, and it cannot be disabled.\\n\\n  // The values being non-zero value makes deployment a bit more expensive,\\n  // but in exchange the refund on every call to nonReentrant will be lower in\\n  // amount. Since refunds are capped to a percentage of the total\\n  // transaction's gas, it is best to keep them low in cases like this one, to\\n  // increase the likelihood of the full refund coming into effect.\\n  uint256 private constant _NOT_ENTERED = 1;\\n  uint256 private constant _ENTERED = 2;\\n\\n  uint256 private _status;\\n\\n  constructor() {\\n    _status = _NOT_ENTERED;\\n  }\\n\\n  /**\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n   * Calling a `nonReentrant` function from another `nonReentrant`\\n   * function is not supported. It is possible to prevent this from happening\\n   * by making the `nonReentrant` function external, and making it call a\\n   * `private` function that does the actual work.\\n   */\\n  modifier nonReentrant() {\\n    // On the first call to nonReentrant, _notEntered will be true\\n    require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n    // Any calls to nonReentrant after this point will fail\\n    _status = _ENTERED;\\n\\n    _;\\n\\n    // By storing the original value once again, a refund is triggered (see\\n    // https://eips.ethereum.org/EIPS/eip-2200)\\n    _status = _NOT_ENTERED;\\n  }\\n}\\n\",\"keccak256\":\"0x0134fde2cc9450792bc761f05588383e3b1baf78454dba8b6a592dd39895cd08\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x2d0b233e43b64bb4afb057ccc16493c9b3c22d334a4ac6636915c7ef7f06b118\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/token/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/token/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token.\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the decimals places of the token.\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x099220ebd191f57aa291f8c00866eb8c943680d9790d46ec82010b933d68550f\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/token/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/token/IERC20.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transfer.selector, to, value)\\n    );\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n    );\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n   * {IERC20-approve}, and its usage is discouraged.\\n   *\\n   * Whenever possible, use {safeIncreaseAllowance} and\\n   * {safeDecreaseAllowance} instead.\\n   */\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    // safeApprove should only be called when setting an initial allowance,\\n    // or when resetting it to zero. To increase and decrease it, use\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    );\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, value)\\n    );\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function safeDecreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    unchecked {\\n      uint256 oldAllowance = token.allowance(address(this), spender);\\n      require(\\n        oldAllowance >= value,\\n        \\\"SafeERC20: decreased allowance below zero\\\"\\n      );\\n      uint256 newAllowance = oldAllowance - value;\\n      _callOptionalReturn(\\n        token,\\n        abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   * @param token The token targeted by the call.\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\n   */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata =\\n      address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(\\n        abi.decode(returndata, (bool)),\\n        \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n      );\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x7d9d09b80a08d34c67244192d626551d2d4921328ac5aa3f0839e7daa48ac6c0\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(\\n      success,\\n      \\\"Address: unable to send value, recipient may have reverted\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data)\\n    internal\\n    returns (bytes memory)\\n  {\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return\\n      functionCallWithValue(\\n        target,\\n        data,\\n        value,\\n        \\\"Address: low-level call with value failed\\\"\\n      );\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(\\n      address(this).balance >= value,\\n      \\\"Address: insufficient balance for call\\\"\\n    );\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data)\\n    internal\\n    view\\n    returns (bytes memory)\\n  {\\n    return\\n      functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data)\\n    internal\\n    returns (bytes memory)\\n  {\\n    return\\n      functionDelegateCall(\\n        target,\\n        data,\\n        \\\"Address: low-level delegate call failed\\\"\\n      );\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x40bfbd7537f14756fbb70025e858781190d73b9cc60ab85c3f518de6268a40da\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0x197651ff7207345936e19940e36235967fe866449caa294e19642b6c6aaa62f8\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/utils/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return interfaceId == type(IERC165).interfaceId;\\n  }\\n}\\n\",\"keccak256\":\"0x092935b6d168de393154e5b5622bbc5f57c99eb14a5a5af3dc2cda6a19add989\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      if (lastIndex != toDeleteIndex) {\\n        bytes32 lastvalue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastvalue;\\n        // Update the index for the moved value\\n        set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function _contains(Set storage set, bytes32 value)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    return set._values[index];\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\n    return set._values;\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value)\\n    internal\\n    returns (bool)\\n  {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index)\\n    internal\\n    view\\n    returns (bytes32)\\n  {\\n    return _at(set._inner, index);\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(Bytes32Set storage set)\\n    internal\\n    view\\n    returns (bytes32[] memory)\\n  {\\n    return _values(set._inner);\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value)\\n    internal\\n    returns (bool)\\n  {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(AddressSet storage set)\\n    internal\\n    view\\n    returns (address[] memory)\\n  {\\n    bytes32[] memory store = _values(set._inner);\\n    address[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(UintSet storage set, uint256 value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintSet storage set, uint256 index)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return uint256(_at(set._inner, index));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(UintSet storage set)\\n    internal\\n    view\\n    returns (uint256[] memory)\\n  {\\n    bytes32[] memory store = _values(set._inner);\\n    uint256[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x6dfd57320c54054f69d620239b72c0230a3912520dff78f26dec2a709592555c\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x64e1d4f776a4bf02f7ab4187741c2e50c767bfa04f4ef1f920edba78c2918020\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n  bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0x00\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 length = 0;\\n    while (temp != 0) {\\n      length++;\\n      temp >>= 8;\\n    }\\n    return toHexString(value, length);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n   */\\n  function toHexString(uint256 value, uint256 length)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n      value >>= 4;\\n    }\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\n    return string(buffer);\\n  }\\n}\\n\",\"keccak256\":\"0x132805e1b4569cd64ef45bb19ce1f3387263de8d8c9b28926bd8eb1e44bba84a\",\"license\":\"MIT\"},\"contracts/interfaces/IABBYManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IABBYManager {\\n  function setClaimableTimestamp(\\n    uint256 claimDate,\\n    bytes32[] calldata depositIds\\n  ) external;\\n\\n  /**\\n   * @notice Event emitted when claimable timestamp is set\\n   *\\n   * @param claimTimestamp The timestamp at which the mint can be claimed\\n   * @param depositId      The depositId that can claim at the given \\n                           `claimTimestamp`\\n   */\\n  event ClaimableTimestampSet(\\n    uint256 indexed claimTimestamp,\\n    bytes32 indexed depositId\\n  );\\n\\n  /// ERRORS ///\\n  error MintNotYetClaimable();\\n  error ClaimableTimestampInPast();\\n  error ClaimableTimestampNotSet();\\n}\\n\",\"keccak256\":\"0x9d3de8d15595661402dd51503bd8a5eacefb16621931e7ebc0a1c3d01b509ae3\",\"license\":\"MIT\"},\"contracts/interfaces/IPricerReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IPricerReader {\\n  /**\\n   * @notice Gets the latest price of the asset\\n   *\\n   * @return uint256 The latest price of the asset\\n   */\\n  function getLatestPrice() external view returns (uint256);\\n\\n  /**\\n   * @notice Gets the price of the asset at a specific priceId\\n   *\\n   * @param priceId The priceId at which to get the price\\n   *\\n   * @return uint256 The price of the asset with the given priceId\\n   */\\n  function getPrice(uint256 priceId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf8fc0dbad93e41a2815909ba3187e0e416be4565e1bb3a25413223a41add1b9d\",\"license\":\"MIT\"},\"contracts/interfaces/IRWAHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IRWAHub {\\n  // Struct to contain the deposit information for a given depositId\\n  struct Depositor {\\n    address user;\\n    uint256 amountDepositedMinusFees;\\n    uint256 priceId;\\n  }\\n\\n  // Struc to contain withdrawal infromation for a given redemptionId\\n  struct Redeemer {\\n    address user;\\n    uint256 amountRwaTokenBurned;\\n    uint256 priceId;\\n  }\\n\\n  function requestSubscription(uint256 amount) external;\\n\\n  function claimMint(bytes32[] calldata depositIds) external;\\n\\n  function requestRedemption(uint256 amount) external;\\n\\n  function claimRedemption(bytes32[] calldata redemptionIds) external;\\n\\n  function addProof(\\n    bytes32 txHash,\\n    address user,\\n    uint256 depositAmountAfterFee,\\n    uint256 feeAmount,\\n    uint256 timestamp\\n  ) external;\\n\\n  function setPriceIdForDeposits(\\n    bytes32[] calldata depositIds,\\n    uint256[] calldata priceIds\\n  ) external;\\n\\n  function setPriceIdForRedemptions(\\n    bytes32[] calldata redemptionIds,\\n    uint256[] calldata priceIds\\n  ) external;\\n\\n  function setPricer(address newPricer) external;\\n\\n  function overwriteDepositor(\\n    bytes32 depositIdToOverride,\\n    address user,\\n    uint256 depositAmountAfterFee,\\n    uint256 priceId\\n  ) external;\\n\\n  function overwriteRedeemer(\\n    bytes32 redemptionIdToOverride,\\n    address user,\\n    uint256 rwaTokenAmountBurned,\\n    uint256 priceId\\n  ) external;\\n\\n  /**\\n   * @notice Event emitted when fee recipient is set\\n   *\\n   * @param oldFeeRecipient Old fee recipient\\n   * @param newFeeRecipient New fee recipient\\n   */\\n  event FeeRecipientSet(address oldFeeRecipient, address newFeeRecipient);\\n\\n  /**\\n   * @notice Event emitted when the assetSender is changed\\n   *\\n   * @param oldAssetSender The address of the old assetSender\\n   * @param newAssetSender The address of the new assetSender\\n   */\\n  event AssetSenderSet(address oldAssetSender, address newAssetSender);\\n\\n  /**\\n   * @notice Event emitted when minimum deposit amount is set\\n   *\\n   * @param oldMinimum Old minimum\\n   * @param newMinimum New minimum\\n   *\\n   * @dev See inheriting contract for decimals representation\\n   */\\n  event MinimumDepositAmountSet(uint256 oldMinimum, uint256 newMinimum);\\n\\n  /**\\n   * @notice Event emitted when a new redeem minimum is set.\\n   *         All units are in 1e18\\n   *\\n   * @param oldRedemptionMin The old redeem minimum value\\n   * @param newRedemptionMin The new redeem minimum value\\n   */\\n  event MinimumRedemptionAmountSet(\\n    uint256 oldRedemptionMin,\\n    uint256 newRedemptionMin\\n  );\\n\\n  /**\\n   * @notice Event emitted when mint fee is set\\n   *\\n   * @param oldFee Old fee\\n   * @param newFee New fee\\n   *\\n   * @dev See inheriting contract for decimals representation\\n   */\\n  event MintFeeSet(uint256 oldFee, uint256 newFee);\\n\\n  /**\\n   * @notice Event emitted when redeem fee is set\\n   *\\n   * @param oldFee Old fee\\n   * @param newFee New fee\\n   *\\n   * @dev see inheriting contract for decimal representation\\n   */\\n  event RedemptionFeeSet(uint256 oldFee, uint256 newFee);\\n\\n  /**\\n   * @notice Event emitted when redemption request is submitted\\n   *\\n   * @param user         The user submitting the redemption request\\n   * @param redemptionId The id corresponding to a given redemption\\n   * @param rwaAmountIn  The amount of cash being burned\\n   */\\n  event RedemptionRequested(\\n    address indexed user,\\n    bytes32 indexed redemptionId,\\n    uint256 rwaAmountIn\\n  );\\n\\n  /**\\n   * @notice Event emitted when a mint request is submitted\\n   *\\n   * @param user                      The user requesting to mint\\n   * @param depositId                 The depositId of the request\\n   * @param collateralAmountDeposited The total amount deposited\\n   * @param depositAmountAfterFee     The value deposited - fee\\n   * @param feeAmount                 The fee amount taken\\n   *                                  (units of collateral)\\n   */\\n  event MintRequested(\\n    address indexed user,\\n    bytes32 indexed depositId,\\n    uint256 collateralAmountDeposited,\\n    uint256 depositAmountAfterFee,\\n    uint256 feeAmount\\n  );\\n\\n  /**\\n   * @notice Event emitted when a redemption request is completed\\n   *\\n   * @param user                     The address of the user getting the funds\\n   * @param redemptionId             The id corresponding to a given redemption\\n   *                                 requested\\n   * @param rwaAmountRequested       Amount of RWA originally requested by the user\\n   * @param collateralAmountReturned Amount of collateral received by the user\\n   * @param price                    The price at which the redemption was\\n   *                                 serviced at\\n   */\\n  event RedemptionCompleted(\\n    address indexed user,\\n    bytes32 indexed redemptionId,\\n    uint256 rwaAmountRequested,\\n    uint256 collateralAmountReturned,\\n    uint256 price\\n  );\\n\\n  /**\\n   * @notice Event emitted when a Mint request is completed\\n   *\\n   * @param user                      The address of the user getting the funds\\n   * @param depositId                 The depositId of the mint request\\n   * @param rwaAmountOut              The amount of RWA token minted to the\\n   *                                  user\\n   * @param collateralAmountDeposited The amount of collateral deposited\\n   * @param price                     The price set for the given\\n   *                                  deposit id\\n   * @param priceId                   The priceId used to determine price\\n   */\\n  event MintCompleted(\\n    address indexed user,\\n    bytes32 indexed depositId,\\n    uint256 rwaAmountOut,\\n    uint256 collateralAmountDeposited,\\n    uint256 price,\\n    uint256 priceId\\n  );\\n\\n  /**\\n   * @notice Event emitted when a deposit has its corresponding priceId set\\n   *\\n   * @param depositIdSet The Deposit Id for which the price Id is being set\\n   * @param priceIdSet   The price Id being associate with a deposit Id\\n   */\\n  event PriceIdSetForDeposit(\\n    bytes32 indexed depositIdSet,\\n    uint256 indexed priceIdSet\\n  );\\n\\n  /**\\n   * @notice Event Emitted when a redemption has its corresponding priceId set\\n   *\\n   * @param redemptionIdSet The Redemption Id for which the price Id is being\\n   *                        set\\n   * @param priceIdSet      The Price Id being associated with a redemption Id\\n   */\\n  event PriceIdSetForRedemption(\\n    bytes32 indexed redemptionIdSet,\\n    uint256 indexed priceIdSet\\n  );\\n\\n  /**\\n   * @notice Event emitted when a new Pricer contract is set\\n   *\\n   * @param oldPricer The address of the old pricer contract\\n   * @param newPricer The address of the new pricer contract\\n   */\\n  event NewPricerSet(address oldPricer, address newPricer);\\n\\n  /**\\n   * @notice Event emitted when deposit proof has been added\\n   *\\n   * @param txHash                Tx hash of the deposit\\n   * @param user                  Address of the user who made the deposit\\n   * @param depositAmountAfterFee Amount of the deposit after fees\\n   * @param feeAmount             Amount of fees taken\\n   * @param timestamp             Timestamp of the deposit\\n   */\\n  event DepositProofAdded(\\n    bytes32 indexed txHash,\\n    address indexed user,\\n    uint256 depositAmountAfterFee,\\n    uint256 feeAmount,\\n    uint256 timestamp\\n  );\\n\\n  /**\\n   * @notice Event emitted when subscriptions are paused\\n   *\\n   * @param caller Address which initiated the pause\\n   */\\n  event SubscriptionPaused(address caller);\\n\\n  /**\\n   * @notice Event emitted when redemptions are paused\\n   *\\n   * @param caller Address which initiated the pause\\n   */\\n  event RedemptionPaused(address caller);\\n\\n  /**\\n   * @notice Event emitted when subscriptions are unpaused\\n   *\\n   * @param caller Address which initiated the unpause\\n   */\\n  event SubscriptionUnpaused(address caller);\\n\\n  /**\\n   * @notice Event emitted when redemptions are unpaused\\n   *\\n   * @param caller Address which initiated the unpause\\n   */\\n  event RedemptionUnpaused(address caller);\\n\\n  event DepositorOverwritten(\\n    bytes32 indexed depositId,\\n    address oldDepositor,\\n    address newDepositor,\\n    uint256 oldPriceId,\\n    uint256 newPriceId,\\n    uint256 oldDepositAmount,\\n    uint256 newDepositAmount\\n  );\\n\\n  event RedeemerOverwritten(\\n    bytes32 indexed redemptionId,\\n    address oldRedeemer,\\n    address newRedeemer,\\n    uint256 oldPriceId,\\n    uint256 newPriceId,\\n    uint256 oldRWATokenAmountBurned,\\n    uint256 newRWATokenAmountBurned\\n  );\\n\\n  /// ERRORS ///\\n  error PriceIdNotSet();\\n  error ArraySizeMismatch();\\n  error DepositTooSmall();\\n  error RedemptionTooSmall();\\n  error TxnAlreadyValidated();\\n  error CollateralCannotBeZero();\\n  error RWACannotBeZero();\\n  error AssetSenderCannotBeZero();\\n  error FeeRecipientCannotBeZero();\\n  error FeeTooLarge();\\n  error AmountTooSmall();\\n  error DepositorNull();\\n  error RedeemerNull();\\n  error DepositProofAlreadyExists();\\n  error FeaturePaused();\\n  error PriceIdAlreadySet();\\n}\\n\",\"keccak256\":\"0x4b67d5db4ec8244fe8585660e221b0d5b228373416010e87b00e693ef6de1c1a\",\"license\":\"MIT\"},\"contracts/interfaces/IRWAHubOffChainRedemptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IRWAHubOffChainRedemptions {\\n  function requestRedemptionServicedOffchain(\\n    uint256 amountRWATokenToRedeem,\\n    bytes32 offChainDestination\\n  ) external;\\n\\n  function pauseOffChainRedemption() external;\\n\\n  function unpauseOffChainRedemption() external;\\n\\n  function setOffChainRedemptionMinimum(uint256 minimumAmount) external;\\n\\n  /**\\n   * @notice Event emitted when redemption request is submitted\\n   *\\n   * @param user                The user submitting the offchain redemption request\\n   * @param redemptionId        The id corresponding to a given offchain redemption request\\n   * @param rwaTokenAmountIn    The amount of cash being burned\\n   * @param offChainDestination Hash of destination to which the request\\n   *                            should be serviced to\\n   */\\n  event RedemptionRequestedServicedOffChain(\\n    address indexed user,\\n    bytes32 indexed redemptionId,\\n    uint256 rwaTokenAmountIn,\\n    bytes32 offChainDestination\\n  );\\n\\n  /**\\n   * @notice Event emitted when the off chain redemption feature is\\n   *         paused\\n   *\\n   * @param caller Address which initiated the pause\\n   */\\n  event OffChainRedemptionPaused(address caller);\\n\\n  /**\\n   * @notice Event emitted when the off chain redemption feature is\\n   *         unpaused\\n   *\\n   * @param caller Address which initiated the unpause\\n   */\\n  event OffChainRedemptionUnpaused(address caller);\\n\\n  /**\\n   * @notice Event emitted when the off chain redemption minimum is\\n   *         updated\\n   *\\n   * @param oldMinimum the old minimum redemption amount\\n   * @param newMinimum the new minimum redemption amount\\n   */\\n  event OffChainRedemptionMinimumSet(uint256 oldMinimum, uint256 newMinimum);\\n}\\n\",\"keccak256\":\"0xda800df582ec6f2bb99943deadb14bdcdd9203718d3be5f7cbfaac6b118e2fb0\",\"license\":\"MIT\"},\"contracts/interfaces/IRWALike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n// This interface is not inherited directly by RWA, instead, it is a\\n// subset of functions provided by all RWA tokens that the RWA Hub\\n// Client uses.\\nimport \\\"contracts/external/openzeppelin/contracts/token/IERC20.sol\\\";\\n\\ninterface IRWALike is IERC20 {\\n  function mint(address to, uint256 amount) external;\\n\\n  function burn(uint256 amount) external;\\n\\n  function burnFrom(address from, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x990096ba99f5588e7a377baee18809e8fb0dfd9d14aad08281adb7defcb703ea\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2031,"contract":"contracts/abby/ABBYManager.sol:ABBYManager","label":"_status","offset":0,"slot":"0","type":"t_uint256"},{"astId":1513,"contract":"contracts/abby/ABBYManager.sol:ABBYManager","label":"_roles","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_struct(RoleData)1508_storage)"},{"astId":1816,"contract":"contracts/abby/ABBYManager.sol:ABBYManager","label":"_roleMembers","offset":0,"slot":"2","type":"t_mapping(t_bytes32,t_struct(AddressSet)3040_storage)"},{"astId":25,"contract":"contracts/abby/ABBYManager.sol:ABBYManager","label":"pricer","offset":0,"slot":"3","type":"t_contract(IPricerReader)3584"},{"astId":30,"contract":"contracts/abby/ABBYManager.sol:ABBYManager","label":"assetSender","offset":0,"slot":"4","type":"t_address"},{"astId":32,"contract":"contracts/abby/ABBYManager.sol:ABBYManager","label":"feeRecipient","offset":0,"slot":"5","type":"t_address"},{"astId":37,"contract":"contracts/abby/ABBYManager.sol:ABBYManager","label":"depositIdToDepositor","offset":0,"slot":"6","type":"t_mapping(t_bytes32,t_struct(Depositor)3593_storage)"},{"astId":42,"contract":"contracts/abby/ABBYManager.sol:ABBYManager","label":"redemptionIdToRedeemer","offset":0,"slot":"7","type":"t_mapping(t_bytes32,t_struct(Redeemer)3600_storage)"},{"astId":45,"contract":"contracts/abby/ABBYManager.sol:ABBYManager","label":"minimumDepositAmount","offset":0,"slot":"8","type":"t_uint256"},{"astId":47,"contract":"contracts/abby/ABBYManager.sol:ABBYManager","label":"minimumRedemptionAmount","offset":0,"slot":"9","type":"t_uint256"},{"astId":50,"contract":"contracts/abby/ABBYManager.sol:ABBYManager","label":"mintFee","offset":0,"slot":"10","type":"t_uint256"},{"astId":53,"contract":"contracts/abby/ABBYManager.sol:ABBYManager","label":"redemptionFee","offset":0,"slot":"11","type":"t_uint256"},{"astId":61,"contract":"contracts/abby/ABBYManager.sol:ABBYManager","label":"subscriptionRequestCounter","offset":0,"slot":"12","type":"t_uint256"},{"astId":64,"contract":"contracts/abby/ABBYManager.sol:ABBYManager","label":"redemptionRequestCounter","offset":0,"slot":"13","type":"t_uint256"},{"astId":69,"contract":"contracts/abby/ABBYManager.sol:ABBYManager","label":"redemptionPaused","offset":0,"slot":"14","type":"t_bool"},{"astId":71,"contract":"contracts/abby/ABBYManager.sol:ABBYManager","label":"subscriptionPaused","offset":1,"slot":"14","type":"t_bool"},{"astId":1205,"contract":"contracts/abby/ABBYManager.sol:ABBYManager","label":"offChainRedemptionPaused","offset":2,"slot":"14","type":"t_bool"},{"astId":1207,"contract":"contracts/abby/ABBYManager.sol:ABBYManager","label":"minimumOffChainRedemptionAmount","offset":0,"slot":"15","type":"t_uint256"},{"astId":1362,"contract":"contracts/abby/ABBYManager.sol:ABBYManager","label":"depositIdToClaimableTimestamp","offset":0,"slot":"16","type":"t_mapping(t_bytes32,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"base":"t_bytes32","encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(IPricerReader)3584":{"encoding":"inplace","label":"contract IPricerReader","numberOfBytes":"20"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(AddressSet)3040_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct EnumerableSet.AddressSet)","numberOfBytes":"32","value":"t_struct(AddressSet)3040_storage"},"t_mapping(t_bytes32,t_struct(Depositor)3593_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct IRWAHub.Depositor)","numberOfBytes":"32","value":"t_struct(Depositor)3593_storage"},"t_mapping(t_bytes32,t_struct(Redeemer)3600_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct IRWAHub.Redeemer)","numberOfBytes":"32","value":"t_struct(Redeemer)3600_storage"},"t_mapping(t_bytes32,t_struct(RoleData)1508_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)1508_storage"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(AddressSet)3040_storage":{"encoding":"inplace","label":"struct EnumerableSet.AddressSet","members":[{"astId":3039,"contract":"contracts/abby/ABBYManager.sol:ABBYManager","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)2739_storage"}],"numberOfBytes":"64"},"t_struct(Depositor)3593_storage":{"encoding":"inplace","label":"struct IRWAHub.Depositor","members":[{"astId":3588,"contract":"contracts/abby/ABBYManager.sol:ABBYManager","label":"user","offset":0,"slot":"0","type":"t_address"},{"astId":3590,"contract":"contracts/abby/ABBYManager.sol:ABBYManager","label":"amountDepositedMinusFees","offset":0,"slot":"1","type":"t_uint256"},{"astId":3592,"contract":"contracts/abby/ABBYManager.sol:ABBYManager","label":"priceId","offset":0,"slot":"2","type":"t_uint256"}],"numberOfBytes":"96"},"t_struct(Redeemer)3600_storage":{"encoding":"inplace","label":"struct IRWAHub.Redeemer","members":[{"astId":3595,"contract":"contracts/abby/ABBYManager.sol:ABBYManager","label":"user","offset":0,"slot":"0","type":"t_address"},{"astId":3597,"contract":"contracts/abby/ABBYManager.sol:ABBYManager","label":"amountRwaTokenBurned","offset":0,"slot":"1","type":"t_uint256"},{"astId":3599,"contract":"contracts/abby/ABBYManager.sol:ABBYManager","label":"priceId","offset":0,"slot":"2","type":"t_uint256"}],"numberOfBytes":"96"},"t_struct(RoleData)1508_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":1505,"contract":"contracts/abby/ABBYManager.sol:ABBYManager","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":1507,"contract":"contracts/abby/ABBYManager.sol:ABBYManager","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(Set)2739_storage":{"encoding":"inplace","label":"struct EnumerableSet.Set","members":[{"astId":2734,"contract":"contracts/abby/ABBYManager.sol:ABBYManager","label":"_values","offset":0,"slot":"0","type":"t_array(t_bytes32)dyn_storage"},{"astId":2738,"contract":"contracts/abby/ABBYManager.sol:ABBYManager","label":"_indexes","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_uint256)"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"MintNotYetClaimable()":[{"notice":"ERRORS ///"}],"PriceIdNotSet()":[{"notice":"ERRORS ///"}]},"events":{"AssetSenderSet(address,address)":{"notice":"Event emitted when the assetSender is changed"},"ClaimableTimestampSet(uint256,bytes32)":{"notice":"Event emitted when claimable timestamp is set"},"DepositProofAdded(bytes32,address,uint256,uint256,uint256)":{"notice":"Event emitted when deposit proof has been added"},"FeeRecipientSet(address,address)":{"notice":"Event emitted when fee recipient is set"},"MinimumDepositAmountSet(uint256,uint256)":{"notice":"Event emitted when minimum deposit amount is set"},"MinimumRedemptionAmountSet(uint256,uint256)":{"notice":"Event emitted when a new redeem minimum is set.         All units are in 1e18"},"MintCompleted(address,bytes32,uint256,uint256,uint256,uint256)":{"notice":"Event emitted when a Mint request is completed"},"MintFeeSet(uint256,uint256)":{"notice":"Event emitted when mint fee is set"},"MintRequested(address,bytes32,uint256,uint256,uint256)":{"notice":"Event emitted when a mint request is submitted"},"NewPricerSet(address,address)":{"notice":"Event emitted when a new Pricer contract is set"},"OffChainRedemptionMinimumSet(uint256,uint256)":{"notice":"Event emitted when the off chain redemption minimum is         updated"},"OffChainRedemptionPaused(address)":{"notice":"Event emitted when the off chain redemption feature is         paused"},"OffChainRedemptionUnpaused(address)":{"notice":"Event emitted when the off chain redemption feature is         unpaused"},"PriceIdSetForDeposit(bytes32,uint256)":{"notice":"Event emitted when a deposit has its corresponding priceId set"},"PriceIdSetForRedemption(bytes32,uint256)":{"notice":"Event Emitted when a redemption has its corresponding priceId set"},"RedemptionCompleted(address,bytes32,uint256,uint256,uint256)":{"notice":"Event emitted when a redemption request is completed"},"RedemptionFeeSet(uint256,uint256)":{"notice":"Event emitted when redeem fee is set"},"RedemptionPaused(address)":{"notice":"Event emitted when redemptions are paused"},"RedemptionRequested(address,bytes32,uint256)":{"notice":"Event emitted when redemption request is submitted"},"RedemptionRequestedServicedOffChain(address,bytes32,uint256,bytes32)":{"notice":"Event emitted when redemption request is submitted"},"RedemptionUnpaused(address)":{"notice":"Event emitted when redemptions are unpaused"},"SubscriptionPaused(address)":{"notice":"Event emitted when subscriptions are paused"},"SubscriptionUnpaused(address)":{"notice":"Event emitted when subscriptions are unpaused"}},"kind":"user","methods":{"addProof(bytes32,address,uint256,uint256,uint256)":{"notice":"Adds a deposit proof to the contract"},"claimMint(bytes32[])":{"notice":"Function used to claim tokens corresponding to a deposit request"},"claimRedemption(bytes32[])":{"notice":"Function to claim collateral corresponding to a redemption request"},"overwriteDepositor(bytes32,address,uint256,uint256)":{"notice":"Admin function to overwrite entries in the depoitIdToDepositor         mapping"},"overwriteRedeemer(bytes32,address,uint256,uint256)":{"notice":"Admin function to overwrite entries in the redemptionIdToRedeemer         mapping"},"pauseOffChainRedemption()":{"notice":"Function to pause off chain redemptoins"},"pauseRedemption()":{"notice":"Function to pause redemptions to RWAHub"},"pauseSubscription()":{"notice":"Function to pause subscription to RWAHub"},"requestRedemption(uint256)":{"notice":"Function used by users to request a redemption from the fund"},"requestRedemptionServicedOffchain(uint256,bytes32)":{"notice":"Request a redemption to be serviced off chain."},"requestSubscription(uint256)":{"notice":"Function used by users to request subscription to the fund"},"setAssetSender(address)":{"notice":"Admin function to set the address of `assetSender`"},"setClaimableTimestamp(uint256,bytes32[])":{"notice":"Set the claimable timestamp for a list of depositIds"},"setFeeRecipient(address)":{"notice":"Admin function to set the address of `feeRecipient`"},"setMinimumDepositAmount(uint256)":{"notice":"Admin function to set the minimum amount required for a deposit"},"setMinimumRedemptionAmount(uint256)":{"notice":"Admin function to set the minimum amount to redeem"},"setMintFee(uint256)":{"notice":"Admin function to set the mint fee"},"setOffChainRedemptionMinimum(uint256)":{"notice":"Admin Function to set the minimum off chain redemption amount"},"setPriceIdForDeposits(bytes32[],uint256[])":{"notice":"Admin function to associate a depositId with a given Price Id"},"setPriceIdForRedemptions(bytes32[],uint256[])":{"notice":"Admin function to associate redemptionId with a given priceId"},"setPricer(address)":{"notice":"Admin function to set the address of the Pricer contract"},"setRedemptionFee(uint256)":{"notice":"Admin function to set the redeem fee"},"unpauseOffChainRedemption()":{"notice":"Function to unpause off chain redemptoins"},"unpauseRedemption()":{"notice":"Function to unpause redemptions to RWAHub"},"unpauseSubscription()":{"notice":"Function to unpause subscriptions to RWAHub"}},"version":1}}},"contracts/external/openzeppelin/contracts/access/AccessControl.sol":{"AccessControl":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.","kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/external/openzeppelin/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/external/openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/utils/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n  struct RoleData {\\n    mapping(address => bool) members;\\n    bytes32 adminRole;\\n  }\\n\\n  mapping(bytes32 => RoleData) private _roles;\\n\\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n  /**\\n   * @dev Modifier that checks that an account has a specific role. Reverts\\n   * with a standardized message including the required role.\\n   *\\n   * The format of the revert reason is given by the following regular expression:\\n   *\\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n   *\\n   * _Available since v4.1._\\n   */\\n  modifier onlyRole(bytes32 role) {\\n    _checkRole(role, _msgSender());\\n    _;\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IAccessControl).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return _roles[role].members[account];\\n  }\\n\\n  /**\\n   * @dev Revert with a standard message if `account` is missing `role`.\\n   *\\n   * The format of the revert reason is given by the following regular expression:\\n   *\\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n   */\\n  function _checkRole(bytes32 role, address account) internal view virtual {\\n    if (!hasRole(role, account)) {\\n      revert(\\n        string(\\n          abi.encodePacked(\\n            \\\"AccessControl: account \\\",\\n            Strings.toHexString(uint160(account), 20),\\n            \\\" is missing role \\\",\\n            Strings.toHexString(uint256(role), 32)\\n          )\\n        )\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bytes32)\\n  {\\n    return _roles[role].adminRole;\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function grantRole(bytes32 role, address account)\\n    public\\n    virtual\\n    override\\n    onlyRole(getRoleAdmin(role))\\n  {\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function revokeRole(bytes32 role, address account)\\n    public\\n    virtual\\n    override\\n    onlyRole(getRoleAdmin(role))\\n  {\\n    _revokeRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   */\\n  function renounceRole(bytes32 role, address account) public virtual override {\\n    require(\\n      account == _msgSender(),\\n      \\\"AccessControl: can only renounce roles for self\\\"\\n    );\\n\\n    _revokeRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event. Note that unlike {grantRole}, this function doesn't perform any\\n   * checks on the calling account.\\n   *\\n   * [WARNING]\\n   * ====\\n   * This function should only be called from the constructor when setting\\n   * up the initial roles for the system.\\n   *\\n   * Using this function in any other way is effectively circumventing the admin\\n   * system imposed by {AccessControl}.\\n   * ====\\n   *\\n   * NOTE: This function is deprecated in favor of {_grantRole}.\\n   */\\n  function _setupRole(bytes32 role, address account) internal virtual {\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Sets `adminRole` as ``role``'s admin role.\\n   *\\n   * Emits a {RoleAdminChanged} event.\\n   */\\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n    bytes32 previousAdminRole = getRoleAdmin(role);\\n    _roles[role].adminRole = adminRole;\\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * Internal function without access restriction.\\n   */\\n  function _grantRole(bytes32 role, address account) internal virtual {\\n    if (!hasRole(role, account)) {\\n      _roles[role].members[account] = true;\\n      emit RoleGranted(role, account, _msgSender());\\n    }\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * Internal function without access restriction.\\n   */\\n  function _revokeRole(bytes32 role, address account) internal virtual {\\n    if (hasRole(role, account)) {\\n      _roles[role].members[account] = false;\\n      emit RoleRevoked(role, account, _msgSender());\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xe7e809b0d89fa668d9707e3c107974a005f2acd136c425cd78f6d828c219aa40\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n  /**\\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n   *\\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n   * {RoleAdminChanged} not being emitted signaling this.\\n   *\\n   * _Available since v3.1._\\n   */\\n  event RoleAdminChanged(\\n    bytes32 indexed role,\\n    bytes32 indexed previousAdminRole,\\n    bytes32 indexed newAdminRole\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is granted `role`.\\n   *\\n   * `sender` is the account that originated the contract call, an admin role\\n   * bearer except when using {AccessControl-_setupRole}.\\n   */\\n  event RoleGranted(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is revoked `role`.\\n   *\\n   * `sender` is the account that originated the contract call:\\n   *   - if using `revokeRole`, it is the admin role bearer\\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n   */\\n  event RoleRevoked(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function grantRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function revokeRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   */\\n  function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x02787a6b562763467c448f39369285b1903615e81c787f45c0b163a1ff9e07d5\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0x197651ff7207345936e19940e36235967fe866449caa294e19642b6c6aaa62f8\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/utils/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return interfaceId == type(IERC165).interfaceId;\\n  }\\n}\\n\",\"keccak256\":\"0x092935b6d168de393154e5b5622bbc5f57c99eb14a5a5af3dc2cda6a19add989\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x64e1d4f776a4bf02f7ab4187741c2e50c767bfa04f4ef1f920edba78c2918020\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n  bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0x00\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 length = 0;\\n    while (temp != 0) {\\n      length++;\\n      temp >>= 8;\\n    }\\n    return toHexString(value, length);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n   */\\n  function toHexString(uint256 value, uint256 length)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n      value >>= 4;\\n    }\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\n    return string(buffer);\\n  }\\n}\\n\",\"keccak256\":\"0x132805e1b4569cd64ef45bb19ce1f3387263de8d8c9b28926bd8eb1e44bba84a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1513,"contract":"contracts/external/openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"_roles","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_struct(RoleData)1508_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)1508_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)1508_storage"},"t_struct(RoleData)1508_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":1505,"contract":"contracts/external/openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":1507,"contract":"contracts/external/openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/external/openzeppelin/contracts/access/AccessControlEnumerable.sol":{"AccessControlEnumerable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Extension of {AccessControl} that allows enumerating the members of each role.","kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","getRoleMember(bytes32,uint256)":"9010d07c","getRoleMemberCount(bytes32)":"ca15c873","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {AccessControl} that allows enumerating the members of each role.\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/external/openzeppelin/contracts/access/AccessControlEnumerable.sol\":\"AccessControlEnumerable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/external/openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/utils/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n  struct RoleData {\\n    mapping(address => bool) members;\\n    bytes32 adminRole;\\n  }\\n\\n  mapping(bytes32 => RoleData) private _roles;\\n\\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n  /**\\n   * @dev Modifier that checks that an account has a specific role. Reverts\\n   * with a standardized message including the required role.\\n   *\\n   * The format of the revert reason is given by the following regular expression:\\n   *\\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n   *\\n   * _Available since v4.1._\\n   */\\n  modifier onlyRole(bytes32 role) {\\n    _checkRole(role, _msgSender());\\n    _;\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IAccessControl).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return _roles[role].members[account];\\n  }\\n\\n  /**\\n   * @dev Revert with a standard message if `account` is missing `role`.\\n   *\\n   * The format of the revert reason is given by the following regular expression:\\n   *\\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n   */\\n  function _checkRole(bytes32 role, address account) internal view virtual {\\n    if (!hasRole(role, account)) {\\n      revert(\\n        string(\\n          abi.encodePacked(\\n            \\\"AccessControl: account \\\",\\n            Strings.toHexString(uint160(account), 20),\\n            \\\" is missing role \\\",\\n            Strings.toHexString(uint256(role), 32)\\n          )\\n        )\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bytes32)\\n  {\\n    return _roles[role].adminRole;\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function grantRole(bytes32 role, address account)\\n    public\\n    virtual\\n    override\\n    onlyRole(getRoleAdmin(role))\\n  {\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function revokeRole(bytes32 role, address account)\\n    public\\n    virtual\\n    override\\n    onlyRole(getRoleAdmin(role))\\n  {\\n    _revokeRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   */\\n  function renounceRole(bytes32 role, address account) public virtual override {\\n    require(\\n      account == _msgSender(),\\n      \\\"AccessControl: can only renounce roles for self\\\"\\n    );\\n\\n    _revokeRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event. Note that unlike {grantRole}, this function doesn't perform any\\n   * checks on the calling account.\\n   *\\n   * [WARNING]\\n   * ====\\n   * This function should only be called from the constructor when setting\\n   * up the initial roles for the system.\\n   *\\n   * Using this function in any other way is effectively circumventing the admin\\n   * system imposed by {AccessControl}.\\n   * ====\\n   *\\n   * NOTE: This function is deprecated in favor of {_grantRole}.\\n   */\\n  function _setupRole(bytes32 role, address account) internal virtual {\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Sets `adminRole` as ``role``'s admin role.\\n   *\\n   * Emits a {RoleAdminChanged} event.\\n   */\\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n    bytes32 previousAdminRole = getRoleAdmin(role);\\n    _roles[role].adminRole = adminRole;\\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * Internal function without access restriction.\\n   */\\n  function _grantRole(bytes32 role, address account) internal virtual {\\n    if (!hasRole(role, account)) {\\n      _roles[role].members[account] = true;\\n      emit RoleGranted(role, account, _msgSender());\\n    }\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * Internal function without access restriction.\\n   */\\n  function _revokeRole(bytes32 role, address account) internal virtual {\\n    if (hasRole(role, account)) {\\n      _roles[role].members[account] = false;\\n      emit RoleRevoked(role, account, _msgSender());\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xe7e809b0d89fa668d9707e3c107974a005f2acd136c425cd78f6d828c219aa40\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/access/IAccessControlEnumerable.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is\\n  IAccessControlEnumerable,\\n  AccessControl\\n{\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IAccessControlEnumerable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\n   *\\n   * Role bearers are not sorted in any particular way, and their ordering may\\n   * change at any point.\\n   *\\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n   * you perform all queries on the same block. See the following\\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n   * for more information.\\n   */\\n  function getRoleMember(bytes32 role, uint256 index)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (address)\\n  {\\n    return _roleMembers[role].at(index);\\n  }\\n\\n  /**\\n   * @dev Returns the number of accounts that have `role`. Can be used\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\n   */\\n  function getRoleMemberCount(bytes32 role)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _roleMembers[role].length();\\n  }\\n\\n  /**\\n   * @dev Overload {_grantRole} to track enumerable memberships\\n   */\\n  function _grantRole(bytes32 role, address account) internal virtual override {\\n    super._grantRole(role, account);\\n    _roleMembers[role].add(account);\\n  }\\n\\n  /**\\n   * @dev Overload {_revokeRole} to track enumerable memberships\\n   */\\n  function _revokeRole(bytes32 role, address account)\\n    internal\\n    virtual\\n    override\\n  {\\n    super._revokeRole(role, account);\\n    _roleMembers[role].remove(account);\\n  }\\n}\\n\",\"keccak256\":\"0xf0155eaa75c379807c202eb9a0db8a073e5d93d6f9144b42d194c2ecd49ddb33\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n  /**\\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n   *\\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n   * {RoleAdminChanged} not being emitted signaling this.\\n   *\\n   * _Available since v3.1._\\n   */\\n  event RoleAdminChanged(\\n    bytes32 indexed role,\\n    bytes32 indexed previousAdminRole,\\n    bytes32 indexed newAdminRole\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is granted `role`.\\n   *\\n   * `sender` is the account that originated the contract call, an admin role\\n   * bearer except when using {AccessControl-_setupRole}.\\n   */\\n  event RoleGranted(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is revoked `role`.\\n   *\\n   * `sender` is the account that originated the contract call:\\n   *   - if using `revokeRole`, it is the admin role bearer\\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n   */\\n  event RoleRevoked(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function grantRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function revokeRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   */\\n  function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x02787a6b562763467c448f39369285b1903615e81c787f45c0b163a1ff9e07d5\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n  /**\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\n   *\\n   * Role bearers are not sorted in any particular way, and their ordering may\\n   * change at any point.\\n   *\\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n   * you perform all queries on the same block. See the following\\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n   * for more information.\\n   */\\n  function getRoleMember(bytes32 role, uint256 index)\\n    external\\n    view\\n    returns (address);\\n\\n  /**\\n   * @dev Returns the number of accounts that have `role`. Can be used\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\n   */\\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc29b5788f8deef40aee3f1b1f67fdfd7b84ebcc0f0d2e73db14185de07f3c50b\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0x197651ff7207345936e19940e36235967fe866449caa294e19642b6c6aaa62f8\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/utils/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return interfaceId == type(IERC165).interfaceId;\\n  }\\n}\\n\",\"keccak256\":\"0x092935b6d168de393154e5b5622bbc5f57c99eb14a5a5af3dc2cda6a19add989\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      if (lastIndex != toDeleteIndex) {\\n        bytes32 lastvalue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastvalue;\\n        // Update the index for the moved value\\n        set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function _contains(Set storage set, bytes32 value)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    return set._values[index];\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\n    return set._values;\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value)\\n    internal\\n    returns (bool)\\n  {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index)\\n    internal\\n    view\\n    returns (bytes32)\\n  {\\n    return _at(set._inner, index);\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(Bytes32Set storage set)\\n    internal\\n    view\\n    returns (bytes32[] memory)\\n  {\\n    return _values(set._inner);\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value)\\n    internal\\n    returns (bool)\\n  {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(AddressSet storage set)\\n    internal\\n    view\\n    returns (address[] memory)\\n  {\\n    bytes32[] memory store = _values(set._inner);\\n    address[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(UintSet storage set, uint256 value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintSet storage set, uint256 index)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return uint256(_at(set._inner, index));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(UintSet storage set)\\n    internal\\n    view\\n    returns (uint256[] memory)\\n  {\\n    bytes32[] memory store = _values(set._inner);\\n    uint256[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x6dfd57320c54054f69d620239b72c0230a3912520dff78f26dec2a709592555c\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x64e1d4f776a4bf02f7ab4187741c2e50c767bfa04f4ef1f920edba78c2918020\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n  bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0x00\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 length = 0;\\n    while (temp != 0) {\\n      length++;\\n      temp >>= 8;\\n    }\\n    return toHexString(value, length);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n   */\\n  function toHexString(uint256 value, uint256 length)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n      value >>= 4;\\n    }\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\n    return string(buffer);\\n  }\\n}\\n\",\"keccak256\":\"0x132805e1b4569cd64ef45bb19ce1f3387263de8d8c9b28926bd8eb1e44bba84a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1513,"contract":"contracts/external/openzeppelin/contracts/access/AccessControlEnumerable.sol:AccessControlEnumerable","label":"_roles","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_struct(RoleData)1508_storage)"},{"astId":1816,"contract":"contracts/external/openzeppelin/contracts/access/AccessControlEnumerable.sol:AccessControlEnumerable","label":"_roleMembers","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_struct(AddressSet)3040_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"base":"t_bytes32","encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(AddressSet)3040_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct EnumerableSet.AddressSet)","numberOfBytes":"32","value":"t_struct(AddressSet)3040_storage"},"t_mapping(t_bytes32,t_struct(RoleData)1508_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)1508_storage"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(AddressSet)3040_storage":{"encoding":"inplace","label":"struct EnumerableSet.AddressSet","members":[{"astId":3039,"contract":"contracts/external/openzeppelin/contracts/access/AccessControlEnumerable.sol:AccessControlEnumerable","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)2739_storage"}],"numberOfBytes":"64"},"t_struct(RoleData)1508_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":1505,"contract":"contracts/external/openzeppelin/contracts/access/AccessControlEnumerable.sol:AccessControlEnumerable","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":1507,"contract":"contracts/external/openzeppelin/contracts/access/AccessControlEnumerable.sol:AccessControlEnumerable","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(Set)2739_storage":{"encoding":"inplace","label":"struct EnumerableSet.Set","members":[{"astId":2734,"contract":"contracts/external/openzeppelin/contracts/access/AccessControlEnumerable.sol:AccessControlEnumerable","label":"_values","offset":0,"slot":"0","type":"t_array(t_bytes32)dyn_storage"},{"astId":2738,"contract":"contracts/external/openzeppelin/contracts/access/AccessControlEnumerable.sol:AccessControlEnumerable","label":"_indexes","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_uint256)"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/external/openzeppelin/contracts/access/IAccessControl.sol":{"IAccessControl":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"External interface of AccessControl declared to support ERC165 detection.","events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/external/openzeppelin/contracts/access/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/external/openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n  /**\\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n   *\\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n   * {RoleAdminChanged} not being emitted signaling this.\\n   *\\n   * _Available since v3.1._\\n   */\\n  event RoleAdminChanged(\\n    bytes32 indexed role,\\n    bytes32 indexed previousAdminRole,\\n    bytes32 indexed newAdminRole\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is granted `role`.\\n   *\\n   * `sender` is the account that originated the contract call, an admin role\\n   * bearer except when using {AccessControl-_setupRole}.\\n   */\\n  event RoleGranted(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is revoked `role`.\\n   *\\n   * `sender` is the account that originated the contract call:\\n   *   - if using `revokeRole`, it is the admin role bearer\\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n   */\\n  event RoleRevoked(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function grantRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function revokeRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   */\\n  function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x02787a6b562763467c448f39369285b1903615e81c787f45c0b163a1ff9e07d5\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/external/openzeppelin/contracts/access/IAccessControlEnumerable.sol":{"IAccessControlEnumerable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"External interface of AccessControlEnumerable declared to support ERC165 detection.","kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","getRoleMember(bytes32,uint256)":"9010d07c","getRoleMemberCount(bytes32)":"ca15c873","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControlEnumerable declared to support ERC165 detection.\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/external/openzeppelin/contracts/access/IAccessControlEnumerable.sol\":\"IAccessControlEnumerable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/external/openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n  /**\\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n   *\\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n   * {RoleAdminChanged} not being emitted signaling this.\\n   *\\n   * _Available since v3.1._\\n   */\\n  event RoleAdminChanged(\\n    bytes32 indexed role,\\n    bytes32 indexed previousAdminRole,\\n    bytes32 indexed newAdminRole\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is granted `role`.\\n   *\\n   * `sender` is the account that originated the contract call, an admin role\\n   * bearer except when using {AccessControl-_setupRole}.\\n   */\\n  event RoleGranted(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is revoked `role`.\\n   *\\n   * `sender` is the account that originated the contract call:\\n   *   - if using `revokeRole`, it is the admin role bearer\\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n   */\\n  event RoleRevoked(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function grantRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function revokeRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   */\\n  function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x02787a6b562763467c448f39369285b1903615e81c787f45c0b163a1ff9e07d5\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n  /**\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\n   *\\n   * Role bearers are not sorted in any particular way, and their ordering may\\n   * change at any point.\\n   *\\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n   * you perform all queries on the same block. See the following\\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n   * for more information.\\n   */\\n  function getRoleMember(bytes32 role, uint256 index)\\n    external\\n    view\\n    returns (address);\\n\\n  /**\\n   * @dev Returns the number of accounts that have `role`. Can be used\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\n   */\\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc29b5788f8deef40aee3f1b1f67fdfd7b84ebcc0f0d2e73db14185de07f3c50b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/external/openzeppelin/contracts/security/ReentrancyGuard.sol":{"ReentrancyGuard":{"abi":[],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/external/openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/external/openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n  // Booleans are more expensive than uint256 or any type that takes up a full\\n  // word because each write operation emits an extra SLOAD to first read the\\n  // slot's contents, replace the bits taken up by the boolean, and then write\\n  // back. This is the compiler's defense against contract upgrades and\\n  // pointer aliasing, and it cannot be disabled.\\n\\n  // The values being non-zero value makes deployment a bit more expensive,\\n  // but in exchange the refund on every call to nonReentrant will be lower in\\n  // amount. Since refunds are capped to a percentage of the total\\n  // transaction's gas, it is best to keep them low in cases like this one, to\\n  // increase the likelihood of the full refund coming into effect.\\n  uint256 private constant _NOT_ENTERED = 1;\\n  uint256 private constant _ENTERED = 2;\\n\\n  uint256 private _status;\\n\\n  constructor() {\\n    _status = _NOT_ENTERED;\\n  }\\n\\n  /**\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n   * Calling a `nonReentrant` function from another `nonReentrant`\\n   * function is not supported. It is possible to prevent this from happening\\n   * by making the `nonReentrant` function external, and making it call a\\n   * `private` function that does the actual work.\\n   */\\n  modifier nonReentrant() {\\n    // On the first call to nonReentrant, _notEntered will be true\\n    require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n    // Any calls to nonReentrant after this point will fail\\n    _status = _ENTERED;\\n\\n    _;\\n\\n    // By storing the original value once again, a refund is triggered (see\\n    // https://eips.ethereum.org/EIPS/eip-2200)\\n    _status = _NOT_ENTERED;\\n  }\\n}\\n\",\"keccak256\":\"0x0134fde2cc9450792bc761f05588383e3b1baf78454dba8b6a592dd39895cd08\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2031,"contract":"contracts/external/openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard","label":"_status","offset":0,"slot":"0","type":"t_uint256"}],"types":{"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/external/openzeppelin/contracts/token/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/external/openzeppelin/contracts/token/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/external/openzeppelin/contracts/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x2d0b233e43b64bb4afb057ccc16493c9b3c22d334a4ac6636915c7ef7f06b118\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/external/openzeppelin/contracts/token/IERC20Metadata.sol":{"IERC20Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._","kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"decimals()":{"details":"Returns the decimals places of the token."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/external/openzeppelin/contracts/token/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/external/openzeppelin/contracts/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x2d0b233e43b64bb4afb057ccc16493c9b3c22d334a4ac6636915c7ef7f06b118\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/token/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/token/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token.\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the decimals places of the token.\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x099220ebd191f57aa291f8c00866eb8c943680d9790d46ec82010b933d68550f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/external/openzeppelin/contracts/token/SafeERC20.sol":{"SafeERC20":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203ec75502a3b9a0f7f26e9f72ced11d5110ee1976fa074e5dd28c01a3e862265c64736f6c63430008100033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATACOPY 0xC7 SSTORE MUL LOG3 0xB9 LOG0 0xF7 CALLCODE PUSH15 0x9F72CED11D5110EE1976FA074E5DD2 DUP13 ADD LOG3 0xE8 PUSH3 0x265C64 PUSH20 0x6F6C634300081000330000000000000000000000 ","sourceMap":"723:3174:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;723:3174:10;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203ec75502a3b9a0f7f26e9f72ced11d5110ee1976fa074e5dd28c01a3e862265c64736f6c63430008100033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATACOPY 0xC7 SSTORE MUL LOG3 0xB9 LOG0 0xF7 CALLCODE PUSH15 0x9F72CED11D5110EE1976FA074E5DD2 DUP13 ADD LOG3 0xE8 PUSH3 0x265C64 PUSH20 0x6F6C634300081000330000000000000000000000 ","sourceMap":"723:3174:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_callOptionalReturn(contract IERC20,bytes memory)":"infinite","safeApprove(contract IERC20,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20,address,uint256)":"infinite","safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/external/openzeppelin/contracts/token/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/external/openzeppelin/contracts/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x2d0b233e43b64bb4afb057ccc16493c9b3c22d334a4ac6636915c7ef7f06b118\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/token/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/token/IERC20.sol\\\";\\nimport \\\"contracts/external/openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transfer.selector, to, value)\\n    );\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n    );\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n   * {IERC20-approve}, and its usage is discouraged.\\n   *\\n   * Whenever possible, use {safeIncreaseAllowance} and\\n   * {safeDecreaseAllowance} instead.\\n   */\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    // safeApprove should only be called when setting an initial allowance,\\n    // or when resetting it to zero. To increase and decrease it, use\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    );\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, value)\\n    );\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function safeDecreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    unchecked {\\n      uint256 oldAllowance = token.allowance(address(this), spender);\\n      require(\\n        oldAllowance >= value,\\n        \\\"SafeERC20: decreased allowance below zero\\\"\\n      );\\n      uint256 newAllowance = oldAllowance - value;\\n      _callOptionalReturn(\\n        token,\\n        abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   * @param token The token targeted by the call.\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\n   */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata =\\n      address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(\\n        abi.decode(returndata, (bool)),\\n        \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n      );\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x7d9d09b80a08d34c67244192d626551d2d4921328ac5aa3f0839e7daa48ac6c0\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(\\n      success,\\n      \\\"Address: unable to send value, recipient may have reverted\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data)\\n    internal\\n    returns (bytes memory)\\n  {\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return\\n      functionCallWithValue(\\n        target,\\n        data,\\n        value,\\n        \\\"Address: low-level call with value failed\\\"\\n      );\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(\\n      address(this).balance >= value,\\n      \\\"Address: insufficient balance for call\\\"\\n    );\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data)\\n    internal\\n    view\\n    returns (bytes memory)\\n  {\\n    return\\n      functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data)\\n    internal\\n    returns (bytes memory)\\n  {\\n    return\\n      functionDelegateCall(\\n        target,\\n        data,\\n        \\\"Address: low-level delegate call failed\\\"\\n      );\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x40bfbd7537f14756fbb70025e858781190d73b9cc60ab85c3f518de6268a40da\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/external/openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207de8957b68037dc810bd4666a18b8e2020c46b396a307869b6c504738d82eef364736f6c63430008100033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH30 0xE8957B68037DC810BD4666A18B8E2020C46B396A307869B6C504738D82EE RETURN PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"194:7681:11:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:7681:11;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207de8957b68037dc810bd4666a18b8e2020c46b396a307869b6c504738d82eef364736f6c63430008100033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH30 0xE8957B68037DC810BD4666A18B8E2020C46B396A307869B6C504738D82EE RETURN PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"194:7681:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/external/openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/external/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(\\n      success,\\n      \\\"Address: unable to send value, recipient may have reverted\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data)\\n    internal\\n    returns (bytes memory)\\n  {\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return\\n      functionCallWithValue(\\n        target,\\n        data,\\n        value,\\n        \\\"Address: low-level call with value failed\\\"\\n      );\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(\\n      address(this).balance >= value,\\n      \\\"Address: insufficient balance for call\\\"\\n    );\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data)\\n    internal\\n    view\\n    returns (bytes memory)\\n  {\\n    return\\n      functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data)\\n    internal\\n    returns (bytes memory)\\n  {\\n    return\\n      functionDelegateCall(\\n        target,\\n        data,\\n        \\\"Address: low-level delegate call failed\\\"\\n      );\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x40bfbd7537f14756fbb70025e858781190d73b9cc60ab85c3f518de6268a40da\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/external/openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/external/openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/external/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0x197651ff7207345936e19940e36235967fe866449caa294e19642b6c6aaa62f8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/external/openzeppelin/contracts/utils/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/external/openzeppelin/contracts/utils/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/external/openzeppelin/contracts/utils/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"contracts/external/openzeppelin/contracts/utils/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return interfaceId == type(IERC165).interfaceId;\\n  }\\n}\\n\",\"keccak256\":\"0x092935b6d168de393154e5b5622bbc5f57c99eb14a5a5af3dc2cda6a19add989\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x64e1d4f776a4bf02f7ab4187741c2e50c767bfa04f4ef1f920edba78c2918020\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/external/openzeppelin/contracts/utils/EnumerableSet.sol":{"EnumerableSet":{"abi":[],"devdoc":{"details":"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ee6d2e519f056010ad88adee677b8849f299dda5fd2b649633a815069cebf94164736f6c63430008100033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEE PUSH14 0x2E519F056010AD88ADEE677B8849 CALLCODE SWAP10 0xDD 0xA5 REVERT 0x2B PUSH5 0x9633A81506 SWAP13 0xEB 0xF9 COINBASE PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"812:10750:14:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;812:10750:14;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ee6d2e519f056010ad88adee677b8849f299dda5fd2b649633a815069cebf94164736f6c63430008100033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEE PUSH14 0x2E519F056010AD88ADEE677B8849 CALLCODE SWAP10 0xDD 0xA5 REVERT 0x2B PUSH5 0x9633A81506 SWAP13 0xEB 0xF9 COINBASE PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ","sourceMap":"812:10750:14:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_add(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_at(struct EnumerableSet.Set storage pointer,uint256)":"infinite","_contains(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_length(struct EnumerableSet.Set storage pointer)":"infinite","_remove(struct EnumerableSet.Set storage pointer,bytes32)":"infinite","_values(struct EnumerableSet.Set storage pointer)":"infinite","add(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","add(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","add(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","at(struct EnumerableSet.AddressSet storage pointer,uint256)":"infinite","at(struct EnumerableSet.Bytes32Set storage pointer,uint256)":"infinite","at(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","contains(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","contains(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","contains(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","length(struct EnumerableSet.AddressSet storage pointer)":"infinite","length(struct EnumerableSet.Bytes32Set storage pointer)":"infinite","length(struct EnumerableSet.UintSet storage pointer)":"infinite","remove(struct EnumerableSet.AddressSet storage pointer,address)":"infinite","remove(struct EnumerableSet.Bytes32Set storage pointer,bytes32)":"infinite","remove(struct EnumerableSet.UintSet storage pointer,uint256)":"infinite","values(struct EnumerableSet.AddressSet storage pointer)":"infinite","values(struct EnumerableSet.Bytes32Set storage pointer)":"infinite","values(struct EnumerableSet.UintSet storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/external/openzeppelin/contracts/utils/EnumerableSet.sol\":\"EnumerableSet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/external/openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      if (lastIndex != toDeleteIndex) {\\n        bytes32 lastvalue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastvalue;\\n        // Update the index for the moved value\\n        set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function _contains(Set storage set, bytes32 value)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    return set._values[index];\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\n    return set._values;\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value)\\n    internal\\n    returns (bool)\\n  {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index)\\n    internal\\n    view\\n    returns (bytes32)\\n  {\\n    return _at(set._inner, index);\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(Bytes32Set storage set)\\n    internal\\n    view\\n    returns (bytes32[] memory)\\n  {\\n    return _values(set._inner);\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value)\\n    internal\\n    returns (bool)\\n  {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(AddressSet storage set)\\n    internal\\n    view\\n    returns (address[] memory)\\n  {\\n    bytes32[] memory store = _values(set._inner);\\n    address[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(UintSet storage set, uint256 value)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintSet storage set, uint256 index)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return uint256(_at(set._inner, index));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(UintSet storage set)\\n    internal\\n    view\\n    returns (uint256[] memory)\\n  {\\n    bytes32[] memory store = _values(set._inner);\\n    uint256[] memory result;\\n\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x6dfd57320c54054f69d620239b72c0230a3912520dff78f26dec2a709592555c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/external/openzeppelin/contracts/utils/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/external/openzeppelin/contracts/utils/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/external/openzeppelin/contracts/utils/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x64e1d4f776a4bf02f7ab4187741c2e50c767bfa04f4ef1f920edba78c2918020\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/external/openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207b99a7aee9c4e0799cfadd5ce26e3c1017d191795f2ce6ec20a17e3d785bab6a64736f6c63430008100033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH28 0x99A7AEE9C4E0799CFADD5CE26E3C1017D191795F2CE6EC20A17E3D78 JUMPDEST 0xAB PUSH11 0x64736F6C63430008100033 ","sourceMap":"146:1697:16:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;146:1697:16;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207b99a7aee9c4e0799cfadd5ce26e3c1017d191795f2ce6ec20a17e3d785bab6a64736f6c63430008100033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH28 0x99A7AEE9C4E0799CFADD5CE26E3C1017D191795F2CE6EC20A17E3D78 JUMPDEST 0xAB PUSH11 0x64736F6C63430008100033 ","sourceMap":"146:1697:16:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/external/openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/external/openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n  bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0x00\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 length = 0;\\n    while (temp != 0) {\\n      length++;\\n      temp >>= 8;\\n    }\\n    return toHexString(value, length);\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n   */\\n  function toHexString(uint256 value, uint256 length)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n      value >>= 4;\\n    }\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\n    return string(buffer);\\n  }\\n}\\n\",\"keccak256\":\"0x132805e1b4569cd64ef45bb19ce1f3387263de8d8c9b28926bd8eb1e44bba84a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IABBYManager.sol":{"IABBYManager":{"abi":[{"inputs":[],"name":"ClaimableTimestampInPast","type":"error"},{"inputs":[],"name":"ClaimableTimestampNotSet","type":"error"},{"inputs":[],"name":"MintNotYetClaimable","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"claimTimestamp","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"depositId","type":"bytes32"}],"name":"ClaimableTimestampSet","type":"event"},{"inputs":[{"internalType":"uint256","name":"claimDate","type":"uint256"},{"internalType":"bytes32[]","name":"depositIds","type":"bytes32[]"}],"name":"setClaimableTimestamp","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"ClaimableTimestampSet(uint256,bytes32)":{"params":{"claimTimestamp":"The timestamp at which the mint can be claimed","depositId":"The depositId that can claim at the given  `claimTimestamp`"}}},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"setClaimableTimestamp(uint256,bytes32[])":"d0c835ce"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ClaimableTimestampInPast\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimableTimestampNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintNotYetClaimable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimTimestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"depositId\",\"type\":\"bytes32\"}],\"name\":\"ClaimableTimestampSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimDate\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"depositIds\",\"type\":\"bytes32[]\"}],\"name\":\"setClaimableTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ClaimableTimestampSet(uint256,bytes32)\":{\"params\":{\"claimTimestamp\":\"The timestamp at which the mint can be claimed\",\"depositId\":\"The depositId that can claim at the given  `claimTimestamp`\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"MintNotYetClaimable()\":[{\"notice\":\"ERRORS ///\"}]},\"events\":{\"ClaimableTimestampSet(uint256,bytes32)\":{\"notice\":\"Event emitted when claimable timestamp is set\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IABBYManager.sol\":\"IABBYManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IABBYManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IABBYManager {\\n  function setClaimableTimestamp(\\n    uint256 claimDate,\\n    bytes32[] calldata depositIds\\n  ) external;\\n\\n  /**\\n   * @notice Event emitted when claimable timestamp is set\\n   *\\n   * @param claimTimestamp The timestamp at which the mint can be claimed\\n   * @param depositId      The depositId that can claim at the given \\n                           `claimTimestamp`\\n   */\\n  event ClaimableTimestampSet(\\n    uint256 indexed claimTimestamp,\\n    bytes32 indexed depositId\\n  );\\n\\n  /// ERRORS ///\\n  error MintNotYetClaimable();\\n  error ClaimableTimestampInPast();\\n  error ClaimableTimestampNotSet();\\n}\\n\",\"keccak256\":\"0x9d3de8d15595661402dd51503bd8a5eacefb16621931e7ebc0a1c3d01b509ae3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"MintNotYetClaimable()":[{"notice":"ERRORS ///"}]},"events":{"ClaimableTimestampSet(uint256,bytes32)":{"notice":"Event emitted when claimable timestamp is set"}},"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IPricerReader.sol":{"IPricerReader":{"abi":[{"inputs":[],"name":"getLatestPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"priceId","type":"uint256"}],"name":"getPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"getLatestPrice()":{"returns":{"_0":"uint256 The latest price of the asset"}},"getPrice(uint256)":{"params":{"priceId":"The priceId at which to get the price"},"returns":{"_0":"uint256 The price of the asset with the given priceId"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getLatestPrice()":"8e15f473","getPrice(uint256)":"e7572230"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getLatestPrice()\":{\"returns\":{\"_0\":\"uint256 The latest price of the asset\"}},\"getPrice(uint256)\":{\"params\":{\"priceId\":\"The priceId at which to get the price\"},\"returns\":{\"_0\":\"uint256 The price of the asset with the given priceId\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getLatestPrice()\":{\"notice\":\"Gets the latest price of the asset\"},\"getPrice(uint256)\":{\"notice\":\"Gets the price of the asset at a specific priceId\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IPricerReader.sol\":\"IPricerReader\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IPricerReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IPricerReader {\\n  /**\\n   * @notice Gets the latest price of the asset\\n   *\\n   * @return uint256 The latest price of the asset\\n   */\\n  function getLatestPrice() external view returns (uint256);\\n\\n  /**\\n   * @notice Gets the price of the asset at a specific priceId\\n   *\\n   * @param priceId The priceId at which to get the price\\n   *\\n   * @return uint256 The price of the asset with the given priceId\\n   */\\n  function getPrice(uint256 priceId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf8fc0dbad93e41a2815909ba3187e0e416be4565e1bb3a25413223a41add1b9d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"getLatestPrice()":{"notice":"Gets the latest price of the asset"},"getPrice(uint256)":{"notice":"Gets the price of the asset at a specific priceId"}},"version":1}}},"contracts/interfaces/IRWAHub.sol":{"IRWAHub":{"abi":[{"inputs":[],"name":"AmountTooSmall","type":"error"},{"inputs":[],"name":"ArraySizeMismatch","type":"error"},{"inputs":[],"name":"AssetSenderCannotBeZero","type":"error"},{"inputs":[],"name":"CollateralCannotBeZero","type":"error"},{"inputs":[],"name":"DepositProofAlreadyExists","type":"error"},{"inputs":[],"name":"DepositTooSmall","type":"error"},{"inputs":[],"name":"DepositorNull","type":"error"},{"inputs":[],"name":"FeaturePaused","type":"error"},{"inputs":[],"name":"FeeRecipientCannotBeZero","type":"error"},{"inputs":[],"name":"FeeTooLarge","type":"error"},{"inputs":[],"name":"PriceIdAlreadySet","type":"error"},{"inputs":[],"name":"PriceIdNotSet","type":"error"},{"inputs":[],"name":"RWACannotBeZero","type":"error"},{"inputs":[],"name":"RedeemerNull","type":"error"},{"inputs":[],"name":"RedemptionTooSmall","type":"error"},{"inputs":[],"name":"TxnAlreadyValidated","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oldAssetSender","type":"address"},{"indexed":false,"internalType":"address","name":"newAssetSender","type":"address"}],"name":"AssetSenderSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"txHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"depositAmountAfterFee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"feeAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"DepositProofAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"depositId","type":"bytes32"},{"indexed":false,"internalType":"address","name":"oldDepositor","type":"address"},{"indexed":false,"internalType":"address","name":"newDepositor","type":"address"},{"indexed":false,"internalType":"uint256","name":"oldPriceId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newPriceId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"oldDepositAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDepositAmount","type":"uint256"}],"name":"DepositorOverwritten","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oldFeeRecipient","type":"address"},{"indexed":false,"internalType":"address","name":"newFeeRecipient","type":"address"}],"name":"FeeRecipientSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldMinimum","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newMinimum","type":"uint256"}],"name":"MinimumDepositAmountSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldRedemptionMin","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newRedemptionMin","type":"uint256"}],"name":"MinimumRedemptionAmountSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"bytes32","name":"depositId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"rwaAmountOut","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"collateralAmountDeposited","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"priceId","type":"uint256"}],"name":"MintCompleted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldFee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newFee","type":"uint256"}],"name":"MintFeeSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"bytes32","name":"depositId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"collateralAmountDeposited","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"depositAmountAfterFee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"feeAmount","type":"uint256"}],"name":"MintRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oldPricer","type":"address"},{"indexed":false,"internalType":"address","name":"newPricer","type":"address"}],"name":"NewPricerSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"depositIdSet","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"priceIdSet","type":"uint256"}],"name":"PriceIdSetForDeposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"redemptionIdSet","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"priceIdSet","type":"uint256"}],"name":"PriceIdSetForRedemption","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"redemptionId","type":"bytes32"},{"indexed":false,"internalType":"address","name":"oldRedeemer","type":"address"},{"indexed":false,"internalType":"address","name":"newRedeemer","type":"address"},{"indexed":false,"internalType":"uint256","name":"oldPriceId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newPriceId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"oldRWATokenAmountBurned","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newRWATokenAmountBurned","type":"uint256"}],"name":"RedeemerOverwritten","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"bytes32","name":"redemptionId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"rwaAmountRequested","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"collateralAmountReturned","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"}],"name":"RedemptionCompleted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldFee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newFee","type":"uint256"}],"name":"RedemptionFeeSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"RedemptionPaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"bytes32","name":"redemptionId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"rwaAmountIn","type":"uint256"}],"name":"RedemptionRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"RedemptionUnpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"SubscriptionPaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"SubscriptionUnpaused","type":"event"},{"inputs":[{"internalType":"bytes32","name":"txHash","type":"bytes32"},{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"depositAmountAfterFee","type":"uint256"},{"internalType":"uint256","name":"feeAmount","type":"uint256"},{"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"addProof","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"depositIds","type":"bytes32[]"}],"name":"claimMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"redemptionIds","type":"bytes32[]"}],"name":"claimRedemption","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"depositIdToOverride","type":"bytes32"},{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"depositAmountAfterFee","type":"uint256"},{"internalType":"uint256","name":"priceId","type":"uint256"}],"name":"overwriteDepositor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"redemptionIdToOverride","type":"bytes32"},{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"rwaTokenAmountBurned","type":"uint256"},{"internalType":"uint256","name":"priceId","type":"uint256"}],"name":"overwriteRedeemer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"requestRedemption","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"requestSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"depositIds","type":"bytes32[]"},{"internalType":"uint256[]","name":"priceIds","type":"uint256[]"}],"name":"setPriceIdForDeposits","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"redemptionIds","type":"bytes32[]"},{"internalType":"uint256[]","name":"priceIds","type":"uint256[]"}],"name":"setPriceIdForRedemptions","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newPricer","type":"address"}],"name":"setPricer","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"AssetSenderSet(address,address)":{"params":{"newAssetSender":"The address of the new assetSender","oldAssetSender":"The address of the old assetSender"}},"DepositProofAdded(bytes32,address,uint256,uint256,uint256)":{"params":{"depositAmountAfterFee":"Amount of the deposit after fees","feeAmount":"Amount of fees taken","timestamp":"Timestamp of the deposit","txHash":"Tx hash of the deposit","user":"Address of the user who made the deposit"}},"FeeRecipientSet(address,address)":{"params":{"newFeeRecipient":"New fee recipient","oldFeeRecipient":"Old fee recipient"}},"MinimumDepositAmountSet(uint256,uint256)":{"details":"See inheriting contract for decimals representation","params":{"newMinimum":"New minimum","oldMinimum":"Old minimum"}},"MinimumRedemptionAmountSet(uint256,uint256)":{"params":{"newRedemptionMin":"The new redeem minimum value","oldRedemptionMin":"The old redeem minimum value"}},"MintCompleted(address,bytes32,uint256,uint256,uint256,uint256)":{"params":{"collateralAmountDeposited":"The amount of collateral deposited","depositId":"The depositId of the mint request","price":"The price set for the given                                  deposit id","priceId":"The priceId used to determine price","rwaAmountOut":"The amount of RWA token minted to the                                  user","user":"The address of the user getting the funds"}},"MintFeeSet(uint256,uint256)":{"details":"See inheriting contract for decimals representation","params":{"newFee":"New fee","oldFee":"Old fee"}},"MintRequested(address,bytes32,uint256,uint256,uint256)":{"params":{"collateralAmountDeposited":"The total amount deposited","depositAmountAfterFee":"The value deposited - fee","depositId":"The depositId of the request","feeAmount":"The fee amount taken                                  (units of collateral)","user":"The user requesting to mint"}},"NewPricerSet(address,address)":{"params":{"newPricer":"The address of the new pricer contract","oldPricer":"The address of the old pricer contract"}},"PriceIdSetForDeposit(bytes32,uint256)":{"params":{"depositIdSet":"The Deposit Id for which the price Id is being set","priceIdSet":"The price Id being associate with a deposit Id"}},"PriceIdSetForRedemption(bytes32,uint256)":{"params":{"priceIdSet":"The Price Id being associated with a redemption Id","redemptionIdSet":"The Redemption Id for which the price Id is being                        set"}},"RedemptionCompleted(address,bytes32,uint256,uint256,uint256)":{"params":{"collateralAmountReturned":"Amount of collateral received by the user","price":"The price at which the redemption was                                 serviced at","redemptionId":"The id corresponding to a given redemption                                 requested","rwaAmountRequested":"Amount of RWA originally requested by the user","user":"The address of the user getting the funds"}},"RedemptionFeeSet(uint256,uint256)":{"details":"see inheriting contract for decimal representation","params":{"newFee":"New fee","oldFee":"Old fee"}},"RedemptionPaused(address)":{"params":{"caller":"Address which initiated the pause"}},"RedemptionRequested(address,bytes32,uint256)":{"params":{"redemptionId":"The id corresponding to a given redemption","rwaAmountIn":"The amount of cash being burned","user":"The user submitting the redemption request"}},"RedemptionUnpaused(address)":{"params":{"caller":"Address which initiated the unpause"}},"SubscriptionPaused(address)":{"params":{"caller":"Address which initiated the pause"}},"SubscriptionUnpaused(address)":{"params":{"caller":"Address which initiated the unpause"}}},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addProof(bytes32,address,uint256,uint256,uint256)":"2b5eceff","claimMint(bytes32[])":"4565e9ff","claimRedemption(bytes32[])":"244f5acf","overwriteDepositor(bytes32,address,uint256,uint256)":"de6afa82","overwriteRedeemer(bytes32,address,uint256,uint256)":"258492cd","requestRedemption(uint256)":"eeb3c910","requestSubscription(uint256)":"d592d815","setPriceIdForDeposits(bytes32[],uint256[])":"87e2d06e","setPriceIdForRedemptions(bytes32[],uint256[])":"aa85c1df","setPricer(address)":"29390370"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AmountTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArraySizeMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AssetSenderCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollateralCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositProofAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositorNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeaturePaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeRecipientCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceIdAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceIdNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RWACannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemerNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedemptionTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TxnAlreadyValidated\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAssetSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAssetSender\",\"type\":\"address\"}],\"name\":\"AssetSenderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmountAfterFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DepositProofAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"depositId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDepositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDepositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPriceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPriceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDepositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDepositAmount\",\"type\":\"uint256\"}],\"name\":\"DepositorOverwritten\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldFeeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinimum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimum\",\"type\":\"uint256\"}],\"name\":\"MinimumDepositAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRedemptionMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRedemptionMin\",\"type\":\"uint256\"}],\"name\":\"MinimumRedemptionAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"depositId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rwaAmountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmountDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"}],\"name\":\"MintCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"MintFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"depositId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmountDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmountAfterFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"MintRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPricer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPricer\",\"type\":\"address\"}],\"name\":\"NewPricerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"depositIdSet\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceIdSet\",\"type\":\"uint256\"}],\"name\":\"PriceIdSetForDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"redemptionIdSet\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceIdSet\",\"type\":\"uint256\"}],\"name\":\"PriceIdSetForRedemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"redemptionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRedeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRedeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPriceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPriceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRWATokenAmountBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRWATokenAmountBurned\",\"type\":\"uint256\"}],\"name\":\"RedeemerOverwritten\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"redemptionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rwaAmountRequested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmountReturned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"RedemptionCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"RedemptionFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RedemptionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"redemptionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rwaAmountIn\",\"type\":\"uint256\"}],\"name\":\"RedemptionRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RedemptionUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SubscriptionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SubscriptionUnpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmountAfterFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"addProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"depositIds\",\"type\":\"bytes32[]\"}],\"name\":\"claimMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"redemptionIds\",\"type\":\"bytes32[]\"}],\"name\":\"claimRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"depositIdToOverride\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmountAfterFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"}],\"name\":\"overwriteDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"redemptionIdToOverride\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rwaTokenAmountBurned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"}],\"name\":\"overwriteRedeemer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"depositIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"priceIds\",\"type\":\"uint256[]\"}],\"name\":\"setPriceIdForDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"redemptionIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"priceIds\",\"type\":\"uint256[]\"}],\"name\":\"setPriceIdForRedemptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPricer\",\"type\":\"address\"}],\"name\":\"setPricer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AssetSenderSet(address,address)\":{\"params\":{\"newAssetSender\":\"The address of the new assetSender\",\"oldAssetSender\":\"The address of the old assetSender\"}},\"DepositProofAdded(bytes32,address,uint256,uint256,uint256)\":{\"params\":{\"depositAmountAfterFee\":\"Amount of the deposit after fees\",\"feeAmount\":\"Amount of fees taken\",\"timestamp\":\"Timestamp of the deposit\",\"txHash\":\"Tx hash of the deposit\",\"user\":\"Address of the user who made the deposit\"}},\"FeeRecipientSet(address,address)\":{\"params\":{\"newFeeRecipient\":\"New fee recipient\",\"oldFeeRecipient\":\"Old fee recipient\"}},\"MinimumDepositAmountSet(uint256,uint256)\":{\"details\":\"See inheriting contract for decimals representation\",\"params\":{\"newMinimum\":\"New minimum\",\"oldMinimum\":\"Old minimum\"}},\"MinimumRedemptionAmountSet(uint256,uint256)\":{\"params\":{\"newRedemptionMin\":\"The new redeem minimum value\",\"oldRedemptionMin\":\"The old redeem minimum value\"}},\"MintCompleted(address,bytes32,uint256,uint256,uint256,uint256)\":{\"params\":{\"collateralAmountDeposited\":\"The amount of collateral deposited\",\"depositId\":\"The depositId of the mint request\",\"price\":\"The price set for the given                                  deposit id\",\"priceId\":\"The priceId used to determine price\",\"rwaAmountOut\":\"The amount of RWA token minted to the                                  user\",\"user\":\"The address of the user getting the funds\"}},\"MintFeeSet(uint256,uint256)\":{\"details\":\"See inheriting contract for decimals representation\",\"params\":{\"newFee\":\"New fee\",\"oldFee\":\"Old fee\"}},\"MintRequested(address,bytes32,uint256,uint256,uint256)\":{\"params\":{\"collateralAmountDeposited\":\"The total amount deposited\",\"depositAmountAfterFee\":\"The value deposited - fee\",\"depositId\":\"The depositId of the request\",\"feeAmount\":\"The fee amount taken                                  (units of collateral)\",\"user\":\"The user requesting to mint\"}},\"NewPricerSet(address,address)\":{\"params\":{\"newPricer\":\"The address of the new pricer contract\",\"oldPricer\":\"The address of the old pricer contract\"}},\"PriceIdSetForDeposit(bytes32,uint256)\":{\"params\":{\"depositIdSet\":\"The Deposit Id for which the price Id is being set\",\"priceIdSet\":\"The price Id being associate with a deposit Id\"}},\"PriceIdSetForRedemption(bytes32,uint256)\":{\"params\":{\"priceIdSet\":\"The Price Id being associated with a redemption Id\",\"redemptionIdSet\":\"The Redemption Id for which the price Id is being                        set\"}},\"RedemptionCompleted(address,bytes32,uint256,uint256,uint256)\":{\"params\":{\"collateralAmountReturned\":\"Amount of collateral received by the user\",\"price\":\"The price at which the redemption was                                 serviced at\",\"redemptionId\":\"The id corresponding to a given redemption                                 requested\",\"rwaAmountRequested\":\"Amount of RWA originally requested by the user\",\"user\":\"The address of the user getting the funds\"}},\"RedemptionFeeSet(uint256,uint256)\":{\"details\":\"see inheriting contract for decimal representation\",\"params\":{\"newFee\":\"New fee\",\"oldFee\":\"Old fee\"}},\"RedemptionPaused(address)\":{\"params\":{\"caller\":\"Address which initiated the pause\"}},\"RedemptionRequested(address,bytes32,uint256)\":{\"params\":{\"redemptionId\":\"The id corresponding to a given redemption\",\"rwaAmountIn\":\"The amount of cash being burned\",\"user\":\"The user submitting the redemption request\"}},\"RedemptionUnpaused(address)\":{\"params\":{\"caller\":\"Address which initiated the unpause\"}},\"SubscriptionPaused(address)\":{\"params\":{\"caller\":\"Address which initiated the pause\"}},\"SubscriptionUnpaused(address)\":{\"params\":{\"caller\":\"Address which initiated the unpause\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"PriceIdNotSet()\":[{\"notice\":\"ERRORS ///\"}]},\"events\":{\"AssetSenderSet(address,address)\":{\"notice\":\"Event emitted when the assetSender is changed\"},\"DepositProofAdded(bytes32,address,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when deposit proof has been added\"},\"FeeRecipientSet(address,address)\":{\"notice\":\"Event emitted when fee recipient is set\"},\"MinimumDepositAmountSet(uint256,uint256)\":{\"notice\":\"Event emitted when minimum deposit amount is set\"},\"MinimumRedemptionAmountSet(uint256,uint256)\":{\"notice\":\"Event emitted when a new redeem minimum is set.         All units are in 1e18\"},\"MintCompleted(address,bytes32,uint256,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a Mint request is completed\"},\"MintFeeSet(uint256,uint256)\":{\"notice\":\"Event emitted when mint fee is set\"},\"MintRequested(address,bytes32,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a mint request is submitted\"},\"NewPricerSet(address,address)\":{\"notice\":\"Event emitted when a new Pricer contract is set\"},\"PriceIdSetForDeposit(bytes32,uint256)\":{\"notice\":\"Event emitted when a deposit has its corresponding priceId set\"},\"PriceIdSetForRedemption(bytes32,uint256)\":{\"notice\":\"Event Emitted when a redemption has its corresponding priceId set\"},\"RedemptionCompleted(address,bytes32,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a redemption request is completed\"},\"RedemptionFeeSet(uint256,uint256)\":{\"notice\":\"Event emitted when redeem fee is set\"},\"RedemptionPaused(address)\":{\"notice\":\"Event emitted when redemptions are paused\"},\"RedemptionRequested(address,bytes32,uint256)\":{\"notice\":\"Event emitted when redemption request is submitted\"},\"RedemptionUnpaused(address)\":{\"notice\":\"Event emitted when redemptions are unpaused\"},\"SubscriptionPaused(address)\":{\"notice\":\"Event emitted when subscriptions are paused\"},\"SubscriptionUnpaused(address)\":{\"notice\":\"Event emitted when subscriptions are unpaused\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IRWAHub.sol\":\"IRWAHub\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IRWAHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IRWAHub {\\n  // Struct to contain the deposit information for a given depositId\\n  struct Depositor {\\n    address user;\\n    uint256 amountDepositedMinusFees;\\n    uint256 priceId;\\n  }\\n\\n  // Struc to contain withdrawal infromation for a given redemptionId\\n  struct Redeemer {\\n    address user;\\n    uint256 amountRwaTokenBurned;\\n    uint256 priceId;\\n  }\\n\\n  function requestSubscription(uint256 amount) external;\\n\\n  function claimMint(bytes32[] calldata depositIds) external;\\n\\n  function requestRedemption(uint256 amount) external;\\n\\n  function claimRedemption(bytes32[] calldata redemptionIds) external;\\n\\n  function addProof(\\n    bytes32 txHash,\\n    address user,\\n    uint256 depositAmountAfterFee,\\n    uint256 feeAmount,\\n    uint256 timestamp\\n  ) external;\\n\\n  function setPriceIdForDeposits(\\n    bytes32[] calldata depositIds,\\n    uint256[] calldata priceIds\\n  ) external;\\n\\n  function setPriceIdForRedemptions(\\n    bytes32[] calldata redemptionIds,\\n    uint256[] calldata priceIds\\n  ) external;\\n\\n  function setPricer(address newPricer) external;\\n\\n  function overwriteDepositor(\\n    bytes32 depositIdToOverride,\\n    address user,\\n    uint256 depositAmountAfterFee,\\n    uint256 priceId\\n  ) external;\\n\\n  function overwriteRedeemer(\\n    bytes32 redemptionIdToOverride,\\n    address user,\\n    uint256 rwaTokenAmountBurned,\\n    uint256 priceId\\n  ) external;\\n\\n  /**\\n   * @notice Event emitted when fee recipient is set\\n   *\\n   * @param oldFeeRecipient Old fee recipient\\n   * @param newFeeRecipient New fee recipient\\n   */\\n  event FeeRecipientSet(address oldFeeRecipient, address newFeeRecipient);\\n\\n  /**\\n   * @notice Event emitted when the assetSender is changed\\n   *\\n   * @param oldAssetSender The address of the old assetSender\\n   * @param newAssetSender The address of the new assetSender\\n   */\\n  event AssetSenderSet(address oldAssetSender, address newAssetSender);\\n\\n  /**\\n   * @notice Event emitted when minimum deposit amount is set\\n   *\\n   * @param oldMinimum Old minimum\\n   * @param newMinimum New minimum\\n   *\\n   * @dev See inheriting contract for decimals representation\\n   */\\n  event MinimumDepositAmountSet(uint256 oldMinimum, uint256 newMinimum);\\n\\n  /**\\n   * @notice Event emitted when a new redeem minimum is set.\\n   *         All units are in 1e18\\n   *\\n   * @param oldRedemptionMin The old redeem minimum value\\n   * @param newRedemptionMin The new redeem minimum value\\n   */\\n  event MinimumRedemptionAmountSet(\\n    uint256 oldRedemptionMin,\\n    uint256 newRedemptionMin\\n  );\\n\\n  /**\\n   * @notice Event emitted when mint fee is set\\n   *\\n   * @param oldFee Old fee\\n   * @param newFee New fee\\n   *\\n   * @dev See inheriting contract for decimals representation\\n   */\\n  event MintFeeSet(uint256 oldFee, uint256 newFee);\\n\\n  /**\\n   * @notice Event emitted when redeem fee is set\\n   *\\n   * @param oldFee Old fee\\n   * @param newFee New fee\\n   *\\n   * @dev see inheriting contract for decimal representation\\n   */\\n  event RedemptionFeeSet(uint256 oldFee, uint256 newFee);\\n\\n  /**\\n   * @notice Event emitted when redemption request is submitted\\n   *\\n   * @param user         The user submitting the redemption request\\n   * @param redemptionId The id corresponding to a given redemption\\n   * @param rwaAmountIn  The amount of cash being burned\\n   */\\n  event RedemptionRequested(\\n    address indexed user,\\n    bytes32 indexed redemptionId,\\n    uint256 rwaAmountIn\\n  );\\n\\n  /**\\n   * @notice Event emitted when a mint request is submitted\\n   *\\n   * @param user                      The user requesting to mint\\n   * @param depositId                 The depositId of the request\\n   * @param collateralAmountDeposited The total amount deposited\\n   * @param depositAmountAfterFee     The value deposited - fee\\n   * @param feeAmount                 The fee amount taken\\n   *                                  (units of collateral)\\n   */\\n  event MintRequested(\\n    address indexed user,\\n    bytes32 indexed depositId,\\n    uint256 collateralAmountDeposited,\\n    uint256 depositAmountAfterFee,\\n    uint256 feeAmount\\n  );\\n\\n  /**\\n   * @notice Event emitted when a redemption request is completed\\n   *\\n   * @param user                     The address of the user getting the funds\\n   * @param redemptionId             The id corresponding to a given redemption\\n   *                                 requested\\n   * @param rwaAmountRequested       Amount of RWA originally requested by the user\\n   * @param collateralAmountReturned Amount of collateral received by the user\\n   * @param price                    The price at which the redemption was\\n   *                                 serviced at\\n   */\\n  event RedemptionCompleted(\\n    address indexed user,\\n    bytes32 indexed redemptionId,\\n    uint256 rwaAmountRequested,\\n    uint256 collateralAmountReturned,\\n    uint256 price\\n  );\\n\\n  /**\\n   * @notice Event emitted when a Mint request is completed\\n   *\\n   * @param user                      The address of the user getting the funds\\n   * @param depositId                 The depositId of the mint request\\n   * @param rwaAmountOut              The amount of RWA token minted to the\\n   *                                  user\\n   * @param collateralAmountDeposited The amount of collateral deposited\\n   * @param price                     The price set for the given\\n   *                                  deposit id\\n   * @param priceId                   The priceId used to determine price\\n   */\\n  event MintCompleted(\\n    address indexed user,\\n    bytes32 indexed depositId,\\n    uint256 rwaAmountOut,\\n    uint256 collateralAmountDeposited,\\n    uint256 price,\\n    uint256 priceId\\n  );\\n\\n  /**\\n   * @notice Event emitted when a deposit has its corresponding priceId set\\n   *\\n   * @param depositIdSet The Deposit Id for which the price Id is being set\\n   * @param priceIdSet   The price Id being associate with a deposit Id\\n   */\\n  event PriceIdSetForDeposit(\\n    bytes32 indexed depositIdSet,\\n    uint256 indexed priceIdSet\\n  );\\n\\n  /**\\n   * @notice Event Emitted when a redemption has its corresponding priceId set\\n   *\\n   * @param redemptionIdSet The Redemption Id for which the price Id is being\\n   *                        set\\n   * @param priceIdSet      The Price Id being associated with a redemption Id\\n   */\\n  event PriceIdSetForRedemption(\\n    bytes32 indexed redemptionIdSet,\\n    uint256 indexed priceIdSet\\n  );\\n\\n  /**\\n   * @notice Event emitted when a new Pricer contract is set\\n   *\\n   * @param oldPricer The address of the old pricer contract\\n   * @param newPricer The address of the new pricer contract\\n   */\\n  event NewPricerSet(address oldPricer, address newPricer);\\n\\n  /**\\n   * @notice Event emitted when deposit proof has been added\\n   *\\n   * @param txHash                Tx hash of the deposit\\n   * @param user                  Address of the user who made the deposit\\n   * @param depositAmountAfterFee Amount of the deposit after fees\\n   * @param feeAmount             Amount of fees taken\\n   * @param timestamp             Timestamp of the deposit\\n   */\\n  event DepositProofAdded(\\n    bytes32 indexed txHash,\\n    address indexed user,\\n    uint256 depositAmountAfterFee,\\n    uint256 feeAmount,\\n    uint256 timestamp\\n  );\\n\\n  /**\\n   * @notice Event emitted when subscriptions are paused\\n   *\\n   * @param caller Address which initiated the pause\\n   */\\n  event SubscriptionPaused(address caller);\\n\\n  /**\\n   * @notice Event emitted when redemptions are paused\\n   *\\n   * @param caller Address which initiated the pause\\n   */\\n  event RedemptionPaused(address caller);\\n\\n  /**\\n   * @notice Event emitted when subscriptions are unpaused\\n   *\\n   * @param caller Address which initiated the unpause\\n   */\\n  event SubscriptionUnpaused(address caller);\\n\\n  /**\\n   * @notice Event emitted when redemptions are unpaused\\n   *\\n   * @param caller Address which initiated the unpause\\n   */\\n  event RedemptionUnpaused(address caller);\\n\\n  event DepositorOverwritten(\\n    bytes32 indexed depositId,\\n    address oldDepositor,\\n    address newDepositor,\\n    uint256 oldPriceId,\\n    uint256 newPriceId,\\n    uint256 oldDepositAmount,\\n    uint256 newDepositAmount\\n  );\\n\\n  event RedeemerOverwritten(\\n    bytes32 indexed redemptionId,\\n    address oldRedeemer,\\n    address newRedeemer,\\n    uint256 oldPriceId,\\n    uint256 newPriceId,\\n    uint256 oldRWATokenAmountBurned,\\n    uint256 newRWATokenAmountBurned\\n  );\\n\\n  /// ERRORS ///\\n  error PriceIdNotSet();\\n  error ArraySizeMismatch();\\n  error DepositTooSmall();\\n  error RedemptionTooSmall();\\n  error TxnAlreadyValidated();\\n  error CollateralCannotBeZero();\\n  error RWACannotBeZero();\\n  error AssetSenderCannotBeZero();\\n  error FeeRecipientCannotBeZero();\\n  error FeeTooLarge();\\n  error AmountTooSmall();\\n  error DepositorNull();\\n  error RedeemerNull();\\n  error DepositProofAlreadyExists();\\n  error FeaturePaused();\\n  error PriceIdAlreadySet();\\n}\\n\",\"keccak256\":\"0x4b67d5db4ec8244fe8585660e221b0d5b228373416010e87b00e693ef6de1c1a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"PriceIdNotSet()":[{"notice":"ERRORS ///"}]},"events":{"AssetSenderSet(address,address)":{"notice":"Event emitted when the assetSender is changed"},"DepositProofAdded(bytes32,address,uint256,uint256,uint256)":{"notice":"Event emitted when deposit proof has been added"},"FeeRecipientSet(address,address)":{"notice":"Event emitted when fee recipient is set"},"MinimumDepositAmountSet(uint256,uint256)":{"notice":"Event emitted when minimum deposit amount is set"},"MinimumRedemptionAmountSet(uint256,uint256)":{"notice":"Event emitted when a new redeem minimum is set.         All units are in 1e18"},"MintCompleted(address,bytes32,uint256,uint256,uint256,uint256)":{"notice":"Event emitted when a Mint request is completed"},"MintFeeSet(uint256,uint256)":{"notice":"Event emitted when mint fee is set"},"MintRequested(address,bytes32,uint256,uint256,uint256)":{"notice":"Event emitted when a mint request is submitted"},"NewPricerSet(address,address)":{"notice":"Event emitted when a new Pricer contract is set"},"PriceIdSetForDeposit(bytes32,uint256)":{"notice":"Event emitted when a deposit has its corresponding priceId set"},"PriceIdSetForRedemption(bytes32,uint256)":{"notice":"Event Emitted when a redemption has its corresponding priceId set"},"RedemptionCompleted(address,bytes32,uint256,uint256,uint256)":{"notice":"Event emitted when a redemption request is completed"},"RedemptionFeeSet(uint256,uint256)":{"notice":"Event emitted when redeem fee is set"},"RedemptionPaused(address)":{"notice":"Event emitted when redemptions are paused"},"RedemptionRequested(address,bytes32,uint256)":{"notice":"Event emitted when redemption request is submitted"},"RedemptionUnpaused(address)":{"notice":"Event emitted when redemptions are unpaused"},"SubscriptionPaused(address)":{"notice":"Event emitted when subscriptions are paused"},"SubscriptionUnpaused(address)":{"notice":"Event emitted when subscriptions are unpaused"}},"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IRWAHubOffChainRedemptions.sol":{"IRWAHubOffChainRedemptions":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldMinimum","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newMinimum","type":"uint256"}],"name":"OffChainRedemptionMinimumSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"OffChainRedemptionPaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"caller","type":"address"}],"name":"OffChainRedemptionUnpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"bytes32","name":"redemptionId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"rwaTokenAmountIn","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"offChainDestination","type":"bytes32"}],"name":"RedemptionRequestedServicedOffChain","type":"event"},{"inputs":[],"name":"pauseOffChainRedemption","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountRWATokenToRedeem","type":"uint256"},{"internalType":"bytes32","name":"offChainDestination","type":"bytes32"}],"name":"requestRedemptionServicedOffchain","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"minimumAmount","type":"uint256"}],"name":"setOffChainRedemptionMinimum","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpauseOffChainRedemption","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"OffChainRedemptionMinimumSet(uint256,uint256)":{"params":{"newMinimum":"the new minimum redemption amount","oldMinimum":"the old minimum redemption amount"}},"OffChainRedemptionPaused(address)":{"params":{"caller":"Address which initiated the pause"}},"OffChainRedemptionUnpaused(address)":{"params":{"caller":"Address which initiated the unpause"}},"RedemptionRequestedServicedOffChain(address,bytes32,uint256,bytes32)":{"params":{"offChainDestination":"Hash of destination to which the request                            should be serviced to","redemptionId":"The id corresponding to a given offchain redemption request","rwaTokenAmountIn":"The amount of cash being burned","user":"The user submitting the offchain redemption request"}}},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"pauseOffChainRedemption()":"49cbbf2a","requestRedemptionServicedOffchain(uint256,bytes32)":"f80a36d6","setOffChainRedemptionMinimum(uint256)":"e4107c97","unpauseOffChainRedemption()":"4dfe7af2"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinimum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimum\",\"type\":\"uint256\"}],\"name\":\"OffChainRedemptionMinimumSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"OffChainRedemptionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"OffChainRedemptionUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"redemptionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rwaTokenAmountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"offChainDestination\",\"type\":\"bytes32\"}],\"name\":\"RedemptionRequestedServicedOffChain\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"pauseOffChainRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountRWATokenToRedeem\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"offChainDestination\",\"type\":\"bytes32\"}],\"name\":\"requestRedemptionServicedOffchain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"}],\"name\":\"setOffChainRedemptionMinimum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseOffChainRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"OffChainRedemptionMinimumSet(uint256,uint256)\":{\"params\":{\"newMinimum\":\"the new minimum redemption amount\",\"oldMinimum\":\"the old minimum redemption amount\"}},\"OffChainRedemptionPaused(address)\":{\"params\":{\"caller\":\"Address which initiated the pause\"}},\"OffChainRedemptionUnpaused(address)\":{\"params\":{\"caller\":\"Address which initiated the unpause\"}},\"RedemptionRequestedServicedOffChain(address,bytes32,uint256,bytes32)\":{\"params\":{\"offChainDestination\":\"Hash of destination to which the request                            should be serviced to\",\"redemptionId\":\"The id corresponding to a given offchain redemption request\",\"rwaTokenAmountIn\":\"The amount of cash being burned\",\"user\":\"The user submitting the offchain redemption request\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"OffChainRedemptionMinimumSet(uint256,uint256)\":{\"notice\":\"Event emitted when the off chain redemption minimum is         updated\"},\"OffChainRedemptionPaused(address)\":{\"notice\":\"Event emitted when the off chain redemption feature is         paused\"},\"OffChainRedemptionUnpaused(address)\":{\"notice\":\"Event emitted when the off chain redemption feature is         unpaused\"},\"RedemptionRequestedServicedOffChain(address,bytes32,uint256,bytes32)\":{\"notice\":\"Event emitted when redemption request is submitted\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IRWAHubOffChainRedemptions.sol\":\"IRWAHubOffChainRedemptions\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IRWAHubOffChainRedemptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IRWAHubOffChainRedemptions {\\n  function requestRedemptionServicedOffchain(\\n    uint256 amountRWATokenToRedeem,\\n    bytes32 offChainDestination\\n  ) external;\\n\\n  function pauseOffChainRedemption() external;\\n\\n  function unpauseOffChainRedemption() external;\\n\\n  function setOffChainRedemptionMinimum(uint256 minimumAmount) external;\\n\\n  /**\\n   * @notice Event emitted when redemption request is submitted\\n   *\\n   * @param user                The user submitting the offchain redemption request\\n   * @param redemptionId        The id corresponding to a given offchain redemption request\\n   * @param rwaTokenAmountIn    The amount of cash being burned\\n   * @param offChainDestination Hash of destination to which the request\\n   *                            should be serviced to\\n   */\\n  event RedemptionRequestedServicedOffChain(\\n    address indexed user,\\n    bytes32 indexed redemptionId,\\n    uint256 rwaTokenAmountIn,\\n    bytes32 offChainDestination\\n  );\\n\\n  /**\\n   * @notice Event emitted when the off chain redemption feature is\\n   *         paused\\n   *\\n   * @param caller Address which initiated the pause\\n   */\\n  event OffChainRedemptionPaused(address caller);\\n\\n  /**\\n   * @notice Event emitted when the off chain redemption feature is\\n   *         unpaused\\n   *\\n   * @param caller Address which initiated the unpause\\n   */\\n  event OffChainRedemptionUnpaused(address caller);\\n\\n  /**\\n   * @notice Event emitted when the off chain redemption minimum is\\n   *         updated\\n   *\\n   * @param oldMinimum the old minimum redemption amount\\n   * @param newMinimum the new minimum redemption amount\\n   */\\n  event OffChainRedemptionMinimumSet(uint256 oldMinimum, uint256 newMinimum);\\n}\\n\",\"keccak256\":\"0xda800df582ec6f2bb99943deadb14bdcdd9203718d3be5f7cbfaac6b118e2fb0\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OffChainRedemptionMinimumSet(uint256,uint256)":{"notice":"Event emitted when the off chain redemption minimum is         updated"},"OffChainRedemptionPaused(address)":{"notice":"Event emitted when the off chain redemption feature is         paused"},"OffChainRedemptionUnpaused(address)":{"notice":"Event emitted when the off chain redemption feature is         unpaused"},"RedemptionRequestedServicedOffChain(address,bytes32,uint256,bytes32)":{"notice":"Event emitted when redemption request is submitted"}},"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IRWALike.sol":{"IRWALike":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(uint256)":"42966c68","burnFrom(address,uint256)":"79cc6790","mint(address,uint256)":"40c10f19","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IRWALike.sol\":\"IRWALike\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/external/openzeppelin/contracts/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x2d0b233e43b64bb4afb057ccc16493c9b3c22d334a4ac6636915c7ef7f06b118\",\"license\":\"MIT\"},\"contracts/interfaces/IRWALike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n// This interface is not inherited directly by RWA, instead, it is a\\n// subset of functions provided by all RWA tokens that the RWA Hub\\n// Client uses.\\nimport \\\"contracts/external/openzeppelin/contracts/token/IERC20.sol\\\";\\n\\ninterface IRWALike is IERC20 {\\n  function mint(address to, uint256 amount) external;\\n\\n  function burn(uint256 amount) external;\\n\\n  function burnFrom(address from, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x990096ba99f5588e7a377baee18809e8fb0dfd9d14aad08281adb7defcb703ea\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}