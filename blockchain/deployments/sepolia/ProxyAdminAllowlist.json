{
  "address": "0x56D8eE41272D3E7fa735c702BA919E8Cde9563dB",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract TransparentUpgradeableProxy",
          "name": "proxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeProxyAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract TransparentUpgradeableProxy",
          "name": "proxy",
          "type": "address"
        }
      ],
      "name": "getProxyAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract TransparentUpgradeableProxy",
          "name": "proxy",
          "type": "address"
        }
      ],
      "name": "getProxyImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract TransparentUpgradeableProxy",
          "name": "proxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "upgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract TransparentUpgradeableProxy",
          "name": "proxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "solcInputHash": "5855a53555d0b692c677618bcb41c21f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract TransparentUpgradeableProxy\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeProxyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract TransparentUpgradeableProxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"getProxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract TransparentUpgradeableProxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"getProxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract TransparentUpgradeableProxy\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract TransparentUpgradeableProxy\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\",\"kind\":\"dev\",\"methods\":{\"changeProxyAdmin(address,address)\":{\"details\":\"Changes the admin of `proxy` to `newAdmin`. Requirements: - This contract must be the current admin of `proxy`.\"},\"getProxyAdmin(address)\":{\"details\":\"Returns the current admin of `proxy`. Requirements: - This contract must be the admin of `proxy`.\"},\"getProxyImplementation(address)\":{\"details\":\"Returns the current implementation of `proxy`. Requirements: - This contract must be the admin of `proxy`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgrade(address,address)\":{\"details\":\"Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}. Requirements: - This contract must be the admin of `proxy`.\"},\"upgradeAndCall(address,address,bytes)\":{\"details\":\"Upgrades `proxy` to `implementation` and calls a function on the new implementation. See {TransparentUpgradeableProxy-upgradeToAndCall}. Requirements: - This contract must be the admin of `proxy`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/external/openzeppelin/contracts/proxy/ProxyAdmin.sol\":\"ProxyAdmin\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/external/openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"contracts/external/openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n  address private _owner;\\r\\n\\r\\n  event OwnershipTransferred(\\r\\n    address indexed previousOwner,\\r\\n    address indexed newOwner\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n   */\\r\\n  constructor() {\\r\\n    _transferOwnership(_msgSender());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the current owner.\\r\\n   */\\r\\n  function owner() public view virtual returns (address) {\\r\\n    return _owner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Throws if called by any account other than the owner.\\r\\n   */\\r\\n  modifier onlyOwner() {\\r\\n    require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Leaves the contract without owner. It will not be possible to call\\r\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n   *\\r\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n   * thereby removing any functionality that is only available to the owner.\\r\\n   */\\r\\n  function renounceOwnership() public virtual onlyOwner {\\r\\n    _transferOwnership(address(0));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n   * Can only be called by the current owner.\\r\\n   */\\r\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n    _transferOwnership(newOwner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n   * Internal function without access restriction.\\r\\n   */\\r\\n  function _transferOwnership(address newOwner) internal virtual {\\r\\n    address oldOwner = _owner;\\r\\n    _owner = newOwner;\\r\\n    emit OwnershipTransferred(oldOwner, newOwner);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x4fb67c7da585219cc3786bb3f7fcfe2d209dbcb9177de37917f00aa9baa11e0f\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/proxy/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"contracts/external/openzeppelin/contracts/proxy/Proxy.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts/proxy/ERC1967Upgrade.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\r\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\r\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\r\\n * implementation behind the proxy.\\r\\n */\\r\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\r\\n  /**\\r\\n   * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\r\\n   *\\r\\n   * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\r\\n   * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\r\\n   */\\r\\n  constructor(address _logic, bytes memory _data) payable {\\r\\n    assert(\\r\\n      _IMPLEMENTATION_SLOT ==\\r\\n        bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1)\\r\\n    );\\r\\n    _upgradeToAndCall(_logic, _data, false);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the current implementation address.\\r\\n   */\\r\\n  function _implementation()\\r\\n    internal\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (address impl)\\r\\n  {\\r\\n    return ERC1967Upgrade._getImplementation();\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x1a55129e527b4e346eea11fc4de3d8d25b5a8d9bc2a91911e5e4f353653c127c\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/proxy/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"contracts/external/openzeppelin/contracts/proxy/IBeacon.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts/proxy/draft-IERC1822.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts/utils/StorageSlot.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This abstract contract provides getters and event emitting update functions for\\r\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n *\\r\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\r\\n */\\r\\nabstract contract ERC1967Upgrade {\\r\\n  // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\r\\n  bytes32 private constant _ROLLBACK_SLOT =\\r\\n    0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\r\\n\\r\\n  /**\\r\\n   * @dev Storage slot with the address of the current implementation.\\r\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\r\\n   * validated in the constructor.\\r\\n   */\\r\\n  bytes32 internal constant _IMPLEMENTATION_SLOT =\\r\\n    0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the implementation is upgraded.\\r\\n   */\\r\\n  event Upgraded(address indexed implementation);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the current implementation address.\\r\\n   */\\r\\n  function _getImplementation() internal view returns (address) {\\r\\n    return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Stores a new address in the EIP1967 implementation slot.\\r\\n   */\\r\\n  function _setImplementation(address newImplementation) private {\\r\\n    require(\\r\\n      Address.isContract(newImplementation),\\r\\n      \\\"ERC1967: new implementation is not a contract\\\"\\r\\n    );\\r\\n    StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Perform implementation upgrade\\r\\n   *\\r\\n   * Emits an {Upgraded} event.\\r\\n   */\\r\\n  function _upgradeTo(address newImplementation) internal {\\r\\n    _setImplementation(newImplementation);\\r\\n    emit Upgraded(newImplementation);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Perform implementation upgrade with additional setup call.\\r\\n   *\\r\\n   * Emits an {Upgraded} event.\\r\\n   */\\r\\n  function _upgradeToAndCall(\\r\\n    address newImplementation,\\r\\n    bytes memory data,\\r\\n    bool forceCall\\r\\n  ) internal {\\r\\n    _upgradeTo(newImplementation);\\r\\n    if (data.length > 0 || forceCall) {\\r\\n      Address.functionDelegateCall(newImplementation, data);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\r\\n   *\\r\\n   * Emits an {Upgraded} event.\\r\\n   */\\r\\n  function _upgradeToAndCallUUPS(\\r\\n    address newImplementation,\\r\\n    bytes memory data,\\r\\n    bool forceCall\\r\\n  ) internal {\\r\\n    // Upgrades from old implementations will perform a rollback test. This test requires the new\\r\\n    // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\r\\n    // this special case will break upgrade paths from old UUPS implementation to new ones.\\r\\n    if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\r\\n      _setImplementation(newImplementation);\\r\\n    } else {\\r\\n      try IERC1822Proxiable(newImplementation).proxiableUUID() returns (\\r\\n        bytes32 slot\\r\\n      ) {\\r\\n        require(\\r\\n          slot == _IMPLEMENTATION_SLOT,\\r\\n          \\\"ERC1967Upgrade: unsupported proxiableUUID\\\"\\r\\n        );\\r\\n      } catch {\\r\\n        revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\r\\n      }\\r\\n      _upgradeToAndCall(newImplementation, data, forceCall);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Storage slot with the admin of the contract.\\r\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\r\\n   * validated in the constructor.\\r\\n   */\\r\\n  bytes32 internal constant _ADMIN_SLOT =\\r\\n    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the admin account has changed.\\r\\n   */\\r\\n  event AdminChanged(address previousAdmin, address newAdmin);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the current admin.\\r\\n   */\\r\\n  function _getAdmin() internal view returns (address) {\\r\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Stores a new address in the EIP1967 admin slot.\\r\\n   */\\r\\n  function _setAdmin(address newAdmin) private {\\r\\n    require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\r\\n    StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Changes the admin of the proxy.\\r\\n   *\\r\\n   * Emits an {AdminChanged} event.\\r\\n   */\\r\\n  function _changeAdmin(address newAdmin) internal {\\r\\n    emit AdminChanged(_getAdmin(), newAdmin);\\r\\n    _setAdmin(newAdmin);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\r\\n   * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\r\\n   */\\r\\n  bytes32 internal constant _BEACON_SLOT =\\r\\n    0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the beacon is upgraded.\\r\\n   */\\r\\n  event BeaconUpgraded(address indexed beacon);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the current beacon.\\r\\n   */\\r\\n  function _getBeacon() internal view returns (address) {\\r\\n    return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Stores a new beacon in the EIP1967 beacon slot.\\r\\n   */\\r\\n  function _setBeacon(address newBeacon) private {\\r\\n    require(\\r\\n      Address.isContract(newBeacon),\\r\\n      \\\"ERC1967: new beacon is not a contract\\\"\\r\\n    );\\r\\n    require(\\r\\n      Address.isContract(IBeacon(newBeacon).implementation()),\\r\\n      \\\"ERC1967: beacon implementation is not a contract\\\"\\r\\n    );\\r\\n    StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\r\\n   * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\r\\n   *\\r\\n   * Emits a {BeaconUpgraded} event.\\r\\n   */\\r\\n  function _upgradeBeaconToAndCall(\\r\\n    address newBeacon,\\r\\n    bytes memory data,\\r\\n    bool forceCall\\r\\n  ) internal {\\r\\n    _setBeacon(newBeacon);\\r\\n    emit BeaconUpgraded(newBeacon);\\r\\n    if (data.length > 0 || forceCall) {\\r\\n      Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x7f56f0aba15355c203fe1a39398542c60d33cde195855fa025926ca920b07238\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/proxy/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\r\\n */\\r\\ninterface IBeacon {\\r\\n  /**\\r\\n   * @dev Must return an address that can be used as a delegate call target.\\r\\n   *\\r\\n   * {BeaconProxy} will check that this address is a contract.\\r\\n   */\\r\\n  function implementation() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xf668b7d2b14d10fadbc31ee1f3bb2662f6a4c7873be1b0a149044af2d99d44b6\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/Proxy.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\r\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\r\\n * be specified by overriding the virtual {_implementation} function.\\r\\n *\\r\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\r\\n * different contract through the {_delegate} function.\\r\\n *\\r\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\r\\n */\\r\\nabstract contract Proxy {\\r\\n  /**\\r\\n   * @dev Delegates the current call to `implementation`.\\r\\n   *\\r\\n   * This function does not return to its internal call site, it will return directly to the external caller.\\r\\n   */\\r\\n  function _delegate(address implementation) internal virtual {\\r\\n    assembly {\\r\\n      // Copy msg.data. We take full control of memory in this inline assembly\\r\\n      // block because it will not return to Solidity code. We overwrite the\\r\\n      // Solidity scratch pad at memory position 0.\\r\\n      calldatacopy(0, 0, calldatasize())\\r\\n\\r\\n      // Call the implementation.\\r\\n      // out and outsize are 0 because we don't know the size yet.\\r\\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\r\\n\\r\\n      // Copy the returned data.\\r\\n      returndatacopy(0, 0, returndatasize())\\r\\n\\r\\n      switch result\\r\\n        // delegatecall returns 0 on error.\\r\\n        case 0 {\\r\\n          revert(0, returndatasize())\\r\\n        }\\r\\n        default {\\r\\n          return(0, returndatasize())\\r\\n        }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\r\\n   * and {_fallback} should delegate.\\r\\n   */\\r\\n  function _implementation() internal view virtual returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev Delegates the current call to the address returned by `_implementation()`.\\r\\n   *\\r\\n   * This function does not return to its internall call site, it will return directly to the external caller.\\r\\n   */\\r\\n  function _fallback() internal virtual {\\r\\n    _beforeFallback();\\r\\n    _delegate(_implementation());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\r\\n   * function in the contract matches the call data.\\r\\n   */\\r\\n  fallback() external payable {\\r\\n    _fallback();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\r\\n   * is empty.\\r\\n   */\\r\\n  receive() external payable {\\r\\n    _fallback();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\r\\n   * call, or as part of the Solidity `fallback` or `receive` functions.\\r\\n   *\\r\\n   * If overriden should call `super._beforeFallback()`.\\r\\n   */\\r\\n  function _beforeFallback() internal virtual {}\\r\\n}\\r\\n\",\"keccak256\":\"0xabe86cf9ef7f997bcdc7180f5d9509101c699e27a9ad88abc3162e94782953ab\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/proxy/ProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/ProxyAdmin.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"contracts/external/openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\\r\\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\\r\\n */\\r\\ncontract ProxyAdmin is Ownable {\\r\\n  /**\\r\\n   * @dev Returns the current implementation of `proxy`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - This contract must be the admin of `proxy`.\\r\\n   */\\r\\n  function getProxyImplementation(TransparentUpgradeableProxy proxy)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    returns (address)\\r\\n  {\\r\\n    // We need to manually run the static call since the getter cannot be flagged as view\\r\\n    // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\r\\n    (bool success, bytes memory returndata) =\\r\\n      address(proxy).staticcall(hex\\\"5c60da1b\\\");\\r\\n    require(success);\\r\\n    return abi.decode(returndata, (address));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the current admin of `proxy`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - This contract must be the admin of `proxy`.\\r\\n   */\\r\\n  function getProxyAdmin(TransparentUpgradeableProxy proxy)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    returns (address)\\r\\n  {\\r\\n    // We need to manually run the static call since the getter cannot be flagged as view\\r\\n    // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\r\\n    (bool success, bytes memory returndata) =\\r\\n      address(proxy).staticcall(hex\\\"f851a440\\\");\\r\\n    require(success);\\r\\n    return abi.decode(returndata, (address));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Changes the admin of `proxy` to `newAdmin`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - This contract must be the current admin of `proxy`.\\r\\n   */\\r\\n  function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin)\\r\\n    public\\r\\n    virtual\\r\\n    onlyOwner\\r\\n  {\\r\\n    proxy.changeAdmin(newAdmin);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - This contract must be the admin of `proxy`.\\r\\n   */\\r\\n  function upgrade(TransparentUpgradeableProxy proxy, address implementation)\\r\\n    public\\r\\n    virtual\\r\\n    onlyOwner\\r\\n  {\\r\\n    proxy.upgradeTo(implementation);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\\r\\n   * {TransparentUpgradeableProxy-upgradeToAndCall}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - This contract must be the admin of `proxy`.\\r\\n   */\\r\\n  function upgradeAndCall(\\r\\n    TransparentUpgradeableProxy proxy,\\r\\n    address implementation,\\r\\n    bytes memory data\\r\\n  ) public payable virtual onlyOwner {\\r\\n    proxy.upgradeToAndCall{value: msg.value}(implementation, data);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x6212a1131df28a5cf801625018ba65f7c9ca6372d4349ae0971ff1f2f79af685\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/TransparentUpgradeableProxy.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"contracts/external/openzeppelin/contracts/proxy/ERC1967Proxy.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\r\\n *\\r\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\r\\n * clashing], which can potentially be used in an attack, this contract uses the\\r\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\r\\n * things that go hand in hand:\\r\\n *\\r\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\r\\n * that call matches one of the admin functions exposed by the proxy itself.\\r\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\r\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\r\\n * \\\"admin cannot fallback to proxy target\\\".\\r\\n *\\r\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\r\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\r\\n * to sudden errors when trying to call a function from the proxy implementation.\\r\\n *\\r\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\r\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\r\\n */\\r\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\r\\n  /**\\r\\n   * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\r\\n   * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\r\\n   */\\r\\n  constructor(\\r\\n    address _logic,\\r\\n    address admin_,\\r\\n    bytes memory _data\\r\\n  ) payable ERC1967Proxy(_logic, _data) {\\r\\n    assert(\\r\\n      _ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1)\\r\\n    );\\r\\n    _changeAdmin(admin_);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\r\\n   */\\r\\n  modifier ifAdmin() {\\r\\n    if (msg.sender == _getAdmin()) {\\r\\n      _;\\r\\n    } else {\\r\\n      _fallback();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the current admin.\\r\\n   *\\r\\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\r\\n   *\\r\\n   * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\r\\n   * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\r\\n   * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\r\\n   */\\r\\n  function admin() external ifAdmin returns (address admin_) {\\r\\n    admin_ = _getAdmin();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the current implementation.\\r\\n   *\\r\\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\r\\n   *\\r\\n   * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\r\\n   * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\r\\n   * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\r\\n   */\\r\\n  function implementation() external ifAdmin returns (address implementation_) {\\r\\n    implementation_ = _implementation();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Changes the admin of the proxy.\\r\\n   *\\r\\n   * Emits an {AdminChanged} event.\\r\\n   *\\r\\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\r\\n   */\\r\\n  function changeAdmin(address newAdmin) external virtual ifAdmin {\\r\\n    _changeAdmin(newAdmin);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Upgrade the implementation of the proxy.\\r\\n   *\\r\\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\r\\n   */\\r\\n  function upgradeTo(address newImplementation) external ifAdmin {\\r\\n    _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\r\\n   * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\r\\n   * proxied contract.\\r\\n   *\\r\\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\r\\n   */\\r\\n  function upgradeToAndCall(address newImplementation, bytes calldata data)\\r\\n    external\\r\\n    payable\\r\\n    ifAdmin\\r\\n  {\\r\\n    _upgradeToAndCall(newImplementation, data, true);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the current admin.\\r\\n   */\\r\\n  function _admin() internal view virtual returns (address) {\\r\\n    return _getAdmin();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\r\\n   */\\r\\n  function _beforeFallback() internal virtual override {\\r\\n    require(\\r\\n      msg.sender != _getAdmin(),\\r\\n      \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\"\\r\\n    );\\r\\n    super._beforeFallback();\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x2e983dbcef66c87e0b6a018d17fa352fb257dfc1b1a6089f004665d3d358f819\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/proxy/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\r\\n * proxy whose upgrades are fully controlled by the current implementation.\\r\\n */\\r\\ninterface IERC1822Proxiable {\\r\\n  /**\\r\\n   * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\r\\n   * address.\\r\\n   *\\r\\n   * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\r\\n   * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\r\\n   * function revert if invoked through a proxy.\\r\\n   */\\r\\n  function proxiableUUID() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x81ef0f375fd4e395207fe1faf2b2b04726b161d42712ecc7d88a7688dd2ba9f8\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n  /**\\r\\n   * @dev Returns true if `account` is a contract.\\r\\n   *\\r\\n   * [IMPORTANT]\\r\\n   * ====\\r\\n   * It is unsafe to assume that an address for which this function returns\\r\\n   * false is an externally-owned account (EOA) and not a contract.\\r\\n   *\\r\\n   * Among others, `isContract` will return false for the following\\r\\n   * types of addresses:\\r\\n   *\\r\\n   *  - an externally-owned account\\r\\n   *  - a contract in construction\\r\\n   *  - an address where a contract will be created\\r\\n   *  - an address where a contract lived, but was destroyed\\r\\n   * ====\\r\\n   *\\r\\n   * [IMPORTANT]\\r\\n   * ====\\r\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n   *\\r\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n   * constructor.\\r\\n   * ====\\r\\n   */\\r\\n  function isContract(address account) internal view returns (bool) {\\r\\n    // This method relies on extcodesize/address.code.length, which returns 0\\r\\n    // for contracts in construction, since the code is only stored at the end\\r\\n    // of the constructor execution.\\r\\n\\r\\n    return account.code.length > 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n   * `recipient`, forwarding all available gas and reverting on errors.\\r\\n   *\\r\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n   * imposed by `transfer`, making them unable to receive funds via\\r\\n   * `transfer`. {sendValue} removes this limitation.\\r\\n   *\\r\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n   *\\r\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n   * taken to not create reentrancy vulnerabilities. Consider using\\r\\n   * {ReentrancyGuard} or the\\r\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n   */\\r\\n  function sendValue(address payable recipient, uint256 amount) internal {\\r\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n    require(\\r\\n      success,\\r\\n      \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Performs a Solidity function call using a low level `call`. A\\r\\n   * plain `call` is an unsafe replacement for a function call: use this\\r\\n   * function instead.\\r\\n   *\\r\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n   * function (like regular Solidity function calls).\\r\\n   *\\r\\n   * Returns the raw returned data. To convert to the expected return value,\\r\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `target` must be a contract.\\r\\n   * - calling `target` with `data` must not revert.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCall(address target, bytes memory data)\\r\\n    internal\\r\\n    returns (bytes memory)\\r\\n  {\\r\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    return functionCallWithValue(target, data, 0, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but also transferring `value` wei to `target`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the calling contract must have an ETH balance of at least `value`.\\r\\n   * - the called Solidity function must be `payable`.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCallWithValue(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    uint256 value\\r\\n  ) internal returns (bytes memory) {\\r\\n    return\\r\\n      functionCallWithValue(\\r\\n        target,\\r\\n        data,\\r\\n        value,\\r\\n        \\\"Address: low-level call with value failed\\\"\\r\\n      );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCallWithValue(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    uint256 value,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    require(\\r\\n      address(this).balance >= value,\\r\\n      \\\"Address: insufficient balance for call\\\"\\r\\n    );\\r\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but performing a static call.\\r\\n   *\\r\\n   * _Available since v3.3._\\r\\n   */\\r\\n  function functionStaticCall(address target, bytes memory data)\\r\\n    internal\\r\\n    view\\r\\n    returns (bytes memory)\\r\\n  {\\r\\n    return\\r\\n      functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n   * but performing a static call.\\r\\n   *\\r\\n   * _Available since v3.3._\\r\\n   */\\r\\n  function functionStaticCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal view returns (bytes memory) {\\r\\n    require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but performing a delegate call.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function functionDelegateCall(address target, bytes memory data)\\r\\n    internal\\r\\n    returns (bytes memory)\\r\\n  {\\r\\n    return\\r\\n      functionDelegateCall(\\r\\n        target,\\r\\n        data,\\r\\n        \\\"Address: low-level delegate call failed\\\"\\r\\n      );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n   * but performing a delegate call.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function functionDelegateCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n   * revert reason using the provided one.\\r\\n   *\\r\\n   * _Available since v4.3._\\r\\n   */\\r\\n  function verifyCallResult(\\r\\n    bool success,\\r\\n    bytes memory returndata,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (bytes memory) {\\r\\n    if (success) {\\r\\n      return returndata;\\r\\n    } else {\\r\\n      // Look for revert reason and bubble it up if present\\r\\n      if (returndata.length > 0) {\\r\\n        // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n        assembly {\\r\\n          let returndata_size := mload(returndata)\\r\\n          revert(add(32, returndata), returndata_size)\\r\\n        }\\r\\n      } else {\\r\\n        revert(errorMessage);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xf4107d47c602eb91f84cef76fc970863a194157ed9b7a49675da17feac357ecf\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n  function _msgSender() internal view virtual returns (address) {\\r\\n    return msg.sender;\\r\\n  }\\r\\n\\r\\n  function _msgData() internal view virtual returns (bytes calldata) {\\r\\n    return msg.data;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x248c7821bf32188e9b730c665c92682b1906bc7718a1e100223ebbc7377bd580\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Library for reading and writing primitive types to specific storage slots.\\r\\n *\\r\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\r\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\r\\n *\\r\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\r\\n *\\r\\n * Example usage to set ERC1967 implementation slot:\\r\\n * ```\\r\\n * contract ERC1967 {\\r\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\r\\n *\\r\\n *     function _getImplementation() internal view returns (address) {\\r\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\r\\n *     }\\r\\n *\\r\\n *     function _setImplementation(address newImplementation) internal {\\r\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\r\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\r\\n *     }\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\r\\n */\\r\\nlibrary StorageSlot {\\r\\n  struct AddressSlot {\\r\\n    address value;\\r\\n  }\\r\\n\\r\\n  struct BooleanSlot {\\r\\n    bool value;\\r\\n  }\\r\\n\\r\\n  struct Bytes32Slot {\\r\\n    bytes32 value;\\r\\n  }\\r\\n\\r\\n  struct Uint256Slot {\\r\\n    uint256 value;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\r\\n   */\\r\\n  function getAddressSlot(bytes32 slot)\\r\\n    internal\\r\\n    pure\\r\\n    returns (AddressSlot storage r)\\r\\n  {\\r\\n    assembly {\\r\\n      r.slot := slot\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\r\\n   */\\r\\n  function getBooleanSlot(bytes32 slot)\\r\\n    internal\\r\\n    pure\\r\\n    returns (BooleanSlot storage r)\\r\\n  {\\r\\n    assembly {\\r\\n      r.slot := slot\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\r\\n   */\\r\\n  function getBytes32Slot(bytes32 slot)\\r\\n    internal\\r\\n    pure\\r\\n    returns (Bytes32Slot storage r)\\r\\n  {\\r\\n    assembly {\\r\\n      r.slot := slot\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\r\\n   */\\r\\n  function getUint256Slot(bytes32 slot)\\r\\n    internal\\r\\n    pure\\r\\n    returns (Uint256Slot storage r)\\r\\n  {\\r\\n    assembly {\\r\\n      r.slot := slot\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x9a25f0cde729424d188ecf7a42ab75d09b333e9e3d51b9a9f161e9418bb4261f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6107398061007e6000396000f3fe60806040526004361061006b5760003560e01c8063204e1c7a14610070578063715018a6146100a65780637eff275e146100bd5780638da5cb5b146100dd5780639623609d146100f257806399a88ec414610105578063f2fde38b14610125578063f3b7dead14610145575b600080fd5b34801561007c57600080fd5b5061009061008b3660046104f6565b610165565b60405161009d919061051a565b60405180910390f35b3480156100b257600080fd5b506100bb6101f6565b005b3480156100c957600080fd5b506100bb6100d836600461052e565b61023a565b3480156100e957600080fd5b506100906102cb565b6100bb61010036600461057d565b6102da565b34801561011157600080fd5b506100bb61012036600461052e565b610370565b34801561013157600080fd5b506100bb6101403660046104f6565b6103cb565b34801561015157600080fd5b506100906101603660046104f6565b61046b565b6000806000836001600160a01b031660405161018b90635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101c6576040519150601f19603f3d011682016040523d82523d6000602084013e6101cb565b606091505b5091509150816101da57600080fd5b808060200190518101906101ee9190610653565b949350505050565b336101ff6102cb565b6001600160a01b03161461022e5760405162461bcd60e51b815260040161022590610670565b60405180910390fd5b6102386000610491565b565b336102436102cb565b6001600160a01b0316146102695760405162461bcd60e51b815260040161022590610670565b6040516308f2839760e41b81526001600160a01b03831690638f2839709061029590849060040161051a565b600060405180830381600087803b1580156102af57600080fd5b505af11580156102c3573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031690565b336102e36102cb565b6001600160a01b0316146103095760405162461bcd60e51b815260040161022590610670565b60405163278f794360e11b81526001600160a01b03841690634f1ef28690349061033990869086906004016106a5565b6000604051808303818588803b15801561035257600080fd5b505af1158015610366573d6000803e3d6000fd5b5050505050505050565b336103796102cb565b6001600160a01b03161461039f5760405162461bcd60e51b815260040161022590610670565b604051631b2ce7f360e11b81526001600160a01b03831690633659cfe69061029590849060040161051a565b336103d46102cb565b6001600160a01b0316146103fa5760405162461bcd60e51b815260040161022590610670565b6001600160a01b03811661045f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610225565b61046881610491565b50565b6000806000836001600160a01b031660405161018b906303e1469160e61b815260040190565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461046857600080fd5b60006020828403121561050857600080fd5b8135610513816104e1565b9392505050565b6001600160a01b0391909116815260200190565b6000806040838503121561054157600080fd5b823561054c816104e1565b9150602083013561055c816104e1565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561059257600080fd5b833561059d816104e1565b925060208401356105ad816104e1565b9150604084013567ffffffffffffffff808211156105ca57600080fd5b818601915086601f8301126105de57600080fd5b8135818111156105f0576105f0610567565b604051601f8201601f19908116603f0116810190838211818310171561061857610618610567565b8160405282815289602084870101111561063157600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60006020828403121561066557600080fd5b8151610513816104e1565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60018060a01b038316815260006020604081840152835180604085015260005b818110156106e1578581018301518582016060015282016106c5565b506000606082860101526060601f19601f83011685010192505050939250505056fea2646970667358221220fa4269114ce89391343489e925df12387cc91998bfc3adca4c3face5d8717f2864736f6c63430008100033",
  "deployedBytecode": "0x60806040526004361061006b5760003560e01c8063204e1c7a14610070578063715018a6146100a65780637eff275e146100bd5780638da5cb5b146100dd5780639623609d146100f257806399a88ec414610105578063f2fde38b14610125578063f3b7dead14610145575b600080fd5b34801561007c57600080fd5b5061009061008b3660046104f6565b610165565b60405161009d919061051a565b60405180910390f35b3480156100b257600080fd5b506100bb6101f6565b005b3480156100c957600080fd5b506100bb6100d836600461052e565b61023a565b3480156100e957600080fd5b506100906102cb565b6100bb61010036600461057d565b6102da565b34801561011157600080fd5b506100bb61012036600461052e565b610370565b34801561013157600080fd5b506100bb6101403660046104f6565b6103cb565b34801561015157600080fd5b506100906101603660046104f6565b61046b565b6000806000836001600160a01b031660405161018b90635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101c6576040519150601f19603f3d011682016040523d82523d6000602084013e6101cb565b606091505b5091509150816101da57600080fd5b808060200190518101906101ee9190610653565b949350505050565b336101ff6102cb565b6001600160a01b03161461022e5760405162461bcd60e51b815260040161022590610670565b60405180910390fd5b6102386000610491565b565b336102436102cb565b6001600160a01b0316146102695760405162461bcd60e51b815260040161022590610670565b6040516308f2839760e41b81526001600160a01b03831690638f2839709061029590849060040161051a565b600060405180830381600087803b1580156102af57600080fd5b505af11580156102c3573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031690565b336102e36102cb565b6001600160a01b0316146103095760405162461bcd60e51b815260040161022590610670565b60405163278f794360e11b81526001600160a01b03841690634f1ef28690349061033990869086906004016106a5565b6000604051808303818588803b15801561035257600080fd5b505af1158015610366573d6000803e3d6000fd5b5050505050505050565b336103796102cb565b6001600160a01b03161461039f5760405162461bcd60e51b815260040161022590610670565b604051631b2ce7f360e11b81526001600160a01b03831690633659cfe69061029590849060040161051a565b336103d46102cb565b6001600160a01b0316146103fa5760405162461bcd60e51b815260040161022590610670565b6001600160a01b03811661045f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610225565b61046881610491565b50565b6000806000836001600160a01b031660405161018b906303e1469160e61b815260040190565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461046857600080fd5b60006020828403121561050857600080fd5b8135610513816104e1565b9392505050565b6001600160a01b0391909116815260200190565b6000806040838503121561054157600080fd5b823561054c816104e1565b9150602083013561055c816104e1565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561059257600080fd5b833561059d816104e1565b925060208401356105ad816104e1565b9150604084013567ffffffffffffffff808211156105ca57600080fd5b818601915086601f8301126105de57600080fd5b8135818111156105f0576105f0610567565b604051601f8201601f19908116603f0116810190838211818310171561061857610618610567565b8160405282815289602084870101111561063157600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60006020828403121561066557600080fd5b8151610513816104e1565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60018060a01b038316815260006020604081840152835180604085015260005b818110156106e1578581018301518582016060015282016106c5565b506000606082860101526060601f19601f83011685010192505050939250505056fea2646970667358221220fa4269114ce89391343489e925df12387cc91998bfc3adca4c3face5d8717f2864736f6c63430008100033",
  "devdoc": {
    "details": "This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.",
    "kind": "dev",
    "methods": {
      "changeProxyAdmin(address,address)": {
        "details": "Changes the admin of `proxy` to `newAdmin`. Requirements: - This contract must be the current admin of `proxy`."
      },
      "getProxyAdmin(address)": {
        "details": "Returns the current admin of `proxy`. Requirements: - This contract must be the admin of `proxy`."
      },
      "getProxyImplementation(address)": {
        "details": "Returns the current implementation of `proxy`. Requirements: - This contract must be the admin of `proxy`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgrade(address,address)": {
        "details": "Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}. Requirements: - This contract must be the admin of `proxy`."
      },
      "upgradeAndCall(address,address,bytes)": {
        "details": "Upgrades `proxy` to `implementation` and calls a function on the new implementation. See {TransparentUpgradeableProxy-upgradeToAndCall}. Requirements: - This contract must be the admin of `proxy`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8191,
        "contract": "contracts/external/openzeppelin/contracts/proxy/ProxyAdmin.sol:ProxyAdmin",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}