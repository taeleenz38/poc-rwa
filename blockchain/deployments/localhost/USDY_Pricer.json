{
  "address": "0xB84dD65f0BF622588997c7d38AA7307e107c3AAa",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pricer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceIdDoesNotExist",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "priceId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PriceAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "priceId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "PriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_UPDATE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "addPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPriceId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "priceId",
          "type": "uint256"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestPriceId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "priceIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "prices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "priceId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "updatePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0ae037a88dcf94e1ad2c3792b73e9fb504c16cfb5b101db078b8a0bea4697320",
  "receipt": {
    "to": null,
    "from": "0x18e66FEF24d9514D901ee4cB29Bd1803dC6A2b9C",
    "contractAddress": "0xB84dD65f0BF622588997c7d38AA7307e107c3AAa",
    "transactionIndex": 0,
    "gasUsed": "1005627",
    "logsBloom": "0x
    "blockHash": "0x0bfaa17105789195af7431322d70b2d3d19241fa458643bd5d2e5a48999df1a6",
    "transactionHash": "0x0ae037a88dcf94e1ad2c3792b73e9fb504c16cfb5b101db078b8a0bea4697320",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 6251316,
        "transactionHash": "0x0ae037a88dcf94e1ad2c3792b73e9fb504c16cfb5b101db078b8a0bea4697320",
        "address": "0xB84dD65f0BF622588997c7d38AA7307e107c3AAa",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f8a90bf8fb9138c7428234870a68488a21e1cbf3",
          "0x00000000000000000000000018e66fef24d9514d901ee4cb29bd1803dc6a2b9c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0bfaa17105789195af7431322d70b2d3d19241fa458643bd5d2e5a48999df1a6"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 6251316,
        "transactionHash": "0x0ae037a88dcf94e1ad2c3792b73e9fb504c16cfb5b101db078b8a0bea4697320",
        "address": "0xB84dD65f0BF622588997c7d38AA7307e107c3AAa",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xf7650eb8b2f3fb3c9b995a8ee2fc3c04ed07f1c4efe01998177b109698c67517",
          "0x00000000000000000000000018096586f4f475354f9ab7a9a38db6a075a25e18",
          "0x00000000000000000000000018e66fef24d9514d901ee4cb29bd1803dc6a2b9c"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x0bfaa17105789195af7431322d70b2d3d19241fa458643bd5d2e5a48999df1a6"
      }
    ],
    "blockNumber": 6251316,
    "cumulativeGasUsed": "1005627",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf8A90Bf8fb9138c7428234870a68488A21E1Cbf3",
    "0x18096586f4f475354f9AB7A9a38db6A075A25e18"
  ],
  "solcInputHash": "5855a53555d0b692c677618bcb41c21f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pricer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceIdDoesNotExist\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PriceAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_UPDATE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"addPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPriceId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestPriceId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priceIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"PriceAdded(uint256,uint256,uint256)\":{\"params\":{\"price\":\"The price that was added\",\"priceId\":\"The priceId associated with the price\",\"timestamp\":\"The timestamp associated with the price\"}},\"PriceUpdated(uint256,uint256,uint256)\":{\"params\":{\"newPrice\":\"The price that was updated to\",\"oldPrice\":\"The old price associated with the priceId\",\"priceId\":\"The priceId associated with the price to update\"}}},\"kind\":\"dev\",\"methods\":{\"addPrice(uint256,uint256)\":{\"params\":{\"price\":\"The price to add\",\"timestamp\":\"The timestamp associated with the price\"}},\"getLatestPrice()\":{\"returns\":{\"_0\":\"uint256 The latest price of the asset\"}},\"getPrice(uint256)\":{\"returns\":{\"_0\":\"uint256 The price of the asset\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updatePrice(uint256,uint256)\":{\"params\":{\"price\":\"The price to set\",\"priceId\":\"The priceId to update\"}}},\"stateVariables\":{\"currentPriceId\":{\"details\":\"This price may not be the latest price since prices can be added out of order in relation to their timestamp\"},\"priceIds\":{\"details\":\"These priceIds are not ordered by timestamp\"}},\"version\":1},\"userdoc\":{\"events\":{\"PriceAdded(uint256,uint256,uint256)\":{\"notice\":\"Emitted when a price is added\"},\"PriceUpdated(uint256,uint256,uint256)\":{\"notice\":\"Emitted when a price is updated\"}},\"kind\":\"user\",\"methods\":{\"addPrice(uint256,uint256)\":{\"notice\":\"Adds a price to the pricer\"},\"getLatestPrice()\":{\"notice\":\"Gets the latest price of the asset\"},\"getPrice(uint256)\":{\"notice\":\"Gets the latest price of the asset\"},\"updatePrice(uint256,uint256)\":{\"notice\":\"Updates a price in the pricer\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Pricer.sol\":\"Pricer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/Pricer.sol\":{\"content\":\"/**SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\n      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\r\\n   \\u2553\\u2588\\u2588\\u2580\\u2514 ,\\u2553\\u2584\\u2584\\u2584, '\\u2580\\u2588\\u2588\\u2584\\r\\n  \\u2588\\u2588\\u2580 \\u2584\\u2588\\u2588\\u2580\\u2580\\u2559\\u2559\\u2580\\u2580\\u2588\\u2588\\u2584 \\u2514\\u2588\\u2588\\u00b5           ,,       ,,      ,     ,,,            ,,,\\r\\n \\u2588\\u2588 ,\\u2588\\u2588\\u00ac \\u2584\\u2588\\u2588\\u2588\\u2588\\u2584  \\u2580\\u2588\\u2584 \\u2559\\u2588\\u2584      \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584   \\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588  \\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584    \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588,\\r\\n\\u2588\\u2588  \\u2588\\u2588 \\u2552\\u2588\\u2580'   \\u2559\\u2588\\u258c \\u2559\\u2588\\u258c \\u2588\\u2588     \\u2590\\u2588\\u2588      \\u2588\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588,  \\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2514\\u2588\\u2588\\u258c  \\u2588\\u2588\\u258c     \\u2514\\u2588\\u2588\\u258c\\r\\n\\u2588\\u2588 \\u2590\\u2588\\u258c \\u2588\\u2588      \\u255f\\u2588  \\u2588\\u258c \\u255f\\u2588     \\u2588\\u2588\\u258c      \\u2590\\u2588\\u2588  \\u2588\\u2588 \\u2514\\u2588\\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588\\u258c     \\u255f\\u2588\\u2588 j\\u2588\\u2588       \\u255f\\u2588\\u2588\\r\\n\\u255f\\u2588  \\u2588\\u2588 \\u2559\\u2588\\u2588    \\u2584\\u2588\\u2580 \\u2590\\u2588\\u258c \\u2588\\u2588     \\u2559\\u2588\\u2588      \\u2588\\u2588\\u258c  \\u2588\\u2588   \\u2559\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2584\\u2588\\u2588\\u2580  \\u2588\\u2588\\u258c     ,\\u2588\\u2588\\u2580\\r\\n \\u2588\\u2588 \\\"\\u2588\\u2588, \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2310      \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588     \\u2559\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580     \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580`\\r\\n  \\u2588\\u2588\\u2584 \\u2559\\u2580\\u2588\\u2588\\u2584\\u2584\\u2584\\u2584\\u2584,,,                \\u00ac\\u2500                                    '\\u2500\\u00ac\\r\\n   \\u2559\\u2580\\u2588\\u2588\\u2584 '\\u2559\\u2559\\u2559\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\r\\n      \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588R\\u2310\\r\\n\\r\\n */\\r\\n\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"contracts/external/openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\r\\nimport \\\"contracts/interfaces/IPricer.sol\\\";\\r\\n\\r\\ncontract Pricer is AccessControlEnumerable, IPricer {\\r\\n  // Struct representing information for a given priceId\\r\\n  struct PriceInfo {\\r\\n    uint256 price;\\r\\n    uint256 timestamp;\\r\\n  }\\r\\n  // Mapping from priceId to PriceInfo\\r\\n  mapping(uint256 => PriceInfo) public prices;\\r\\n\\r\\n  // Array of priceIds\\r\\n  /// @dev These priceIds are not ordered by timestamp\\r\\n  uint256[] public priceIds;\\r\\n\\r\\n  // Pointer to last set priceId\\r\\n  /// @dev This price may not be the latest price since prices can be added\\r\\n  /// out of order in relation to their timestamp\\r\\n  uint256 public currentPriceId;\\r\\n\\r\\n  // Pointer to priceId associated with the latest price\\r\\n  uint256 public latestPriceId;\\r\\n\\r\\n  bytes32 public constant PRICE_UPDATE_ROLE = keccak256(\\\"PRICE_UPDATE_ROLE\\\");\\r\\n\\r\\n  constructor(address admin, address pricer) {\\r\\n    _grantRole(DEFAULT_ADMIN_ROLE, admin);\\r\\n    _grantRole(PRICE_UPDATE_ROLE, pricer);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the latest price of the asset\\r\\n   *\\r\\n   * @return uint256 The latest price of the asset\\r\\n   */\\r\\n  function getLatestPrice() external view override returns (uint256) {\\r\\n    return prices[latestPriceId].price;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the latest price of the asset\\r\\n   *\\r\\n   * @return uint256 The price of the asset\\r\\n   */\\r\\n  function getPrice(uint256 priceId) external view override returns (uint256) {\\r\\n    return prices[priceId].price;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Adds a price to the pricer\\r\\n   *\\r\\n   * @param price     The price to add\\r\\n   * @param timestamp The timestamp associated with the price\\r\\n   */\\r\\n  function addPrice(\\r\\n    uint256 price,\\r\\n    uint256 timestamp\\r\\n  ) external virtual override onlyRole(PRICE_UPDATE_ROLE) {\\r\\n    if (price == 0) {\\r\\n      revert InvalidPrice();\\r\\n    }\\r\\n\\r\\n    // Set price\\r\\n    uint256 priceId = ++currentPriceId;\\r\\n    prices[priceId] = PriceInfo(price, timestamp);\\r\\n    priceIds.push(priceId);\\r\\n\\r\\n    // Update latestPriceId\\r\\n    if (timestamp > prices[latestPriceId].timestamp) {\\r\\n      latestPriceId = priceId;\\r\\n    }\\r\\n\\r\\n    emit PriceAdded(priceId, price, timestamp);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Updates a price in the pricer\\r\\n   *\\r\\n   * @param priceId The priceId to update\\r\\n   * @param price   The price to set\\r\\n   */\\r\\n  function updatePrice(\\r\\n    uint256 priceId,\\r\\n    uint256 price\\r\\n  ) external override onlyRole(PRICE_UPDATE_ROLE) {\\r\\n    if (price == 0) {\\r\\n      revert InvalidPrice();\\r\\n    }\\r\\n    if (prices[priceId].price == 0) {\\r\\n      revert PriceIdDoesNotExist();\\r\\n    }\\r\\n\\r\\n    PriceInfo memory oldPriceInfo = prices[priceId];\\r\\n    prices[priceId] = PriceInfo(price, oldPriceInfo.timestamp);\\r\\n\\r\\n    emit PriceUpdated(priceId, oldPriceInfo.price, price);\\r\\n  }\\r\\n\\r\\n  /*//////////////////////////////////////////////////////////////\\r\\n                           Events & Errors\\r\\n  //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when a price is added\\r\\n   *\\r\\n   * @param priceId   The priceId associated with the price\\r\\n   * @param price     The price that was added\\r\\n   * @param timestamp The timestamp associated with the price\\r\\n   */\\r\\n  event PriceAdded(uint256 indexed priceId, uint256 price, uint256 timestamp);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when a price is updated\\r\\n   *\\r\\n   * @param priceId  The priceId associated with the price to update\\r\\n   * @param oldPrice The old price associated with the priceId\\r\\n   * @param newPrice The price that was updated to\\r\\n   */\\r\\n  event PriceUpdated(\\r\\n    uint256 indexed priceId,\\r\\n    uint256 oldPrice,\\r\\n    uint256 newPrice\\r\\n  );\\r\\n\\r\\n  // Errors\\r\\n  error InvalidPrice();\\r\\n  error PriceIdDoesNotExist();\\r\\n}\\r\\n\",\"keccak256\":\"0xa4212517a3c501b3702f40271568eafcb46cadf2080e6b6ede1d71afea1b13f9\",\"license\":\"BUSL-1.1\"},\"contracts/external/openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"contracts/external/openzeppelin/contracts/access/IAccessControl.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts/utils/ERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module that allows children to implement role-based access\\r\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\r\\n * members except through off-chain means by accessing the contract event logs. Some\\r\\n * applications may benefit from on-chain enumerability, for those cases see\\r\\n * {AccessControlEnumerable}.\\r\\n *\\r\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\r\\n * in the external API and be unique. The best way to achieve this is by\\r\\n * using `public constant` hash digests:\\r\\n *\\r\\n * ```\\r\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\r\\n * ```\\r\\n *\\r\\n * Roles can be used to represent a set of permissions. To restrict access to a\\r\\n * function call, use {hasRole}:\\r\\n *\\r\\n * ```\\r\\n * function foo() public {\\r\\n *     require(hasRole(MY_ROLE, msg.sender));\\r\\n *     ...\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\r\\n * {revokeRole} functions. Each role has an associated admin role, and only\\r\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\r\\n *\\r\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\r\\n * that only accounts with this role will be able to grant or revoke other\\r\\n * roles. More complex role relationships can be created by using\\r\\n * {_setRoleAdmin}.\\r\\n *\\r\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\r\\n * grant and revoke this role. Extra precautions should be taken to secure\\r\\n * accounts that have been granted it.\\r\\n */\\r\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\r\\n  struct RoleData {\\r\\n    mapping(address => bool) members;\\r\\n    bytes32 adminRole;\\r\\n  }\\r\\n\\r\\n  mapping(bytes32 => RoleData) private _roles;\\r\\n\\r\\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier that checks that an account has a specific role. Reverts\\r\\n   * with a standardized message including the required role.\\r\\n   *\\r\\n   * The format of the revert reason is given by the following regular expression:\\r\\n   *\\r\\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\r\\n   *\\r\\n   * _Available since v4.1._\\r\\n   */\\r\\n  modifier onlyRole(bytes32 role) {\\r\\n    _checkRole(role, _msgSender());\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC165-supportsInterface}.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    return\\r\\n      interfaceId == type(IAccessControl).interfaceId ||\\r\\n      super.supportsInterface(interfaceId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns `true` if `account` has been granted `role`.\\r\\n   */\\r\\n  function hasRole(bytes32 role, address account)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    return _roles[role].members[account];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Revert with a standard message if `account` is missing `role`.\\r\\n   *\\r\\n   * The format of the revert reason is given by the following regular expression:\\r\\n   *\\r\\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\r\\n   */\\r\\n  function _checkRole(bytes32 role, address account) internal view virtual {\\r\\n    if (!hasRole(role, account)) {\\r\\n      revert(\\r\\n        string(\\r\\n          abi.encodePacked(\\r\\n            \\\"AccessControl: account \\\",\\r\\n            Strings.toHexString(uint160(account), 20),\\r\\n            \\\" is missing role \\\",\\r\\n            Strings.toHexString(uint256(role), 32)\\r\\n          )\\r\\n        )\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\r\\n   * {revokeRole}.\\r\\n   *\\r\\n   * To change a role's admin, use {_setRoleAdmin}.\\r\\n   */\\r\\n  function getRoleAdmin(bytes32 role)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (bytes32)\\r\\n  {\\r\\n    return _roles[role].adminRole;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Grants `role` to `account`.\\r\\n   *\\r\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n   * event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must have ``role``'s admin role.\\r\\n   */\\r\\n  function grantRole(bytes32 role, address account)\\r\\n    public\\r\\n    virtual\\r\\n    override\\r\\n    onlyRole(getRoleAdmin(role))\\r\\n  {\\r\\n    _grantRole(role, account);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Revokes `role` from `account`.\\r\\n   *\\r\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must have ``role``'s admin role.\\r\\n   */\\r\\n  function revokeRole(bytes32 role, address account)\\r\\n    public\\r\\n    virtual\\r\\n    override\\r\\n    onlyRole(getRoleAdmin(role))\\r\\n  {\\r\\n    _revokeRole(role, account);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Revokes `role` from the calling account.\\r\\n   *\\r\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\r\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\r\\n   * if they are compromised (such as when a trusted device is misplaced).\\r\\n   *\\r\\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\\r\\n   * event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must be `account`.\\r\\n   */\\r\\n  function renounceRole(bytes32 role, address account) public virtual override {\\r\\n    require(\\r\\n      account == _msgSender(),\\r\\n      \\\"AccessControl: can only renounce roles for self\\\"\\r\\n    );\\r\\n\\r\\n    _revokeRole(role, account);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Grants `role` to `account`.\\r\\n   *\\r\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n   * event. Note that unlike {grantRole}, this function doesn't perform any\\r\\n   * checks on the calling account.\\r\\n   *\\r\\n   * [WARNING]\\r\\n   * ====\\r\\n   * This function should only be called from the constructor when setting\\r\\n   * up the initial roles for the system.\\r\\n   *\\r\\n   * Using this function in any other way is effectively circumventing the admin\\r\\n   * system imposed by {AccessControl}.\\r\\n   * ====\\r\\n   *\\r\\n   * NOTE: This function is deprecated in favor of {_grantRole}.\\r\\n   */\\r\\n  function _setupRole(bytes32 role, address account) internal virtual {\\r\\n    _grantRole(role, account);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `adminRole` as ``role``'s admin role.\\r\\n   *\\r\\n   * Emits a {RoleAdminChanged} event.\\r\\n   */\\r\\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\r\\n    bytes32 previousAdminRole = getRoleAdmin(role);\\r\\n    _roles[role].adminRole = adminRole;\\r\\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Grants `role` to `account`.\\r\\n   *\\r\\n   * Internal function without access restriction.\\r\\n   */\\r\\n  function _grantRole(bytes32 role, address account) internal virtual {\\r\\n    if (!hasRole(role, account)) {\\r\\n      _roles[role].members[account] = true;\\r\\n      emit RoleGranted(role, account, _msgSender());\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Revokes `role` from `account`.\\r\\n   *\\r\\n   * Internal function without access restriction.\\r\\n   */\\r\\n  function _revokeRole(bytes32 role, address account) internal virtual {\\r\\n    if (hasRole(role, account)) {\\r\\n      _roles[role].members[account] = false;\\r\\n      emit RoleRevoked(role, account, _msgSender());\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xe499e6ff08716bccf12fb8ee726d97fafc19ce08fb62173163d3cfd9e88d7928\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"contracts/external/openzeppelin/contracts/access/IAccessControlEnumerable.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\r\\n */\\r\\nabstract contract AccessControlEnumerable is\\r\\n  IAccessControlEnumerable,\\r\\n  AccessControl\\r\\n{\\r\\n  using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n  mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC165-supportsInterface}.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    return\\r\\n      interfaceId == type(IAccessControlEnumerable).interfaceId ||\\r\\n      super.supportsInterface(interfaceId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\r\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\r\\n   *\\r\\n   * Role bearers are not sorted in any particular way, and their ordering may\\r\\n   * change at any point.\\r\\n   *\\r\\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\r\\n   * you perform all queries on the same block. See the following\\r\\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\r\\n   * for more information.\\r\\n   */\\r\\n  function getRoleMember(bytes32 role, uint256 index)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (address)\\r\\n  {\\r\\n    return _roleMembers[role].at(index);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of accounts that have `role`. Can be used\\r\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\r\\n   */\\r\\n  function getRoleMemberCount(bytes32 role)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return _roleMembers[role].length();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Overload {_grantRole} to track enumerable memberships\\r\\n   */\\r\\n  function _grantRole(bytes32 role, address account) internal virtual override {\\r\\n    super._grantRole(role, account);\\r\\n    _roleMembers[role].add(account);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Overload {_revokeRole} to track enumerable memberships\\r\\n   */\\r\\n  function _revokeRole(bytes32 role, address account)\\r\\n    internal\\r\\n    virtual\\r\\n    override\\r\\n  {\\r\\n    super._revokeRole(role, account);\\r\\n    _roleMembers[role].remove(account);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xde49ae66562dd2ce740952819d16a634c0b47782d4a4591984b749d714549c2a\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\r\\n */\\r\\ninterface IAccessControl {\\r\\n  /**\\r\\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\r\\n   *\\r\\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\r\\n   * {RoleAdminChanged} not being emitted signaling this.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  event RoleAdminChanged(\\r\\n    bytes32 indexed role,\\r\\n    bytes32 indexed previousAdminRole,\\r\\n    bytes32 indexed newAdminRole\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `account` is granted `role`.\\r\\n   *\\r\\n   * `sender` is the account that originated the contract call, an admin role\\r\\n   * bearer except when using {AccessControl-_setupRole}.\\r\\n   */\\r\\n  event RoleGranted(\\r\\n    bytes32 indexed role,\\r\\n    address indexed account,\\r\\n    address indexed sender\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `account` is revoked `role`.\\r\\n   *\\r\\n   * `sender` is the account that originated the contract call:\\r\\n   *   - if using `revokeRole`, it is the admin role bearer\\r\\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\r\\n   */\\r\\n  event RoleRevoked(\\r\\n    bytes32 indexed role,\\r\\n    address indexed account,\\r\\n    address indexed sender\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Returns `true` if `account` has been granted `role`.\\r\\n   */\\r\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\r\\n   * {revokeRole}.\\r\\n   *\\r\\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\r\\n   */\\r\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\r\\n\\r\\n  /**\\r\\n   * @dev Grants `role` to `account`.\\r\\n   *\\r\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n   * event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must have ``role``'s admin role.\\r\\n   */\\r\\n  function grantRole(bytes32 role, address account) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Revokes `role` from `account`.\\r\\n   *\\r\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must have ``role``'s admin role.\\r\\n   */\\r\\n  function revokeRole(bytes32 role, address account) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Revokes `role` from the calling account.\\r\\n   *\\r\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\r\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\r\\n   * if they are compromised (such as when a trusted device is misplaced).\\r\\n   *\\r\\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\\r\\n   * event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must be `account`.\\r\\n   */\\r\\n  function renounceRole(bytes32 role, address account) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x95350393a2d2c223176dbdf70ce6ee8e9ca6633e4db9f9f00b66ac67d0df8001\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"contracts/external/openzeppelin/contracts/access/IAccessControl.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\r\\n */\\r\\ninterface IAccessControlEnumerable is IAccessControl {\\r\\n  /**\\r\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\r\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\r\\n   *\\r\\n   * Role bearers are not sorted in any particular way, and their ordering may\\r\\n   * change at any point.\\r\\n   *\\r\\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\r\\n   * you perform all queries on the same block. See the following\\r\\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\r\\n   * for more information.\\r\\n   */\\r\\n  function getRoleMember(bytes32 role, uint256 index)\\r\\n    external\\r\\n    view\\r\\n    returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of accounts that have `role`. Can be used\\r\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\r\\n   */\\r\\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xe2f1ef4ac3c86d6f8204292f308aaf61783afd485bec3f9e75b52c95b5c398b3\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n  function _msgSender() internal view virtual returns (address) {\\r\\n    return msg.sender;\\r\\n  }\\r\\n\\r\\n  function _msgData() internal view virtual returns (bytes calldata) {\\r\\n    return msg.data;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x248c7821bf32188e9b730c665c92682b1906bc7718a1e100223ebbc7377bd580\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"contracts/external/openzeppelin/contracts/utils/IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\r\\n */\\r\\nabstract contract ERC165 is IERC165 {\\r\\n  /**\\r\\n   * @dev See {IERC165-supportsInterface}.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    return interfaceId == type(IERC165).interfaceId;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xa8b11e5987f6f1e6b4bc7b5a4f5a9494b2a312d00b9b9d4881ec9d6798baab47\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Library for managing\\r\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\r\\n * types.\\r\\n *\\r\\n * Sets have the following properties:\\r\\n *\\r\\n * - Elements are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableSet.AddressSet private mySet;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\r\\n * and `uint256` (`UintSet`) are supported.\\r\\n */\\r\\nlibrary EnumerableSet {\\r\\n  // To implement this library for multiple types with as little code\\r\\n  // repetition as possible, we write it in terms of a generic Set type with\\r\\n  // bytes32 values.\\r\\n  // The Set implementation uses private functions, and user-facing\\r\\n  // implementations (such as AddressSet) are just wrappers around the\\r\\n  // underlying Set.\\r\\n  // This means that we can only create new EnumerableSets for types that fit\\r\\n  // in bytes32.\\r\\n\\r\\n  struct Set {\\r\\n    // Storage of set values\\r\\n    bytes32[] _values;\\r\\n    // Position of the value in the `values` array, plus 1 because index 0\\r\\n    // means a value is not in the set.\\r\\n    mapping(bytes32 => uint256) _indexes;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Add a value to a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was added to the set, that is if it was not\\r\\n   * already present.\\r\\n   */\\r\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n    if (!_contains(set, value)) {\\r\\n      set._values.push(value);\\r\\n      // The value is stored at length-1, but we add 1 to all indexes\\r\\n      // and use 0 as a sentinel value\\r\\n      set._indexes[value] = set._values.length;\\r\\n      return true;\\r\\n    } else {\\r\\n      return false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Removes a value from a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was removed from the set, that is if it was\\r\\n   * present.\\r\\n   */\\r\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\r\\n    uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n    if (valueIndex != 0) {\\r\\n      // Equivalent to contains(set, value)\\r\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\r\\n      // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n      uint256 toDeleteIndex = valueIndex - 1;\\r\\n      uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n      if (lastIndex != toDeleteIndex) {\\r\\n        bytes32 lastvalue = set._values[lastIndex];\\r\\n\\r\\n        // Move the last value to the index where the value to delete is\\r\\n        set._values[toDeleteIndex] = lastvalue;\\r\\n        // Update the index for the moved value\\r\\n        set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\r\\n      }\\r\\n\\r\\n      // Delete the slot where the moved value was stored\\r\\n      set._values.pop();\\r\\n\\r\\n      // Delete the index for the deleted slot\\r\\n      delete set._indexes[value];\\r\\n\\r\\n      return true;\\r\\n    } else {\\r\\n      return false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns true if the value is in the set. O(1).\\r\\n   */\\r\\n  function _contains(Set storage set, bytes32 value)\\r\\n    private\\r\\n    view\\r\\n    returns (bool)\\r\\n  {\\r\\n    return set._indexes[value] != 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of values on the set. O(1).\\r\\n   */\\r\\n  function _length(Set storage set) private view returns (uint256) {\\r\\n    return set._values.length;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n   *\\r\\n   * Note that there are no guarantees on the ordering of values inside the\\r\\n   * array, and it may change when more values are added or removed.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `index` must be strictly less than {length}.\\r\\n   */\\r\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n    return set._values[index];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the entire set in an array\\r\\n   *\\r\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n   */\\r\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\r\\n    return set._values;\\r\\n  }\\r\\n\\r\\n  // Bytes32Set\\r\\n\\r\\n  struct Bytes32Set {\\r\\n    Set _inner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Add a value to a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was added to the set, that is if it was not\\r\\n   * already present.\\r\\n   */\\r\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n    return _add(set._inner, value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Removes a value from a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was removed from the set, that is if it was\\r\\n   * present.\\r\\n   */\\r\\n  function remove(Bytes32Set storage set, bytes32 value)\\r\\n    internal\\r\\n    returns (bool)\\r\\n  {\\r\\n    return _remove(set._inner, value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns true if the value is in the set. O(1).\\r\\n   */\\r\\n  function contains(Bytes32Set storage set, bytes32 value)\\r\\n    internal\\r\\n    view\\r\\n    returns (bool)\\r\\n  {\\r\\n    return _contains(set._inner, value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of values in the set. O(1).\\r\\n   */\\r\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n    return _length(set._inner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n   *\\r\\n   * Note that there are no guarantees on the ordering of values inside the\\r\\n   * array, and it may change when more values are added or removed.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `index` must be strictly less than {length}.\\r\\n   */\\r\\n  function at(Bytes32Set storage set, uint256 index)\\r\\n    internal\\r\\n    view\\r\\n    returns (bytes32)\\r\\n  {\\r\\n    return _at(set._inner, index);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the entire set in an array\\r\\n   *\\r\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n   */\\r\\n  function values(Bytes32Set storage set)\\r\\n    internal\\r\\n    view\\r\\n    returns (bytes32[] memory)\\r\\n  {\\r\\n    return _values(set._inner);\\r\\n  }\\r\\n\\r\\n  // AddressSet\\r\\n\\r\\n  struct AddressSet {\\r\\n    Set _inner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Add a value to a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was added to the set, that is if it was not\\r\\n   * already present.\\r\\n   */\\r\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Removes a value from a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was removed from the set, that is if it was\\r\\n   * present.\\r\\n   */\\r\\n  function remove(AddressSet storage set, address value)\\r\\n    internal\\r\\n    returns (bool)\\r\\n  {\\r\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns true if the value is in the set. O(1).\\r\\n   */\\r\\n  function contains(AddressSet storage set, address value)\\r\\n    internal\\r\\n    view\\r\\n    returns (bool)\\r\\n  {\\r\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of values in the set. O(1).\\r\\n   */\\r\\n  function length(AddressSet storage set) internal view returns (uint256) {\\r\\n    return _length(set._inner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n   *\\r\\n   * Note that there are no guarantees on the ordering of values inside the\\r\\n   * array, and it may change when more values are added or removed.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `index` must be strictly less than {length}.\\r\\n   */\\r\\n  function at(AddressSet storage set, uint256 index)\\r\\n    internal\\r\\n    view\\r\\n    returns (address)\\r\\n  {\\r\\n    return address(uint160(uint256(_at(set._inner, index))));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the entire set in an array\\r\\n   *\\r\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n   */\\r\\n  function values(AddressSet storage set)\\r\\n    internal\\r\\n    view\\r\\n    returns (address[] memory)\\r\\n  {\\r\\n    bytes32[] memory store = _values(set._inner);\\r\\n    address[] memory result;\\r\\n\\r\\n    assembly {\\r\\n      result := store\\r\\n    }\\r\\n\\r\\n    return result;\\r\\n  }\\r\\n\\r\\n  // UintSet\\r\\n\\r\\n  struct UintSet {\\r\\n    Set _inner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Add a value to a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was added to the set, that is if it was not\\r\\n   * already present.\\r\\n   */\\r\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n    return _add(set._inner, bytes32(value));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Removes a value from a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was removed from the set, that is if it was\\r\\n   * present.\\r\\n   */\\r\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n    return _remove(set._inner, bytes32(value));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns true if the value is in the set. O(1).\\r\\n   */\\r\\n  function contains(UintSet storage set, uint256 value)\\r\\n    internal\\r\\n    view\\r\\n    returns (bool)\\r\\n  {\\r\\n    return _contains(set._inner, bytes32(value));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of values on the set. O(1).\\r\\n   */\\r\\n  function length(UintSet storage set) internal view returns (uint256) {\\r\\n    return _length(set._inner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n   *\\r\\n   * Note that there are no guarantees on the ordering of values inside the\\r\\n   * array, and it may change when more values are added or removed.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `index` must be strictly less than {length}.\\r\\n   */\\r\\n  function at(UintSet storage set, uint256 index)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return uint256(_at(set._inner, index));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the entire set in an array\\r\\n   *\\r\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n   */\\r\\n  function values(UintSet storage set)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256[] memory)\\r\\n  {\\r\\n    bytes32[] memory store = _values(set._inner);\\r\\n    uint256[] memory result;\\r\\n\\r\\n    assembly {\\r\\n      result := store\\r\\n    }\\r\\n\\r\\n    return result;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x1aec344791587e6982b882b9c5eee5114b3efbe4137e0b7003ab38d28cd5969c\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n  /**\\r\\n   * @dev Returns true if this contract implements the interface defined by\\r\\n   * `interfaceId`. See the corresponding\\r\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n   * to learn more about how these ids are created.\\r\\n   *\\r\\n   * This function call must use less than 30 000 gas.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x136638d03ae1a5f9e0de01dd9d9a3d13bd84ff9fd6ca0efbd96fe31beb422785\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n  bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n\\r\\n  /**\\r\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n   */\\r\\n  function toString(uint256 value) internal pure returns (string memory) {\\r\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\r\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n    if (value == 0) {\\r\\n      return \\\"0\\\";\\r\\n    }\\r\\n    uint256 temp = value;\\r\\n    uint256 digits;\\r\\n    while (temp != 0) {\\r\\n      digits++;\\r\\n      temp /= 10;\\r\\n    }\\r\\n    bytes memory buffer = new bytes(digits);\\r\\n    while (value != 0) {\\r\\n      digits -= 1;\\r\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n      value /= 10;\\r\\n    }\\r\\n    return string(buffer);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n   */\\r\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n    if (value == 0) {\\r\\n      return \\\"0x00\\\";\\r\\n    }\\r\\n    uint256 temp = value;\\r\\n    uint256 length = 0;\\r\\n    while (temp != 0) {\\r\\n      length++;\\r\\n      temp >>= 8;\\r\\n    }\\r\\n    return toHexString(value, length);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n   */\\r\\n  function toHexString(uint256 value, uint256 length)\\r\\n    internal\\r\\n    pure\\r\\n    returns (string memory)\\r\\n  {\\r\\n    bytes memory buffer = new bytes(2 * length + 2);\\r\\n    buffer[0] = \\\"0\\\";\\r\\n    buffer[1] = \\\"x\\\";\\r\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\r\\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\\r\\n      value >>= 4;\\r\\n    }\\r\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\r\\n    return string(buffer);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x5dbadb09ef32fe2852e33c5b3615a1e2d7e7794ef20902c3275627f6f061a7d8\",\"license\":\"MIT\"},\"contracts/interfaces/IPricer.sol\":{\"content\":\"/**SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\n      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\r\\n   \\u2553\\u2588\\u2588\\u2580\\u2514 ,\\u2553\\u2584\\u2584\\u2584, '\\u2580\\u2588\\u2588\\u2584\\r\\n  \\u2588\\u2588\\u2580 \\u2584\\u2588\\u2588\\u2580\\u2580\\u2559\\u2559\\u2580\\u2580\\u2588\\u2588\\u2584 \\u2514\\u2588\\u2588\\u00b5           ,,       ,,      ,     ,,,            ,,,\\r\\n \\u2588\\u2588 ,\\u2588\\u2588\\u00ac \\u2584\\u2588\\u2588\\u2588\\u2588\\u2584  \\u2580\\u2588\\u2584 \\u2559\\u2588\\u2584      \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584   \\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588  \\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584    \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588,\\r\\n\\u2588\\u2588  \\u2588\\u2588 \\u2552\\u2588\\u2580'   \\u2559\\u2588\\u258c \\u2559\\u2588\\u258c \\u2588\\u2588     \\u2590\\u2588\\u2588      \\u2588\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588,  \\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2514\\u2588\\u2588\\u258c  \\u2588\\u2588\\u258c     \\u2514\\u2588\\u2588\\u258c\\r\\n\\u2588\\u2588 \\u2590\\u2588\\u258c \\u2588\\u2588      \\u255f\\u2588  \\u2588\\u258c \\u255f\\u2588     \\u2588\\u2588\\u258c      \\u2590\\u2588\\u2588  \\u2588\\u2588 \\u2514\\u2588\\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588\\u258c     \\u255f\\u2588\\u2588 j\\u2588\\u2588       \\u255f\\u2588\\u2588\\r\\n\\u255f\\u2588  \\u2588\\u2588 \\u2559\\u2588\\u2588    \\u2584\\u2588\\u2580 \\u2590\\u2588\\u258c \\u2588\\u2588     \\u2559\\u2588\\u2588      \\u2588\\u2588\\u258c  \\u2588\\u2588   \\u2559\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2584\\u2588\\u2588\\u2580  \\u2588\\u2588\\u258c     ,\\u2588\\u2588\\u2580\\r\\n \\u2588\\u2588 \\\"\\u2588\\u2588, \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2310      \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588     \\u2559\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580     \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580`\\r\\n  \\u2588\\u2588\\u2584 \\u2559\\u2580\\u2588\\u2588\\u2584\\u2584\\u2584\\u2584\\u2584,,,                \\u00ac\\u2500                                    '\\u2500\\u00ac\\r\\n   \\u2559\\u2580\\u2588\\u2588\\u2584 '\\u2559\\u2559\\u2559\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\r\\n      \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588R\\u2310\\r\\n\\r\\n */\\r\\npragma solidity 0.8.16;\\r\\n\\r\\ninterface IPricer {\\r\\n  /**\\r\\n   * @notice Gets the latest price of the asset\\r\\n   *\\r\\n   * @return uint256 The latest price of the asset\\r\\n   */\\r\\n  function getLatestPrice() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the price of the asset at a specific priceId\\r\\n   *\\r\\n   * @param priceId The priceId at which to get the price\\r\\n   *\\r\\n   * @return uint256 The price of the asset with the given priceId\\r\\n   */\\r\\n  function getPrice(uint256 priceId) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Adds a price to the pricer\\r\\n   *\\r\\n   * @param price     The price to add\\r\\n   * @param timestamp The timestamp associated with the price\\r\\n   *\\r\\n   * @dev Updates the oracle price if price is the latest\\r\\n   */\\r\\n  function addPrice(uint256 price, uint256 timestamp) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Updates a price in the pricer\\r\\n   *\\r\\n   * @param priceId The priceId to update\\r\\n   * @param price   The price to set\\r\\n   */\\r\\n  function updatePrice(uint256 priceId, uint256 price) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x1d358a84eda310ba1f368af49e578c41b487147c52400414731ea7659a0686d2\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f65760003560e01c806391d148541161009257806391d14854146101ed578063a217fddf14610200578063b8b6f07514610208578063bc31c1c11461021d578063ca15c87314610259578063d547741f1461026c578063e2d9e3f21461027f578063e757223014610292578063fb562051146102b257600080fd5b806301ffc9a7146100fb578063145de16814610123578063248a9ca31461013a5780632f2ff15d1461015d57806336568abe14610172578063572793531461018557806382367b2d146101985780638e15f473146101ab5780639010d07c146101c2575b600080fd5b61010e610109366004610b38565b6102bb565b60405190151581526020015b60405180910390f35b61012c60045481565b60405190815260200161011a565b61012c610148366004610b62565b60009081526020819052604090206001015490565b61017061016b366004610b7b565b6102e6565b005b610170610180366004610b7b565b610311565b610170610193366004610bb7565b610394565b6101706101a6366004610bb7565b61049b565b60055460009081526002602052604090205461012c565b6101d56101d0366004610bb7565b610584565b6040516001600160a01b03909116815260200161011a565b61010e6101fb366004610b7b565b6105a3565b61012c600081565b61012c600080516020610d6d83398151915281565b61024461022b366004610b62565b6002602052600090815260409020805460019091015482565b6040805192835260208301919091520161011a565b61012c610267366004610b62565b6105cc565b61017061027a366004610b7b565b6105e3565b61012c61028d366004610b62565b610609565b61012c6102a0366004610b62565b60009081526002602052604090205490565b61012c60055481565b60006001600160e01b03198216635a05180f60e01b14806102e057506102e0826106c3565b92915050565b60008281526020819052604090206001015461030281336106f8565b61030c838361075c565b505050565b6001600160a01b03811633146103865760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610390828261077e565b5050565b600080516020610d6d8339815191526103ad81336106f8565b826000036103cd5760405162bfc92160e01b815260040160405180910390fd5b60006004600081546103de90610bef565b91829055506040805180820182528681526020808201878152600085815260029092528382209251835551600192830155600380548084019091557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0184905560055481529190912001549091508311156104595760058190555b604080518581526020810185905282917fe1bc32bb3797b6327bbbe2391d39c062a5b4f0c68970d144a74d7f17d2e38aaa91015b60405180910390a250505050565b600080516020610d6d8339815191526104b481336106f8565b816000036104d45760405162bfc92160e01b815260040160405180910390fd5b60008381526002602052604081205490036105025760405163b75e419960e01b815260040160405180910390fd5b60008381526002602081815260408084208151808301835281548152600182018054828601908152845180860186528a81529051818701908152978b9052958552945190915593519092558251825190815290810185905285917f15819dd2fd9f6418b142e798d08a18d0bf06ea368f4480b7b0d3f75bd966bc48910161048d565b600082815260016020526040812061059c90836107a0565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60008181526001602052604081206102e0906107ac565b6000828152602081905260409020600101546105ff81336106f8565b61030c838361077e565b6003818154811061061957600080fd5b600091825260209091200154905081565b61063482826105a3565b610390576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561066a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061059c836001600160a01b0384166107b6565b60006001600160e01b03198216637965db0b60e01b14806102e057506301ffc9a760e01b6001600160e01b03198316146102e0565b61070282826105a3565b6103905761071a816001600160a01b03166014610805565b610725836020610805565b604051602001610736929190610c2c565b60408051601f198184030181529082905262461bcd60e51b825261037d91600401610c9b565b610766828261062a565b600082815260016020526040902061030c90826106ae565b61078882826109a1565b600082815260016020526040902061030c9082610a06565b600061059c8383610a1b565b60006102e0825490565b60008181526001830160205260408120546107fd575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556102e0565b5060006102e0565b60606000610814836002610cce565b61081f906002610ced565b67ffffffffffffffff81111561083757610837610d00565b6040519080825280601f01601f191660200182016040528015610861576020820181803683370190505b509050600360fc1b8160008151811061087c5761087c610d16565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106108ab576108ab610d16565b60200101906001600160f81b031916908160001a90535060006108cf846002610cce565b6108da906001610ced565b90505b6001811115610952576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061090e5761090e610d16565b1a60f81b82828151811061092457610924610d16565b60200101906001600160f81b031916908160001a90535060049490941c9361094b81610d2c565b90506108dd565b50831561059c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161037d565b6109ab82826105a3565b15610390576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061059c836001600160a01b038416610a45565b6000826000018281548110610a3257610a32610d16565b9060005260206000200154905092915050565b60008181526001830160205260408120548015610b2e576000610a69600183610d43565b8554909150600090610a7d90600190610d43565b9050818114610ae2576000866000018281548110610a9d57610a9d610d16565b9060005260206000200154905080876000018481548110610ac057610ac0610d16565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610af357610af3610d56565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506102e0565b60009150506102e0565b600060208284031215610b4a57600080fd5b81356001600160e01b03198116811461059c57600080fd5b600060208284031215610b7457600080fd5b5035919050565b60008060408385031215610b8e57600080fd5b8235915060208301356001600160a01b0381168114610bac57600080fd5b809150509250929050565b60008060408385031215610bca57600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b600060018201610c0157610c01610bd9565b5060010190565b60005b83811015610c23578181015183820152602001610c0b565b50506000910152565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351610c5e816017850160208801610c08565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610c8f816028840160208801610c08565b01602801949350505050565b6020815260008251806020840152610cba816040850160208701610c08565b601f01601f19169190910160400192915050565b6000816000190483118215151615610ce857610ce8610bd9565b500290565b808201808211156102e0576102e0610bd9565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081610d3b57610d3b610bd9565b506000190190565b818103818111156102e0576102e0610bd9565b634e487b7160e01b600052603160045260246000fdfef7650eb8b2f3fb3c9b995a8ee2fc3c04ed07f1c4efe01998177b109698c67517a2646970667358221220fd2f336173a090c2ffb44aef6221f62c4b3f08c159230f5a6c8517d7ad636dd364736f6c63430008100033",
  "devdoc": {
    "events": {
      "PriceAdded(uint256,uint256,uint256)": {
        "params": {
          "price": "The price that was added",
          "priceId": "The priceId associated with the price",
          "timestamp": "The timestamp associated with the price"
        }
      },
      "PriceUpdated(uint256,uint256,uint256)": {
        "params": {
          "newPrice": "The price that was updated to",
          "oldPrice": "The old price associated with the priceId",
          "priceId": "The priceId associated with the price to update"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addPrice(uint256,uint256)": {
        "params": {
          "price": "The price to add",
          "timestamp": "The timestamp associated with the price"
        }
      },
      "getLatestPrice()": {
        "returns": {
          "_0": "uint256 The latest price of the asset"
        }
      },
      "getPrice(uint256)": {
        "returns": {
          "_0": "uint256 The price of the asset"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updatePrice(uint256,uint256)": {
        "params": {
          "price": "The price to set",
          "priceId": "The priceId to update"
        }
      }
    },
    "stateVariables": {
      "currentPriceId": {
        "details": "This price may not be the latest price since prices can be added out of order in relation to their timestamp"
      },
      "priceIds": {
        "details": "These priceIds are not ordered by timestamp"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "PriceAdded(uint256,uint256,uint256)": {
        "notice": "Emitted when a price is added"
      },
      "PriceUpdated(uint256,uint256,uint256)": {
        "notice": "Emitted when a price is updated"
      }
    },
    "kind": "user",
    "methods": {
      "addPrice(uint256,uint256)": {
        "notice": "Adds a price to the pricer"
      },
      "getLatestPrice()": {
        "notice": "Gets the latest price of the asset"
      },
      "getPrice(uint256)": {
        "notice": "Gets the latest price of the asset"
      },
      "updatePrice(uint256,uint256)": {
        "notice": "Updates a price in the pricer"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7676,
        "contract": "contracts/Pricer.sol:Pricer",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)7671_storage)"
      },
      {
        "astId": 7979,
        "contract": "contracts/Pricer.sol:Pricer",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)10888_storage)"
      },
      {
        "astId": 737,
        "contract": "contracts/Pricer.sol:Pricer",
        "label": "prices",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(PriceInfo)732_storage)"
      },
      {
        "astId": 741,
        "contract": "contracts/Pricer.sol:Pricer",
        "label": "priceIds",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 744,
        "contract": "contracts/Pricer.sol:Pricer",
        "label": "currentPriceId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 746,
        "contract": "contracts/Pricer.sol:Pricer",
        "label": "latestPriceId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)10888_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)10888_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)7671_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)7671_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(PriceInfo)732_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Pricer.PriceInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PriceInfo)732_storage"
      },
      "t_struct(AddressSet)10888_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 10887,
            "contract": "contracts/Pricer.sol:Pricer",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)10587_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PriceInfo)732_storage": {
        "encoding": "inplace",
        "label": "struct Pricer.PriceInfo",
        "members": [
          {
            "astId": 729,
            "contract": "contracts/Pricer.sol:Pricer",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 731,
            "contract": "contracts/Pricer.sol:Pricer",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)7671_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 7668,
            "contract": "contracts/Pricer.sol:Pricer",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 7670,
            "contract": "contracts/Pricer.sol:Pricer",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)10587_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 10582,
            "contract": "contracts/Pricer.sol:Pricer",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 10586,
            "contract": "contracts/Pricer.sol:Pricer",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}