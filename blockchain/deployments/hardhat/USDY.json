{
  "address": "0x4CE811E3F8bF4748b93efC1f67CBc009Fc6A1F4f",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AllowlistZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BlockedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BlocklistZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SanctionedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SanctionsListZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAllowlist",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAllowlist",
          "type": "address"
        }
      ],
      "name": "AllowlistSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldBlocklist",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newBlocklist",
          "type": "address"
        }
      ],
      "name": "BlocklistSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldSanctionsList",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newSanctionsList",
          "type": "address"
        }
      ],
      "name": "SanctionsListSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BURNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIST_CONFIGURER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowlist",
      "outputs": [
        {
          "internalType": "contract IAllowlist",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blocklist",
      "outputs": [
        {
          "internalType": "contract IBlocklist",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "blocklist",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "allowlist",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sanctionsList",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sanctionsList",
      "outputs": [
        {
          "internalType": "contract ISanctionsList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "allowlist",
          "type": "address"
        }
      ],
      "name": "setAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "blocklist",
          "type": "address"
        }
      ],
      "name": "setBlocklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sanctionsList",
          "type": "address"
        }
      ],
      "name": "setSanctionsList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "solcInputHash": "4d2b529edcb69496600708199f41e432",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AllowlistZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlockedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlocklistZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SanctionedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SanctionsListZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAllowlist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAllowlist\",\"type\":\"address\"}],\"name\":\"AllowlistSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldBlocklist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBlocklist\",\"type\":\"address\"}],\"name\":\"BlocklistSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldSanctionsList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSanctionsList\",\"type\":\"address\"}],\"name\":\"SanctionsListSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIST_CONFIGURER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowlist\",\"outputs\":[{\"internalType\":\"contract IAllowlist\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocklist\",\"outputs\":[{\"internalType\":\"contract IBlocklist\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"blocklist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowlist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sanctionsList\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sanctionsList\",\"outputs\":[{\"internalType\":\"contract ISanctionsList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowlist\",\"type\":\"address\"}],\"name\":\"setAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"blocklist\",\"type\":\"address\"}],\"name\":\"setBlocklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sanctionsList\",\"type\":\"address\"}],\"name\":\"setSanctionsList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(address,uint256)\":{\"details\":\"This function can be considered an admin-burn and is only callable      by an address with the `BURNER_ROLE`\",\"params\":{\"amount\":\"The amount of token to be burned\",\"from\":\"The account whose tokens will be burned\"}},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"mint(address,uint256)\":{\"details\":\"Creates `amount` new tokens for `to`. See {ERC20-_mint}. Requirements: - the caller must have the `MINTER_ROLE`.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"pause()\":{\"details\":\"Pauses all token transfers. See {ERC20Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setAllowlist(address)\":{\"params\":{\"allowlist\":\"New allowlist address\"}},\"setBlocklist(address)\":{\"params\":{\"blocklist\":\"New blocklist address\"}},\"setSanctionsList(address)\":{\"params\":{\"sanctionsList\":\"New sanctions list address\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"unpause()\":{\"details\":\"Unpauses all token transfers. See {ERC20Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"AllowlistZeroAddress()\":[{\"notice\":\"Error for when caller attempts to set the allowlist reference         to the zero address.\"}],\"BlockedAccount()\":[{\"notice\":\"Error for when caller attempts to perform action on a blocked         account\"}],\"BlocklistZeroAddress()\":[{\"notice\":\"Error for when caller attempts to set the blocklist reference         to the zero address\"}],\"SanctionedAccount()\":[{\"notice\":\"Error for when caller attempts to perform an action on a         sanctioned account\"}],\"SanctionsListZeroAddress()\":[{\"notice\":\"Error for when caller attempts to set the `sanctionsList`         reference to the zero address\"}]},\"kind\":\"user\",\"methods\":{\"allowlist()\":{\"notice\":\"Returns reference to the allowlist that this client queries\"},\"blocklist()\":{\"notice\":\"Returns reference to the blocklist that this client queries\"},\"burn(address,uint256)\":{\"notice\":\"Burns a specific amount of tokens\"},\"sanctionsList()\":{\"notice\":\"Returns reference to the sanctions list that this client queries\"},\"setAllowlist(address)\":{\"notice\":\"Sets the allowlist address\"},\"setBlocklist(address)\":{\"notice\":\"Sets the blocklist address\"},\"setSanctionsList(address)\":{\"notice\":\"Sets the sanctions list address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/usdy/USDY.sol\":\"USDY\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/external/chainalysis/ISanctionsList.sol\":{\"content\":\"/// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.16;\\r\\n\\r\\ninterface ISanctionsList {\\r\\n  function isSanctioned(address addr) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xfc00cd650ea0cb011c2498270e0452f3dc49d62c077f45d23265c6712c9331b2\",\"license\":\"UNLICENSED\"},\"contracts/external/openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\r\\n */\\r\\nabstract contract AccessControlEnumerableUpgradeable is\\r\\n  Initializable,\\r\\n  IAccessControlEnumerableUpgradeable,\\r\\n  AccessControlUpgradeable\\r\\n{\\r\\n  function __AccessControlEnumerable_init() internal onlyInitializing {}\\r\\n\\r\\n  function __AccessControlEnumerable_init_unchained()\\r\\n    internal\\r\\n    onlyInitializing\\r\\n  {}\\r\\n\\r\\n  using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\r\\n\\r\\n  mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC165-supportsInterface}.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    return\\r\\n      interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId ||\\r\\n      super.supportsInterface(interfaceId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\r\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\r\\n   *\\r\\n   * Role bearers are not sorted in any particular way, and their ordering may\\r\\n   * change at any point.\\r\\n   *\\r\\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\r\\n   * you perform all queries on the same block. See the following\\r\\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\r\\n   * for more information.\\r\\n   */\\r\\n  function getRoleMember(bytes32 role, uint256 index)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (address)\\r\\n  {\\r\\n    return _roleMembers[role].at(index);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of accounts that have `role`. Can be used\\r\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\r\\n   */\\r\\n  function getRoleMemberCount(bytes32 role)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return _roleMembers[role].length();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Overload {_grantRole} to track enumerable memberships\\r\\n   */\\r\\n  function _grantRole(bytes32 role, address account) internal virtual override {\\r\\n    super._grantRole(role, account);\\r\\n    _roleMembers[role].add(account);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Overload {_revokeRole} to track enumerable memberships\\r\\n   */\\r\\n  function _revokeRole(bytes32 role, address account)\\r\\n    internal\\r\\n    virtual\\r\\n    override\\r\\n  {\\r\\n    super._revokeRole(role, account);\\r\\n    _roleMembers[role].remove(account);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n   * variables without shifting down storage in the inheritance chain.\\r\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n   */\\r\\n  uint256[49] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xd625ebf3a218b4e01725459c5262d3ae44846d3036ac8e4affe872b7c8ac1cec\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/utils/ERC165Upgradeable.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module that allows children to implement role-based access\\r\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\r\\n * members except through off-chain means by accessing the contract event logs. Some\\r\\n * applications may benefit from on-chain enumerability, for those cases see\\r\\n * {AccessControlEnumerable}.\\r\\n *\\r\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\r\\n * in the external API and be unique. The best way to achieve this is by\\r\\n * using `public constant` hash digests:\\r\\n *\\r\\n * ```\\r\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\r\\n * ```\\r\\n *\\r\\n * Roles can be used to represent a set of permissions. To restrict access to a\\r\\n * function call, use {hasRole}:\\r\\n *\\r\\n * ```\\r\\n * function foo() public {\\r\\n *     require(hasRole(MY_ROLE, msg.sender));\\r\\n *     ...\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\r\\n * {revokeRole} functions. Each role has an associated admin role, and only\\r\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\r\\n *\\r\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\r\\n * that only accounts with this role will be able to grant or revoke other\\r\\n * roles. More complex role relationships can be created by using\\r\\n * {_setRoleAdmin}.\\r\\n *\\r\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\r\\n * grant and revoke this role. Extra precautions should be taken to secure\\r\\n * accounts that have been granted it.\\r\\n */\\r\\nabstract contract AccessControlUpgradeable is\\r\\n  Initializable,\\r\\n  ContextUpgradeable,\\r\\n  IAccessControlUpgradeable,\\r\\n  ERC165Upgradeable\\r\\n{\\r\\n  function __AccessControl_init() internal onlyInitializing {}\\r\\n\\r\\n  function __AccessControl_init_unchained() internal onlyInitializing {}\\r\\n\\r\\n  struct RoleData {\\r\\n    mapping(address => bool) members;\\r\\n    bytes32 adminRole;\\r\\n  }\\r\\n\\r\\n  mapping(bytes32 => RoleData) private _roles;\\r\\n\\r\\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier that checks that an account has a specific role. Reverts\\r\\n   * with a standardized message including the required role.\\r\\n   *\\r\\n   * The format of the revert reason is given by the following regular expression:\\r\\n   *\\r\\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\r\\n   *\\r\\n   * _Available since v4.1._\\r\\n   */\\r\\n  modifier onlyRole(bytes32 role) {\\r\\n    _checkRole(role);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC165-supportsInterface}.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    return\\r\\n      interfaceId == type(IAccessControlUpgradeable).interfaceId ||\\r\\n      super.supportsInterface(interfaceId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns `true` if `account` has been granted `role`.\\r\\n   */\\r\\n  function hasRole(bytes32 role, address account)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    return _roles[role].members[account];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\r\\n   * Overriding this function changes the behavior of the {onlyRole} modifier.\\r\\n   *\\r\\n   * Format of the revert message is described in {_checkRole}.\\r\\n   *\\r\\n   * _Available since v4.6._\\r\\n   */\\r\\n  function _checkRole(bytes32 role) internal view virtual {\\r\\n    _checkRole(role, _msgSender());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Revert with a standard message if `account` is missing `role`.\\r\\n   *\\r\\n   * The format of the revert reason is given by the following regular expression:\\r\\n   *\\r\\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\r\\n   */\\r\\n  function _checkRole(bytes32 role, address account) internal view virtual {\\r\\n    if (!hasRole(role, account)) {\\r\\n      revert(\\r\\n        string(\\r\\n          abi.encodePacked(\\r\\n            \\\"AccessControl: account \\\",\\r\\n            StringsUpgradeable.toHexString(uint160(account), 20),\\r\\n            \\\" is missing role \\\",\\r\\n            StringsUpgradeable.toHexString(uint256(role), 32)\\r\\n          )\\r\\n        )\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\r\\n   * {revokeRole}.\\r\\n   *\\r\\n   * To change a role's admin, use {_setRoleAdmin}.\\r\\n   */\\r\\n  function getRoleAdmin(bytes32 role)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (bytes32)\\r\\n  {\\r\\n    return _roles[role].adminRole;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Grants `role` to `account`.\\r\\n   *\\r\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n   * event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must have ``role``'s admin role.\\r\\n   *\\r\\n   * May emit a {RoleGranted} event.\\r\\n   */\\r\\n  function grantRole(bytes32 role, address account)\\r\\n    public\\r\\n    virtual\\r\\n    override\\r\\n    onlyRole(getRoleAdmin(role))\\r\\n  {\\r\\n    _grantRole(role, account);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Revokes `role` from `account`.\\r\\n   *\\r\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must have ``role``'s admin role.\\r\\n   *\\r\\n   * May emit a {RoleRevoked} event.\\r\\n   */\\r\\n  function revokeRole(bytes32 role, address account)\\r\\n    public\\r\\n    virtual\\r\\n    override\\r\\n    onlyRole(getRoleAdmin(role))\\r\\n  {\\r\\n    _revokeRole(role, account);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Revokes `role` from the calling account.\\r\\n   *\\r\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\r\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\r\\n   * if they are compromised (such as when a trusted device is misplaced).\\r\\n   *\\r\\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\\r\\n   * event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must be `account`.\\r\\n   *\\r\\n   * May emit a {RoleRevoked} event.\\r\\n   */\\r\\n  function renounceRole(bytes32 role, address account) public virtual override {\\r\\n    require(\\r\\n      account == _msgSender(),\\r\\n      \\\"AccessControl: can only renounce roles for self\\\"\\r\\n    );\\r\\n\\r\\n    _revokeRole(role, account);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Grants `role` to `account`.\\r\\n   *\\r\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n   * event. Note that unlike {grantRole}, this function doesn't perform any\\r\\n   * checks on the calling account.\\r\\n   *\\r\\n   * May emit a {RoleGranted} event.\\r\\n   *\\r\\n   * [WARNING]\\r\\n   * ====\\r\\n   * This function should only be called from the constructor when setting\\r\\n   * up the initial roles for the system.\\r\\n   *\\r\\n   * Using this function in any other way is effectively circumventing the admin\\r\\n   * system imposed by {AccessControl}.\\r\\n   * ====\\r\\n   *\\r\\n   * NOTE: This function is deprecated in favor of {_grantRole}.\\r\\n   */\\r\\n  function _setupRole(bytes32 role, address account) internal virtual {\\r\\n    _grantRole(role, account);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `adminRole` as ``role``'s admin role.\\r\\n   *\\r\\n   * Emits a {RoleAdminChanged} event.\\r\\n   */\\r\\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\r\\n    bytes32 previousAdminRole = getRoleAdmin(role);\\r\\n    _roles[role].adminRole = adminRole;\\r\\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Grants `role` to `account`.\\r\\n   *\\r\\n   * Internal function without access restriction.\\r\\n   *\\r\\n   * May emit a {RoleGranted} event.\\r\\n   */\\r\\n  function _grantRole(bytes32 role, address account) internal virtual {\\r\\n    if (!hasRole(role, account)) {\\r\\n      _roles[role].members[account] = true;\\r\\n      emit RoleGranted(role, account, _msgSender());\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Revokes `role` from `account`.\\r\\n   *\\r\\n   * Internal function without access restriction.\\r\\n   *\\r\\n   * May emit a {RoleRevoked} event.\\r\\n   */\\r\\n  function _revokeRole(bytes32 role, address account) internal virtual {\\r\\n    if (hasRole(role, account)) {\\r\\n      _roles[role].members[account] = false;\\r\\n      emit RoleRevoked(role, account, _msgSender());\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n   * variables without shifting down storage in the inheritance chain.\\r\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n   */\\r\\n  uint256[49] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xabf9562c0c5aa2f93166bfd402b0acdbe87e73de6a69e524a54008075321b47a\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\r\\n */\\r\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\r\\n  /**\\r\\n   * @dev Returns one of the accounts that have `role`. `index` must be a\\r\\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\\r\\n   *\\r\\n   * Role bearers are not sorted in any particular way, and their ordering may\\r\\n   * change at any point.\\r\\n   *\\r\\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\r\\n   * you perform all queries on the same block. See the following\\r\\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\r\\n   * for more information.\\r\\n   */\\r\\n  function getRoleMember(bytes32 role, uint256 index)\\r\\n    external\\r\\n    view\\r\\n    returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of accounts that have `role`. Can be used\\r\\n   * together with {getRoleMember} to enumerate all bearers of a role.\\r\\n   */\\r\\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xa513925e29bbdaa0cb3e7cc302021e26548707e50433d181fb259207ed72143e\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\r\\n */\\r\\ninterface IAccessControlUpgradeable {\\r\\n  /**\\r\\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\r\\n   *\\r\\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\r\\n   * {RoleAdminChanged} not being emitted signaling this.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  event RoleAdminChanged(\\r\\n    bytes32 indexed role,\\r\\n    bytes32 indexed previousAdminRole,\\r\\n    bytes32 indexed newAdminRole\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `account` is granted `role`.\\r\\n   *\\r\\n   * `sender` is the account that originated the contract call, an admin role\\r\\n   * bearer except when using {AccessControl-_setupRole}.\\r\\n   */\\r\\n  event RoleGranted(\\r\\n    bytes32 indexed role,\\r\\n    address indexed account,\\r\\n    address indexed sender\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `account` is revoked `role`.\\r\\n   *\\r\\n   * `sender` is the account that originated the contract call:\\r\\n   *   - if using `revokeRole`, it is the admin role bearer\\r\\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\r\\n   */\\r\\n  event RoleRevoked(\\r\\n    bytes32 indexed role,\\r\\n    address indexed account,\\r\\n    address indexed sender\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Returns `true` if `account` has been granted `role`.\\r\\n   */\\r\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\r\\n   * {revokeRole}.\\r\\n   *\\r\\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\r\\n   */\\r\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\r\\n\\r\\n  /**\\r\\n   * @dev Grants `role` to `account`.\\r\\n   *\\r\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n   * event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must have ``role``'s admin role.\\r\\n   */\\r\\n  function grantRole(bytes32 role, address account) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Revokes `role` from `account`.\\r\\n   *\\r\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must have ``role``'s admin role.\\r\\n   */\\r\\n  function revokeRole(bytes32 role, address account) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Revokes `role` from the calling account.\\r\\n   *\\r\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\r\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\r\\n   * if they are compromised (such as when a trusted device is misplaced).\\r\\n   *\\r\\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\\r\\n   * event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must be `account`.\\r\\n   */\\r\\n  function renounceRole(bytes32 role, address account) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x921a231056e87f48faa2d4773df1df724debbc51a5cd41edcca6fa2be22f265c\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\r\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\r\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\r\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\r\\n *\\r\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\r\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\r\\n * case an upgrade adds a module that needs to be initialized.\\r\\n *\\r\\n * For example:\\r\\n *\\r\\n * [.hljs-theme-light.nopadding]\\r\\n * ```\\r\\n * contract MyToken is ERC20Upgradeable {\\r\\n *     function initialize() initializer public {\\r\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\r\\n *     }\\r\\n * }\\r\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\r\\n *     function initializeV2() reinitializer(2) public {\\r\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\r\\n *     }\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\r\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\r\\n *\\r\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\r\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\r\\n *\\r\\n * [CAUTION]\\r\\n * ====\\r\\n * Avoid leaving a contract uninitialized.\\r\\n *\\r\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\r\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\r\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\r\\n *\\r\\n * [.hljs-theme-light.nopadding]\\r\\n * ```\\r\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n * constructor() {\\r\\n *     _disableInitializers();\\r\\n * }\\r\\n * ```\\r\\n * ====\\r\\n */\\r\\nabstract contract Initializable {\\r\\n  /**\\r\\n   * @dev Indicates that the contract has been initialized.\\r\\n   * @custom:oz-retyped-from bool\\r\\n   */\\r\\n  uint8 private _initialized;\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates that the contract is in the process of being initialized.\\r\\n   */\\r\\n  bool private _initializing;\\r\\n\\r\\n  /**\\r\\n   * @dev Triggered when the contract has been initialized or reinitialized.\\r\\n   */\\r\\n  event Initialized(uint8 version);\\r\\n\\r\\n  /**\\r\\n   * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\r\\n   * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\r\\n   */\\r\\n  modifier initializer() {\\r\\n    bool isTopLevelCall = !_initializing;\\r\\n    require(\\r\\n      (isTopLevelCall && _initialized < 1) ||\\r\\n        (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\r\\n      \\\"Initializable: contract is already initialized\\\"\\r\\n    );\\r\\n    _initialized = 1;\\r\\n    if (isTopLevelCall) {\\r\\n      _initializing = true;\\r\\n    }\\r\\n    _;\\r\\n    if (isTopLevelCall) {\\r\\n      _initializing = false;\\r\\n      emit Initialized(1);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\r\\n   * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\r\\n   * used to initialize parent contracts.\\r\\n   *\\r\\n   * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\r\\n   * initialization step. This is essential to configure modules that are added through upgrades and that require\\r\\n   * initialization.\\r\\n   *\\r\\n   * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\r\\n   * a contract, executing them in the right order is up to the developer or operator.\\r\\n   */\\r\\n  modifier reinitializer(uint8 version) {\\r\\n    require(\\r\\n      !_initializing && _initialized < version,\\r\\n      \\\"Initializable: contract is already initialized\\\"\\r\\n    );\\r\\n    _initialized = version;\\r\\n    _initializing = true;\\r\\n    _;\\r\\n    _initializing = false;\\r\\n    emit Initialized(version);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\r\\n   * {initializer} and {reinitializer} modifiers, directly or indirectly.\\r\\n   */\\r\\n  modifier onlyInitializing() {\\r\\n    require(_initializing, \\\"Initializable: contract is not initializing\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\r\\n   * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\r\\n   * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\r\\n   * through proxies.\\r\\n   */\\r\\n  function _disableInitializers() internal virtual {\\r\\n    require(!_initializing, \\\"Initializable: contract is initializing\\\");\\r\\n    if (_initialized < type(uint8).max) {\\r\\n      _initialized = type(uint8).max;\\r\\n      emit Initialized(type(uint8).max);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x18ec10f3f736c27bd243eaefb1f6ee15ec48afc0e1d3b1620fb26267e9c253cd\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n */\\r\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\r\\n  /**\\r\\n   * @dev Emitted when the pause is triggered by `account`.\\r\\n   */\\r\\n  event Paused(address account);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the pause is lifted by `account`.\\r\\n   */\\r\\n  event Unpaused(address account);\\r\\n\\r\\n  bool private _paused;\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes the contract in unpaused state.\\r\\n   */\\r\\n  function __Pausable_init() internal onlyInitializing {\\r\\n    __Pausable_init_unchained();\\r\\n  }\\r\\n\\r\\n  function __Pausable_init_unchained() internal onlyInitializing {\\r\\n    _paused = false;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The contract must not be paused.\\r\\n   */\\r\\n  modifier whenNotPaused() {\\r\\n    _requireNotPaused();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier to make a function callable only when the contract is paused.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The contract must be paused.\\r\\n   */\\r\\n  modifier whenPaused() {\\r\\n    _requirePaused();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns true if the contract is paused, and false otherwise.\\r\\n   */\\r\\n  function paused() public view virtual returns (bool) {\\r\\n    return _paused;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Throws if the contract is paused.\\r\\n   */\\r\\n  function _requireNotPaused() internal view virtual {\\r\\n    require(!paused(), \\\"Pausable: paused\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Throws if the contract is not paused.\\r\\n   */\\r\\n  function _requirePaused() internal view virtual {\\r\\n    require(paused(), \\\"Pausable: not paused\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Triggers stopped state.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The contract must not be paused.\\r\\n   */\\r\\n  function _pause() internal virtual whenNotPaused {\\r\\n    _paused = true;\\r\\n    emit Paused(_msgSender());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns to normal state.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The contract must be paused.\\r\\n   */\\r\\n  function _unpause() internal virtual whenPaused {\\r\\n    _paused = false;\\r\\n    emit Unpaused(_msgSender());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n   * variables without shifting down storage in the inheritance chain.\\r\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n   */\\r\\n  uint256[49] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x0e5824976b037dadac70650c3c4067512064bfd789644d58cffce9b66a1a5c84\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts-upgradeable/token/ERC20/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\r\\n * tokens and those that they have an allowance for, in a way that can be\\r\\n * recognized off-chain (via event analysis).\\r\\n */\\r\\nabstract contract ERC20BurnableUpgradeable is\\r\\n  Initializable,\\r\\n  ContextUpgradeable,\\r\\n  ERC20Upgradeable\\r\\n{\\r\\n  function __ERC20Burnable_init() internal onlyInitializing {}\\r\\n\\r\\n  function __ERC20Burnable_init_unchained() internal onlyInitializing {}\\r\\n\\r\\n  /**\\r\\n   * @dev Destroys `amount` tokens from the caller.\\r\\n   *\\r\\n   * See {ERC20-_burn}.\\r\\n   */\\r\\n  function burn(uint256 amount) public virtual {\\r\\n    _burn(_msgSender(), amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\r\\n   * allowance.\\r\\n   *\\r\\n   * See {ERC20-_burn} and {ERC20-allowance}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must have allowance for ``accounts``'s tokens of at least\\r\\n   * `amount`.\\r\\n   */\\r\\n  function burnFrom(address account, uint256 amount) public virtual {\\r\\n    _spendAllowance(account, _msgSender(), amount);\\r\\n    _burn(account, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n   * variables without shifting down storage in the inheritance chain.\\r\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n   */\\r\\n  uint256[50] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x8d2656ebba941f69a5da2befc0a80109cdeca62f6d47bf4619e1f26e4934db16\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts-upgradeable/token/ERC20/ERC20PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\r\\n *\\r\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\r\\n * period, or having an emergency switch for freezing all token transfers in the\\r\\n * event of a large bug.\\r\\n */\\r\\nabstract contract ERC20PausableUpgradeable is\\r\\n  Initializable,\\r\\n  ERC20Upgradeable,\\r\\n  PausableUpgradeable\\r\\n{\\r\\n  function __ERC20Pausable_init() internal onlyInitializing {\\r\\n    __Pausable_init_unchained();\\r\\n  }\\r\\n\\r\\n  function __ERC20Pausable_init_unchained() internal onlyInitializing {}\\r\\n\\r\\n  /**\\r\\n   * @dev See {ERC20-_beforeTokenTransfer}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the contract must not be paused.\\r\\n   */\\r\\n  function _beforeTokenTransfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) internal virtual override {\\r\\n    super._beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n    require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n   * variables without shifting down storage in the inheritance chain.\\r\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n   */\\r\\n  uint256[50] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x227e8d4a75da4174453fde2de0489a32208f71c9996d5a6dedf525d27555d731\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts-upgradeable/token/ERC20/ERC20PresetMinterPauserUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/presets/ERC20PresetMinterPauser.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/token/ERC20/ERC20BurnableUpgradeable.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/token/ERC20/ERC20PausableUpgradeable.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev {ERC20} token, including:\\r\\n *\\r\\n *  - ability for holders to burn (destroy) their tokens\\r\\n *  - a minter role that allows for token minting (creation)\\r\\n *  - a pauser role that allows to stop all token transfers\\r\\n *\\r\\n * This contract uses {AccessControl} to lock permissioned functions using the\\r\\n * different roles - head to its documentation for details.\\r\\n *\\r\\n * The account that deploys the contract will be granted the minter and pauser\\r\\n * roles, as well as the default admin role, which will let it grant both minter\\r\\n * and pauser roles to other accounts.\\r\\n *\\r\\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\\r\\n */\\r\\ncontract ERC20PresetMinterPauserUpgradeable is\\r\\n  Initializable,\\r\\n  ContextUpgradeable,\\r\\n  AccessControlEnumerableUpgradeable,\\r\\n  ERC20BurnableUpgradeable,\\r\\n  ERC20PausableUpgradeable\\r\\n{\\r\\n  function initialize(string memory name, string memory symbol)\\r\\n    public\\r\\n    virtual\\r\\n    initializer\\r\\n  {\\r\\n    __ERC20PresetMinterPauser_init(name, symbol);\\r\\n  }\\r\\n\\r\\n  bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\r\\n  bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\r\\n\\r\\n  /**\\r\\n   * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\r\\n   * account that deploys the contract.\\r\\n   *\\r\\n   * See {ERC20-constructor}.\\r\\n   */\\r\\n  function __ERC20PresetMinterPauser_init(\\r\\n    string memory name,\\r\\n    string memory symbol\\r\\n  ) internal onlyInitializing {\\r\\n    __ERC20_init_unchained(name, symbol);\\r\\n    __Pausable_init_unchained();\\r\\n    __ERC20PresetMinterPauser_init_unchained(name, symbol);\\r\\n  }\\r\\n\\r\\n  function __ERC20PresetMinterPauser_init_unchained(\\r\\n    string memory,\\r\\n    string memory\\r\\n  ) internal onlyInitializing {\\r\\n    _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n\\r\\n    _setupRole(MINTER_ROLE, _msgSender());\\r\\n    _setupRole(PAUSER_ROLE, _msgSender());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Creates `amount` new tokens for `to`.\\r\\n   *\\r\\n   * See {ERC20-_mint}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must have the `MINTER_ROLE`.\\r\\n   */\\r\\n  function mint(address to, uint256 amount) public virtual {\\r\\n    require(\\r\\n      hasRole(MINTER_ROLE, _msgSender()),\\r\\n      \\\"ERC20PresetMinterPauser: must have minter role to mint\\\"\\r\\n    );\\r\\n    _mint(to, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Pauses all token transfers.\\r\\n   *\\r\\n   * See {ERC20Pausable} and {Pausable-_pause}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must have the `PAUSER_ROLE`.\\r\\n   */\\r\\n  function pause() public virtual {\\r\\n    require(\\r\\n      hasRole(PAUSER_ROLE, _msgSender()),\\r\\n      \\\"ERC20PresetMinterPauser: must have pauser role to pause\\\"\\r\\n    );\\r\\n    _pause();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Unpauses all token transfers.\\r\\n   *\\r\\n   * See {ERC20Pausable} and {Pausable-_unpause}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the caller must have the `PAUSER_ROLE`.\\r\\n   */\\r\\n  function unpause() public virtual {\\r\\n    require(\\r\\n      hasRole(PAUSER_ROLE, _msgSender()),\\r\\n      \\\"ERC20PresetMinterPauser: must have pauser role to unpause\\\"\\r\\n    );\\r\\n    _unpause();\\r\\n  }\\r\\n\\r\\n  function _beforeTokenTransfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) internal virtual override(ERC20Upgradeable, ERC20PausableUpgradeable) {\\r\\n    super._beforeTokenTransfer(from, to, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n   * variables without shifting down storage in the inheritance chain.\\r\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n   */\\r\\n  uint256[50] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x84334d1686953ab542b6c58cb8bb25a8ea7fcf6c74ef9fcc55428132f16bf14d\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/token/ERC20/IERC20MetadataUpgradeable.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\r\\n * instead returning `false` on failure. This behavior is nonetheless\\r\\n * conventional and does not conflict with the expectations of ERC20\\r\\n * applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20Upgradeable is\\r\\n  Initializable,\\r\\n  ContextUpgradeable,\\r\\n  IERC20Upgradeable,\\r\\n  IERC20MetadataUpgradeable\\r\\n{\\r\\n  mapping(address => uint256) private _balances;\\r\\n\\r\\n  mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n  uint256 private _totalSupply;\\r\\n\\r\\n  string private _name;\\r\\n  string private _symbol;\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the values for {name} and {symbol}.\\r\\n   *\\r\\n   * The default value of {decimals} is 18. To select a different value for\\r\\n   * {decimals} you should overload it.\\r\\n   *\\r\\n   * All two of these values are immutable: they can only be set once during\\r\\n   * construction.\\r\\n   */\\r\\n  function __ERC20_init(string memory name_, string memory symbol_)\\r\\n    internal\\r\\n    onlyInitializing\\r\\n  {\\r\\n    __ERC20_init_unchained(name_, symbol_);\\r\\n  }\\r\\n\\r\\n  function __ERC20_init_unchained(string memory name_, string memory symbol_)\\r\\n    internal\\r\\n    onlyInitializing\\r\\n  {\\r\\n    _name = name_;\\r\\n    _symbol = symbol_;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the name of the token.\\r\\n   */\\r\\n  function name() public view virtual override returns (string memory) {\\r\\n    return _name;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n   * name.\\r\\n   */\\r\\n  function symbol() public view virtual override returns (string memory) {\\r\\n    return _symbol;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of decimals used to get its user representation.\\r\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n   * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n   *\\r\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n   * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n   * overridden;\\r\\n   *\\r\\n   * NOTE: This information is only used for _display_ purposes: it in\\r\\n   * no way affects any of the arithmetic of the contract, including\\r\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n   */\\r\\n  function decimals() public view virtual override returns (uint8) {\\r\\n    return 18;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC20-totalSupply}.\\r\\n   */\\r\\n  function totalSupply() public view virtual override returns (uint256) {\\r\\n    return _totalSupply;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC20-balanceOf}.\\r\\n   */\\r\\n  function balanceOf(address account)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return _balances[account];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC20-transfer}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - the caller must have a balance of at least `amount`.\\r\\n   */\\r\\n  function transfer(address to, uint256 amount)\\r\\n    public\\r\\n    virtual\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    address owner = _msgSender();\\r\\n    _transfer(owner, to, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC20-allowance}.\\r\\n   */\\r\\n  function allowance(address owner, address spender)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return _allowances[owner][spender];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC20-approve}.\\r\\n   *\\r\\n   * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\r\\n   * `transferFrom`. This is semantically equivalent to an infinite approval.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `spender` cannot be the zero address.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount)\\r\\n    public\\r\\n    virtual\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    address owner = _msgSender();\\r\\n    _approve(owner, spender, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC20-transferFrom}.\\r\\n   *\\r\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n   * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n   *\\r\\n   * NOTE: Does not update the allowance if the current allowance\\r\\n   * is the maximum `uint256`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `from` and `to` cannot be the zero address.\\r\\n   * - `from` must have a balance of at least `amount`.\\r\\n   * - the caller must have allowance for ``from``'s tokens of at least\\r\\n   * `amount`.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) public virtual override returns (bool) {\\r\\n    address spender = _msgSender();\\r\\n    _spendAllowance(from, spender, amount);\\r\\n    _transfer(from, to, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n   *\\r\\n   * This is an alternative to {approve} that can be used as a mitigation for\\r\\n   * problems described in {IERC20-approve}.\\r\\n   *\\r\\n   * Emits an {Approval} event indicating the updated allowance.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `spender` cannot be the zero address.\\r\\n   */\\r\\n  function increaseAllowance(address spender, uint256 addedValue)\\r\\n    public\\r\\n    virtual\\r\\n    returns (bool)\\r\\n  {\\r\\n    address owner = _msgSender();\\r\\n    _approve(owner, spender, allowance(owner, spender) + addedValue);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n   *\\r\\n   * This is an alternative to {approve} that can be used as a mitigation for\\r\\n   * problems described in {IERC20-approve}.\\r\\n   *\\r\\n   * Emits an {Approval} event indicating the updated allowance.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `spender` cannot be the zero address.\\r\\n   * - `spender` must have allowance for the caller of at least\\r\\n   * `subtractedValue`.\\r\\n   */\\r\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n    public\\r\\n    virtual\\r\\n    returns (bool)\\r\\n  {\\r\\n    address owner = _msgSender();\\r\\n    uint256 currentAllowance = allowance(owner, spender);\\r\\n    require(\\r\\n      currentAllowance >= subtractedValue,\\r\\n      \\\"ERC20: decreased allowance below zero\\\"\\r\\n    );\\r\\n    unchecked {\\r\\n      _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` of tokens from `from` to `to`.\\r\\n   *\\r\\n   * This internal function is equivalent to {transfer}, and can be used to\\r\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `from` cannot be the zero address.\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `from` must have a balance of at least `amount`.\\r\\n   */\\r\\n  function _transfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) internal virtual {\\r\\n    require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n    require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n    _beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n    uint256 fromBalance = _balances[from];\\r\\n    require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n    unchecked {\\r\\n      _balances[from] = fromBalance - amount;\\r\\n    }\\r\\n    _balances[to] += amount;\\r\\n\\r\\n    emit Transfer(from, to, amount);\\r\\n\\r\\n    _afterTokenTransfer(from, to, amount);\\r\\n  }\\r\\n\\r\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n   * the total supply.\\r\\n   *\\r\\n   * Emits a {Transfer} event with `from` set to the zero address.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `account` cannot be the zero address.\\r\\n   */\\r\\n  function _mint(address account, uint256 amount) internal virtual {\\r\\n    require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n    _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n    _totalSupply += amount;\\r\\n    _balances[account] += amount;\\r\\n    emit Transfer(address(0), account, amount);\\r\\n\\r\\n    _afterTokenTransfer(address(0), account, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n   * total supply.\\r\\n   *\\r\\n   * Emits a {Transfer} event with `to` set to the zero address.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `account` cannot be the zero address.\\r\\n   * - `account` must have at least `amount` tokens.\\r\\n   */\\r\\n  function _burn(address account, uint256 amount) internal virtual {\\r\\n    require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n    _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n    uint256 accountBalance = _balances[account];\\r\\n    require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n    unchecked {\\r\\n      _balances[account] = accountBalance - amount;\\r\\n    }\\r\\n    _totalSupply -= amount;\\r\\n\\r\\n    emit Transfer(account, address(0), amount);\\r\\n\\r\\n    _afterTokenTransfer(account, address(0), amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n   *\\r\\n   * This internal function is equivalent to `approve`, and can be used to\\r\\n   * e.g. set automatic allowances for certain subsystems, etc.\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `owner` cannot be the zero address.\\r\\n   * - `spender` cannot be the zero address.\\r\\n   */\\r\\n  function _approve(\\r\\n    address owner,\\r\\n    address spender,\\r\\n    uint256 amount\\r\\n  ) internal virtual {\\r\\n    require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n    require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n    _allowances[owner][spender] = amount;\\r\\n    emit Approval(owner, spender, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\r\\n   *\\r\\n   * Does not update the allowance amount in case of infinite allowance.\\r\\n   * Revert if not enough allowance is available.\\r\\n   *\\r\\n   * Might emit an {Approval} event.\\r\\n   */\\r\\n  function _spendAllowance(\\r\\n    address owner,\\r\\n    address spender,\\r\\n    uint256 amount\\r\\n  ) internal virtual {\\r\\n    uint256 currentAllowance = allowance(owner, spender);\\r\\n    if (currentAllowance != type(uint256).max) {\\r\\n      require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\r\\n      unchecked {\\r\\n        _approve(owner, spender, currentAllowance - amount);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Hook that is called before any transfer of tokens. This includes\\r\\n   * minting and burning.\\r\\n   *\\r\\n   * Calling conditions:\\r\\n   *\\r\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n   * will be transferred to `to`.\\r\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n   * - `from` and `to` are never both zero.\\r\\n   *\\r\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n   */\\r\\n  function _beforeTokenTransfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) internal virtual {}\\r\\n\\r\\n  /**\\r\\n   * @dev Hook that is called after any transfer of tokens. This includes\\r\\n   * minting and burning.\\r\\n   *\\r\\n   * Calling conditions:\\r\\n   *\\r\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n   * has been transferred to `to`.\\r\\n   * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n   * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\r\\n   * - `from` and `to` are never both zero.\\r\\n   *\\r\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n   */\\r\\n  function _afterTokenTransfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) internal virtual {}\\r\\n\\r\\n  /**\\r\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n   * variables without shifting down storage in the inheritance chain.\\r\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n   */\\r\\n  uint256[45] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x9300bee05618edeec5578cde8ddfff989ba0c64069ffb5af0598058fa3faf00e\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts-upgradeable/token/ERC20/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\r\\n  /**\\r\\n   * @dev Returns the name of the token.\\r\\n   */\\r\\n  function name() external view returns (string memory);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the symbol of the token.\\r\\n   */\\r\\n  function symbol() external view returns (string memory);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the decimals places of the token.\\r\\n   */\\r\\n  function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0x12d425c2d38325943c6bf1c29c3e62427045cef4a0962e5732a81c5194d434c8\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20Upgradeable {\\r\\n  /**\\r\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n   * another (`to`).\\r\\n   *\\r\\n   * Note that `value` may be zero.\\r\\n   */\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n   * a call to {approve}. `value` is the new allowance.\\r\\n   */\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens in existence.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens owned by `account`.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remaining number of tokens that `spender` will be\\r\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n   * zero by default.\\r\\n   *\\r\\n   * This value changes when {approve} or {transferFrom} are called.\\r\\n   */\\r\\n  function allowance(address owner, address spender)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n   * that someone may use both the old and the new allowance by unfortunate\\r\\n   * transaction ordering. One possible solution to mitigate this race\\r\\n   * condition is to first reduce the spender's allowance to 0 and set the\\r\\n   * desired value afterwards:\\r\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n   * allowance mechanism. `amount` is then deducted from the caller's\\r\\n   * allowance.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x50e5e05a4d9fd25403aa67a32b8a2b2e16f992ad109aacab9fbec1158f845921\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary AddressUpgradeable {\\r\\n  /**\\r\\n   * @dev Returns true if `account` is a contract.\\r\\n   *\\r\\n   * [IMPORTANT]\\r\\n   * ====\\r\\n   * It is unsafe to assume that an address for which this function returns\\r\\n   * false is an externally-owned account (EOA) and not a contract.\\r\\n   *\\r\\n   * Among others, `isContract` will return false for the following\\r\\n   * types of addresses:\\r\\n   *\\r\\n   *  - an externally-owned account\\r\\n   *  - a contract in construction\\r\\n   *  - an address where a contract will be created\\r\\n   *  - an address where a contract lived, but was destroyed\\r\\n   * ====\\r\\n   *\\r\\n   * [IMPORTANT]\\r\\n   * ====\\r\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n   *\\r\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n   * constructor.\\r\\n   * ====\\r\\n   */\\r\\n  function isContract(address account) internal view returns (bool) {\\r\\n    // This method relies on extcodesize/address.code.length, which returns 0\\r\\n    // for contracts in construction, since the code is only stored at the end\\r\\n    // of the constructor execution.\\r\\n\\r\\n    return account.code.length > 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n   * `recipient`, forwarding all available gas and reverting on errors.\\r\\n   *\\r\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n   * imposed by `transfer`, making them unable to receive funds via\\r\\n   * `transfer`. {sendValue} removes this limitation.\\r\\n   *\\r\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n   *\\r\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n   * taken to not create reentrancy vulnerabilities. Consider using\\r\\n   * {ReentrancyGuard} or the\\r\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n   */\\r\\n  function sendValue(address payable recipient, uint256 amount) internal {\\r\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n    require(\\r\\n      success,\\r\\n      \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Performs a Solidity function call using a low level `call`. A\\r\\n   * plain `call` is an unsafe replacement for a function call: use this\\r\\n   * function instead.\\r\\n   *\\r\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n   * function (like regular Solidity function calls).\\r\\n   *\\r\\n   * Returns the raw returned data. To convert to the expected return value,\\r\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `target` must be a contract.\\r\\n   * - calling `target` with `data` must not revert.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCall(address target, bytes memory data)\\r\\n    internal\\r\\n    returns (bytes memory)\\r\\n  {\\r\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    return functionCallWithValue(target, data, 0, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but also transferring `value` wei to `target`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the calling contract must have an ETH balance of at least `value`.\\r\\n   * - the called Solidity function must be `payable`.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCallWithValue(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    uint256 value\\r\\n  ) internal returns (bytes memory) {\\r\\n    return\\r\\n      functionCallWithValue(\\r\\n        target,\\r\\n        data,\\r\\n        value,\\r\\n        \\\"Address: low-level call with value failed\\\"\\r\\n      );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCallWithValue(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    uint256 value,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    require(\\r\\n      address(this).balance >= value,\\r\\n      \\\"Address: insufficient balance for call\\\"\\r\\n    );\\r\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but performing a static call.\\r\\n   *\\r\\n   * _Available since v3.3._\\r\\n   */\\r\\n  function functionStaticCall(address target, bytes memory data)\\r\\n    internal\\r\\n    view\\r\\n    returns (bytes memory)\\r\\n  {\\r\\n    return\\r\\n      functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n   * but performing a static call.\\r\\n   *\\r\\n   * _Available since v3.3._\\r\\n   */\\r\\n  function functionStaticCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal view returns (bytes memory) {\\r\\n    require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n   * revert reason using the provided one.\\r\\n   *\\r\\n   * _Available since v4.3._\\r\\n   */\\r\\n  function verifyCallResult(\\r\\n    bool success,\\r\\n    bytes memory returndata,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (bytes memory) {\\r\\n    if (success) {\\r\\n      return returndata;\\r\\n    } else {\\r\\n      // Look for revert reason and bubble it up if present\\r\\n      if (returndata.length > 0) {\\r\\n        // The easiest way to bubble the revert reason is using memory via assembly\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n          let returndata_size := mload(returndata)\\r\\n          revert(add(32, returndata), returndata_size)\\r\\n        }\\r\\n      } else {\\r\\n        revert(errorMessage);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x53a79f16ab642a2ebb5b88a316373a0bb597c508cc7d57fe3c9fb7f98877439b\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract ContextUpgradeable is Initializable {\\r\\n  function __Context_init() internal onlyInitializing {}\\r\\n\\r\\n  function __Context_init_unchained() internal onlyInitializing {}\\r\\n\\r\\n  function _msgSender() internal view virtual returns (address) {\\r\\n    return msg.sender;\\r\\n  }\\r\\n\\r\\n  function _msgData() internal view virtual returns (bytes calldata) {\\r\\n    return msg.data;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n   * variables without shifting down storage in the inheritance chain.\\r\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n   */\\r\\n  uint256[50] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x1fbbddd1c5c4380a354b9faf59b76230b62e9919b209c3bd3856bdcfb754a243\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts-upgradeable/utils/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/utils/IERC165Upgradeable.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\r\\n */\\r\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\r\\n  function __ERC165_init() internal onlyInitializing {}\\r\\n\\r\\n  function __ERC165_init_unchained() internal onlyInitializing {}\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC165-supportsInterface}.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    return interfaceId == type(IERC165Upgradeable).interfaceId;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n   * variables without shifting down storage in the inheritance chain.\\r\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n   */\\r\\n  uint256[50] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x1d7aba5e2f3cb741e593976f3b31cff0209194e8826d72ac75ebab9e54f6cd58\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Library for managing\\r\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\r\\n * types.\\r\\n *\\r\\n * Sets have the following properties:\\r\\n *\\r\\n * - Elements are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableSet.AddressSet private mySet;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\r\\n * and `uint256` (`UintSet`) are supported.\\r\\n *\\r\\n * [WARNING]\\r\\n * ====\\r\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\r\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\r\\n *\\r\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\r\\n * ====\\r\\n */\\r\\nlibrary EnumerableSetUpgradeable {\\r\\n  // To implement this library for multiple types with as little code\\r\\n  // repetition as possible, we write it in terms of a generic Set type with\\r\\n  // bytes32 values.\\r\\n  // The Set implementation uses private functions, and user-facing\\r\\n  // implementations (such as AddressSet) are just wrappers around the\\r\\n  // underlying Set.\\r\\n  // This means that we can only create new EnumerableSets for types that fit\\r\\n  // in bytes32.\\r\\n\\r\\n  struct Set {\\r\\n    // Storage of set values\\r\\n    bytes32[] _values;\\r\\n    // Position of the value in the `values` array, plus 1 because index 0\\r\\n    // means a value is not in the set.\\r\\n    mapping(bytes32 => uint256) _indexes;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Add a value to a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was added to the set, that is if it was not\\r\\n   * already present.\\r\\n   */\\r\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n    if (!_contains(set, value)) {\\r\\n      set._values.push(value);\\r\\n      // The value is stored at length-1, but we add 1 to all indexes\\r\\n      // and use 0 as a sentinel value\\r\\n      set._indexes[value] = set._values.length;\\r\\n      return true;\\r\\n    } else {\\r\\n      return false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Removes a value from a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was removed from the set, that is if it was\\r\\n   * present.\\r\\n   */\\r\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\r\\n    uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n    if (valueIndex != 0) {\\r\\n      // Equivalent to contains(set, value)\\r\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\r\\n      // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n      uint256 toDeleteIndex = valueIndex - 1;\\r\\n      uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n      if (lastIndex != toDeleteIndex) {\\r\\n        bytes32 lastValue = set._values[lastIndex];\\r\\n\\r\\n        // Move the last value to the index where the value to delete is\\r\\n        set._values[toDeleteIndex] = lastValue;\\r\\n        // Update the index for the moved value\\r\\n        set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\r\\n      }\\r\\n\\r\\n      // Delete the slot where the moved value was stored\\r\\n      set._values.pop();\\r\\n\\r\\n      // Delete the index for the deleted slot\\r\\n      delete set._indexes[value];\\r\\n\\r\\n      return true;\\r\\n    } else {\\r\\n      return false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns true if the value is in the set. O(1).\\r\\n   */\\r\\n  function _contains(Set storage set, bytes32 value)\\r\\n    private\\r\\n    view\\r\\n    returns (bool)\\r\\n  {\\r\\n    return set._indexes[value] != 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of values on the set. O(1).\\r\\n   */\\r\\n  function _length(Set storage set) private view returns (uint256) {\\r\\n    return set._values.length;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n   *\\r\\n   * Note that there are no guarantees on the ordering of values inside the\\r\\n   * array, and it may change when more values are added or removed.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `index` must be strictly less than {length}.\\r\\n   */\\r\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n    return set._values[index];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the entire set in an array\\r\\n   *\\r\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n   */\\r\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\r\\n    return set._values;\\r\\n  }\\r\\n\\r\\n  // Bytes32Set\\r\\n\\r\\n  struct Bytes32Set {\\r\\n    Set _inner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Add a value to a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was added to the set, that is if it was not\\r\\n   * already present.\\r\\n   */\\r\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n    return _add(set._inner, value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Removes a value from a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was removed from the set, that is if it was\\r\\n   * present.\\r\\n   */\\r\\n  function remove(Bytes32Set storage set, bytes32 value)\\r\\n    internal\\r\\n    returns (bool)\\r\\n  {\\r\\n    return _remove(set._inner, value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns true if the value is in the set. O(1).\\r\\n   */\\r\\n  function contains(Bytes32Set storage set, bytes32 value)\\r\\n    internal\\r\\n    view\\r\\n    returns (bool)\\r\\n  {\\r\\n    return _contains(set._inner, value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of values in the set. O(1).\\r\\n   */\\r\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n    return _length(set._inner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n   *\\r\\n   * Note that there are no guarantees on the ordering of values inside the\\r\\n   * array, and it may change when more values are added or removed.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `index` must be strictly less than {length}.\\r\\n   */\\r\\n  function at(Bytes32Set storage set, uint256 index)\\r\\n    internal\\r\\n    view\\r\\n    returns (bytes32)\\r\\n  {\\r\\n    return _at(set._inner, index);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the entire set in an array\\r\\n   *\\r\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n   */\\r\\n  function values(Bytes32Set storage set)\\r\\n    internal\\r\\n    view\\r\\n    returns (bytes32[] memory)\\r\\n  {\\r\\n    return _values(set._inner);\\r\\n  }\\r\\n\\r\\n  // AddressSet\\r\\n\\r\\n  struct AddressSet {\\r\\n    Set _inner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Add a value to a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was added to the set, that is if it was not\\r\\n   * already present.\\r\\n   */\\r\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Removes a value from a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was removed from the set, that is if it was\\r\\n   * present.\\r\\n   */\\r\\n  function remove(AddressSet storage set, address value)\\r\\n    internal\\r\\n    returns (bool)\\r\\n  {\\r\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns true if the value is in the set. O(1).\\r\\n   */\\r\\n  function contains(AddressSet storage set, address value)\\r\\n    internal\\r\\n    view\\r\\n    returns (bool)\\r\\n  {\\r\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of values in the set. O(1).\\r\\n   */\\r\\n  function length(AddressSet storage set) internal view returns (uint256) {\\r\\n    return _length(set._inner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n   *\\r\\n   * Note that there are no guarantees on the ordering of values inside the\\r\\n   * array, and it may change when more values are added or removed.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `index` must be strictly less than {length}.\\r\\n   */\\r\\n  function at(AddressSet storage set, uint256 index)\\r\\n    internal\\r\\n    view\\r\\n    returns (address)\\r\\n  {\\r\\n    return address(uint160(uint256(_at(set._inner, index))));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the entire set in an array\\r\\n   *\\r\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n   */\\r\\n  function values(AddressSet storage set)\\r\\n    internal\\r\\n    view\\r\\n    returns (address[] memory)\\r\\n  {\\r\\n    bytes32[] memory store = _values(set._inner);\\r\\n    address[] memory result;\\r\\n\\r\\n    /// @solidity memory-safe-assembly\\r\\n    assembly {\\r\\n      result := store\\r\\n    }\\r\\n\\r\\n    return result;\\r\\n  }\\r\\n\\r\\n  // UintSet\\r\\n\\r\\n  struct UintSet {\\r\\n    Set _inner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Add a value to a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was added to the set, that is if it was not\\r\\n   * already present.\\r\\n   */\\r\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n    return _add(set._inner, bytes32(value));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Removes a value from a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was removed from the set, that is if it was\\r\\n   * present.\\r\\n   */\\r\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n    return _remove(set._inner, bytes32(value));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns true if the value is in the set. O(1).\\r\\n   */\\r\\n  function contains(UintSet storage set, uint256 value)\\r\\n    internal\\r\\n    view\\r\\n    returns (bool)\\r\\n  {\\r\\n    return _contains(set._inner, bytes32(value));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of values on the set. O(1).\\r\\n   */\\r\\n  function length(UintSet storage set) internal view returns (uint256) {\\r\\n    return _length(set._inner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n   *\\r\\n   * Note that there are no guarantees on the ordering of values inside the\\r\\n   * array, and it may change when more values are added or removed.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `index` must be strictly less than {length}.\\r\\n   */\\r\\n  function at(UintSet storage set, uint256 index)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return uint256(_at(set._inner, index));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the entire set in an array\\r\\n   *\\r\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n   */\\r\\n  function values(UintSet storage set)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256[] memory)\\r\\n  {\\r\\n    bytes32[] memory store = _values(set._inner);\\r\\n    uint256[] memory result;\\r\\n\\r\\n    /// @solidity memory-safe-assembly\\r\\n    assembly {\\r\\n      result := store\\r\\n    }\\r\\n\\r\\n    return result;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x425c5be3ddb7dc41b04e9a2418db8e99778c30ff1c4ca20fb74391ad3dad8734\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts-upgradeable/utils/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165Upgradeable {\\r\\n  /**\\r\\n   * @dev Returns true if this contract implements the interface defined by\\r\\n   * `interfaceId`. See the corresponding\\r\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n   * to learn more about how these ids are created.\\r\\n   *\\r\\n   * This function call must use less than 30 000 gas.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x9e5103c004f9d93a5cda3b30a76de9d7fd82bc79eb41d000335537ce2c70c892\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary StringsUpgradeable {\\r\\n  bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n  uint8 private constant _ADDRESS_LENGTH = 20;\\r\\n\\r\\n  /**\\r\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n   */\\r\\n  function toString(uint256 value) internal pure returns (string memory) {\\r\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\r\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n    if (value == 0) {\\r\\n      return \\\"0\\\";\\r\\n    }\\r\\n    uint256 temp = value;\\r\\n    uint256 digits;\\r\\n    while (temp != 0) {\\r\\n      digits++;\\r\\n      temp /= 10;\\r\\n    }\\r\\n    bytes memory buffer = new bytes(digits);\\r\\n    while (value != 0) {\\r\\n      digits -= 1;\\r\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n      value /= 10;\\r\\n    }\\r\\n    return string(buffer);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n   */\\r\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n    if (value == 0) {\\r\\n      return \\\"0x00\\\";\\r\\n    }\\r\\n    uint256 temp = value;\\r\\n    uint256 length = 0;\\r\\n    while (temp != 0) {\\r\\n      length++;\\r\\n      temp >>= 8;\\r\\n    }\\r\\n    return toHexString(value, length);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n   */\\r\\n  function toHexString(uint256 value, uint256 length)\\r\\n    internal\\r\\n    pure\\r\\n    returns (string memory)\\r\\n  {\\r\\n    bytes memory buffer = new bytes(2 * length + 2);\\r\\n    buffer[0] = \\\"0\\\";\\r\\n    buffer[1] = \\\"x\\\";\\r\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\r\\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\\r\\n      value >>= 4;\\r\\n    }\\r\\n    require(value == 0, \\\"Strings: hex length insufficient\\\");\\r\\n    return string(buffer);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\r\\n   */\\r\\n  function toHexString(address addr) internal pure returns (string memory) {\\r\\n    return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xeff6647ad963aedfbd0878796b38def63eb642f9f23d731e814eb80f4b6becc4\",\"license\":\"MIT\"},\"contracts/interfaces/IAllowlist.sol\":{\"content\":\"/**SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\n      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\r\\n   \\u2553\\u2588\\u2588\\u2580\\u2514 ,\\u2553\\u2584\\u2584\\u2584, '\\u2580\\u2588\\u2588\\u2584\\r\\n  \\u2588\\u2588\\u2580 \\u2584\\u2588\\u2588\\u2580\\u2580\\u2559\\u2559\\u2580\\u2580\\u2588\\u2588\\u2584 \\u2514\\u2588\\u2588\\u00b5           ,,       ,,      ,     ,,,            ,,,\\r\\n \\u2588\\u2588 ,\\u2588\\u2588\\u00ac \\u2584\\u2588\\u2588\\u2588\\u2588\\u2584  \\u2580\\u2588\\u2584 \\u2559\\u2588\\u2584      \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584   \\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588  \\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584    \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588,\\r\\n\\u2588\\u2588  \\u2588\\u2588 \\u2552\\u2588\\u2580'   \\u2559\\u2588\\u258c \\u2559\\u2588\\u258c \\u2588\\u2588     \\u2590\\u2588\\u2588      \\u2588\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588,  \\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2514\\u2588\\u2588\\u258c  \\u2588\\u2588\\u258c     \\u2514\\u2588\\u2588\\u258c\\r\\n\\u2588\\u2588 \\u2590\\u2588\\u258c \\u2588\\u2588      \\u255f\\u2588  \\u2588\\u258c \\u255f\\u2588     \\u2588\\u2588\\u258c      \\u2590\\u2588\\u2588  \\u2588\\u2588 \\u2514\\u2588\\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588\\u258c     \\u255f\\u2588\\u2588 j\\u2588\\u2588       \\u255f\\u2588\\u2588\\r\\n\\u255f\\u2588  \\u2588\\u2588 \\u2559\\u2588\\u2588    \\u2584\\u2588\\u2580 \\u2590\\u2588\\u258c \\u2588\\u2588     \\u2559\\u2588\\u2588      \\u2588\\u2588\\u258c  \\u2588\\u2588   \\u2559\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2584\\u2588\\u2588\\u2580  \\u2588\\u2588\\u258c     ,\\u2588\\u2588\\u2580\\r\\n \\u2588\\u2588 \\\"\\u2588\\u2588, \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2310      \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588     \\u2559\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580     \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580`\\r\\n  \\u2588\\u2588\\u2584 \\u2559\\u2580\\u2588\\u2588\\u2584\\u2584\\u2584\\u2584\\u2584,,,                \\u00ac\\u2500                                    '\\u2500\\u00ac\\r\\n   \\u2559\\u2580\\u2588\\u2588\\u2584 '\\u2559\\u2559\\u2559\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\r\\n      \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588R\\u2310\\r\\n\\r\\n */\\r\\npragma solidity 0.8.16;\\r\\n\\r\\ninterface IAllowlist {\\r\\n  function addTerm(string calldata term) external;\\r\\n\\r\\n  function setCurrentTermIndex(uint256 _currentTermIndex) external;\\r\\n\\r\\n  function setValidTermIndexes(uint256[] calldata indexes) external;\\r\\n\\r\\n  function isAllowed(address account) external view returns (bool);\\r\\n\\r\\n  function getCurrentTerm() external view returns (string memory);\\r\\n\\r\\n  function getValidTermIndexes() external view returns (uint256[] memory);\\r\\n\\r\\n  function addAccountToAllowlist(\\r\\n    uint256 _currentTermIndex,\\r\\n    address account,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external;\\r\\n\\r\\n  function addSelfToAllowlist(uint256 termIndex) external;\\r\\n\\r\\n  function setAccountStatus(\\r\\n    address account,\\r\\n    uint256 termIndex,\\r\\n    bool status\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when a term is added\\r\\n   *\\r\\n   * @param hashedMessage The hash of the terms string that was added\\r\\n   * @param termIndex     The index of the term that was added\\r\\n   */\\r\\n  event TermAdded(bytes32 hashedMessage, uint256 termIndex);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when the current term index is set\\r\\n   *\\r\\n   * @param oldIndex The old current term index\\r\\n   * @param newIndex The new current term index\\r\\n   */\\r\\n  event CurrentTermIndexSet(uint256 oldIndex, uint256 newIndex);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when the valid term indexes are set\\r\\n   *\\r\\n   * @param oldIndexes The old valid term indexes\\r\\n   * @param newIndexes The new valid term indexes\\r\\n   */\\r\\n  event ValidTermIndexesSet(uint256[] oldIndexes, uint256[] newIndexes);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when an accoun status is set by an admin\\r\\n   *\\r\\n   * @param account   The account whose status was set\\r\\n   * @param termIndex The term index of the account whose status that was set\\r\\n   * @param status    The new status of the account\\r\\n   */\\r\\n  event AccountStatusSetByAdmin(\\r\\n    address indexed account,\\r\\n    uint256 indexed termIndex,\\r\\n    bool status\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when an account adds itself added to the allowlist\\r\\n   *\\r\\n   * @param account   The account that was added\\r\\n   * @param termIndex The term index for which the account was added\\r\\n   */\\r\\n  event AccountAddedSelf(address indexed account, uint256 indexed termIndex);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when an account is added to the allowlist by a signature\\r\\n   *\\r\\n   * @param account   The account that was added\\r\\n   * @param termIndex The term index for which the account was added\\r\\n   * @param v         The v value of the signature\\r\\n   * @param r         The r value of the signature\\r\\n   * @param s         The s value of the signature\\r\\n   */\\r\\n  event AccountAddedFromSignature(\\r\\n    address indexed account,\\r\\n    uint256 indexed termIndex,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when an account status is set\\r\\n   *\\r\\n   * @param account   The account whose status was set\\r\\n   * @param termIndex The term index of the account whose status was set\\r\\n   * @param status    The new status of the account\\r\\n   */\\r\\n  event AccountStatusSet(\\r\\n    address indexed account,\\r\\n    uint256 indexed termIndex,\\r\\n    bool status\\r\\n  );\\r\\n\\r\\n  /// ERRORS ///\\r\\n  error InvalidTermIndex();\\r\\n  error InvalidVSignature();\\r\\n  error AlreadyVerified();\\r\\n  error InvalidSigner();\\r\\n}\\r\\n\",\"keccak256\":\"0x87f6d6adfd8be12f49a16d328dd5fa8cd02230bd19fc6da718cab2ad8aea96ab\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IAllowlistClient.sol\":{\"content\":\"/**SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\n      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\r\\n   \\u2553\\u2588\\u2588\\u2580\\u2514 ,\\u2553\\u2584\\u2584\\u2584, '\\u2580\\u2588\\u2588\\u2584\\r\\n  \\u2588\\u2588\\u2580 \\u2584\\u2588\\u2588\\u2580\\u2580\\u2559\\u2559\\u2580\\u2580\\u2588\\u2588\\u2584 \\u2514\\u2588\\u2588\\u00b5           ,,       ,,      ,     ,,,            ,,,\\r\\n \\u2588\\u2588 ,\\u2588\\u2588\\u00ac \\u2584\\u2588\\u2588\\u2588\\u2588\\u2584  \\u2580\\u2588\\u2584 \\u2559\\u2588\\u2584      \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584   \\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588  \\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584    \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588,\\r\\n\\u2588\\u2588  \\u2588\\u2588 \\u2552\\u2588\\u2580'   \\u2559\\u2588\\u258c \\u2559\\u2588\\u258c \\u2588\\u2588     \\u2590\\u2588\\u2588      \\u2588\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588,  \\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2514\\u2588\\u2588\\u258c  \\u2588\\u2588\\u258c     \\u2514\\u2588\\u2588\\u258c\\r\\n\\u2588\\u2588 \\u2590\\u2588\\u258c \\u2588\\u2588      \\u255f\\u2588  \\u2588\\u258c \\u255f\\u2588     \\u2588\\u2588\\u258c      \\u2590\\u2588\\u2588  \\u2588\\u2588 \\u2514\\u2588\\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588\\u258c     \\u255f\\u2588\\u2588 j\\u2588\\u2588       \\u255f\\u2588\\u2588\\r\\n\\u255f\\u2588  \\u2588\\u2588 \\u2559\\u2588\\u2588    \\u2584\\u2588\\u2580 \\u2590\\u2588\\u258c \\u2588\\u2588     \\u2559\\u2588\\u2588      \\u2588\\u2588\\u258c  \\u2588\\u2588   \\u2559\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2584\\u2588\\u2588\\u2580  \\u2588\\u2588\\u258c     ,\\u2588\\u2588\\u2580\\r\\n \\u2588\\u2588 \\\"\\u2588\\u2588, \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2310      \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588     \\u2559\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580     \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580`\\r\\n  \\u2588\\u2588\\u2584 \\u2559\\u2580\\u2588\\u2588\\u2584\\u2584\\u2584\\u2584\\u2584,,,                \\u00ac\\u2500                                    '\\u2500\\u00ac\\r\\n   \\u2559\\u2580\\u2588\\u2588\\u2584 '\\u2559\\u2559\\u2559\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\r\\n      \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588R\\u2310\\r\\n\\r\\n */\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"contracts/interfaces/IAllowlist.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IAllowlistClient\\r\\n * @author Ondo Finance\\r\\n * @notice The client interface for Ondo's Allowlist contract.\\r\\n */\\r\\ninterface IAllowlistClient {\\r\\n  /// @notice Returns reference to the allowlist that this client queries\\r\\n  function allowlist() external view returns (IAllowlist);\\r\\n\\r\\n  /// @notice Sets the allowlist contract reference\\r\\n  function setAllowlist(address allowlist) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Event for when the allowlist reference is set\\r\\n   *\\r\\n   * @param oldAllowlist The old allowlist\\r\\n   * @param newAllowlist The new allowlist\\r\\n   */\\r\\n  event AllowlistSet(address oldAllowlist, address newAllowlist);\\r\\n\\r\\n  /// @notice Error for when caller attempts to set the allowlist reference\\r\\n  ///         to the zero address.\\r\\n  error AllowlistZeroAddress();\\r\\n}\\r\\n\",\"keccak256\":\"0xb7ccf5746a1f46a035154dcfd5cb174a327a4cde21a9b681e194f84b584c1416\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBlocklist.sol\":{\"content\":\"/**SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\n      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\r\\n   \\u2553\\u2588\\u2588\\u2580\\u2514 ,\\u2553\\u2584\\u2584\\u2584, '\\u2580\\u2588\\u2588\\u2584\\r\\n  \\u2588\\u2588\\u2580 \\u2584\\u2588\\u2588\\u2580\\u2580\\u2559\\u2559\\u2580\\u2580\\u2588\\u2588\\u2584 \\u2514\\u2588\\u2588\\u00b5           ,,       ,,      ,     ,,,            ,,,\\r\\n \\u2588\\u2588 ,\\u2588\\u2588\\u00ac \\u2584\\u2588\\u2588\\u2588\\u2588\\u2584  \\u2580\\u2588\\u2584 \\u2559\\u2588\\u2584      \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584   \\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588  \\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584    \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588,\\r\\n\\u2588\\u2588  \\u2588\\u2588 \\u2552\\u2588\\u2580'   \\u2559\\u2588\\u258c \\u2559\\u2588\\u258c \\u2588\\u2588     \\u2590\\u2588\\u2588      \\u2588\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588,  \\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2514\\u2588\\u2588\\u258c  \\u2588\\u2588\\u258c     \\u2514\\u2588\\u2588\\u258c\\r\\n\\u2588\\u2588 \\u2590\\u2588\\u258c \\u2588\\u2588      \\u255f\\u2588  \\u2588\\u258c \\u255f\\u2588     \\u2588\\u2588\\u258c      \\u2590\\u2588\\u2588  \\u2588\\u2588 \\u2514\\u2588\\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588\\u258c     \\u255f\\u2588\\u2588 j\\u2588\\u2588       \\u255f\\u2588\\u2588\\r\\n\\u255f\\u2588  \\u2588\\u2588 \\u2559\\u2588\\u2588    \\u2584\\u2588\\u2580 \\u2590\\u2588\\u258c \\u2588\\u2588     \\u2559\\u2588\\u2588      \\u2588\\u2588\\u258c  \\u2588\\u2588   \\u2559\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2584\\u2588\\u2588\\u2580  \\u2588\\u2588\\u258c     ,\\u2588\\u2588\\u2580\\r\\n \\u2588\\u2588 \\\"\\u2588\\u2588, \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2310      \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588     \\u2559\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580     \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580`\\r\\n  \\u2588\\u2588\\u2584 \\u2559\\u2580\\u2588\\u2588\\u2584\\u2584\\u2584\\u2584\\u2584,,,                \\u00ac\\u2500                                    '\\u2500\\u00ac\\r\\n   \\u2559\\u2580\\u2588\\u2588\\u2584 '\\u2559\\u2559\\u2559\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\r\\n      \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588R\\u2310\\r\\n\\r\\n */\\r\\npragma solidity 0.8.16;\\r\\n\\r\\ninterface IBlocklist {\\r\\n  function addToBlocklist(address[] calldata accounts) external;\\r\\n\\r\\n  function removeFromBlocklist(address[] calldata accounts) external;\\r\\n\\r\\n  function isBlocked(address account) external view returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when addresses are added to the blocklist\\r\\n   *\\r\\n   * @param accounts The addresses that were added to the blocklist\\r\\n   */\\r\\n  event BlockedAddressesAdded(address[] accounts);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when addresses are removed from the blocklist\\r\\n   *\\r\\n   * @param accounts The addresses that were removed from the blocklist\\r\\n   */\\r\\n  event BlockedAddressesRemoved(address[] accounts);\\r\\n}\\r\\n\",\"keccak256\":\"0x7c8c824f639cd56c330192d8e6cb1fc4a1f05ad769e6bf862355fd771dae54cd\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBlocklistClient.sol\":{\"content\":\"/**SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\n      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\r\\n   \\u2553\\u2588\\u2588\\u2580\\u2514 ,\\u2553\\u2584\\u2584\\u2584, '\\u2580\\u2588\\u2588\\u2584\\r\\n  \\u2588\\u2588\\u2580 \\u2584\\u2588\\u2588\\u2580\\u2580\\u2559\\u2559\\u2580\\u2580\\u2588\\u2588\\u2584 \\u2514\\u2588\\u2588\\u00b5           ,,       ,,      ,     ,,,            ,,,\\r\\n \\u2588\\u2588 ,\\u2588\\u2588\\u00ac \\u2584\\u2588\\u2588\\u2588\\u2588\\u2584  \\u2580\\u2588\\u2584 \\u2559\\u2588\\u2584      \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584   \\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588  \\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584    \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588,\\r\\n\\u2588\\u2588  \\u2588\\u2588 \\u2552\\u2588\\u2580'   \\u2559\\u2588\\u258c \\u2559\\u2588\\u258c \\u2588\\u2588     \\u2590\\u2588\\u2588      \\u2588\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588,  \\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2514\\u2588\\u2588\\u258c  \\u2588\\u2588\\u258c     \\u2514\\u2588\\u2588\\u258c\\r\\n\\u2588\\u2588 \\u2590\\u2588\\u258c \\u2588\\u2588      \\u255f\\u2588  \\u2588\\u258c \\u255f\\u2588     \\u2588\\u2588\\u258c      \\u2590\\u2588\\u2588  \\u2588\\u2588 \\u2514\\u2588\\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588\\u258c     \\u255f\\u2588\\u2588 j\\u2588\\u2588       \\u255f\\u2588\\u2588\\r\\n\\u255f\\u2588  \\u2588\\u2588 \\u2559\\u2588\\u2588    \\u2584\\u2588\\u2580 \\u2590\\u2588\\u258c \\u2588\\u2588     \\u2559\\u2588\\u2588      \\u2588\\u2588\\u258c  \\u2588\\u2588   \\u2559\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2584\\u2588\\u2588\\u2580  \\u2588\\u2588\\u258c     ,\\u2588\\u2588\\u2580\\r\\n \\u2588\\u2588 \\\"\\u2588\\u2588, \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2310      \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588     \\u2559\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580     \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580`\\r\\n  \\u2588\\u2588\\u2584 \\u2559\\u2580\\u2588\\u2588\\u2584\\u2584\\u2584\\u2584\\u2584,,,                \\u00ac\\u2500                                    '\\u2500\\u00ac\\r\\n   \\u2559\\u2580\\u2588\\u2588\\u2584 '\\u2559\\u2559\\u2559\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\r\\n      \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588R\\u2310\\r\\n\\r\\n */\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"contracts/interfaces/IBlocklist.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IBlocklistClient\\r\\n * @author Ondo Finance\\r\\n * @notice The client interface for the Blocklist contract.\\r\\n */\\r\\ninterface IBlocklistClient {\\r\\n  /// @notice Returns reference to the blocklist that this client queries\\r\\n  function blocklist() external view returns (IBlocklist);\\r\\n\\r\\n  /// @notice Sets the blocklist reference\\r\\n  function setBlocklist(address registry) external;\\r\\n\\r\\n  /// @notice Error for when caller attempts to set the blocklist reference\\r\\n  ///         to the zero address\\r\\n  error BlocklistZeroAddress();\\r\\n\\r\\n  /// @notice Error for when caller attempts to perform action on a blocked\\r\\n  ///         account\\r\\n  error BlockedAccount();\\r\\n\\r\\n  /**\\r\\n   * @dev Event for when the blocklist reference is set\\r\\n   *\\r\\n   * @param oldBlocklist The old blocklist\\r\\n   * @param newBlocklist The new blocklist\\r\\n   */\\r\\n  event BlocklistSet(address oldBlocklist, address newBlocklist);\\r\\n}\\r\\n\",\"keccak256\":\"0x353e97762587b115bd314943c5b11b08222762365474fc43fdf8994cb5be707f\",\"license\":\"BUSL-1.1\"},\"contracts/sanctions/ISanctionsListClient.sol\":{\"content\":\"/**SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\n      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\r\\n   \\u2553\\u2588\\u2588\\u2580\\u2514 ,\\u2553\\u2584\\u2584\\u2584, '\\u2580\\u2588\\u2588\\u2584\\r\\n  \\u2588\\u2588\\u2580 \\u2584\\u2588\\u2588\\u2580\\u2580\\u2559\\u2559\\u2580\\u2580\\u2588\\u2588\\u2584 \\u2514\\u2588\\u2588\\u00b5           ,,       ,,      ,     ,,,            ,,,\\r\\n \\u2588\\u2588 ,\\u2588\\u2588\\u00ac \\u2584\\u2588\\u2588\\u2588\\u2588\\u2584  \\u2580\\u2588\\u2584 \\u2559\\u2588\\u2584      \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584   \\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588  \\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584    \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588,\\r\\n\\u2588\\u2588  \\u2588\\u2588 \\u2552\\u2588\\u2580'   \\u2559\\u2588\\u258c \\u2559\\u2588\\u258c \\u2588\\u2588     \\u2590\\u2588\\u2588      \\u2588\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588,  \\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2514\\u2588\\u2588\\u258c  \\u2588\\u2588\\u258c     \\u2514\\u2588\\u2588\\u258c\\r\\n\\u2588\\u2588 \\u2590\\u2588\\u258c \\u2588\\u2588      \\u255f\\u2588  \\u2588\\u258c \\u255f\\u2588     \\u2588\\u2588\\u258c      \\u2590\\u2588\\u2588  \\u2588\\u2588 \\u2514\\u2588\\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588\\u258c     \\u255f\\u2588\\u2588 j\\u2588\\u2588       \\u255f\\u2588\\u2588\\r\\n\\u255f\\u2588  \\u2588\\u2588 \\u2559\\u2588\\u2588    \\u2584\\u2588\\u2580 \\u2590\\u2588\\u258c \\u2588\\u2588     \\u2559\\u2588\\u2588      \\u2588\\u2588\\u258c  \\u2588\\u2588   \\u2559\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2584\\u2588\\u2588\\u2580  \\u2588\\u2588\\u258c     ,\\u2588\\u2588\\u2580\\r\\n \\u2588\\u2588 \\\"\\u2588\\u2588, \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2310      \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588     \\u2559\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580     \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580`\\r\\n  \\u2588\\u2588\\u2584 \\u2559\\u2580\\u2588\\u2588\\u2584\\u2584\\u2584\\u2584\\u2584,,,                \\u00ac\\u2500                                    '\\u2500\\u00ac\\r\\n   \\u2559\\u2580\\u2588\\u2588\\u2584 '\\u2559\\u2559\\u2559\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\r\\n      \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588R\\u2310\\r\\n\\r\\n */\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"contracts/external/chainalysis/ISanctionsList.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ISanctionsListClient\\r\\n * @author Ondo Finance\\r\\n * @notice The client interface for sanctions contract.\\r\\n */\\r\\ninterface ISanctionsListClient {\\r\\n  /// @notice Returns reference to the sanctions list that this client queries\\r\\n  function sanctionsList() external view returns (ISanctionsList);\\r\\n\\r\\n  /// @notice Sets the sanctions list reference\\r\\n  function setSanctionsList(address sanctionsList) external;\\r\\n\\r\\n  /// @notice Error for when caller attempts to set the `sanctionsList`\\r\\n  ///         reference to the zero address\\r\\n  error SanctionsListZeroAddress();\\r\\n\\r\\n  /// @notice Error for when caller attempts to perform an action on a\\r\\n  ///         sanctioned account\\r\\n  error SanctionedAccount();\\r\\n\\r\\n  /**\\r\\n   * @dev Event for when the sanctions list reference is set\\r\\n   *\\r\\n   * @param oldSanctionsList The old list\\r\\n   * @param newSanctionsList The new list\\r\\n   */\\r\\n  event SanctionsListSet(address oldSanctionsList, address newSanctionsList);\\r\\n}\\r\\n\",\"keccak256\":\"0xa989516312864ed4b1ed4485866c6f077bad3232e651857f4ce334ce4f0e4e15\",\"license\":\"BUSL-1.1\"},\"contracts/sanctions/SanctionsListClientUpgradeable.sol\":{\"content\":\"/**SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\n      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\r\\n   \\u2553\\u2588\\u2588\\u2580\\u2514 ,\\u2553\\u2584\\u2584\\u2584, '\\u2580\\u2588\\u2588\\u2584\\r\\n  \\u2588\\u2588\\u2580 \\u2584\\u2588\\u2588\\u2580\\u2580\\u2559\\u2559\\u2580\\u2580\\u2588\\u2588\\u2584 \\u2514\\u2588\\u2588\\u00b5           ,,       ,,      ,     ,,,            ,,,\\r\\n \\u2588\\u2588 ,\\u2588\\u2588\\u00ac \\u2584\\u2588\\u2588\\u2588\\u2588\\u2584  \\u2580\\u2588\\u2584 \\u2559\\u2588\\u2584      \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584   \\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588  \\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584    \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588,\\r\\n\\u2588\\u2588  \\u2588\\u2588 \\u2552\\u2588\\u2580'   \\u2559\\u2588\\u258c \\u2559\\u2588\\u258c \\u2588\\u2588     \\u2590\\u2588\\u2588      \\u2588\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588,  \\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2514\\u2588\\u2588\\u258c  \\u2588\\u2588\\u258c     \\u2514\\u2588\\u2588\\u258c\\r\\n\\u2588\\u2588 \\u2590\\u2588\\u258c \\u2588\\u2588      \\u255f\\u2588  \\u2588\\u258c \\u255f\\u2588     \\u2588\\u2588\\u258c      \\u2590\\u2588\\u2588  \\u2588\\u2588 \\u2514\\u2588\\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588\\u258c     \\u255f\\u2588\\u2588 j\\u2588\\u2588       \\u255f\\u2588\\u2588\\r\\n\\u255f\\u2588  \\u2588\\u2588 \\u2559\\u2588\\u2588    \\u2584\\u2588\\u2580 \\u2590\\u2588\\u258c \\u2588\\u2588     \\u2559\\u2588\\u2588      \\u2588\\u2588\\u258c  \\u2588\\u2588   \\u2559\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2584\\u2588\\u2588\\u2580  \\u2588\\u2588\\u258c     ,\\u2588\\u2588\\u2580\\r\\n \\u2588\\u2588 \\\"\\u2588\\u2588, \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2310      \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588     \\u2559\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580     \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580`\\r\\n  \\u2588\\u2588\\u2584 \\u2559\\u2580\\u2588\\u2588\\u2584\\u2584\\u2584\\u2584\\u2584,,,                \\u00ac\\u2500                                    '\\u2500\\u00ac\\r\\n   \\u2559\\u2580\\u2588\\u2588\\u2584 '\\u2559\\u2559\\u2559\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\r\\n      \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588R\\u2310\\r\\n\\r\\n */\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\nimport \\\"contracts/external/chainalysis/ISanctionsList.sol\\\";\\r\\nimport \\\"contracts/sanctions/ISanctionsListClient.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SanctionsListClient\\r\\n * @author Ondo Finance\\r\\n * @notice This abstract contract enables inheritors to query whether accounts\\r\\n *         are sanctioned or not\\r\\n */\\r\\nabstract contract SanctionsListClientUpgradeable is\\r\\n  Initializable,\\r\\n  ISanctionsListClient\\r\\n{\\r\\n  // Sanctions list address\\r\\n  ISanctionsList public override sanctionsList;\\r\\n\\r\\n  /**\\r\\n   * @notice Initialize the contract by setting blocklist variable\\r\\n   *\\r\\n   * @param _sanctionsList Address of the sanctionsList contract\\r\\n   *\\r\\n   * @dev Function should be called by the inheriting contract on\\r\\n   *      initialization\\r\\n   */\\r\\n  function __SanctionsListClientInitializable_init(\\r\\n    address _sanctionsList\\r\\n  ) internal onlyInitializing {\\r\\n    __SanctionsListClientInitializable_init_unchained(_sanctionsList);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Internal function to future-proof parent linearization. Matches OZ\\r\\n   *      upgradeable suggestions\\r\\n   */\\r\\n  function __SanctionsListClientInitializable_init_unchained(\\r\\n    address _sanctionsList\\r\\n  ) internal onlyInitializing {\\r\\n    _setSanctionsList(_sanctionsList);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the sanctions list address for this client\\r\\n   *\\r\\n   * @param _sanctionsList The new sanctions list address\\r\\n   */\\r\\n  function _setSanctionsList(address _sanctionsList) internal {\\r\\n    if (_sanctionsList == address(0)) {\\r\\n      revert SanctionsListZeroAddress();\\r\\n    }\\r\\n    address oldSanctionsList = address(sanctionsList);\\r\\n    sanctionsList = ISanctionsList(_sanctionsList);\\r\\n    emit SanctionsListSet(oldSanctionsList, _sanctionsList);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Checks whether an address has been sanctioned\\r\\n   *\\r\\n   * @param account The account to check\\r\\n   */\\r\\n  function _isSanctioned(address account) internal view returns (bool) {\\r\\n    return sanctionsList.isSanctioned(account);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n   * variables without shifting down storage in the inheritance chain.\\r\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n   */\\r\\n  uint256[50] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x7b925a9f3e9a3bf2149653f6119d158e760cd891bd83d9d5c391d96f031edc95\",\"license\":\"BUSL-1.1\"},\"contracts/usdy/USDY.sol\":{\"content\":\"/**SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\n      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\r\\n   \\u2553\\u2588\\u2588\\u2580\\u2514 ,\\u2553\\u2584\\u2584\\u2584, '\\u2580\\u2588\\u2588\\u2584\\r\\n  \\u2588\\u2588\\u2580 \\u2584\\u2588\\u2588\\u2580\\u2580\\u2559\\u2559\\u2580\\u2580\\u2588\\u2588\\u2584 \\u2514\\u2588\\u2588\\u00b5           ,,       ,,      ,     ,,,            ,,,\\r\\n \\u2588\\u2588 ,\\u2588\\u2588\\u00ac \\u2584\\u2588\\u2588\\u2588\\u2588\\u2584  \\u2580\\u2588\\u2584 \\u2559\\u2588\\u2584      \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584   \\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588  \\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584    \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588,\\r\\n\\u2588\\u2588  \\u2588\\u2588 \\u2552\\u2588\\u2580'   \\u2559\\u2588\\u258c \\u2559\\u2588\\u258c \\u2588\\u2588     \\u2590\\u2588\\u2588      \\u2588\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588,  \\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2514\\u2588\\u2588\\u258c  \\u2588\\u2588\\u258c     \\u2514\\u2588\\u2588\\u258c\\r\\n\\u2588\\u2588 \\u2590\\u2588\\u258c \\u2588\\u2588      \\u255f\\u2588  \\u2588\\u258c \\u255f\\u2588     \\u2588\\u2588\\u258c      \\u2590\\u2588\\u2588  \\u2588\\u2588 \\u2514\\u2588\\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588\\u258c     \\u255f\\u2588\\u2588 j\\u2588\\u2588       \\u255f\\u2588\\u2588\\r\\n\\u255f\\u2588  \\u2588\\u2588 \\u2559\\u2588\\u2588    \\u2584\\u2588\\u2580 \\u2590\\u2588\\u258c \\u2588\\u2588     \\u2559\\u2588\\u2588      \\u2588\\u2588\\u258c  \\u2588\\u2588   \\u2559\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2584\\u2588\\u2588\\u2580  \\u2588\\u2588\\u258c     ,\\u2588\\u2588\\u2580\\r\\n \\u2588\\u2588 \\\"\\u2588\\u2588, \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2310      \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588     \\u2559\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580     \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580`\\r\\n  \\u2588\\u2588\\u2584 \\u2559\\u2580\\u2588\\u2588\\u2584\\u2584\\u2584\\u2584\\u2584,,,                \\u00ac\\u2500                                    '\\u2500\\u00ac\\r\\n   \\u2559\\u2580\\u2588\\u2588\\u2584 '\\u2559\\u2559\\u2559\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\r\\n      \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588R\\u2310\\r\\n\\r\\n */\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/token/ERC20/ERC20PresetMinterPauserUpgradeable.sol\\\";\\r\\nimport \\\"contracts/usdy/blocklist/BlocklistClientUpgradeable.sol\\\";\\r\\nimport \\\"contracts/usdy/allowlist/AllowlistClientUpgradeable.sol\\\";\\r\\nimport \\\"contracts/sanctions/SanctionsListClientUpgradeable.sol\\\";\\r\\n\\r\\ncontract USDY is\\r\\n  ERC20PresetMinterPauserUpgradeable,\\r\\n  BlocklistClientUpgradeable,\\r\\n  AllowlistClientUpgradeable,\\r\\n  SanctionsListClientUpgradeable\\r\\n{\\r\\n  bytes32 public constant LIST_CONFIGURER_ROLE =\\r\\n    keccak256(\\\"LIST_CONFIGURER_ROLE\\\");\\r\\n  bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\r\\n\\r\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n  constructor() {\\r\\n    _disableInitializers();\\r\\n  }\\r\\n\\r\\n  function initialize(\\r\\n    string memory name,\\r\\n    string memory symbol,\\r\\n    address blocklist,\\r\\n    address allowlist,\\r\\n    address sanctionsList\\r\\n  ) public initializer {\\r\\n    __ERC20PresetMinterPauser_init(name, symbol);\\r\\n    __BlocklistClientInitializable_init(blocklist);\\r\\n    __AllowlistClientInitializable_init(allowlist);\\r\\n    __SanctionsListClientInitializable_init(sanctionsList);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the blocklist address\\r\\n   *\\r\\n   * @param blocklist New blocklist address\\r\\n   */\\r\\n  function setBlocklist(\\r\\n    address blocklist\\r\\n  ) external override onlyRole(LIST_CONFIGURER_ROLE) {\\r\\n    _setBlocklist(blocklist);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the allowlist address\\r\\n   *\\r\\n   * @param allowlist New allowlist address\\r\\n   */\\r\\n  function setAllowlist(\\r\\n    address allowlist\\r\\n  ) external override onlyRole(LIST_CONFIGURER_ROLE) {\\r\\n    _setAllowlist(allowlist);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the sanctions list address\\r\\n   *\\r\\n   * @param sanctionsList New sanctions list address\\r\\n   */\\r\\n  function setSanctionsList(\\r\\n    address sanctionsList\\r\\n  ) external override onlyRole(LIST_CONFIGURER_ROLE) {\\r\\n    _setSanctionsList(sanctionsList);\\r\\n  }\\r\\n\\r\\n  function _beforeTokenTransfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) internal override {\\r\\n    super._beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n    // Check constraints when `transferFrom` is called to facliitate\\r\\n    // a transfer between two parties that are not `from` or `to`.\\r\\n    if (from != msg.sender && to != msg.sender) {\\r\\n      require(!_isBlocked(msg.sender), \\\"USDY: 'sender' address blocked\\\");\\r\\n      require(!_isSanctioned(msg.sender), \\\"USDY: 'sender' address sanctioned\\\");\\r\\n      require(\\r\\n        _isAllowed(msg.sender),\\r\\n        \\\"USDY: 'sender' address not on allowlist\\\"\\r\\n      );\\r\\n    }\\r\\n\\r\\n    if (from != address(0)) {\\r\\n      // If not minting\\r\\n      require(!_isBlocked(from), \\\"USDY: 'from' address blocked\\\");\\r\\n      require(!_isSanctioned(from), \\\"USDY: 'from' address sanctioned\\\");\\r\\n      require(_isAllowed(from), \\\"USDY: 'from' address not on allowlist\\\");\\r\\n    }\\r\\n\\r\\n    if (to != address(0)) {\\r\\n      // If not burning\\r\\n      require(!_isBlocked(to), \\\"USDY: 'to' address blocked\\\");\\r\\n      require(!_isSanctioned(to), \\\"USDY: 'to' address sanctioned\\\");\\r\\n      require(_isAllowed(to), \\\"USDY: 'to' address not on allowlist\\\");\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Burns a specific amount of tokens\\r\\n   *\\r\\n   * @param from The account whose tokens will be burned\\r\\n   * @param amount The amount of token to be burned\\r\\n   *\\r\\n   * @dev This function can be considered an admin-burn and is only callable\\r\\n   *      by an address with the `BURNER_ROLE`\\r\\n   */\\r\\n  function burn(address from, uint256 amount) external onlyRole(BURNER_ROLE) {\\r\\n    _burn(from, amount);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xdd906eef5e185968638773fd6d011f970e71328e5ba2a5b76f13558b2689edca\",\"license\":\"BUSL-1.1\"},\"contracts/usdy/allowlist/AllowlistClientUpgradeable.sol\":{\"content\":\"/**SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\n      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\r\\n   \\u2553\\u2588\\u2588\\u2580\\u2514 ,\\u2553\\u2584\\u2584\\u2584, '\\u2580\\u2588\\u2588\\u2584\\r\\n  \\u2588\\u2588\\u2580 \\u2584\\u2588\\u2588\\u2580\\u2580\\u2559\\u2559\\u2580\\u2580\\u2588\\u2588\\u2584 \\u2514\\u2588\\u2588\\u00b5           ,,       ,,      ,     ,,,            ,,,\\r\\n \\u2588\\u2588 ,\\u2588\\u2588\\u00ac \\u2584\\u2588\\u2588\\u2588\\u2588\\u2584  \\u2580\\u2588\\u2584 \\u2559\\u2588\\u2584      \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584   \\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588  \\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584    \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588,\\r\\n\\u2588\\u2588  \\u2588\\u2588 \\u2552\\u2588\\u2580'   \\u2559\\u2588\\u258c \\u2559\\u2588\\u258c \\u2588\\u2588     \\u2590\\u2588\\u2588      \\u2588\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588,  \\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2514\\u2588\\u2588\\u258c  \\u2588\\u2588\\u258c     \\u2514\\u2588\\u2588\\u258c\\r\\n\\u2588\\u2588 \\u2590\\u2588\\u258c \\u2588\\u2588      \\u255f\\u2588  \\u2588\\u258c \\u255f\\u2588     \\u2588\\u2588\\u258c      \\u2590\\u2588\\u2588  \\u2588\\u2588 \\u2514\\u2588\\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588\\u258c     \\u255f\\u2588\\u2588 j\\u2588\\u2588       \\u255f\\u2588\\u2588\\r\\n\\u255f\\u2588  \\u2588\\u2588 \\u2559\\u2588\\u2588    \\u2584\\u2588\\u2580 \\u2590\\u2588\\u258c \\u2588\\u2588     \\u2559\\u2588\\u2588      \\u2588\\u2588\\u258c  \\u2588\\u2588   \\u2559\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2584\\u2588\\u2588\\u2580  \\u2588\\u2588\\u258c     ,\\u2588\\u2588\\u2580\\r\\n \\u2588\\u2588 \\\"\\u2588\\u2588, \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2310      \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588     \\u2559\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580     \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580`\\r\\n  \\u2588\\u2588\\u2584 \\u2559\\u2580\\u2588\\u2588\\u2584\\u2584\\u2584\\u2584\\u2584,,,                \\u00ac\\u2500                                    '\\u2500\\u00ac\\r\\n   \\u2559\\u2580\\u2588\\u2588\\u2584 '\\u2559\\u2559\\u2559\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\r\\n      \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588R\\u2310\\r\\n\\r\\n */\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"contracts/interfaces/IAllowlist.sol\\\";\\r\\nimport \\\"contracts/interfaces/IAllowlistClient.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title AllowlistClientInitializable\\r\\n * @author Ondo Finance\\r\\n * @notice This abstract contract manages state required for clients\\r\\n *         of the allowlist\\r\\n */\\r\\nabstract contract AllowlistClientUpgradeable is\\r\\n  Initializable,\\r\\n  IAllowlistClient\\r\\n{\\r\\n  // allowlist address\\r\\n  IAllowlist public override allowlist;\\r\\n\\r\\n  /**\\r\\n   * @notice Initialize the contract by setting allowlist variable\\r\\n   *\\r\\n   * @param _allowlist Address of the allowlist contract\\r\\n   *\\r\\n   * @dev Function should be called by the inheriting contract on\\r\\n   *      initialization\\r\\n   */\\r\\n  function __AllowlistClientInitializable_init(\\r\\n    address _allowlist\\r\\n  ) internal onlyInitializing {\\r\\n    __AllowlistClientInitializable_init_unchained(_allowlist);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Internal function to future-proof parent linearization. Matches OZ\\r\\n   *      upgradeable suggestions\\r\\n   */\\r\\n  function __AllowlistClientInitializable_init_unchained(\\r\\n    address _allowlist\\r\\n  ) internal onlyInitializing {\\r\\n    _setAllowlist(_allowlist);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the allowlist address for this client\\r\\n   *\\r\\n   * @param _allowlist The new allowlist address\\r\\n   */\\r\\n  function _setAllowlist(address _allowlist) internal {\\r\\n    if (_allowlist == address(0)) {\\r\\n      revert AllowlistZeroAddress();\\r\\n    }\\r\\n    address oldAllowlist = address(allowlist);\\r\\n    allowlist = IAllowlist(_allowlist);\\r\\n    emit AllowlistSet(oldAllowlist, _allowlist);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Checks whether an address has been Blocked\\r\\n   *\\r\\n   * @param account The account to check\\r\\n   */\\r\\n  function _isAllowed(address account) internal view returns (bool) {\\r\\n    return allowlist.isAllowed(account);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n   * variables without shifting down storage in the inheritance chain.\\r\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n   */\\r\\n  uint256[50] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x77fdb7497c12b104d701c43c27b214d773fe29d8e732044793b6e3655bcc403a\",\"license\":\"BUSL-1.1\"},\"contracts/usdy/blocklist/BlocklistClientUpgradeable.sol\":{\"content\":\"/**SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\n      \\u2584\\u2584\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\r\\n   \\u2553\\u2588\\u2588\\u2580\\u2514 ,\\u2553\\u2584\\u2584\\u2584, '\\u2580\\u2588\\u2588\\u2584\\r\\n  \\u2588\\u2588\\u2580 \\u2584\\u2588\\u2588\\u2580\\u2580\\u2559\\u2559\\u2580\\u2580\\u2588\\u2588\\u2584 \\u2514\\u2588\\u2588\\u00b5           ,,       ,,      ,     ,,,            ,,,\\r\\n \\u2588\\u2588 ,\\u2588\\u2588\\u00ac \\u2584\\u2588\\u2588\\u2588\\u2588\\u2584  \\u2580\\u2588\\u2584 \\u2559\\u2588\\u2584      \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584   \\u2588\\u2588\\u2588\\u2584    \\u2588\\u2588  \\u2588\\u2588\\u2588\\u2580\\u2580\\u2580\\u2588\\u2588\\u2588\\u2584    \\u2584\\u2588\\u2588\\u2588\\u2580\\u2580\\u2588\\u2588\\u2588,\\r\\n\\u2588\\u2588  \\u2588\\u2588 \\u2552\\u2588\\u2580'   \\u2559\\u2588\\u258c \\u2559\\u2588\\u258c \\u2588\\u2588     \\u2590\\u2588\\u2588      \\u2588\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588,  \\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2514\\u2588\\u2588\\u258c  \\u2588\\u2588\\u258c     \\u2514\\u2588\\u2588\\u258c\\r\\n\\u2588\\u2588 \\u2590\\u2588\\u258c \\u2588\\u2588      \\u255f\\u2588  \\u2588\\u258c \\u255f\\u2588     \\u2588\\u2588\\u258c      \\u2590\\u2588\\u2588  \\u2588\\u2588 \\u2514\\u2588\\u2588\\u2588 \\u2588\\u2588  \\u2588\\u2588\\u258c     \\u255f\\u2588\\u2588 j\\u2588\\u2588       \\u255f\\u2588\\u2588\\r\\n\\u255f\\u2588  \\u2588\\u2588 \\u2559\\u2588\\u2588    \\u2584\\u2588\\u2580 \\u2590\\u2588\\u258c \\u2588\\u2588     \\u2559\\u2588\\u2588      \\u2588\\u2588\\u258c  \\u2588\\u2588   \\u2559\\u2588\\u2588\\u2588\\u2588  \\u2588\\u2588\\u258c    \\u2584\\u2588\\u2588\\u2580  \\u2588\\u2588\\u258c     ,\\u2588\\u2588\\u2580\\r\\n \\u2588\\u2588 \\\"\\u2588\\u2588, \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2310      \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2588\\u2588     \\u2559\\u2588\\u2588  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580\\u2580     \\u2559\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580`\\r\\n  \\u2588\\u2588\\u2584 \\u2559\\u2580\\u2588\\u2588\\u2584\\u2584\\u2584\\u2584\\u2584,,,                \\u00ac\\u2500                                    '\\u2500\\u00ac\\r\\n   \\u2559\\u2580\\u2588\\u2588\\u2584 '\\u2559\\u2559\\u2559\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\u2580\\r\\n      \\u2559\\u2580\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588R\\u2310\\r\\n\\r\\n */\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"contracts/interfaces/IBlocklist.sol\\\";\\r\\nimport \\\"contracts/interfaces/IBlocklistClient.sol\\\";\\r\\nimport \\\"contracts/external/openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title BlocklistClient\\r\\n * @author Ondo Finance\\r\\n * @notice This abstract contract manages state for upgradeable blocklist\\r\\n *         clients\\r\\n */\\r\\nabstract contract BlocklistClientUpgradeable is\\r\\n  Initializable,\\r\\n  IBlocklistClient\\r\\n{\\r\\n  // Blocklist contract\\r\\n  IBlocklist public override blocklist;\\r\\n\\r\\n  /**\\r\\n   * @notice Initialize the contract by setting blocklist variable\\r\\n   *\\r\\n   * @param _blocklist Address of the blocklist contract\\r\\n   *\\r\\n   * @dev Function should be called by the inheriting contract on\\r\\n   *      initialization\\r\\n   */\\r\\n  function __BlocklistClientInitializable_init(\\r\\n    address _blocklist\\r\\n  ) internal onlyInitializing {\\r\\n    __BlocklistClientInitializable_init_unchained(_blocklist);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Internal function to future-proof parent linearization. Matches OZ\\r\\n   *      upgradeable suggestions\\r\\n   */\\r\\n  function __BlocklistClientInitializable_init_unchained(\\r\\n    address _blocklist\\r\\n  ) internal onlyInitializing {\\r\\n    _setBlocklist(_blocklist);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the blocklist address for this client\\r\\n   *\\r\\n   * @param _blocklist The new blocklist address\\r\\n   */\\r\\n  function _setBlocklist(address _blocklist) internal {\\r\\n    if (_blocklist == address(0)) {\\r\\n      revert BlocklistZeroAddress();\\r\\n    }\\r\\n    address oldBlocklist = address(blocklist);\\r\\n    blocklist = IBlocklist(_blocklist);\\r\\n    emit BlocklistSet(oldBlocklist, _blocklist);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Checks whether an address has been blocked\\r\\n   *\\r\\n   * @param account The account to check\\r\\n   */\\r\\n  function _isBlocked(address account) internal view returns (bool) {\\r\\n    return blocklist.isBlocked(account);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n   * variables without shifting down storage in the inheritance chain.\\r\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n   */\\r\\n  uint256[50] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xb0947b46f5f6e83199bedc0629e0e3d7dfce55a2781478c84ec3ddaac9a3d697\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6127e480620000f46000396000f3fe608060405234801561001057600080fd5b506004361061022d5760003560e01c806370a082311161013b578063aef18ae7116100b8578063d64e53961161007c578063d64e5396146104e5578063db0ed6a0146104f9578063dd62ed3e1461050c578063e63ab1e91461051f578063ec571c6a1461053457600080fd5b8063aef18ae714610482578063bf1d5b8f14610495578063ca15c873146104aa578063d5391393146104bd578063d547741f146104d257600080fd5b806395d89b41116100ff57806395d89b41146104395780639dc29fac14610441578063a217fddf14610454578063a457c2d71461045c578063a9059cbb1461046f57600080fd5b806370a08231146103cf57806379cc6790146103f85780638456cb591461040b5780639010d07c1461041357806391d148541461042657600080fd5b8063313ce567116101c957806342966c681161018d57806342966c681461037757806349dc5e8d1461038a5780634cd88b761461039d57806358bf3c7f146103b05780635c975abb146103c357600080fd5b8063313ce5671461032757806336568abe1461033657806339509351146103495780633f4ba83a1461035c57806340c10f191461036457600080fd5b806301ffc9a71461023257806306fdde031461025a578063095ea7b31461026f57806318160ddd1461028257806323b872dd14610294578063248a9ca3146102a7578063282c51f3146102ca5780632b47da52146102f15780632f2ff15d14610312575b600080fd5b61024561024036600461208c565b610548565b60405190151581526020015b60405180910390f35b610262610573565b60405161025191906120da565b61024561027d366004612129565b610605565b60cb545b604051908152602001610251565b6102456102a2366004612153565b61061d565b6102866102b536600461218f565b60009081526065602052604090206001015490565b6102867f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84881565b6101f654610305906001600160a01b031681565b60405161025191906121a8565b6103256103203660046121bc565b610641565b005b60405160128152602001610251565b6103256103443660046121bc565b61066b565b610245610357366004612129565b6106ee565b610325610710565b610325610372366004612129565b61078e565b61032561038536600461218f565b610809565b6103256103983660046121e8565b610816565b6103256103ab3660046122a6565b610837565b6103256103be3660046121e8565b610904565b61012d5460ff16610245565b6102866103dd3660046121e8565b6001600160a01b0316600090815260c9602052604090205490565b610325610406366004612129565b610925565b61032561093a565b61030561042136600461230a565b6109b4565b6102456104343660046121bc565b6109d3565b6102626109fe565b61032561044f366004612129565b610a0d565b610286600081565b61024561046a366004612129565b610a41565b61024561047d366004612129565b610abc565b6103256104903660046121e8565b610aca565b61028660008051602061278f83398151915281565b6102866104b836600461218f565b610aeb565b61028660008051602061274f83398151915281565b6103256104e03660046121bc565b610b02565b6101c354610305906001600160a01b031681565b61032561050736600461232c565b610b27565b61028661051a3660046123c2565b610c13565b61028660008051602061272f83398151915281565b61022954610305906001600160a01b031681565b60006001600160e01b03198216635a05180f60e01b148061056d575061056d82610c3e565b92915050565b606060cc8054610582906123ec565b80601f01602080910402602001604051908101604052809291908181526020018280546105ae906123ec565b80156105fb5780601f106105d0576101008083540402835291602001916105fb565b820191906000526020600020905b8154815290600101906020018083116105de57829003601f168201915b5050505050905090565b600033610613818585610c73565b5060019392505050565b60003361062b858285610d97565b610636858585610e11565b506001949350505050565b60008281526065602052604090206001015461065c81610fd8565b6106668383610fe2565b505050565b6001600160a01b03811633146106e05760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6106ea8282611004565b5050565b6000336106138185856107018383610c13565b61070b919061243c565b610c73565b61072860008051602061272f833981519152336109d3565b6107845760405162461bcd60e51b8152602060048201526039602482015260008051602061270f83398151915260448201527876652070617573657220726f6c6520746f20756e706175736560381b60648201526084016106d7565b61078c611026565b565b6107a660008051602061274f833981519152336109d3565b6107ff5760405162461bcd60e51b8152602060048201526036602482015260008051602061270f8339815191526044820152751d99481b5a5b9d195c881c9bdb19481d1bc81b5a5b9d60521b60648201526084016106d7565b6106ea8282611073565b610813338261114c565b50565b60008051602061278f83398151915261082e81610fd8565b6106ea82611294565b600054610100900460ff16158080156108575750600054600160ff909116105b806108715750303b158015610871575060005460ff166001145b61088d5760405162461bcd60e51b81526004016106d79061244f565b6000805460ff1916600117905580156108b0576000805461ff0019166101001790555b6108ba838361131b565b8015610666576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b60008051602061278f83398151915261091c81610fd8565b6106ea8261135e565b610930823383610d97565b6106ea828261114c565b61095260008051602061272f833981519152336109d3565b6109ac5760405162461bcd60e51b8152602060048201526037602482015260008051602061270f83398151915260448201527676652070617573657220726f6c6520746f20706175736560481b60648201526084016106d7565b61078c6113d9565b60008281526097602052604081206109cc9083611417565b9392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060cd8054610582906123ec565b7f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848610a3781610fd8565b610666838361114c565b60003381610a4f8286610c13565b905083811015610aaf5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016106d7565b6106368286868403610c73565b600033610613818585610e11565b60008051602061278f833981519152610ae281610fd8565b6106ea82611423565b600081815260976020526040812061056d9061149e565b600082815260656020526040902060010154610b1d81610fd8565b6106668383611004565b600054610100900460ff1615808015610b475750600054600160ff909116105b80610b615750303b158015610b61575060005460ff166001145b610b7d5760405162461bcd60e51b81526004016106d79061244f565b6000805460ff191660011790558015610ba0576000805461ff0019166101001790555b610baa868661131b565b610bb3846114a8565b610bbc836114d8565b610bc582611508565b8015610c0b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b6001600160a01b03918216600090815260ca6020908152604080832093909416825291909152205490565b60006001600160e01b03198216637965db0b60e01b148061056d57506301ffc9a760e01b6001600160e01b031983161461056d565b6001600160a01b038316610cd55760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016106d7565b6001600160a01b038216610d365760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016106d7565b6001600160a01b03838116600081815260ca602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610da38484610c13565b90506000198114610e0b5781811015610dfe5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016106d7565b610e0b8484848403610c73565b50505050565b6001600160a01b038316610e755760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016106d7565b6001600160a01b038216610ed75760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016106d7565b610ee2838383611538565b6001600160a01b038316600090815260c9602052604090205481811015610f5a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016106d7565b6001600160a01b03808516600090815260c96020526040808220858503905591851681529081208054849290610f9190849061243c565b92505081905550826001600160a01b0316846001600160a01b031660008051602061276f83398151915284604051610fcb91815260200190565b60405180910390a3610e0b565b61081381336118bf565b610fec8282611923565b600082815260976020526040902061066690826119a9565b61100e82826119be565b60008281526097602052604090206106669082611a25565b61102e611a3a565b61012d805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405161106991906121a8565b60405180910390a1565b6001600160a01b0382166110c95760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106d7565b6110d560008383611538565b8060cb60008282546110e7919061243c565b90915550506001600160a01b038216600090815260c960205260408120805483929061111490849061243c565b90915550506040518181526001600160a01b0383169060009060008051602061276f8339815191529060200160405180910390a35050565b6001600160a01b0382166111ac5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016106d7565b6111b882600083611538565b6001600160a01b038216600090815260c960205260409020548181101561122c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016106d7565b6001600160a01b038316600090815260c960205260408120838303905560cb805484929061125b90849061249d565b90915550506040518281526000906001600160a01b0385169060008051602061276f8339815191529060200160405180910390a3505050565b6001600160a01b0381166112bb576040516310ce5abd60e21b815260040160405180910390fd5b61022980546001600160a01b038381166001600160a01b03198316179092556040519116907fa19fd4029e820c57308467576d8d0296f07717cfcb98941cf8988b25dcd700e39061130f90839085906124b0565b60405180910390a15050565b600054610100900460ff166113425760405162461bcd60e51b81526004016106d7906124ca565b61134c8282611a84565b611354611ac4565b6106ea8282611af8565b6001600160a01b038116611385576040516314d7e06960e01b815260040160405180910390fd5b6101f680546001600160a01b038381166001600160a01b03198316179092556040519116907f451b0d3ada7fe0de9043f3de5fec87856a83f521b63c4a4c264c9a7d419bca489061130f90839085906124b0565b6113e1611b5a565b61012d805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861105c3390565b60006109cc8383611ba1565b6001600160a01b03811661144a57604051637e33865360e01b815260040160405180910390fd5b6101c380546001600160a01b038381166001600160a01b03198316179092556040519116907f7e053cdc9069fe4f629b6b3fa2a01bb53a9a8305ec11830b259d95e9e75b73049061130f90839085906124b0565b600061056d825490565b600054610100900460ff166114cf5760405162461bcd60e51b81526004016106d7906124ca565b61081381611bcb565b600054610100900460ff166114ff5760405162461bcd60e51b81526004016106d7906124ca565b61081381611bfb565b600054610100900460ff1661152f5760405162461bcd60e51b81526004016106d7906124ca565b61081381611c2b565b611543838383611c5b565b6001600160a01b038316331480159061156557506001600160a01b0382163314155b156116855761157333611c66565b156115c05760405162461bcd60e51b815260206004820152601e60248201527f555344593a202773656e64657227206164647265737320626c6f636b6564000060448201526064016106d7565b6115c933611cd9565b156116205760405162461bcd60e51b815260206004820152602160248201527f555344593a202773656e6465722720616464726573732073616e6374696f6e656044820152601960fa1b60648201526084016106d7565b61162933611d0b565b6116855760405162461bcd60e51b815260206004820152602760248201527f555344593a202773656e646572272061646472657373206e6f74206f6e20616c6044820152661b1bdddb1a5cdd60ca1b60648201526084016106d7565b6001600160a01b038316156117a35761169d83611c66565b156116ea5760405162461bcd60e51b815260206004820152601c60248201527f555344593a202766726f6d27206164647265737320626c6f636b65640000000060448201526064016106d7565b6116f383611cd9565b156117405760405162461bcd60e51b815260206004820152601f60248201527f555344593a202766726f6d2720616464726573732073616e6374696f6e65640060448201526064016106d7565b61174983611d0b565b6117a35760405162461bcd60e51b815260206004820152602560248201527f555344593a202766726f6d272061646472657373206e6f74206f6e20616c6c6f6044820152641ddb1a5cdd60da1b60648201526084016106d7565b6001600160a01b03821615610666576117bb82611c66565b156118085760405162461bcd60e51b815260206004820152601a60248201527f555344593a2027746f27206164647265737320626c6f636b656400000000000060448201526064016106d7565b61181182611cd9565b1561185e5760405162461bcd60e51b815260206004820152601d60248201527f555344593a2027746f2720616464726573732073616e6374696f6e656400000060448201526064016106d7565b61186782611d0b565b6106665760405162461bcd60e51b815260206004820152602360248201527f555344593a2027746f272061646472657373206e6f74206f6e20616c6c6f776c6044820152621a5cdd60ea1b60648201526084016106d7565b6118c982826109d3565b6106ea576118e1816001600160a01b03166014611d3d565b6118ec836020611d3d565b6040516020016118fd929190612515565b60408051601f198184030181529082905262461bcd60e51b82526106d7916004016120da565b61192d82826109d3565b6106ea5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556119653390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006109cc836001600160a01b038416611ed9565b6119c882826109d3565b156106ea5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006109cc836001600160a01b038416611f28565b61012d5460ff1661078c5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106d7565b600054610100900460ff16611aab5760405162461bcd60e51b81526004016106d7906124ca565b60cc611ab783826125ca565b5060cd61066682826125ca565b600054610100900460ff16611aeb5760405162461bcd60e51b81526004016106d7906124ca565b61012d805460ff19169055565b600054610100900460ff16611b1f5760405162461bcd60e51b81526004016106d7906124ca565b611b2a60003361201b565b611b4260008051602061274f8339815191523361201b565b6106ea60008051602061272f8339815191523361201b565b61012d5460ff161561078c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106d7565b6000826000018281548110611bb857611bb861268a565b9060005260206000200154905092915050565b600054610100900460ff16611bf25760405162461bcd60e51b81526004016106d7906124ca565b61081381611423565b600054610100900460ff16611c225760405162461bcd60e51b81526004016106d7906124ca565b6108138161135e565b600054610100900460ff16611c525760405162461bcd60e51b81526004016106d7906124ca565b61081381611294565b610666838383612025565b6101c35460405163fbac395160e01b81526000916001600160a01b03169063fbac395190611c989085906004016121a8565b602060405180830381865afa158015611cb5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056d91906126a0565b6102295460405163df592f7d60e01b81526000916001600160a01b03169063df592f7d90611c989085906004016121a8565b6101f65460405163babcc53960e01b81526000916001600160a01b03169063babcc53990611c989085906004016121a8565b60606000611d4c8360026126c2565b611d5790600261243c565b67ffffffffffffffff811115611d6f57611d6f612203565b6040519080825280601f01601f191660200182016040528015611d99576020820181803683370190505b509050600360fc1b81600081518110611db457611db461268a565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611de357611de361268a565b60200101906001600160f81b031916908160001a9053506000611e078460026126c2565b611e1290600161243c565b90505b6001811115611e8a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611e4657611e4661268a565b1a60f81b828281518110611e5c57611e5c61268a565b60200101906001600160f81b031916908160001a90535060049490941c93611e83816126e1565b9050611e15565b5083156109cc5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106d7565b6000818152600183016020526040812054611f205750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561056d565b50600061056d565b60008181526001830160205260408120548015612011576000611f4c60018361249d565b8554909150600090611f609060019061249d565b9050818114611fc5576000866000018281548110611f8057611f8061268a565b9060005260206000200154905080876000018481548110611fa357611fa361268a565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611fd657611fd66126f8565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061056d565b600091505061056d565b6106ea8282610fe2565b61012d5460ff16156106665760405162461bcd60e51b815260206004820152602a60248201527f45524332305061757361626c653a20746f6b656e207472616e736665722077686044820152691a5b19481c185d5cd95960b21b60648201526084016106d7565b60006020828403121561209e57600080fd5b81356001600160e01b0319811681146109cc57600080fd5b60005b838110156120d15781810151838201526020016120b9565b50506000910152565b60208152600082518060208401526120f98160408501602087016120b6565b601f01601f19169190910160400192915050565b80356001600160a01b038116811461212457600080fd5b919050565b6000806040838503121561213c57600080fd5b6121458361210d565b946020939093013593505050565b60008060006060848603121561216857600080fd5b6121718461210d565b925061217f6020850161210d565b9150604084013590509250925092565b6000602082840312156121a157600080fd5b5035919050565b6001600160a01b0391909116815260200190565b600080604083850312156121cf57600080fd5b823591506121df6020840161210d565b90509250929050565b6000602082840312156121fa57600080fd5b6109cc8261210d565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261222a57600080fd5b813567ffffffffffffffff8082111561224557612245612203565b604051601f8301601f19908116603f0116810190828211818310171561226d5761226d612203565b8160405283815286602085880101111561228657600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156122b957600080fd5b823567ffffffffffffffff808211156122d157600080fd5b6122dd86838701612219565b935060208501359150808211156122f357600080fd5b5061230085828601612219565b9150509250929050565b6000806040838503121561231d57600080fd5b50508035926020909101359150565b600080600080600060a0868803121561234457600080fd5b853567ffffffffffffffff8082111561235c57600080fd5b61236889838a01612219565b9650602088013591508082111561237e57600080fd5b5061238b88828901612219565b94505061239a6040870161210d565b92506123a86060870161210d565b91506123b66080870161210d565b90509295509295909350565b600080604083850312156123d557600080fd5b6123de8361210d565b91506121df6020840161210d565b600181811c9082168061240057607f821691505b60208210810361242057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561056d5761056d612426565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b8181038181111561056d5761056d612426565b6001600160a01b0392831681529116602082015260400190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8152600083516125478160178501602088016120b6565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516125788160288401602088016120b6565b01602801949350505050565b601f82111561066657600081815260208120601f850160051c810160208610156125ab5750805b601f850160051c820191505b81811015610c0b578281556001016125b7565b815167ffffffffffffffff8111156125e4576125e4612203565b6125f8816125f284546123ec565b84612584565b602080601f83116001811461262d57600084156126155750858301515b600019600386901b1c1916600185901b178555610c0b565b600085815260208120601f198616915b8281101561265c5788860151825594840194600190910190840161263d565b508582101561267a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156126b257600080fd5b815180151581146109cc57600080fd5b60008160001904831182151516156126dc576126dc612426565b500290565b6000816126f0576126f0612426565b506000190190565b634e487b7160e01b600052603160045260246000fdfe45524332305072657365744d696e7465725061757365723a206d75737420686165d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa74faf88a584437bd0449f37007060732f2e252b1607e7286651c9b6c1a74cbaa2646970667358221220c4d1a8158e1e5cd7812f730333e4f77aa4b74a828d8b65594926cd9867e6223464736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061022d5760003560e01c806370a082311161013b578063aef18ae7116100b8578063d64e53961161007c578063d64e5396146104e5578063db0ed6a0146104f9578063dd62ed3e1461050c578063e63ab1e91461051f578063ec571c6a1461053457600080fd5b8063aef18ae714610482578063bf1d5b8f14610495578063ca15c873146104aa578063d5391393146104bd578063d547741f146104d257600080fd5b806395d89b41116100ff57806395d89b41146104395780639dc29fac14610441578063a217fddf14610454578063a457c2d71461045c578063a9059cbb1461046f57600080fd5b806370a08231146103cf57806379cc6790146103f85780638456cb591461040b5780639010d07c1461041357806391d148541461042657600080fd5b8063313ce567116101c957806342966c681161018d57806342966c681461037757806349dc5e8d1461038a5780634cd88b761461039d57806358bf3c7f146103b05780635c975abb146103c357600080fd5b8063313ce5671461032757806336568abe1461033657806339509351146103495780633f4ba83a1461035c57806340c10f191461036457600080fd5b806301ffc9a71461023257806306fdde031461025a578063095ea7b31461026f57806318160ddd1461028257806323b872dd14610294578063248a9ca3146102a7578063282c51f3146102ca5780632b47da52146102f15780632f2ff15d14610312575b600080fd5b61024561024036600461208c565b610548565b60405190151581526020015b60405180910390f35b610262610573565b60405161025191906120da565b61024561027d366004612129565b610605565b60cb545b604051908152602001610251565b6102456102a2366004612153565b61061d565b6102866102b536600461218f565b60009081526065602052604090206001015490565b6102867f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84881565b6101f654610305906001600160a01b031681565b60405161025191906121a8565b6103256103203660046121bc565b610641565b005b60405160128152602001610251565b6103256103443660046121bc565b61066b565b610245610357366004612129565b6106ee565b610325610710565b610325610372366004612129565b61078e565b61032561038536600461218f565b610809565b6103256103983660046121e8565b610816565b6103256103ab3660046122a6565b610837565b6103256103be3660046121e8565b610904565b61012d5460ff16610245565b6102866103dd3660046121e8565b6001600160a01b0316600090815260c9602052604090205490565b610325610406366004612129565b610925565b61032561093a565b61030561042136600461230a565b6109b4565b6102456104343660046121bc565b6109d3565b6102626109fe565b61032561044f366004612129565b610a0d565b610286600081565b61024561046a366004612129565b610a41565b61024561047d366004612129565b610abc565b6103256104903660046121e8565b610aca565b61028660008051602061278f83398151915281565b6102866104b836600461218f565b610aeb565b61028660008051602061274f83398151915281565b6103256104e03660046121bc565b610b02565b6101c354610305906001600160a01b031681565b61032561050736600461232c565b610b27565b61028661051a3660046123c2565b610c13565b61028660008051602061272f83398151915281565b61022954610305906001600160a01b031681565b60006001600160e01b03198216635a05180f60e01b148061056d575061056d82610c3e565b92915050565b606060cc8054610582906123ec565b80601f01602080910402602001604051908101604052809291908181526020018280546105ae906123ec565b80156105fb5780601f106105d0576101008083540402835291602001916105fb565b820191906000526020600020905b8154815290600101906020018083116105de57829003601f168201915b5050505050905090565b600033610613818585610c73565b5060019392505050565b60003361062b858285610d97565b610636858585610e11565b506001949350505050565b60008281526065602052604090206001015461065c81610fd8565b6106668383610fe2565b505050565b6001600160a01b03811633146106e05760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6106ea8282611004565b5050565b6000336106138185856107018383610c13565b61070b919061243c565b610c73565b61072860008051602061272f833981519152336109d3565b6107845760405162461bcd60e51b8152602060048201526039602482015260008051602061270f83398151915260448201527876652070617573657220726f6c6520746f20756e706175736560381b60648201526084016106d7565b61078c611026565b565b6107a660008051602061274f833981519152336109d3565b6107ff5760405162461bcd60e51b8152602060048201526036602482015260008051602061270f8339815191526044820152751d99481b5a5b9d195c881c9bdb19481d1bc81b5a5b9d60521b60648201526084016106d7565b6106ea8282611073565b610813338261114c565b50565b60008051602061278f83398151915261082e81610fd8565b6106ea82611294565b600054610100900460ff16158080156108575750600054600160ff909116105b806108715750303b158015610871575060005460ff166001145b61088d5760405162461bcd60e51b81526004016106d79061244f565b6000805460ff1916600117905580156108b0576000805461ff0019166101001790555b6108ba838361131b565b8015610666576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b60008051602061278f83398151915261091c81610fd8565b6106ea8261135e565b610930823383610d97565b6106ea828261114c565b61095260008051602061272f833981519152336109d3565b6109ac5760405162461bcd60e51b8152602060048201526037602482015260008051602061270f83398151915260448201527676652070617573657220726f6c6520746f20706175736560481b60648201526084016106d7565b61078c6113d9565b60008281526097602052604081206109cc9083611417565b9392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060cd8054610582906123ec565b7f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848610a3781610fd8565b610666838361114c565b60003381610a4f8286610c13565b905083811015610aaf5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016106d7565b6106368286868403610c73565b600033610613818585610e11565b60008051602061278f833981519152610ae281610fd8565b6106ea82611423565b600081815260976020526040812061056d9061149e565b600082815260656020526040902060010154610b1d81610fd8565b6106668383611004565b600054610100900460ff1615808015610b475750600054600160ff909116105b80610b615750303b158015610b61575060005460ff166001145b610b7d5760405162461bcd60e51b81526004016106d79061244f565b6000805460ff191660011790558015610ba0576000805461ff0019166101001790555b610baa868661131b565b610bb3846114a8565b610bbc836114d8565b610bc582611508565b8015610c0b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b6001600160a01b03918216600090815260ca6020908152604080832093909416825291909152205490565b60006001600160e01b03198216637965db0b60e01b148061056d57506301ffc9a760e01b6001600160e01b031983161461056d565b6001600160a01b038316610cd55760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016106d7565b6001600160a01b038216610d365760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016106d7565b6001600160a01b03838116600081815260ca602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610da38484610c13565b90506000198114610e0b5781811015610dfe5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016106d7565b610e0b8484848403610c73565b50505050565b6001600160a01b038316610e755760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016106d7565b6001600160a01b038216610ed75760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016106d7565b610ee2838383611538565b6001600160a01b038316600090815260c9602052604090205481811015610f5a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016106d7565b6001600160a01b03808516600090815260c96020526040808220858503905591851681529081208054849290610f9190849061243c565b92505081905550826001600160a01b0316846001600160a01b031660008051602061276f83398151915284604051610fcb91815260200190565b60405180910390a3610e0b565b61081381336118bf565b610fec8282611923565b600082815260976020526040902061066690826119a9565b61100e82826119be565b60008281526097602052604090206106669082611a25565b61102e611a3a565b61012d805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405161106991906121a8565b60405180910390a1565b6001600160a01b0382166110c95760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106d7565b6110d560008383611538565b8060cb60008282546110e7919061243c565b90915550506001600160a01b038216600090815260c960205260408120805483929061111490849061243c565b90915550506040518181526001600160a01b0383169060009060008051602061276f8339815191529060200160405180910390a35050565b6001600160a01b0382166111ac5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016106d7565b6111b882600083611538565b6001600160a01b038216600090815260c960205260409020548181101561122c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016106d7565b6001600160a01b038316600090815260c960205260408120838303905560cb805484929061125b90849061249d565b90915550506040518281526000906001600160a01b0385169060008051602061276f8339815191529060200160405180910390a3505050565b6001600160a01b0381166112bb576040516310ce5abd60e21b815260040160405180910390fd5b61022980546001600160a01b038381166001600160a01b03198316179092556040519116907fa19fd4029e820c57308467576d8d0296f07717cfcb98941cf8988b25dcd700e39061130f90839085906124b0565b60405180910390a15050565b600054610100900460ff166113425760405162461bcd60e51b81526004016106d7906124ca565b61134c8282611a84565b611354611ac4565b6106ea8282611af8565b6001600160a01b038116611385576040516314d7e06960e01b815260040160405180910390fd5b6101f680546001600160a01b038381166001600160a01b03198316179092556040519116907f451b0d3ada7fe0de9043f3de5fec87856a83f521b63c4a4c264c9a7d419bca489061130f90839085906124b0565b6113e1611b5a565b61012d805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861105c3390565b60006109cc8383611ba1565b6001600160a01b03811661144a57604051637e33865360e01b815260040160405180910390fd5b6101c380546001600160a01b038381166001600160a01b03198316179092556040519116907f7e053cdc9069fe4f629b6b3fa2a01bb53a9a8305ec11830b259d95e9e75b73049061130f90839085906124b0565b600061056d825490565b600054610100900460ff166114cf5760405162461bcd60e51b81526004016106d7906124ca565b61081381611bcb565b600054610100900460ff166114ff5760405162461bcd60e51b81526004016106d7906124ca565b61081381611bfb565b600054610100900460ff1661152f5760405162461bcd60e51b81526004016106d7906124ca565b61081381611c2b565b611543838383611c5b565b6001600160a01b038316331480159061156557506001600160a01b0382163314155b156116855761157333611c66565b156115c05760405162461bcd60e51b815260206004820152601e60248201527f555344593a202773656e64657227206164647265737320626c6f636b6564000060448201526064016106d7565b6115c933611cd9565b156116205760405162461bcd60e51b815260206004820152602160248201527f555344593a202773656e6465722720616464726573732073616e6374696f6e656044820152601960fa1b60648201526084016106d7565b61162933611d0b565b6116855760405162461bcd60e51b815260206004820152602760248201527f555344593a202773656e646572272061646472657373206e6f74206f6e20616c6044820152661b1bdddb1a5cdd60ca1b60648201526084016106d7565b6001600160a01b038316156117a35761169d83611c66565b156116ea5760405162461bcd60e51b815260206004820152601c60248201527f555344593a202766726f6d27206164647265737320626c6f636b65640000000060448201526064016106d7565b6116f383611cd9565b156117405760405162461bcd60e51b815260206004820152601f60248201527f555344593a202766726f6d2720616464726573732073616e6374696f6e65640060448201526064016106d7565b61174983611d0b565b6117a35760405162461bcd60e51b815260206004820152602560248201527f555344593a202766726f6d272061646472657373206e6f74206f6e20616c6c6f6044820152641ddb1a5cdd60da1b60648201526084016106d7565b6001600160a01b03821615610666576117bb82611c66565b156118085760405162461bcd60e51b815260206004820152601a60248201527f555344593a2027746f27206164647265737320626c6f636b656400000000000060448201526064016106d7565b61181182611cd9565b1561185e5760405162461bcd60e51b815260206004820152601d60248201527f555344593a2027746f2720616464726573732073616e6374696f6e656400000060448201526064016106d7565b61186782611d0b565b6106665760405162461bcd60e51b815260206004820152602360248201527f555344593a2027746f272061646472657373206e6f74206f6e20616c6c6f776c6044820152621a5cdd60ea1b60648201526084016106d7565b6118c982826109d3565b6106ea576118e1816001600160a01b03166014611d3d565b6118ec836020611d3d565b6040516020016118fd929190612515565b60408051601f198184030181529082905262461bcd60e51b82526106d7916004016120da565b61192d82826109d3565b6106ea5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556119653390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006109cc836001600160a01b038416611ed9565b6119c882826109d3565b156106ea5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006109cc836001600160a01b038416611f28565b61012d5460ff1661078c5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106d7565b600054610100900460ff16611aab5760405162461bcd60e51b81526004016106d7906124ca565b60cc611ab783826125ca565b5060cd61066682826125ca565b600054610100900460ff16611aeb5760405162461bcd60e51b81526004016106d7906124ca565b61012d805460ff19169055565b600054610100900460ff16611b1f5760405162461bcd60e51b81526004016106d7906124ca565b611b2a60003361201b565b611b4260008051602061274f8339815191523361201b565b6106ea60008051602061272f8339815191523361201b565b61012d5460ff161561078c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106d7565b6000826000018281548110611bb857611bb861268a565b9060005260206000200154905092915050565b600054610100900460ff16611bf25760405162461bcd60e51b81526004016106d7906124ca565b61081381611423565b600054610100900460ff16611c225760405162461bcd60e51b81526004016106d7906124ca565b6108138161135e565b600054610100900460ff16611c525760405162461bcd60e51b81526004016106d7906124ca565b61081381611294565b610666838383612025565b6101c35460405163fbac395160e01b81526000916001600160a01b03169063fbac395190611c989085906004016121a8565b602060405180830381865afa158015611cb5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056d91906126a0565b6102295460405163df592f7d60e01b81526000916001600160a01b03169063df592f7d90611c989085906004016121a8565b6101f65460405163babcc53960e01b81526000916001600160a01b03169063babcc53990611c989085906004016121a8565b60606000611d4c8360026126c2565b611d5790600261243c565b67ffffffffffffffff811115611d6f57611d6f612203565b6040519080825280601f01601f191660200182016040528015611d99576020820181803683370190505b509050600360fc1b81600081518110611db457611db461268a565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611de357611de361268a565b60200101906001600160f81b031916908160001a9053506000611e078460026126c2565b611e1290600161243c565b90505b6001811115611e8a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611e4657611e4661268a565b1a60f81b828281518110611e5c57611e5c61268a565b60200101906001600160f81b031916908160001a90535060049490941c93611e83816126e1565b9050611e15565b5083156109cc5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106d7565b6000818152600183016020526040812054611f205750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561056d565b50600061056d565b60008181526001830160205260408120548015612011576000611f4c60018361249d565b8554909150600090611f609060019061249d565b9050818114611fc5576000866000018281548110611f8057611f8061268a565b9060005260206000200154905080876000018481548110611fa357611fa361268a565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611fd657611fd66126f8565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061056d565b600091505061056d565b6106ea8282610fe2565b61012d5460ff16156106665760405162461bcd60e51b815260206004820152602a60248201527f45524332305061757361626c653a20746f6b656e207472616e736665722077686044820152691a5b19481c185d5cd95960b21b60648201526084016106d7565b60006020828403121561209e57600080fd5b81356001600160e01b0319811681146109cc57600080fd5b60005b838110156120d15781810151838201526020016120b9565b50506000910152565b60208152600082518060208401526120f98160408501602087016120b6565b601f01601f19169190910160400192915050565b80356001600160a01b038116811461212457600080fd5b919050565b6000806040838503121561213c57600080fd5b6121458361210d565b946020939093013593505050565b60008060006060848603121561216857600080fd5b6121718461210d565b925061217f6020850161210d565b9150604084013590509250925092565b6000602082840312156121a157600080fd5b5035919050565b6001600160a01b0391909116815260200190565b600080604083850312156121cf57600080fd5b823591506121df6020840161210d565b90509250929050565b6000602082840312156121fa57600080fd5b6109cc8261210d565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261222a57600080fd5b813567ffffffffffffffff8082111561224557612245612203565b604051601f8301601f19908116603f0116810190828211818310171561226d5761226d612203565b8160405283815286602085880101111561228657600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156122b957600080fd5b823567ffffffffffffffff808211156122d157600080fd5b6122dd86838701612219565b935060208501359150808211156122f357600080fd5b5061230085828601612219565b9150509250929050565b6000806040838503121561231d57600080fd5b50508035926020909101359150565b600080600080600060a0868803121561234457600080fd5b853567ffffffffffffffff8082111561235c57600080fd5b61236889838a01612219565b9650602088013591508082111561237e57600080fd5b5061238b88828901612219565b94505061239a6040870161210d565b92506123a86060870161210d565b91506123b66080870161210d565b90509295509295909350565b600080604083850312156123d557600080fd5b6123de8361210d565b91506121df6020840161210d565b600181811c9082168061240057607f821691505b60208210810361242057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561056d5761056d612426565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b8181038181111561056d5761056d612426565b6001600160a01b0392831681529116602082015260400190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8152600083516125478160178501602088016120b6565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516125788160288401602088016120b6565b01602801949350505050565b601f82111561066657600081815260208120601f850160051c810160208610156125ab5750805b601f850160051c820191505b81811015610c0b578281556001016125b7565b815167ffffffffffffffff8111156125e4576125e4612203565b6125f8816125f284546123ec565b84612584565b602080601f83116001811461262d57600084156126155750858301515b600019600386901b1c1916600185901b178555610c0b565b600085815260208120601f198616915b8281101561265c5788860151825594840194600190910190840161263d565b508582101561267a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156126b257600080fd5b815180151581146109cc57600080fd5b60008160001904831182151516156126dc576126dc612426565b500290565b6000816126f0576126f0612426565b506000190190565b634e487b7160e01b600052603160045260246000fdfe45524332305072657365744d696e7465725061757365723a206d75737420686165d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa74faf88a584437bd0449f37007060732f2e252b1607e7286651c9b6c1a74cbaa2646970667358221220c4d1a8158e1e5cd7812f730333e4f77aa4b74a828d8b65594926cd9867e6223464736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(address,uint256)": {
        "details": "This function can be considered an admin-burn and is only callable      by an address with the `BURNER_ROLE`",
        "params": {
          "amount": "The amount of token to be burned",
          "from": "The account whose tokens will be burned"
        }
      },
      "burn(uint256)": {
        "details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
      },
      "burnFrom(address,uint256)": {
        "details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "mint(address,uint256)": {
        "details": "Creates `amount` new tokens for `to`. See {ERC20-_mint}. Requirements: - the caller must have the `MINTER_ROLE`."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "pause()": {
        "details": "Pauses all token transfers. See {ERC20Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setAllowlist(address)": {
        "params": {
          "allowlist": "New allowlist address"
        }
      },
      "setBlocklist(address)": {
        "params": {
          "blocklist": "New blocklist address"
        }
      },
      "setSanctionsList(address)": {
        "params": {
          "sanctionsList": "New sanctions list address"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "unpause()": {
        "details": "Unpauses all token transfers. See {ERC20Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AllowlistZeroAddress()": [
        {
          "notice": "Error for when caller attempts to set the allowlist reference         to the zero address."
        }
      ],
      "BlockedAccount()": [
        {
          "notice": "Error for when caller attempts to perform action on a blocked         account"
        }
      ],
      "BlocklistZeroAddress()": [
        {
          "notice": "Error for when caller attempts to set the blocklist reference         to the zero address"
        }
      ],
      "SanctionedAccount()": [
        {
          "notice": "Error for when caller attempts to perform an action on a         sanctioned account"
        }
      ],
      "SanctionsListZeroAddress()": [
        {
          "notice": "Error for when caller attempts to set the `sanctionsList`         reference to the zero address"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "allowlist()": {
        "notice": "Returns reference to the allowlist that this client queries"
      },
      "blocklist()": {
        "notice": "Returns reference to the blocklist that this client queries"
      },
      "burn(address,uint256)": {
        "notice": "Burns a specific amount of tokens"
      },
      "sanctionsList()": {
        "notice": "Returns reference to the sanctions list that this client queries"
      },
      "setAllowlist(address)": {
        "notice": "Sets the allowlist address"
      },
      "setBlocklist(address)": {
        "notice": "Sets the blocklist address"
      },
      "setSanctionsList(address)": {
        "notice": "Sets the sanctions list address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3332,
        "contract": "contracts/usdy/USDY.sol:USDY",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 3335,
        "contract": "contracts/usdy/USDY.sol:USDY",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6695,
        "contract": "contracts/usdy/USDY.sol:USDY",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6813,
        "contract": "contracts/usdy/USDY.sol:USDY",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2927,
        "contract": "contracts/usdy/USDY.sol:USDY",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)2922_storage)"
      },
      {
        "astId": 3226,
        "contract": "contracts/usdy/USDY.sol:USDY",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2776,
        "contract": "contracts/usdy/USDY.sol:USDY",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)7126_storage)"
      },
      {
        "astId": 2886,
        "contract": "contracts/usdy/USDY.sol:USDY",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3926,
        "contract": "contracts/usdy/USDY.sol:USDY",
        "label": "_balances",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3932,
        "contract": "contracts/usdy/USDY.sol:USDY",
        "label": "_allowances",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3934,
        "contract": "contracts/usdy/USDY.sol:USDY",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 3936,
        "contract": "contracts/usdy/USDY.sol:USDY",
        "label": "_name",
        "offset": 0,
        "slot": "204",
        "type": "t_string_storage"
      },
      {
        "astId": 3938,
        "contract": "contracts/usdy/USDY.sol:USDY",
        "label": "_symbol",
        "offset": 0,
        "slot": "205",
        "type": "t_string_storage"
      },
      {
        "astId": 4517,
        "contract": "contracts/usdy/USDY.sol:USDY",
        "label": "__gap",
        "offset": 0,
        "slot": "206",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 3666,
        "contract": "contracts/usdy/USDY.sol:USDY",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3497,
        "contract": "contracts/usdy/USDY.sol:USDY",
        "label": "_paused",
        "offset": 0,
        "slot": "301",
        "type": "t_bool"
      },
      {
        "astId": 3602,
        "contract": "contracts/usdy/USDY.sol:USDY",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3726,
        "contract": "contracts/usdy/USDY.sol:USDY",
        "label": "__gap",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3906,
        "contract": "contracts/usdy/USDY.sol:USDY",
        "label": "__gap",
        "offset": 0,
        "slot": "401",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 15682,
        "contract": "contracts/usdy/USDY.sol:USDY",
        "label": "blocklist",
        "offset": 0,
        "slot": "451",
        "type": "t_contract(IBlocklist)12161"
      },
      {
        "astId": 15763,
        "contract": "contracts/usdy/USDY.sol:USDY",
        "label": "__gap",
        "offset": 0,
        "slot": "452",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 14707,
        "contract": "contracts/usdy/USDY.sol:USDY",
        "label": "allowlist",
        "offset": 0,
        "slot": "502",
        "type": "t_contract(IAllowlist)12099"
      },
      {
        "astId": 14788,
        "contract": "contracts/usdy/USDY.sol:USDY",
        "label": "__gap",
        "offset": 0,
        "slot": "503",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 13831,
        "contract": "contracts/usdy/USDY.sol:USDY",
        "label": "sanctionsList",
        "offset": 0,
        "slot": "553",
        "type": "t_contract(ISanctionsList)2696"
      },
      {
        "astId": 13912,
        "contract": "contracts/usdy/USDY.sol:USDY",
        "label": "__gap",
        "offset": 0,
        "slot": "554",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAllowlist)12099": {
        "encoding": "inplace",
        "label": "contract IAllowlist",
        "numberOfBytes": "20"
      },
      "t_contract(IBlocklist)12161": {
        "encoding": "inplace",
        "label": "contract IBlocklist",
        "numberOfBytes": "20"
      },
      "t_contract(ISanctionsList)2696": {
        "encoding": "inplace",
        "label": "contract ISanctionsList",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)7126_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)7126_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)2922_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)2922_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)7126_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 7125,
            "contract": "contracts/usdy/USDY.sol:USDY",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)6825_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)2922_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 2919,
            "contract": "contracts/usdy/USDY.sol:USDY",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 2921,
            "contract": "contracts/usdy/USDY.sol:USDY",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)6825_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 6820,
            "contract": "contracts/usdy/USDY.sol:USDY",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 6824,
            "contract": "contracts/usdy/USDY.sol:USDY",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}